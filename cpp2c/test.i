# 1 "ArduCopterC.cpp"
# 1 "/Users/yu/repos/ardupilot/ArduCopter//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "ArduCopterC.cpp"
# 24 "ArduCopterC.cpp"
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3

# 1 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 1 3
# 199 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 3

# 199 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 221 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 507 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 3
# 1 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/os_defines.h" 1 3
# 508 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 2 3


# 1 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/cpu_defines.h" 1 3
# 511 "/usr/local/include/c++/6.3.0/x86_64-apple-darwin15.6.0/bits/c++config.h" 2 3
# 42 "/usr/local/include/c++/6.3.0/cmath" 2 3
# 1 "/usr/local/include/c++/6.3.0/bits/cpp_type_traits.h" 1 3
# 35 "/usr/local/include/c++/6.3.0/bits/cpp_type_traits.h" 3
       
# 36 "/usr/local/include/c++/6.3.0/bits/cpp_type_traits.h" 3
# 67 "/usr/local/include/c++/6.3.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/usr/local/include/c++/6.3.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/usr/local/include/c++/6.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/usr/local/include/c++/6.3.0/cmath" 2 3
# 1 "/usr/local/include/c++/6.3.0/ext/type_traits.h" 1 3
# 32 "/usr/local/include/c++/6.3.0/ext/type_traits.h" 3
       
# 33 "/usr/local/include/c++/6.3.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/usr/local/include/c++/6.3.0/cmath" 2 3

# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 1 3 4
# 45 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 533 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 534 "/usr/include/sys/cdefs.h" 2 3 4
# 599 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_posix_availability.h" 1 3 4
# 600 "/usr/include/sys/cdefs.h" 2 3 4
# 46 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 2 3 4
# 1 "/usr/include/Availability.h" 1 3 4
# 172 "/usr/include/Availability.h" 3 4
# 1 "/usr/include/AvailabilityInternal.h" 1 3 4
# 173 "/usr/include/Availability.h" 2 3 4
# 47 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 2 3 4

extern "C" {
# 59 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 126 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern int __math_errhandling(void);
# 159 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 203 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
inline __attribute__ ((__always_inline__)) int __inline_isinff(float);
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double);
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnand(double);
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double);
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float);
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double);
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435082228750797e-38F;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= double(2.22507385850720138309e-308L);
}
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626e-4932L;
}
# 337 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
# 580 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern float __inff(void) __attribute__((deprecated));
extern double __inf(void) __attribute__((deprecated));
extern long double __infl(void) __attribute__((deprecated));

extern float __nan(void) ;
# 612 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern float __exp10f(float) ;
extern double __exp10(double) ;





inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 629 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern float __cospif(float) ;
extern double __cospi(double) ;
extern float __sinpif(float) ;
extern double __sinpi(double) ;
extern float __tanpif(float) ;
extern double __tanpi(double) ;
# 660 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) ;
extern double j1(double) ;
extern double jn(int, double) ;
extern double y0(double) ;
extern double y1(double) ;
extern double yn(int, double) ;
extern double scalb(double, double);
extern int signgam;
# 766 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
extern long int rinttol(double) __attribute__((deprecated));

extern long int roundtol(double) __attribute__((deprecated));

extern double drem(double, double) __attribute__((deprecated));

extern int finite(double) __attribute__((deprecated));

extern double gamma(double) __attribute__((deprecated));

extern double significand(double) __attribute__((deprecated));
# 791 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/math.h" 3 4
}
# 46 "/usr/local/include/c++/6.3.0/cmath" 2 3
# 77 "/usr/local/include/c++/6.3.0/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 435 "/usr/local/include/c++/6.3.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 559 "/usr/local/include/c++/6.3.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(1, 2, 4,
    5, 3, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(1, 2, 4,
    5, 3, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(1, 2, 4,
    5, 3, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 3; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 980 "/usr/local/include/c++/6.3.0/cmath" 3

}
# 1096 "/usr/local/include/c++/6.3.0/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }



}
# 1889 "/usr/local/include/c++/6.3.0/cmath" 3
}
# 25 "ArduCopterC.cpp" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 67 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/_types.h" 1 3 4
# 27 "/usr/include/_types.h" 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 33 "/usr/include/sys/_types.h" 3 4
# 1 "/usr/include/machine/_types.h" 1 3 4
# 32 "/usr/include/machine/_types.h" 3 4
# 1 "/usr/include/i386/_types.h" 1 3 4
# 37 "/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/usr/include/machine/_types.h" 2 3 4
# 34 "/usr/include/sys/_types.h" 2 3 4
# 55 "/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];

# 1 "/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 81 "/usr/include/sys/_types.h" 2 3 4
# 28 "/usr/include/_types.h" 2 3 4
# 39 "/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 68 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/sys/_types/_va_list.h" 1 3 4
# 31 "/usr/include/sys/_types/_va_list.h" 3 4
typedef __darwin_va_list va_list;
# 72 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_size_t.h" 3 4
typedef __darwin_size_t size_t;
# 73 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 74 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/sys/stdio.h" 1 3 4
# 37 "/usr/include/sys/stdio.h" 3 4
extern "C" {

int renameat(int, const char *, int, const char *) ;

}
# 76 "/usr/include/stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;
# 88 "/usr/include/stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 122 "/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

extern "C" {
extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;
}
# 230 "/usr/include/stdio.h" 3 4
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);



FILE *fopen(const char * , const char * ) __asm("_" "fopen" );

int fprintf(FILE * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" );
size_t fread(void * , size_t, size_t, FILE * );
FILE *freopen(const char * , const char * ,
                 FILE * ) __asm("_" "freopen" );
int fscanf(FILE * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * , size_t, size_t, FILE * ) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * , ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * , ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int sscanf(const char * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);


__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * , va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
}
# 292 "/usr/include/stdio.h" 3 4
extern "C" {



char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);
}
# 314 "/usr/include/stdio.h" 3 4
extern "C" {
int pclose(FILE *);



FILE *popen(const char *, const char *) __asm("_" "popen" );

}
# 336 "/usr/include/stdio.h" 3 4
extern "C" {
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
}







inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 373 "/usr/include/stdio.h" 3 4
extern "C" {
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);



__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *, const char *) __asm("_" "tempnam" );
}
# 411 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/sys/_types/_off_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 412 "/usr/include/stdio.h" 2 3 4

extern "C" {
int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
}



extern "C" {
int snprintf(char * , size_t, const char * , ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * , const char * , va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * , va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * , size_t, const char * , va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * , const char * , va_list) __attribute__((__format__ (__scanf__, 2, 0)));
}
# 436 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 437 "/usr/include/stdio.h" 2 3 4

extern "C" {
int dprintf(int, const char * , ...) __attribute__((__format__ (__printf__, 2, 3))) ;
int vdprintf(int, const char * , va_list) __attribute__((__format__ (__printf__, 2, 0))) ;
ssize_t getdelim(char ** , size_t * , int, FILE * ) ;
ssize_t getline(char ** , size_t * , FILE * ) ;
}







extern "C" {
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (*)(void *, char *, int),
                 int (*)(void *, const char *, int),
                 fpos_t (*)(void *, fpos_t, int),
                 int (*)(void *));
}
# 26 "ArduCopterC.cpp" 2
# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdarg.h" 1 3 4
# 40 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 27 "ArduCopterC.cpp" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 1
       

# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdint.h" 1 3 4
# 9 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdint.h" 3 4
# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 1 3 4
# 27 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 3 4
# 1 "/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 28 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 29 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 30 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 31 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4

# 1 "/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 33 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 34 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 35 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 36 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;





# 1 "/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_intptr_t.h" 3 4
typedef __darwin_intptr_t intptr_t;
# 63 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 64 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4



# 1 "/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 68 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 69 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include-fixed/stdint.h" 2 3 4
# 10 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdint.h" 2 3 4
# 4 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Namespace.h" 1
       

# 1 "/usr/include/string.h" 1 3 4
# 69 "/usr/include/string.h" 3 4
extern "C" {
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int) __asm("_" "strerror" );
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);
}
# 103 "/usr/include/string.h" 3 4
extern "C" {
char *strtok_r(char *, const char *, char **);
}
# 115 "/usr/include/string.h" 3 4
extern "C" {
int strerror_r(int, char *, size_t);
char *strdup(const char *);
void *memccpy(void *, const void *, int, size_t);
}
# 129 "/usr/include/string.h" 3 4
extern "C" {
char *stpcpy(char *, const char *);
char *stpncpy(char *, const char *, size_t) ;
char *strndup(const char *, size_t) ;
size_t strnlen(const char *, size_t) ;
char *strsignal(int sig);
}





# 1 "/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_rsize_t.h" 3 4
typedef __darwin_size_t rsize_t;
# 142 "/usr/include/string.h" 2 3 4
# 1 "/usr/include/sys/_types/_errno_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_errno_t.h" 3 4
typedef int errno_t;
# 143 "/usr/include/string.h" 2 3 4

extern "C" {
errno_t memset_s(void *, rsize_t, int, rsize_t) ;
}







extern "C" {
void *memmem(const void *, size_t, const void *, size_t) ;
void memset_pattern4(void *, const void *, size_t) ;
void memset_pattern8(void *, const void *, size_t) ;
void memset_pattern16(void *, const void *, size_t) ;

char *strcasestr(const char *, const char *);
char *strnstr(const char *, const char *, size_t);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
char *strsep(char **, const char *);


void swab(const void * , void * , ssize_t);
}






# 1 "/usr/include/strings.h" 1 3 4
# 67 "/usr/include/strings.h" 3 4
extern "C" {


int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
}



extern "C" {
int ffsl(long) ;
int ffsll(long long) ;
int fls(int) ;
int flsl(long) ;
int flsll(long long) ;
}

# 1 "/usr/include/string.h" 1 3 4
# 93 "/usr/include/strings.h" 2 3 4
# 177 "/usr/include/string.h" 2 3 4
# 4 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Namespace.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/functor.h" 1
# 18 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/functor.h"
       

# 1 "/usr/local/include/c++/6.3.0/type_traits" 1 3
# 32 "/usr/local/include/c++/6.3.0/type_traits" 3
       
# 33 "/usr/local/include/c++/6.3.0/type_traits" 3
# 42 "/usr/local/include/c++/6.3.0/type_traits" 3
namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }






    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 189 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 321 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &&>
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args...)>
    : public true_type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args......)>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };
# 721 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 933 "/usr/local/include/c++/6.3.0/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  template<typename _Tp, typename... _Args>
    struct is_constructible;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>,
       __not_<is_constructible<__dst_t, _From>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { } __attribute__ ((__deprecated__));


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { } __attribute__ ((__deprecated__));


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { } __attribute__ ((__deprecated__));


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };
# 1641 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };
# 1698 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };



  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1785 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1874 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };



  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1904 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;
# 1954 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };
# 1991 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };
# 2030 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2050 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2089 "/usr/local/include/c++/6.3.0/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };





  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>>
    : __result_of_memobj_ref<_Res _Class::*, _Arg&>
    { };

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>&>
    : __result_of_memobj_ref<_Res _Class::*, _Arg&>
    { };

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, const reference_wrapper<_Arg>&>
    : __result_of_memobj_ref<_Res _Class::*, _Arg&>
    { };

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>&&>
    : __result_of_memobj_ref<_Res _Class::*, _Arg&>
    { };

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, const reference_wrapper<_Arg>&&>
    : __result_of_memobj_ref<_Res _Class::*, _Arg&>
    { };

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>, _Args...>
    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>
    { };

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>&,
         _Args...>
    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>
    { };

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, const reference_wrapper<_Arg>&,
         _Args...>
    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>
    { };

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>&&,
         _Args...>
    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>
    { };

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, const reference_wrapper<_Arg>&&,
         _Args...>
    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>
    { };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type, _Arg>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type, _Arg, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
     _Functor, _ArgTypes...
      >::type
    { };
# 2542 "/usr/local/include/c++/6.3.0/type_traits" 3
  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;


  template<template<typename...> class _Default,
    template<typename...> class _Op, typename... _Args>
    using __detected_or_t_ =
      __detected_or_t<_Default<_Args...>, _Op, _Args...>;
# 2601 "/usr/local/include/c++/6.3.0/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename _Tp>
    inline
    typename enable_if<__and_<is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };


}
# 21 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/functor.h" 2
# 34 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/functor.h"

# 34 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/functor.h"
template <class RetType, class... Args>
class Functor
{
public:
    constexpr Functor(void *obj, RetType (*method)(void *obj, Args...))
        : _obj(obj)
        , _method(method)
    {
    }


    constexpr Functor(decltype(nullptr))
        : Functor(nullptr, nullptr) { }

    constexpr Functor()
        : Functor(nullptr, nullptr) { }


    RetType operator()(Args... args) const
    {
        return _method(_obj, args...);
    }



    inline bool operator==(const Functor<RetType, Args...>& rhs)
    {
        return _obj == rhs._obj && _method == rhs._method;
    }


    explicit operator bool() const
    {
        return _method != nullptr;
    }

    template<class T, RetType (T::*method)(Args...)>
    static constexpr Functor bind(T *obj)
    {
        return { obj, method_wrapper<T, method> };
    }

private:
    void *_obj;
    RetType (*_method)(void *obj, Args...);

    template<class T, RetType (T::*method)(Args...)>
    static RetType method_wrapper(void *obj, Args... args)
    {
        T *t = static_cast<T*>(obj);
        return (t->*method)(args...);
    }
};
# 5 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Namespace.h" 2

namespace AP_HAL {


    class HAL;


    class UARTDriver;
    class I2CDevice;
    class I2CDeviceManager;
    class Device;

    class SPIDevice;
    class SPIDeviceDriver;
    class SPIDeviceManager;

    class AnalogSource;
    class AnalogIn;
    class Storage;
    class DigitalSource;
    class GPIO;
    class RCInput;
    class RCOutput;
    class Scheduler;
    class Semaphore;
    class OpticalFlow;

    class CANManager;
    class CAN;

    class Util;


    class Print;
    class Stream;
    class BetterStream;






    typedef void(*Proc)(void);
    typedef Functor<void> MemberProc;





    enum SPIDeviceType {

        SPIDevice_Type = -1,
    };


    const HAL& get_HAL();
}
# 6 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Boards.h" 1






       
# 138 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Boards.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/board/sitl.h" 1
       
# 139 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Boards.h" 2
# 7 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Macros.h" 1
       
# 8 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Main.h" 1
# 17 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Main.h"
       

# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 1
       



# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AnalogIn.h" 1
       

# 1 "/usr/include/inttypes.h" 1 3 4
# 227 "/usr/include/inttypes.h" 3 4
# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 228 "/usr/include/inttypes.h" 2 3 4




# 231 "/usr/include/inttypes.h" 3 4
extern "C" {



extern intmax_t
imaxabs(intmax_t j);


typedef struct {
 intmax_t quot;
 intmax_t rem;
} imaxdiv_t;


extern imaxdiv_t
imaxdiv(intmax_t __numer, intmax_t __denom);



extern intmax_t
strtoimax(const char * __nptr,
   char ** __endptr,
   int __base);


extern uintmax_t
strtoumax(const char * __nptr,
   char ** __endptr,
   int __base);



extern intmax_t
wcstoimax(const wchar_t * __nptr,
   wchar_t ** __endptr,
   int __base);


extern uintmax_t
wcstoumax(const wchar_t * __nptr,
   wchar_t ** __endptr,
   int __base);






}
# 4 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AnalogIn.h" 2




# 7 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AnalogIn.h"
class AP_HAL::AnalogSource {
public:
    virtual float read_average() = 0;
    virtual float read_latest() = 0;
    virtual void set_pin(uint8_t p) = 0;






    virtual void set_stop_pin(uint8_t p) = 0;






    virtual void set_settle_time(uint16_t settle_time_ms) = 0;



    virtual float voltage_average() = 0;



    virtual float voltage_latest() = 0;



    virtual float voltage_average_ratiometric() = 0;
};

class AP_HAL::AnalogIn {
public:
    virtual void init() = 0;
    virtual AP_HAL::AnalogSource* channel(int16_t n) = 0;


    virtual float board_voltage(void) = 0;


    virtual float servorail_voltage(void) { return 0; }


    virtual uint16_t power_status_flags(void) { return 0; }
};
# 6 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/GPIO.h" 1
       
# 15 "/Users/yu/repos/ardupilot/libraries/AP_HAL/GPIO.h"
class AP_HAL::DigitalSource {
public:
    virtual void mode(uint8_t output) = 0;
    virtual uint8_t read() = 0;
    virtual void write(uint8_t value) = 0;
    virtual void toggle() = 0;
};

class AP_HAL::GPIO {
public:
    GPIO() {}
    virtual void init() = 0;
    virtual void pinMode(uint8_t pin, uint8_t output) = 0;


    virtual void pinMode(uint8_t pin, uint8_t output, uint8_t alt) {};

    virtual uint8_t read(uint8_t pin) = 0;
    virtual void write(uint8_t pin, uint8_t value) = 0;
    virtual void toggle(uint8_t pin) = 0;
    virtual int8_t analogPinToDigitalPin(uint8_t pin) = 0;


    virtual AP_HAL::DigitalSource* channel(uint16_t n) = 0;


    virtual bool attach_interrupt(uint8_t interrupt_num, AP_HAL::Proc p,
            uint8_t mode) = 0;


    virtual bool usb_connected(void) = 0;
};
# 7 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/RCInput.h" 1
       






class AP_HAL::RCInput {
public:






    virtual void init() = 0;
    virtual void teardown() {};




    virtual bool new_input(void) = 0;




    virtual uint8_t num_channels() = 0;


    virtual uint16_t read(uint8_t ch) = 0;


    virtual uint8_t read(uint16_t* periods, uint8_t len) = 0;


    virtual int16_t get_rssi(void) { return -1; }
# 48 "/Users/yu/repos/ardupilot/libraries/AP_HAL/RCInput.h"
    virtual bool set_overrides(int16_t *overrides, uint8_t len) = 0;

    virtual bool set_override(uint8_t channel, int16_t override) = 0;

    virtual void clear_overrides() = 0;


    virtual bool rc_bind(int dsmMode) { return false; }
};
# 8 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/RCOutput.h" 1
       
# 33 "/Users/yu/repos/ardupilot/libraries/AP_HAL/RCOutput.h"
class AP_HAL::RCOutput {
public:
    virtual void init() = 0;


    virtual void set_freq(uint32_t chmask, uint16_t freq_hz) = 0;
    virtual uint16_t get_freq(uint8_t ch) = 0;



    virtual void enable_ch(uint8_t ch) = 0;
    virtual void disable_ch(uint8_t ch) = 0;





    virtual void write(uint8_t ch, uint16_t period_us) = 0;






    virtual void cork() = 0;





    virtual void push() = 0;





    virtual uint16_t read(uint8_t ch) = 0;
    virtual void read(uint16_t* period_us, uint8_t len) = 0;


    virtual uint16_t read_last_sent(uint8_t ch) { return read(ch); }
    virtual void read_last_sent(uint16_t* period_us, uint8_t len) { read(period_us, len); };





    virtual void set_safety_pwm(uint32_t chmask, uint16_t period_us) {}




    virtual void set_failsafe_pwm(uint32_t chmask, uint16_t period_us) {}






    virtual bool force_safety_on(void) { return false; }




    virtual void force_safety_off(void) {}




    virtual void force_safety_no_wait(void) {}







    virtual void set_esc_scaling(uint16_t min_pwm, uint16_t max_pwm) {}




    virtual float scale_esc_to_unity(uint16_t pwm) { return 0; }




    virtual bool enable_px4io_sbus_out(uint16_t rate_hz) { return false; }





    virtual void timer_tick(void) { }




    enum output_mode {
        MODE_PWM_NORMAL,
        MODE_PWM_ONESHOT,
        MODE_PWM_BRUSHED
    };
    virtual void set_output_mode(enum output_mode mode) {}




    virtual void set_default_rate(uint16_t rate_hz) {}
};
# 9 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/SPIDevice.h" 1
# 17 "/Users/yu/repos/ardupilot/libraries/AP_HAL/SPIDevice.h"
       




# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h" 1
# 17 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h"
       
# 27 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h"
class AP_HAL::Device {
public:
    enum BusType {
        BUS_TYPE_UNKNOWN = 0,
        BUS_TYPE_I2C = 1,
        BUS_TYPE_SPI = 2,
        BUS_TYPE_UAVCAN = 3
    };

    enum Speed {
        SPEED_HIGH,
        SPEED_LOW,
    };

    typedef Functor<void> PeriodicCb;
    typedef void* PeriodicHandle;

    Device(enum BusType type)
    {
        _bus_id.devid_s.bus_type = type;
    }


    enum BusType bus_type(void) const {
        return _bus_id.devid_s.bus_type;
    }


    uint8_t bus_num(void) const {
        return _bus_id.devid_s.bus;
    }


    uint32_t get_bus_id(void) const {
        return _bus_id.devid;
    }


    uint8_t get_bus_address(void) const {
        return _bus_id.devid_s.address;
    }


    void set_device_type(uint8_t devtype) {
        _bus_id.devid_s.devtype = devtype;
    }


    virtual ~Device() {
        if (_checked.regs != nullptr) {
            delete[] _checked.regs;
        }
    }
# 88 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h"
    virtual bool set_speed(Speed speed) = 0;







    virtual bool transfer(const uint8_t *send, uint32_t send_len,
                          uint8_t *recv, uint32_t recv_len) = 0;
# 107 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h"
    bool read_registers(uint8_t first_reg, uint8_t *recv, uint32_t recv_len)
    {
        first_reg |= _read_flag;
        return transfer(&first_reg, 1, recv, recv_len);
    }







    bool write_register(uint8_t reg, uint8_t val, bool checked=false)
    {
        uint8_t buf[2] = { reg, val };
        if (checked) {
            set_checked_register(reg, val);
        }
        return transfer(buf, sizeof(buf), nullptr, 0);
    }




    void set_checked_register(uint8_t reg, uint8_t val);





    bool setup_checked_registers(uint8_t num_regs, uint8_t frequency=10);





    bool check_next_register(void);






    bool read(uint8_t *recv, uint32_t recv_len)
    {
        return transfer(nullptr, 0, recv, recv_len);
    }





    virtual AP_HAL::Semaphore *get_semaphore() = 0;
# 175 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h"
    virtual PeriodicHandle register_periodic_callback(uint32_t period_usec, PeriodicCb) = 0;
# 184 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Device.h"
    virtual bool adjust_periodic_callback(PeriodicHandle h, uint32_t period_usec) = 0;







    virtual bool unregister_callback(PeriodicHandle h) { return false; }






    virtual bool set_chip_select(bool set) { return false; }






    void set_read_flag(uint8_t flag)
    {
        _read_flag = flag;
    }







    static uint32_t make_bus_id(enum BusType bus_type, uint8_t bus, uint8_t address, uint8_t devtype) {
        union DeviceId d;
        d.devid_s.bus_type = bus_type;
        d.devid_s.bus = bus;
        d.devid_s.address = address;
        d.devid_s.devtype = devtype;
        return d.devid;
    }





    static uint32_t change_bus_id(uint32_t old_id, uint8_t devtype) {
        union DeviceId d;
        d.devid = old_id;
        d.devid_s.devtype = devtype;
        return d.devid;
    }




    uint32_t get_bus_id_devtype(uint8_t devtype) {
        return change_bus_id(get_bus_id(), devtype);
    }


    virtual void set_retries(uint8_t retries) {};

protected:
    uint8_t _read_flag = 0;







    struct DeviceStructure {
        enum BusType bus_type : 3;
        uint8_t bus: 5;
        uint8_t address;
        uint8_t devtype;
    };

    union DeviceId {
        struct DeviceStructure devid_s;
        uint32_t devid;
    };

    union DeviceId _bus_id;


    void set_device_address(uint8_t address) {
        _bus_id.devid_s.address = address;
    }


    void set_device_bus(uint8_t bus) {
        _bus_id.devid_s.bus = bus;
    }

private:

    struct checkreg {
        uint8_t regnum;
        uint8_t value;
    };
    struct {
        uint8_t n_allocated;
        uint8_t n_set;
        uint8_t next;
        uint8_t frequency;
        uint8_t counter;
        struct checkreg *regs;
    } _checked;
};
# 23 "/Users/yu/repos/ardupilot/libraries/AP_HAL/SPIDevice.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/OwnPtr.h" 1
# 17 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/OwnPtr.h"
       

# 1 "/usr/local/include/c++/6.3.0/cstddef" 1 3
# 42 "/usr/local/include/c++/6.3.0/cstddef" 3
       
# 43 "/usr/local/include/c++/6.3.0/cstddef" 3







# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stddef.h" 1 3 4
# 149 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stddef.h" 3 4

# 149 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 426 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 51 "/usr/local/include/c++/6.3.0/cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 20 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/OwnPtr.h" 2


# 21 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/OwnPtr.h"
namespace AP_HAL {
# 39 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/OwnPtr.h"
template<typename T>
class OwnPtr {
public:
    OwnPtr() : _ptr(nullptr) { }
    OwnPtr(std::nullptr_t) : _ptr(nullptr) { }


    OwnPtr(const OwnPtr<T> &other) = delete;


    template<typename U>
    OwnPtr(OwnPtr<U>&& other) : _ptr(other.leak()) { }

    OwnPtr(T *ptr) : _ptr(ptr) { }

    OwnPtr<T>& operator=(std::nullptr_t) { clear(); return *this; }

    template<typename U>
    OwnPtr<T>& operator=(OwnPtr<U>&& other)
    {
        T *old = _ptr;
        _ptr = other.leak();
        delete old;
        return *this;
    }

    template<typename U>
    OwnPtr<T>& operator=(U *other)
    {
        T *old = _ptr;
        _ptr = other;
        delete old;
        return *this;
    }

    ~OwnPtr() { delete _ptr; }

    void clear()
    {
        delete leak();
    }

    T *leak()
    {
        T *old = _ptr;
        _ptr = nullptr;
        return old;
    }

    T *get() const
    {
        return _ptr;
    }

    T& operator*() const { return *_ptr; }
    T *operator->() const { return _ptr; }
    bool operator !() const { return !_ptr; }
    explicit operator bool() const { return _ptr != nullptr; }

private:
    T *_ptr;
};

template<typename T>
inline bool operator==(T* a, const OwnPtr<T>& b)
{
    return a == b.get();
}

template<typename T>
inline bool operator==(const OwnPtr<T>& a, T* b)
{
    return a.get() == b;
}

template<typename T>
inline bool operator!=(T* a, const OwnPtr<T>& b)
{
    return a != b.get();
}

template<typename T>
inline bool operator!=(const OwnPtr<T>& a, T* b)
{
    return a.get() != b;
}

}
# 24 "/Users/yu/repos/ardupilot/libraries/AP_HAL/SPIDevice.h" 2

namespace AP_HAL {

class SPIDevice : public Device {
public:
    SPIDevice() : Device(BUS_TYPE_SPI) { }

    virtual ~SPIDevice() { }



    virtual bool set_speed(Device::Speed speed) override = 0;


    virtual bool transfer(const uint8_t *send, uint32_t send_len,
                          uint8_t *recv, uint32_t recv_len) override = 0;





    virtual bool transfer_fullduplex(const uint8_t *send, uint8_t *recv,
                                     uint32_t len) = 0;


    virtual Semaphore *get_semaphore() override = 0;


    virtual Device::PeriodicHandle register_periodic_callback(
        uint32_t period_usec, Device::PeriodicCb) override = 0;


    virtual bool adjust_periodic_callback(
        PeriodicHandle h, uint32_t period_usec) override { return false; }
};

class SPIDeviceManager {
public:
    virtual OwnPtr<SPIDevice> get_device(const char *name)
    {
        return nullptr;
    }


    virtual uint8_t get_count() { return 0; }


    virtual const char *get_device_name(uint8_t idx) { return nullptr; }
};

}
# 10 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Storage.h" 1
       




class AP_HAL::Storage {
public:
    virtual void init() = 0;
    virtual void read_block(void *dst, uint16_t src, size_t n) = 0;
    virtual void write_block(uint16_t dst, const void* src, size_t n) = 0;
};
# 11 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/UARTDriver.h" 1
       



# 1 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h" 1
# 21 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h"
       



# 1 "/usr/local/include/c++/6.3.0/stdlib.h" 1 3
# 36 "/usr/local/include/c++/6.3.0/stdlib.h" 3
# 1 "/usr/local/include/c++/6.3.0/cstdlib" 1 3
# 39 "/usr/local/include/c++/6.3.0/cstdlib" 3
       
# 40 "/usr/local/include/c++/6.3.0/cstdlib" 3
# 75 "/usr/local/include/c++/6.3.0/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 65 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/sys/wait.h" 1 3 4
# 79 "/usr/include/sys/wait.h" 3 4

# 79 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;





# 1 "/usr/include/sys/_types/_pid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 90 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/_types/_id_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 91 "/usr/include/sys/wait.h" 2 3 4
# 109 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/signal.h" 1 3 4
# 73 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/usr/include/sys/signal.h" 2 3 4
# 82 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/machine/signal.h" 1 3 4
# 32 "/usr/include/machine/signal.h" 3 4
# 1 "/usr/include/i386/signal.h" 1 3 4
# 39 "/usr/include/i386/signal.h" 3 4
typedef int sig_atomic_t;
# 33 "/usr/include/machine/signal.h" 2 3 4
# 83 "/usr/include/sys/signal.h" 2 3 4
# 146 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/machine/_mcontext.h" 1 3 4
# 29 "/usr/include/machine/_mcontext.h" 3 4
# 1 "/usr/include/i386/_mcontext.h" 1 3 4
# 33 "/usr/include/i386/_mcontext.h" 3 4
# 1 "/usr/include/mach/i386/_structs.h" 1 3 4
# 43 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 89 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 147 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 191 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 210 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 232 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};
# 402 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 422 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
# 454 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 509 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};
# 751 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 771 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 34 "/usr/include/i386/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};
# 76 "/usr/include/i386/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};
# 115 "/usr/include/i386/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 30 "/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 149 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 36 "/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_ucontext.h" 1 3 4
# 34 "/usr/include/sys/_types/_ucontext.h" 3 4
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/usr/include/sys/signal.h" 2 3 4


# 1 "/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_types/_uid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 157 "/usr/include/sys/signal.h" 2 3 4

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 331 "/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 348 "/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 367 "/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 389 "/usr/include/sys/signal.h" 3 4
extern "C" {
void (*signal(int, void (*)(int)))(int);
}
# 110 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 80 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/sys/_types/_timeval.h" 1 3 4
# 30 "/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/usr/include/sys/resource.h" 2 3 4
# 89 "/usr/include/sys/resource.h" 3 4
typedef __uint64_t rlim_t;
# 152 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 192 "/usr/include/sys/resource.h" 3 4
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

typedef struct rusage_info_v3 rusage_info_current;
# 325 "/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 353 "/usr/include/sys/resource.h" 3 4
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
# 382 "/usr/include/sys/resource.h" 3 4
extern "C" {
int getpriority(int, id_t);

int getiopolicy_np(int, int) ;

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) ;

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
}
# 111 "/usr/include/sys/wait.h" 2 3 4
# 186 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/machine/endian.h" 1 3 4
# 35 "/usr/include/machine/endian.h" 3 4
# 1 "/usr/include/i386/endian.h" 1 3 4
# 99 "/usr/include/i386/endian.h" 3 4
# 1 "/usr/include/sys/_endian.h" 1 3 4
# 130 "/usr/include/sys/_endian.h" 3 4
# 1 "/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 66 "/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 44 "/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((__uint16_t)((_data << 8) | (_data >> 8)));
}

static inline
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{



    __asm__ ("bswap   %0" : "+r" (_data));
    return _data;

}
# 91 "/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    __asm__ ("bswap   %0" : "+r" (_data));
    return _data;
}
# 67 "/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 131 "/usr/include/sys/_endian.h" 2 3 4
# 100 "/usr/include/i386/endian.h" 2 3 4
# 36 "/usr/include/machine/endian.h" 2 3 4
# 187 "/usr/include/sys/wait.h" 2 3 4







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
# 247 "/usr/include/sys/wait.h" 3 4
extern "C" {
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);

}
# 66 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4
# 31 "/usr/include/alloca.h" 3 4
extern "C" {
void *alloca(size_t);
}
# 68 "/usr/include/stdlib.h" 2 3 4
# 76 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_ct_rune_t.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;
# 77 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/sys/_types/_rune_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_rune_t.h" 3 4
typedef __darwin_rune_t rune_t;
# 78 "/usr/include/stdlib.h" 2 3 4




typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;
# 117 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
# 127 "/usr/include/stdlib.h" 3 4
extern "C" {
void abort(void) __attribute__((noreturn));
int abs(int) __attribute__((const));
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *, const void *, size_t,
     size_t, int (*)(const void *, const void *));
void *calloc(size_t, size_t);
div_t div(int, int) __attribute__((const));
void exit(int) __attribute__((noreturn));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((const));
ldiv_t ldiv(long, long) __attribute__((const));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
int posix_memalign(void **, size_t, size_t) ;
void qsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int rand(void);
void *realloc(void *, size_t);
void srand(unsigned);
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *, char **, int);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *, char **, int);

unsigned long
  strtoul(const char *, char **, int);

unsigned long long
  strtoull(const char *, char **, int);

int system(const char *) __asm("_" "system" ) ;
size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((noreturn));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]);
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void);
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void);
long nrand48(unsigned short[3]);
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) __asm("_" "putenv" );
long random(void);
int rand_r(unsigned *);

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char *, const char *, int) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );






# 1 "/usr/include/machine/types.h" 1 3 4
# 35 "/usr/include/machine/types.h" 3 4
# 1 "/usr/include/i386/types.h" 1 3 4
# 81 "/usr/include/i386/types.h" 3 4
typedef unsigned char u_int8_t;
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long u_int64_t;


typedef int64_t register_t;
# 97 "/usr/include/i386/types.h" 3 4
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;







typedef u_int64_t syscall_arg_t;
# 36 "/usr/include/machine/types.h" 2 3 4
# 239 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/sys/_types/_dev_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_dev_t.h" 3 4
typedef __darwin_dev_t dev_t;
# 241 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/sys/_types/_mode_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_mode_t.h" 3 4
typedef __darwin_mode_t mode_t;
# 242 "/usr/include/stdlib.h" 2 3 4

u_int32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int );
void arc4random_buf(void * , size_t ) ;
void arc4random_stir(void);
u_int32_t
  arc4random_uniform(u_int32_t ) ;







char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((deprecated)) ;
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *, size_t, size_t,
     int (*)(const void *, const void *));




int mergesort(void *, size_t, size_t,
     int (*)(const void *, const void *));




void psort(void *, size_t, size_t,
     int (*)(const void *, const void *)) ;




void psort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *)) ;




void qsort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *));
int radixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void setprogname(const char *);
int sradixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *, size_t);

long long
  strtoq(const char *, char **, int);
unsigned long long
  strtouq(const char *, char **, int);

extern char *suboptarg;
void *valloc(size_t);






}
# 76 "/usr/local/include/c++/6.3.0/cstdlib" 2 3
# 118 "/usr/local/include/c++/6.3.0/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }



  inline __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 201 "/usr/local/include/c++/6.3.0/cstdlib" 3

}
# 215 "/usr/local/include/c++/6.3.0/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 247 "/usr/local/include/c++/6.3.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/local/include/c++/6.3.0/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "/usr/local/include/c++/6.3.0/stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 26 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h" 2
# 74 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h"

# 74 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h"
template <typename T, size_t N>
char (&_ARRAY_SIZE_HELPER(T (&_arr)[N]))[N];

template <typename T>
char (&_ARRAY_SIZE_HELPER(T (&_arr)[0]))[0];
# 121 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h"
struct __attribute__((__packed__)) Location_Option_Flags {
    uint8_t relative_alt : 1;
    uint8_t unused1 : 1;
    uint8_t loiter_ccw : 1;
    uint8_t terrain_alt : 1;
    uint8_t origin_alt : 1;
    uint8_t loiter_xtrack : 1;
};

struct __attribute__((__packed__)) Location {
    union {
        Location_Option_Flags flags;
        uint8_t options;
    };




    int32_t alt:24;
    int32_t lat;
    int32_t lng;
};




enum HomeState {
    HOME_UNSET,
    HOME_SET_NOT_LOCKED,
    HOME_SET_AND_LOCKED
};
# 166 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_Common.h"
bool is_bounded_int32(int32_t value, int32_t lower_bound, int32_t upper_bound);
# 6 "/Users/yu/repos/ardupilot/libraries/AP_HAL/UARTDriver.h" 2


# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/BetterStream.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/BetterStream.h"
       






# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Stream.h" 1
       


# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Print.h" 1
# 19 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Print.h"
       
# 33 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Print.h"
enum {
    BASE_DEFAULT = 0,
    BASE_BIN = 2,
    BASE_OCT = 8,
    BASE_DEC = 10,
    BASE_HEX = 16
};


class AP_HAL::Print {
  private:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(float, uint8_t);
  public:
    Print() {}

    virtual size_t write(uint8_t) = 0;
    virtual size_t write(const uint8_t *buffer, size_t size) = 0;

    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
  public:
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = BASE_DEC);
    size_t print(int, int = BASE_DEC);
    size_t print(unsigned int, int = BASE_DEC);
    size_t print(long, int = BASE_DEC);
    size_t print(unsigned long, int = BASE_DEC);
    size_t print(float , int = 2);
    size_t print(double , int = 2);

    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = BASE_DEC);
    size_t println(int, int = BASE_DEC);
    size_t println(unsigned int, int = BASE_DEC);
    size_t println(long, int = BASE_DEC);
    size_t println(unsigned long, int = BASE_DEC);
    size_t println(float , int = 2);
    size_t println(double , int = 2);
    size_t println(void);

};
# 5 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Stream.h" 2




class AP_HAL::Stream : public AP_HAL::Print {
public:
    virtual uint32_t available() = 0;


    virtual uint32_t txspace() = 0;



    virtual int16_t read() = 0;

};
# 28 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/BetterStream.h" 2

class AP_HAL::BetterStream : public AP_HAL::Stream {
public:
    BetterStream(void) {}

    virtual void printf(const char *, ...) __attribute__((format(printf, 2, 3))) = 0;
    virtual void vprintf(const char *, va_list) = 0;
};
# 9 "/Users/yu/repos/ardupilot/libraries/AP_HAL/UARTDriver.h" 2


class AP_HAL::UARTDriver : public AP_HAL::BetterStream {
public:
    UARTDriver() {}
    virtual void begin(uint32_t baud) = 0;
# 35 "/Users/yu/repos/ardupilot/libraries/AP_HAL/UARTDriver.h"
    virtual void begin(uint32_t baud, uint16_t rxSpace, uint16_t txSpace) = 0;
    virtual void end() = 0;
    virtual void flush() = 0;
    virtual bool is_initialized() = 0;
    virtual void set_blocking_writes(bool blocking) = 0;
    virtual bool tx_pending() = 0;

    enum flow_control {
        FLOW_CONTROL_DISABLE=0, FLOW_CONTROL_ENABLE=1, FLOW_CONTROL_AUTO=2
    };
    virtual void set_flow_control(enum flow_control flow_control_setting) {};
    virtual enum flow_control get_flow_control(void) { return FLOW_CONTROL_DISABLE; }

    virtual void configure_parity(uint8_t v){};
    virtual void set_stop_bits(int n){};




    virtual bool set_unbuffered_writes(bool on){ return false; };





    void printf(const char *s, ...) __attribute__((format(printf, 2, 3)));
    void vprintf(const char *s, va_list ap);
};
# 12 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/system.h" 1
       







namespace AP_HAL {

void init();

void panic(const char *errormsg, ...) __attribute__((format(printf, 1, 2))) __attribute__ ((noreturn));

uint32_t micros();
uint32_t millis();
uint64_t micros64();
uint64_t millis64();

}
# 13 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/OpticalFlow.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_HAL/OpticalFlow.h"
       

class AP_HAL::OpticalFlow {
public:
    class Data_Frame {
    public:
        float pixel_flow_x_integral;
        float pixel_flow_y_integral;
        float gyro_x_integral;
        float gyro_y_integral;
        uint32_t delta_time;
        uint8_t quality;
    };

    virtual void init() = 0;
    virtual bool read(Data_Frame& frame) = 0;
    virtual void push_gyro(float gyro_x, float gyro_y, float dt) = 0;
    virtual void push_gyro_bias(float gyro_bias_x, float gyro_bias_y) = 0;
};
# 14 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h" 2




class AP_HAL::HAL {
public:
    HAL(AP_HAL::UARTDriver* _uartA,
        AP_HAL::UARTDriver* _uartB,
        AP_HAL::UARTDriver* _uartC,
        AP_HAL::UARTDriver* _uartD,
        AP_HAL::UARTDriver* _uartE,
        AP_HAL::UARTDriver* _uartF,
        AP_HAL::I2CDeviceManager* _i2c_mgr,
        AP_HAL::SPIDeviceManager* _spi,
        AP_HAL::AnalogIn* _analogin,
        AP_HAL::Storage* _storage,
        AP_HAL::UARTDriver* _console,
        AP_HAL::GPIO* _gpio,
        AP_HAL::RCInput* _rcin,
        AP_HAL::RCOutput* _rcout,
        AP_HAL::Scheduler* _scheduler,
        AP_HAL::Util* _util,
        AP_HAL::OpticalFlow *_opticalflow,



        AP_HAL::CANManager** _can_mgr)

        :
        uartA(_uartA),
        uartB(_uartB),
        uartC(_uartC),
        uartD(_uartD),
        uartE(_uartE),
        uartF(_uartF),
        i2c_mgr(_i2c_mgr),
        spi(_spi),
        analogin(_analogin),
        storage(_storage),
        console(_console),
        gpio(_gpio),
        rcin(_rcin),
        rcout(_rcout),
        scheduler(_scheduler),
        util(_util),
        opticalflow(_opticalflow)
    {
# 71 "/Users/yu/repos/ardupilot/libraries/AP_HAL/HAL.h"
        AP_HAL::init();
    }

    struct Callbacks {
        virtual void setup() = 0;
        virtual void loop() = 0;
    };

    struct FunCallbacks : public Callbacks {
        FunCallbacks(void (*setup_fun)(void), void (*loop_fun)(void));

        void setup() override { _setup(); }
        void loop() override { _loop(); }

    private:
        void (*_setup)(void);
        void (*_loop)(void);
    };

    virtual void run(int argc, char * const argv[], Callbacks* callbacks) const = 0;

    AP_HAL::UARTDriver* uartA;
    AP_HAL::UARTDriver* uartB;
    AP_HAL::UARTDriver* uartC;
    AP_HAL::UARTDriver* uartD;
    AP_HAL::UARTDriver* uartE;
    AP_HAL::UARTDriver* uartF;
    AP_HAL::I2CDeviceManager* i2c_mgr;
    AP_HAL::SPIDeviceManager* spi;
    AP_HAL::AnalogIn* analogin;
    AP_HAL::Storage* storage;
    AP_HAL::UARTDriver* console;
    AP_HAL::GPIO* gpio;
    AP_HAL::RCInput* rcin;
    AP_HAL::RCOutput* rcout;
    AP_HAL::Scheduler* scheduler;
    AP_HAL::Util *util;
    AP_HAL::OpticalFlow *opticalflow;



    AP_HAL::CANManager** can_mgr;

};
# 20 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL_Main.h" 2
# 9 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 17 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Scheduler.h" 1
       
# 11 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Scheduler.h"
class AP_HAL::Scheduler {
public:
    Scheduler() {}
    virtual void init() = 0;
    virtual void delay(uint16_t ms) = 0;





    virtual void delay_microseconds(uint16_t us) = 0;
# 30 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Scheduler.h"
    virtual void delay_microseconds_boost(uint16_t us) { delay_microseconds(us); }

    virtual void register_delay_callback(AP_HAL::Proc,
                                             uint16_t min_time_ms) = 0;


    virtual void register_timer_process(AP_HAL::MemberProc) = 0;


    virtual void register_io_process(AP_HAL::MemberProc) = 0;


    virtual void suspend_timer_procs() = 0;
    virtual void resume_timer_procs() = 0;

    virtual void register_timer_failsafe(AP_HAL::Proc,
                                             uint32_t period_us) = 0;

    virtual void system_initialized() = 0;

    virtual void reboot(bool hold_in_bootloader) = 0;




    virtual void stop_clock(uint64_t time_usec) {}

    virtual bool in_main_thread() const = 0;

    virtual void create_uavcan_thread() {};

};
# 18 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Semaphores.h" 1
       





class AP_HAL::Semaphore {
public:
    virtual bool take(uint32_t timeout_ms) __attribute__ ((warn_unused_result)) = 0 ;
    virtual bool take_nonblocking() __attribute__ ((warn_unused_result)) = 0;
    virtual bool give() = 0;
    virtual ~Semaphore(void) {}
};
# 19 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Util.h" 1
       




class AP_HAL::Util {
public:
    int snprintf(char* str, size_t size,
                 const char *format, ...);

    int vsnprintf(char* str, size_t size,
                  const char *format, va_list ap);

    void set_soft_armed(const bool b) { soft_armed = b; }
    bool get_soft_armed() const { return soft_armed; }

    void set_capabilities(uint64_t cap) { capabilities |= cap; }
    void clear_capabilities(uint64_t cap) { capabilities &= ~(cap); }
    uint64_t get_capabilities() const { return capabilities; }

    virtual const char* get_custom_log_directory() const { return nullptr; }
    virtual const char* get_custom_terrain_directory() const { return nullptr; }


    virtual const char* get_custom_defaults_file() const {
        return nullptr;
    }




    virtual bool run_debug_shell(AP_HAL::BetterStream *stream) = 0;

    enum safety_state {
        SAFETY_NONE, SAFETY_DISARMED, SAFETY_ARMED
    };




    virtual enum safety_state safety_switch_state(void) { return SAFETY_NONE; }




    virtual void set_system_clock(uint64_t time_utc_usec) {}




    uint64_t get_system_clock_ms() const;




    void get_system_clock_utc(int32_t &hour, int32_t &min, int32_t &sec, int32_t &ms) const;

    uint32_t get_time_utc(int32_t hour, int32_t min, int32_t sec, int32_t ms) const;
# 67 "/Users/yu/repos/ardupilot/libraries/AP_HAL/Util.h"
    virtual bool get_system_id(char buf[40]) { return false; }




    virtual uint32_t available_memory(void) { return 4096; }




    virtual void commandline_arguments(uint8_t &argc, char * const *&argv) { argc = 0; }




    virtual bool toneAlarm_init() { return false;}
    virtual void toneAlarm_set_tune(uint8_t tune) {}
    virtual void _toneAlarm_timer_tick() {}




    virtual AP_HAL::Stream *get_shell_stream() { return nullptr; }


    virtual void set_imu_temp(float current) {}


    virtual void set_imu_target_temp(int8_t *target) {}




    enum perf_counter_type {
        PC_COUNT,
        PC_ELAPSED,
        PC_INTERVAL
    };
    typedef void *perf_counter_t;
    virtual perf_counter_t perf_alloc(perf_counter_type t, const char *name) { return nullptr; }
    virtual void perf_begin(perf_counter_t h) {}
    virtual void perf_end(perf_counter_t h) {}
    virtual void perf_count(perf_counter_t h) {}


    virtual Semaphore *new_semaphore(void) { return nullptr; }


    virtual void *dma_allocate(size_t size) { return malloc(size); }
    virtual void dma_free(void *ptr, size_t size) { return free(ptr); }

protected:


    bool soft_armed = false;
    uint64_t capabilities = 0;
};
# 20 "/Users/yu/repos/ardupilot/libraries/AP_HAL/AP_HAL.h" 2
# 29 "ArduCopterC.cpp" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AP_Common/Location.h" 1
# 11 "/Users/yu/repos/ardupilot/libraries/AP_Common/Location.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 1
       

# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 4 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2
# 1 "/usr/local/include/c++/6.3.0/limits" 1 3
# 40 "/usr/local/include/c++/6.3.0/limits" 3
       
# 41 "/usr/local/include/c++/6.3.0/limits" 3
# 158 "/usr/local/include/c++/6.3.0/limits" 3

# 158 "/usr/local/include/c++/6.3.0/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "/usr/local/include/c++/6.3.0/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "/usr/local/include/c++/6.3.0/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 314 "/usr/local/include/c++/6.3.0/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffffffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffffffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffffffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1569 "/usr/local/include/c++/6.3.0/limits" 3
  template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1592 "/usr/local/include/c++/6.3.0/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435082228750797e-38F; }

      static constexpr float
      max() noexcept { return 3.40282346638528859812e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282346638528859812e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209289550781250000e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846432481707092e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.22507385850720138309e-308L); }

      static constexpr double
      max() noexcept { return double(1.79769313486231570815e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.79769313486231570815e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.22044604925031308085e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.94065645841246544177e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 5 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2




# 1 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
       

# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stddef.h" 1 3 4
# 23 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h" 2


# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 26 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h" 2


# 1 "/Users/yu/repos/ardupilot/libraries/StorageManager/StorageManager.h" 1
# 21 "/Users/yu/repos/ardupilot/libraries/StorageManager/StorageManager.h"
       
# 42 "/Users/yu/repos/ardupilot/libraries/StorageManager/StorageManager.h"

# 42 "/Users/yu/repos/ardupilot/libraries/StorageManager/StorageManager.h"
class StorageManager {
    friend class StorageAccess;
public:
    enum StorageType {
        StorageParam = 0,
        StorageFence = 1,
        StorageRally = 2,
        StorageMission = 3,
        StorageKeys = 4
    };


    static void erase(void);


    static void set_layout_copter(void) { layout = layout_copter; }

private:
    struct StorageArea {
        StorageType type;
        uint16_t offset;
        uint16_t length;
    };


    static const StorageArea layout_copter[13];
    static const StorageArea layout_default[13];
    static const StorageArea *layout;
};




class StorageAccess {
public:

    StorageAccess(StorageManager::StorageType _type);


    uint16_t size(void) const { return total_size; }


    bool read_block(void *dst, uint16_t src, size_t n) const;
    bool write_block(uint16_t dst, const void* src, size_t n) const;


    uint8_t read_byte(uint16_t loc) const;
    uint16_t read_uint16(uint16_t loc) const;
    uint32_t read_uint32(uint16_t loc) const;

    void write_byte(uint16_t loc, uint8_t value) const;
    void write_uint16(uint16_t loc, uint16_t value) const;
    void write_uint32(uint16_t loc, uint32_t value) const;

private:
    const StorageManager::StorageType type;
    uint16_t total_size;
};
# 29 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h" 2

# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/float.h" 1 3 4
# 31 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h" 2
# 108 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
enum ap_var_type {
    AP_PARAM_NONE = 0,
    AP_PARAM_INT8,
    AP_PARAM_INT16,
    AP_PARAM_INT32,
    AP_PARAM_FLOAT,
    AP_PARAM_VECTOR3F,
    AP_PARAM_GROUP
};






class AP_Param
{
public:



    struct GroupInfo {
        uint8_t type;
        uint8_t idx;
        const char *name;
        ptrdiff_t offset;
        union {
            const struct GroupInfo *group_info;
            const struct GroupInfo **group_info_ptr;
            const float def_value;
        };
        uint16_t flags;
    };
    struct Info {
        uint8_t type;
        const char *name;
        uint16_t key;
        const void *ptr;
        union {
            const struct GroupInfo *group_info;
            const struct GroupInfo **group_info_ptr;
            const float def_value;
        };
        uint16_t flags;
    };
    struct ConversionInfo {
        uint16_t old_key;
        uint32_t old_group_element;
        enum ap_var_type type;
        const char *new_name;
    };




    static bool setup();


    AP_Param(const struct Info *info)
    {
        _var_info = info;
        uint16_t i;
        for (i=0; info[i].type != AP_PARAM_NONE; i++) ;
        _num_vars = i;
    }


    AP_Param() {}


    typedef struct {
        uint32_t key : 9;
        uint32_t idx : 5;
        uint32_t group_element : 18;
    } ParamToken;



    struct GroupNesting {
        static const uint8_t numlevels = 2;
        uint8_t level;
        const struct GroupInfo *group_ret[numlevels];
    };


    static bool initialised(void);







    static uint32_t group_id(const struct GroupInfo *grpinfo, uint32_t base, uint8_t i, uint8_t shift);
# 215 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
    void copy_name_info(const struct AP_Param::Info *info,
                        const struct GroupInfo *ginfo,
                        const struct GroupNesting &group_nesting,
                        uint8_t idx, char *buffer, size_t bufferSize, bool force_scalar=false) const;





    void copy_name_token(const ParamToken &token, char *buffer, size_t bufferSize, bool force_scalar=false) const;
# 234 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
    static AP_Param * find(const char *name, enum ap_var_type *ptype);






    static bool set_default_by_name(const char *name, float value);






    static bool set_by_name(const char *name, float value);






    static bool set_and_save_by_name(const char *name, float value);
# 264 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
    static AP_Param * find_by_index(uint16_t idx, enum ap_var_type *ptype, ParamToken *token);







    static bool find_key_by_pointer_group(const void *ptr, uint16_t vindex, const struct GroupInfo *group_info,
                                          ptrdiff_t offset, uint16_t &key);
    static bool find_key_by_pointer(const void *ptr, uint16_t &key);







    static AP_Param * find_object(const char *name);



    void notify() const;







    bool save(bool force_save=false);





    bool load(void);
# 310 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
    static bool load_all(bool check_defaults_file=true);



    static void reload_defaults_file(bool panic_on_error=true);

    static void load_object_from_eeprom(const void *object_pointer, const struct GroupInfo *group_info);


    static void set_value(enum ap_var_type type, void *ptr, float def_value);




    void set_float(float value, enum ap_var_type var_type);


    static void setup_object_defaults(const void *object_pointer, const struct GroupInfo *group_info);




    static bool set_object_value(const void *object_pointer,
                                 const struct GroupInfo *group_info,
                                 const char *name, float value);



    static void setup_sketch_defaults(void);


    static bool find_old_parameter(const struct ConversionInfo *info, AP_Param *value);


    static void convert_old_parameters(const struct ConversionInfo *conversion_table, uint8_t table_size, uint8_t flags=0);


    enum {
        CONVERT_FLAG_REVERSE=1,
        CONVERT_FLAG_FORCE=2
    };
    static void convert_old_parameter(const struct ConversionInfo *info, float scaler, uint8_t flags=0);


    static void convert_parent_class(uint8_t param_key, void *object_pointer,
                                             const struct AP_Param::GroupInfo *group_info);



    static void erase_all(void);






    static AP_Param * first(ParamToken *token, enum ap_var_type *ptype);



    static AP_Param * next(ParamToken *token, enum ap_var_type *ptype);



    static AP_Param * next_scalar(ParamToken *token, enum ap_var_type *ptype);


    float cast_to_float(enum ap_var_type type) const;


    static bool check_var_info(void);


    bool configured_in_defaults_file(void) const;


    bool configured_in_storage(void) const;


    bool configured(void) const { return configured_in_defaults_file() || configured_in_storage(); }


    static uint16_t count_parameters(void);

    static void set_hide_disabled_groups(bool value) { _hide_disabled_groups = value; }


    static void set_frame_type_flags(uint16_t flags_to_set) {
        _frame_type_flags |= flags_to_set;
    }


    static bool check_frame_type(uint16_t flags);

private:





    struct EEPROM_header {
        uint8_t magic[2];
        uint8_t revision;
        uint8_t spare;
    };
# 428 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
    struct Param_header {

        uint32_t key_low : 8;
        uint32_t type : 5;
        uint32_t key_high : 1;
        uint32_t group_element : 18;
    };


    static const uint8_t _group_level_shift = 6;
    static const uint8_t _group_bits = 18;

    static const uint16_t _sentinal_key = 0x1FF;
    static const uint8_t _sentinal_type = 0x1F;
    static const uint8_t _sentinal_group = 0xFF;

    static uint16_t _frame_type_flags;

    static bool check_group_info(const struct GroupInfo *group_info, uint16_t *total_size,
                                                 uint8_t max_bits, uint8_t prefix_length);
    static bool duplicate_key(uint16_t vindex, uint16_t key);

    static bool adjust_group_offset(uint16_t vindex, const struct GroupInfo &group_info, ptrdiff_t &new_offset);
    static bool get_base(const struct Info &info, ptrdiff_t &base);


    static const struct GroupInfo *get_group_info(const struct GroupInfo &ginfo);


    static const struct GroupInfo *get_group_info(const struct Info &ginfo);

    const struct Info * find_var_info_group(
                                    const struct GroupInfo * group_info,
                                    uint16_t vindex,
                                    uint32_t group_base,
                                    uint8_t group_shift,
                                    ptrdiff_t group_offset,
                                    uint32_t * group_element,
                                    const struct GroupInfo * &group_ret,
                                    struct GroupNesting &group_nesting,
                                    uint8_t * idx) const;
    const struct Info * find_var_info(
                                    uint32_t * group_element,
                                    const struct GroupInfo * &group_ret,
                                    struct GroupNesting &group_nesting,
                                    uint8_t * idx) const;
    const struct Info * find_var_info_token(const ParamToken &token,
                                                    uint32_t * group_element,
                                                    const struct GroupInfo * &group_ret,
                                                    struct GroupNesting &group_nesting,
                                                    uint8_t * idx) const;
    static const struct Info * find_by_header_group(
                                    struct Param_header phdr, void **ptr,
                                    uint16_t vindex,
                                    const struct GroupInfo *group_info,
                                    uint32_t group_base,
                                    uint8_t group_shift,
                                    ptrdiff_t group_offset);
    static const struct Info * find_by_header(
                                    struct Param_header phdr,
                                    void **ptr);
    void add_vector3f_suffix(
                                    char *buffer,
                                    size_t buffer_size,
                                    uint8_t idx) const;
    static AP_Param * find_group(
                                    const char *name,
                                    uint16_t vindex,
                                    ptrdiff_t group_offset,
                                    const struct GroupInfo *group_info,
                                    enum ap_var_type *ptype);
    static void write_sentinal(uint16_t ofs);
    static uint16_t get_key(const Param_header &phdr);
    static void set_key(Param_header &phdr, uint16_t key);
    static bool is_sentinal(const Param_header &phrd);
    static bool scan(
                                    const struct Param_header *phdr,
                                    uint16_t *pofs);
    static uint8_t type_size(enum ap_var_type type);
    static void eeprom_write_check(
                                    const void *ptr,
                                    uint16_t ofs,
                                    uint8_t size);
    static AP_Param * next_group(
                                    uint16_t vindex,
                                    const struct GroupInfo *group_info,
                                    bool *found_current,
                                    uint32_t group_base,
                                    uint8_t group_shift,
                                    ptrdiff_t group_offset,
                                    ParamToken *token,
                                    enum ap_var_type *ptype);


    static float get_default_value(const AP_Param *object_ptr, const float *def_value_ptr);





    static bool parse_param_line(char *line, char **vname, float &value);
    static bool count_defaults_in_file(const char *filename, uint16_t &num_defaults, bool panic_on_error);
    static bool read_param_defaults_file(const char *filename);
    static bool load_defaults_file(const char *filename, bool panic_on_error);



    void send_parameter(const char *name, enum ap_var_type param_header_type, uint8_t idx) const;

    static StorageAccess _storage;
    static uint16_t _num_vars;
    static uint16_t _parameter_count;
    static const struct Info * _var_info;




    struct param_override {
        const AP_Param *object_ptr;
        float value;
    };
    static struct param_override *param_overrides;
    static uint16_t num_param_overrides;


    static const uint8_t k_EEPROM_magic0 = 0x50;
    static const uint8_t k_EEPROM_magic1 = 0x41;
    static const uint8_t k_EEPROM_revision = 6;

    static bool _hide_disabled_groups;
};
# 568 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
template<typename T, ap_var_type PT>
class AP_ParamT : public AP_Param
{
public:
    static const ap_var_type vtype = PT;



    const T &get(void) const {
        return _value;
    }



    void set(const T &v) {
        _value = v;
    }



    void set_default(const T &v) {
        if (!configured()) {
            set(v);
        }
    }



    void set_and_notify(const T &v) {


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
        if (v != _value) {
#pragma GCC diagnostic pop
            set(v);
            notify();
        }
    }



    bool set_and_save(const T &v) {
        bool force = fabsf((float)(_value - v)) < 1.19209289550781250000e-7F;
        set(v);
        return save(force);
    }






    bool set_and_save_ifchanged(const T &v) {
        if (v == _value) {
            return true;
        }
        set(v);
        return save(true);
    }





    operator const T &() const {
        return _value;
    }



    AP_ParamT<T,PT>& operator= (const T &v) {
        _value = v;
        return *this;
    }



    AP_ParamT<T,PT>& operator |=(const T &v) {
        _value |= v;
        return *this;
    }

    AP_ParamT<T,PT>& operator &=(const T &v) {
        _value &= v;
        return *this;
    }

    AP_ParamT<T,PT>& operator +=(const T &v) {
        _value += v;
        return *this;
    }

    AP_ParamT<T,PT>& operator -=(const T &v) {
        _value -= v;
        return *this;
    }



    float cast_to_float(void) const {
        return (float)_value;
    }

protected:
    T _value;
};
# 685 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
template<typename T, ap_var_type PT>
class AP_ParamV : public AP_Param
{
public:

    static const ap_var_type vtype = PT;



    const T &get(void) const {
        return _value;
    }



    void set(const T &v) {
        _value = v;
    }



    void set_and_notify(const T &v) {
        if (v != _value) {
            set(v);
            notify();
        }
    }



    bool set_and_save(const T &v) {
        bool force = (_value != v);
        set(v);
        return save(force);
    }





    operator const T &() const {
        return _value;
    }



    AP_ParamV<T,PT>& operator=(const T &v) {
        _value = v;
        return *this;
    }

protected:
    T _value;
};
# 750 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
template<typename T, uint8_t N, ap_var_type PT>
class AP_ParamA : public AP_Param
{
public:

    static const ap_var_type vtype = PT;





    const T & operator[](uint8_t i) {
        return _value[i];
    }

    const T & operator[](int8_t i) {
        return _value[(uint8_t)i];
    }





    T get(uint8_t i) const {
        if (i < N) {
            return _value[i];
        } else {
            return (T)0;
        }
    }





    void set(uint8_t i, const T &v) {
        if (i < N) {
            _value[i] = v;
        }
    }

protected:
    T _value[N];
};
# 804 "/Users/yu/repos/ardupilot/libraries/AP_Param/AP_Param.h"
typedef AP_ParamT<float, AP_PARAM_FLOAT> AP_Float;;
typedef AP_ParamT<int8_t, AP_PARAM_INT8> AP_Int8;;
typedef AP_ParamT<int16_t, AP_PARAM_INT16> AP_Int16;;
typedef AP_ParamT<int32_t, AP_PARAM_INT32> AP_Int32;;
# 10 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/definitions.h" 1
       

# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 4 "/Users/yu/repos/ardupilot/libraries/AP_Math/definitions.h" 2
# 39 "/Users/yu/repos/ardupilot/libraries/AP_Math/definitions.h"
static const double DEG_TO_RAD_DOUBLE = asin(1) / 90;
static const double RAD_TO_DEG_DOUBLE = 1 / DEG_TO_RAD_DOUBLE;
# 56 "/Users/yu/repos/ardupilot/libraries/AP_Math/definitions.h"
static const double WGS84_A = 6378137.0;


static const double WGS84_IF = 298.257223563;


static const double WGS84_F = ((double)1.0 / WGS84_IF);


static const double WGS84_B = (WGS84_A * (1 - WGS84_F));


static const double WGS84_E = (sqrt(2 * WGS84_F - WGS84_F * WGS84_F));
# 12 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/edc.h" 1
# 18 "/Users/yu/repos/ardupilot/libraries/AP_Math/edc.h"
       



uint16_t crc16_ccitt(const uint8_t *buf, uint32_t len, uint16_t crc);
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/location.h" 1
       






# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector2.h" 1
# 30 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector2.h"
       

# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 33 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector2.h" 2

template <typename T>
struct Vector2
{
    T x, y;


    constexpr Vector2<T>()
        : x(0)
        , y(0) {}


    constexpr Vector2<T>(const T x0, const T y0)
        : x(x0)
        , y(y0) {}


    void operator ()(const T x0, const T y0)
    {
        x= x0; y= y0;
    }


    bool operator ==(const Vector2<T> &v) const;


    bool operator !=(const Vector2<T> &v) const;


    Vector2<T> operator -(void) const;


    Vector2<T> operator +(const Vector2<T> &v) const;


    Vector2<T> operator -(const Vector2<T> &v) const;


    Vector2<T> operator *(const T num) const;


    Vector2<T> operator /(const T num) const;


    Vector2<T> &operator +=(const Vector2<T> &v);


    Vector2<T> &operator -=(const Vector2<T> &v);


    Vector2<T> &operator *=(const T num);


    Vector2<T> &operator /=(const T num);


    T operator *(const Vector2<T> &v) const;


    T operator %(const Vector2<T> &v) const;



    float angle(const Vector2<T> &v2) const;


    bool is_nan(void) const;


    bool is_inf(void) const;


    bool is_zero(void) const { return (fabsf(x) < 1.19209289550781250000e-7F) && (fabsf(y) < 1.19209289550781250000e-7F); }

    const T & operator[](uint8_t i) const {
        const T *_v = &x;



        return _v[i];
    }


    void zero()
    {
        x = y = 0;
    }


    T length_squared() const
    {
        return (T)(*this * *this);
    }


    float length(void) const;


    void normalize()
    {
        *this/=length();
    }


    Vector2<T> normalized() const
    {
        return *this/length();
    }


    void reflect(const Vector2<T> &n)
    {
        Vector2<T> orig(*this);
        project(n);
        *this= *this*2 - orig;
    }


    void project(const Vector2<T> &v)
    {
        *this= v * (*this * v)/(v*v);
    }


    Vector2<T> projected(const Vector2<T> &v)
    {
        return v * (*this * v)/(v*v);
    }



    static Vector2<T> perpendicular(const Vector2<T> &pos_delta, const Vector2<T> &v1)
    {
        Vector2<T> perpendicular1 = Vector2<T>(-v1[1], v1[0]);
        Vector2<T> perpendicular2 = Vector2<T>(v1[1], -v1[0]);
        T d1 = perpendicular1 * pos_delta;
        T d2 = perpendicular2 * pos_delta;
        if (d1 > d2) {
            return perpendicular1;
        }
        return perpendicular2;
    }







    static Vector2<T> closest_point(const Vector2<T> &p, const Vector2<T> &v, const Vector2<T> &w)
    {

        const float l2 = (v - w).length_squared();
        if (l2 < 1.19209289550781250000e-7F) {

            return v;
        }




        const float t = ((p - v) * (w - v)) / l2;
        if (t <= 0) {
            return v;
        } else if (t >= 1) {
            return w;
        } else {
            return v + (w - v)*t;
        }
    }




    static float closest_distance_between_radial_and_point(const Vector2<T> &w,
                                                           const Vector2<T> &p)
    {
        const Vector2<T> closest = closest_point(p, Vector2<T>(0,0), w);
        const Vector2<T> delta = closest - p;
        return delta.length();
    }

};

typedef Vector2<int16_t> Vector2i;
typedef Vector2<uint16_t> Vector2ui;
typedef Vector2<int32_t> Vector2l;
typedef Vector2<uint32_t> Vector2ul;
typedef Vector2<float> Vector2f;
# 9 "/Users/yu/repos/ardupilot/libraries/AP_Math/location.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector3.h" 1
# 48 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector3.h"
       

# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 51 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector3.h" 2






# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/rotations.h" 1
# 18 "/Users/yu/repos/ardupilot/libraries/AP_Math/rotations.h"
       
# 27 "/Users/yu/repos/ardupilot/libraries/AP_Math/rotations.h"
enum Rotation {
    ROTATION_NONE = 0,
    ROTATION_YAW_45 = 1,
    ROTATION_YAW_90 = 2,
    ROTATION_YAW_135 = 3,
    ROTATION_YAW_180 = 4,
    ROTATION_YAW_225 = 5,
    ROTATION_YAW_270 = 6,
    ROTATION_YAW_315 = 7,
    ROTATION_ROLL_180 = 8,
    ROTATION_ROLL_180_YAW_45 = 9,
    ROTATION_ROLL_180_YAW_90 = 10,
    ROTATION_ROLL_180_YAW_135 = 11,
    ROTATION_PITCH_180 = 12,
    ROTATION_ROLL_180_YAW_225 = 13,
    ROTATION_ROLL_180_YAW_270 = 14,
    ROTATION_ROLL_180_YAW_315 = 15,
    ROTATION_ROLL_90 = 16,
    ROTATION_ROLL_90_YAW_45 = 17,
    ROTATION_ROLL_90_YAW_90 = 18,
    ROTATION_ROLL_90_YAW_135 = 19,
    ROTATION_ROLL_270 = 20,
    ROTATION_ROLL_270_YAW_45 = 21,
    ROTATION_ROLL_270_YAW_90 = 22,
    ROTATION_ROLL_270_YAW_135 = 23,
    ROTATION_PITCH_90 = 24,
    ROTATION_PITCH_270 = 25,
    ROTATION_PITCH_180_YAW_90 = 26,
    ROTATION_PITCH_180_YAW_270 = 27,
    ROTATION_ROLL_90_PITCH_90 = 28,
    ROTATION_ROLL_180_PITCH_90 = 29,
    ROTATION_ROLL_270_PITCH_90 = 30,
    ROTATION_ROLL_90_PITCH_180 = 31,
    ROTATION_ROLL_270_PITCH_180 = 32,
    ROTATION_ROLL_90_PITCH_270 = 33,
    ROTATION_ROLL_180_PITCH_270 = 34,
    ROTATION_ROLL_270_PITCH_270 = 35,
    ROTATION_ROLL_90_PITCH_180_YAW_90 = 36,
    ROTATION_ROLL_90_YAW_270 = 37,
    ROTATION_ROLL_90_PITCH_68_YAW_293 = 38,
    ROTATION_MAX
};
# 58 "/Users/yu/repos/ardupilot/libraries/AP_Math/vector3.h" 2

template <typename T>
class Matrix3;

template <typename T>
class Vector3
{

public:
    T x, y, z;


    constexpr Vector3<T>()
        : x(0)
        , y(0)
        , z(0) {}


    constexpr Vector3<T>(const T x0, const T y0, const T z0)
        : x(x0)
        , y(y0)
        , z(z0) {}


    void operator ()(const T x0, const T y0, const T z0)
    {
        x= x0; y= y0; z= z0;
    }


    bool operator ==(const Vector3<T> &v) const;


    bool operator !=(const Vector3<T> &v) const;


    Vector3<T> operator -(void) const;


    Vector3<T> operator +(const Vector3<T> &v) const;


    Vector3<T> operator -(const Vector3<T> &v) const;


    Vector3<T> operator *(const T num) const;


    Vector3<T> operator /(const T num) const;


    Vector3<T> &operator +=(const Vector3<T> &v);


    Vector3<T> &operator -=(const Vector3<T> &v);


    Vector3<T> &operator *=(const T num);


    Vector3<T> &operator /=(const T num);


    T & operator[](uint8_t i) {
        T *_v = &x;



        return _v[i];
    }

    const T & operator[](uint8_t i) const {
        const T *_v = &x;



        return _v[i];
    }


    T operator *(const Vector3<T> &v) const;


    Vector3<T> operator *(const Matrix3<T> &m) const;


    Matrix3<T> mul_rowcol(const Vector3<T> &v) const;


    Vector3<T> operator %(const Vector3<T> &v) const;


    float angle(const Vector3<T> &v2) const;


    bool is_nan(void) const;


    bool is_inf(void) const;


    bool is_zero(void) const { return (fabsf(x) < 1.19209289550781250000e-7F) && (fabsf(y) < 1.19209289550781250000e-7F) && (fabsf(z) < 1.19209289550781250000e-7F); }



    void rotate(enum Rotation rotation);
    void rotate_inverse(enum Rotation rotation);


    T length_squared() const
    {
        return (T)(*this * *this);
    }


    float length(void) const;


    void normalize()
    {
        *this /= length();
    }


    void zero()
    {
        x = y = z = 0;
    }


    Vector3<T> normalized() const
    {
        return *this/length();
    }


    void reflect(const Vector3<T> &n)
    {
        Vector3<T> orig(*this);
        project(n);
        *this = *this*2 - orig;
    }


    void project(const Vector3<T> &v)
    {
        *this= v * (*this * v)/(v*v);
    }


    Vector3<T> projected(const Vector3<T> &v) const
    {
        return v * (*this * v)/(v*v);
    }


    float distance_squared(const Vector3<T> &v) const {
        float dist_x = x-v.x;
        float dist_y = y-v.y;
        float dist_z = z-v.z;
        return (dist_x*dist_x + dist_y*dist_y + dist_z*dist_z);
    }


    float distance_to_segment(const Vector3<T> &seg_start, const Vector3<T> &seg_end) const;





    static Vector3<T> perpendicular(const Vector3<T> &p1, const Vector3<T> &v1)
    {
        T d = p1 * v1;
        if (fabsf(d) < 1.19209289550781250000e-7F) {
            return p1;
        }
        Vector3<T> parallel = (v1 * d) / v1.length_squared();
        Vector3<T> perpendicular = p1 - parallel;

        return perpendicular;
    }

};

typedef Vector3<int16_t> Vector3i;
typedef Vector3<uint16_t> Vector3ui;
typedef Vector3<int32_t> Vector3l;
typedef Vector3<uint32_t> Vector3ul;
typedef Vector3<float> Vector3f;
typedef Vector3<double> Vector3d;
# 10 "/Users/yu/repos/ardupilot/libraries/AP_Math/location.h" 2
# 22 "/Users/yu/repos/ardupilot/libraries/AP_Math/location.h"
float longitude_scale(const struct Location &loc);


float get_distance(const struct Location &loc1, const struct Location &loc2);


uint32_t get_distance_cm(const struct Location &loc1, const struct Location &loc2);


float get_horizontal_distance_cm(const Vector3f &origin, const Vector3f &destination);


int32_t get_bearing_cd(const struct Location &loc1, const struct Location &loc2);


float get_bearing_cd(const Vector3f &origin, const Vector3f &destination);






bool location_passed_point(const struct Location & location,
                                  const struct Location & point1,
                                  const struct Location & point2);





float location_path_proportion(const struct Location &location,
                               const struct Location &point1,
                               const struct Location &point2);


void location_update(struct Location &loc, float bearing, float distance);


void location_offset(struct Location &loc, float ofs_north, float ofs_east);





Vector2f location_diff(const struct Location &loc1, const struct Location &loc2);





Vector3f location_3d_diff_NED(const struct Location &loc1, const struct Location &loc2);




bool locations_are_same(const struct Location &loc1, const struct Location &loc2);




bool location_sanitize(const struct Location &defaultLoc, struct Location &loc);




void print_latlon(AP_HAL::BetterStream *s, int32_t lat_or_lon);




void wgsllh2ecef(const Vector3d &llh, Vector3d &ecef);




void wgsecef2llh(const Vector3d &ecef, Vector3d &llh);


bool check_lat(float lat);
bool check_lng(float lng);
bool check_lat(int32_t lat);
bool check_lng(int32_t lng);
bool check_latlng(float lat, float lng);
bool check_latlng(int32_t lat, int32_t lng);
bool check_latlng(Location loc);
# 14 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/matrix3.h" 1
# 38 "/Users/yu/repos/ardupilot/libraries/AP_Math/matrix3.h"
       




template <typename T>
class Matrix3 {
public:


    Vector3<T> a, b, c;



    constexpr Matrix3<T>() {}


    constexpr Matrix3<T>(const Vector3<T> &a0, const Vector3<T> &b0, const Vector3<T> &c0)
        : a(a0)
        , b(b0)
        , c(c0) {}


    constexpr Matrix3<T>(const T ax, const T ay, const T az,
                         const T bx, const T by, const T bz,
                         const T cx, const T cy, const T cz)
        : a(ax,ay,az)
        , b(bx,by,bz)
        , c(cx,cy,cz) {}


    void operator () (const Vector3<T> &a0, const Vector3<T> &b0, const Vector3<T> &c0)
    {
        a = a0; b = b0; c = c0;
    }


    bool operator == (const Matrix3<T> &m)
    {
        return (a==m.a && b==m.b && c==m.c);
    }


    bool operator != (const Matrix3<T> &m)
    {
        return (a!=m.a || b!=m.b || c!=m.c);
    }


    Matrix3<T> operator - (void) const
    {
        return Matrix3<T>(-a,-b,-c);
    }


    Matrix3<T> operator + (const Matrix3<T> &m) const
    {
        return Matrix3<T>(a+m.a, b+m.b, c+m.c);
    }
    Matrix3<T> &operator += (const Matrix3<T> &m)
    {
        return *this = *this + m;
    }


    Matrix3<T> operator - (const Matrix3<T> &m) const
    {
        return Matrix3<T>(a-m.a, b-m.b, c-m.c);
    }
    Matrix3<T> &operator -= (const Matrix3<T> &m)
    {
        return *this = *this - m;
    }


    Matrix3<T> operator * (const T num) const
    {
        return Matrix3<T>(a*num, b*num, c*num);
    }
    Matrix3<T> &operator *= (const T num)
    {
        return *this = *this * num;
    }
    Matrix3<T> operator / (const T num) const
    {
        return Matrix3<T>(a/num, b/num, c/num);
    }
    Matrix3<T> &operator /= (const T num)
    {
        return *this = *this / num;
    }


    Vector3<T> & operator[](uint8_t i) {
        Vector3<T> *_v = &a;



        return _v[i];
    }

    const Vector3<T> & operator[](uint8_t i) const {
        const Vector3<T> *_v = &a;



        return _v[i];
    }


    Vector3<T> operator *(const Vector3<T> &v) const;


    Vector3<T> mul_transpose(const Vector3<T> &v) const;


    Vector2<T> mulXY(const Vector3<T> &v) const;


    Vector3<T> colx(void) const
    {
        return Vector3<T>(a.x, b.x, c.x);
    }


    Vector3<T> coly(void) const
    {
        return Vector3<T>(a.y, b.y, c.y);
    }


    Vector3<T> colz(void) const
    {
        return Vector3<T>(a.z, b.z, c.z);
    }


    Matrix3<T> operator *(const Matrix3<T> &m) const;

    Matrix3<T> &operator *=(const Matrix3<T> &m)
    {
        return *this = *this * m;
    }


    Matrix3<T> transposed(void) const;

    void transpose(void)
    {
        *this = transposed();
    }






    T det() const;
# 205 "/Users/yu/repos/ardupilot/libraries/AP_Math/matrix3.h"
    bool inverse(Matrix3<T>& inv) const;







    bool invert();


    void zero(void);


    void identity(void) {
        a.x = b.y = c.z = 1;
        a.y = a.z = 0;
        b.x = b.z = 0;
        c.x = c.y = 0;
    }


    bool is_nan(void)
    {
        return a.is_nan() || b.is_nan() || c.is_nan();
    }


    void from_euler(float roll, float pitch, float yaw);


    void to_euler(float *roll, float *pitch, float *yaw) const;


    void from_rotation(enum Rotation rotation);






    Vector3<T> to_euler312() const;




    void from_euler312(float roll, float pitch, float yaw);



    void rotate(const Vector3<T> &g);




    void from_axis_angle(const Vector3<T> &v, float theta);


    void normalize(void);
};

typedef Matrix3<int16_t> Matrix3i;
typedef Matrix3<uint16_t> Matrix3ui;
typedef Matrix3<int32_t> Matrix3l;
typedef Matrix3<uint32_t> Matrix3ul;
typedef Matrix3<float> Matrix3f;
typedef Matrix3<double> Matrix3d;
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/polygon.h" 1
# 18 "/Users/yu/repos/ardupilot/libraries/AP_Math/polygon.h"
       



template <typename T>
bool Polygon_outside(const Vector2<T> &P, const Vector2<T> *V, unsigned n);
template <typename T>
bool Polygon_complete(const Vector2<T> *V, unsigned n);
# 16 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/quaternion.h" 1
# 18 "/Users/yu/repos/ardupilot/libraries/AP_Math/quaternion.h"
       

# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 21 "/Users/yu/repos/ardupilot/libraries/AP_Math/quaternion.h" 2




class Quaternion {
public:
    float q1, q2, q3, q4;



    Quaternion()
    {
        q1 = 1;
        q2 = q3 = q4 = 0;
    }


    Quaternion(const float _q1, const float _q2, const float _q3, const float _q4) :
        q1(_q1), q2(_q2), q3(_q3), q4(_q4)
    {
    }


    void operator()(const float _q1, const float _q2, const float _q3, const float _q4)
    {
        q1 = _q1;
        q2 = _q2;
        q3 = _q3;
        q4 = _q4;
    }


    bool is_nan(void) const
    {
        return isnan(q1) || isnan(q2) || isnan(q3) || isnan(q4);
    }


    void rotation_matrix(Matrix3f &m) const;


    void rotation_matrix_norm(Matrix3f &m) const;

    void from_rotation_matrix(const Matrix3f &m);


    void earth_to_body(Vector3f &v) const;


    void from_euler(float roll, float pitch, float yaw);

    void from_vector312(float roll ,float pitch, float yaw);

    void to_axis_angle(Vector3f &v);

    void from_axis_angle(Vector3f v);

    void from_axis_angle(const Vector3f &axis, float theta);

    void rotate(const Vector3f &v);

    void from_axis_angle_fast(Vector3f v);

    void from_axis_angle_fast(const Vector3f &axis, float theta);

    void rotate_fast(const Vector3f &v);


    float get_euler_roll() const;


    float get_euler_pitch() const;


    float get_euler_yaw() const;


    void to_euler(float &roll, float &pitch, float &yaw) const;


    Vector3f to_vector312(void) const;

    float length(void) const;
    void normalize();


    void initialise()
    {
        q1 = 1.0f;
        q2 = q3 = q4 = 0.0f;
    }

    Quaternion inverse(void) const;


    float & operator[](uint8_t i)
    {
        float *_v = &q1;



        return _v[i];
    }

    const float & operator[](uint8_t i) const
    {
        const float *_v = &q1;



        return _v[i];
    }

    Quaternion operator*(const Quaternion &v) const;
    Quaternion &operator*=(const Quaternion &v);
    Quaternion operator/(const Quaternion &v) const;
};
# 17 "/Users/yu/repos/ardupilot/libraries/AP_Math/AP_Math.h" 2





typedef AP_ParamV<Vector3f, AP_PARAM_VECTOR3F> AP_Vector3f;;




template <typename Arithmetic1, typename Arithmetic2>
typename std::enable_if<std::is_integral<typename std::common_type<Arithmetic1, Arithmetic2>::type>::value ,bool>::type
is_equal(const Arithmetic1 v_1, const Arithmetic2 v_2);

template <typename Arithmetic1, typename Arithmetic2>
typename std::enable_if<std::is_floating_point<typename std::common_type<Arithmetic1, Arithmetic2>::type>::value, bool>::type
is_equal(const Arithmetic1 v_1, const Arithmetic2 v_2);




template <typename T>
inline bool is_zero(const T fVal1) {
    static_assert(std::is_floating_point<T>::value || std::is_base_of<T,AP_Float>::value,
                  "Template parameter not of type float");
    return (fabsf(static_cast<float>(fVal1)) < 1.19209289550781250000e-7F);
}




template <typename T>
inline bool is_positive(const T fVal1) {
    static_assert(std::is_floating_point<T>::value || std::is_base_of<T,AP_Float>::value,
                  "Template parameter not of type float");
    return (static_cast<float>(fVal1) >= 1.19209289550781250000e-7F);
}





template <typename T>
inline bool is_negative(const T fVal1) {
    static_assert(std::is_floating_point<T>::value || std::is_base_of<T,AP_Float>::value,
                  "Template parameter not of type float");
    return (static_cast<float>(fVal1) <= (-1.0 * 1.19209289550781250000e-7F));
}






template <typename T>
float safe_asin(const T v);







template <typename T>
float safe_sqrt(const T v);


bool inverse3x3(float m[], float invOut[]);


bool inverse4x4(float m[],float invOut[]);


float *mat_mul(float *A, float *B, uint8_t n);


bool inverse(float x[], float y[], uint16_t dim);






template <typename T>
float wrap_180(const T angle, float unit_mod = 1);




template <typename T>
auto wrap_180_cd(const T angle) -> decltype(wrap_180(angle, 100.f));






template <typename T>
float wrap_360(const T angle, float unit_mod = 1);




template <typename T>
auto wrap_360_cd(const T angle) -> decltype(wrap_360(angle, 100.f));




template <typename T>
float wrap_PI(const T radian);




template <typename T>
float wrap_2PI(const T radian);




template <typename T>
T constrain_value(const T amt, const T low, const T high);

inline float constrain_float(const float amt, const float low, const float high)
{
    return constrain_value(amt, low, high);
}

inline int16_t constrain_int16(const int16_t amt, const int16_t low, const int16_t high)
{
    return constrain_value(amt, low, high);
}

inline int32_t constrain_int32(const int32_t amt, const int32_t low, const int32_t high)
{
    return constrain_value(amt, low, high);
}


static inline constexpr float radians(float deg)
{
    return deg * ((3.141592653589793f) / 180.0f);
}


static inline constexpr float degrees(float rad)
{
    return rad * (180.0f / (3.141592653589793f));
}

template<typename T>
float sq(const T val)
{
    return powf(static_cast<float>(val), 2);
}





template<typename T, typename... Params>
float sq(const T first, const Params... parameters)
{
    return sq(first) + sq(parameters...);
}





template<typename T, typename U, typename... Params>
float norm(const T first, const U second, const Params... parameters)
{
    return sqrtf(sq(first, second, parameters...));
}

template<typename A, typename B>
static inline auto MIN(const A &one, const B &two) -> decltype(one < two ? one : two)
{
    return one < two ? one : two;
}

template<typename A, typename B>
static inline auto MAX(const A &one, const B &two) -> decltype(one > two ? one : two)
{
    return one > two ? one : two;
}

inline uint32_t hz_to_nsec(uint32_t freq)
{
    return 1000000000ULL / freq;
}

inline uint32_t nsec_to_hz(uint32_t nsec)
{
    return 1000000000ULL / nsec;
}

inline uint32_t usec_to_nsec(uint32_t usec)
{
    return usec * 1000ULL;
}

inline uint32_t nsec_to_usec(uint32_t nsec)
{
    return nsec / 1000ULL;
}

inline uint32_t hz_to_usec(uint32_t freq)
{
    return 1000000ULL / freq;
}

inline uint32_t usec_to_hz(uint32_t usec)
{
    return 1000000ULL / usec;
}




float linear_interpolate(float low_output, float high_output,
                         float var_value,
                         float var_low, float var_high);


uint16_t get_random16(void);


float rand_float(void);


Vector3f rand_vec3f(void);
# 12 "/Users/yu/repos/ardupilot/libraries/AP_Common/Location.h" 2


class AP_AHRS_NavEKF;
class AP_Terrain;

class Location_Class : public Location
{
public:


    enum ALT_FRAME {
        ALT_FRAME_ABSOLUTE = 0,
        ALT_FRAME_ABOVE_HOME = 1,
        ALT_FRAME_ABOVE_ORIGIN = 2,
        ALT_FRAME_ABOVE_TERRAIN = 3
    };


    Location_Class();
    Location_Class(int32_t latitude, int32_t longitude, int32_t alt_in_cm, ALT_FRAME frame);
    Location_Class(const Location& loc);
    Location_Class(const Vector3f &ekf_offset_neu);


    static void set_ahrs(const AP_AHRS_NavEKF* ahrs) { _ahrs = ahrs; }
    static void set_terrain(AP_Terrain* terrain) { _terrain = terrain; }


    Location_Class& operator=(const struct Location &loc);


    void set_alt_cm(int32_t alt_cm, ALT_FRAME frame);




    bool get_alt_cm(ALT_FRAME desired_frame, int32_t &ret_alt_cm) const;


    ALT_FRAME get_alt_frame() const;




    bool change_alt_frame(ALT_FRAME desired_frame);




    bool get_vector_xy_from_origin_NEU(Vector3f &vec_neu) const;
    bool get_vector_from_origin_NEU(Vector3f &vec_neu) const;


    float get_distance(const struct Location &loc2) const;


    void offset(float ofs_north, float ofs_east);

    bool is_zero(void) { return (lat == 0 && lng == 0 && alt == 0 && options == 0); }

    void zero(void) { lat = lng = alt = 0; options = 0; }

private:
    static const AP_AHRS_NavEKF *_ahrs;
    static AP_Terrain *_terrain;
};
# 33 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h" 1
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
       
# 23 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
class Menu {
public:
# 34 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
    struct arg {
        const char *str;
        long i;
        float f;
    };
# 54 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
    typedef Functor<int8_t, uint8_t, const struct arg *> func;

 static void set_port(AP_HAL::BetterStream *port) {
  _port = port;
 }
# 67 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
    typedef Functor<bool> preprompt;



    struct command {



        const char command[14];
# 88 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
        Functor<int8_t, uint8_t, const struct arg *> func;
    };
# 100 "/Users/yu/repos/ardupilot/libraries/AP_Menu/AP_Menu.h"
    Menu(const char *prompt, const struct command *commands, uint8_t entries, preprompt ppfunc = 0);


    void set_limits(uint8_t commandline_max, uint8_t args_max);


    void run(void);




    bool check_input(void);

private:


    void _help(void);






    int8_t _call(uint8_t n, uint8_t argc);

    const char * _prompt;
    const command * _commands;
    const uint8_t _entries;
    const preprompt _ppfunc;

    static char *_inbuf;
    static arg *_argv;

    uint8_t _commandline_max;
    uint8_t _args_max;


    void _allocate_buffers(void);


    uint8_t _input_len;


    bool _check_for_input(void);



    bool _run_command(bool prompt_on_enter);

    void _display_prompt();


 static AP_HAL::BetterStream *_port;
};
# 34 "ArduCopterC.cpp" 2




# 1 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 1



       



# 1 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS_MAVLink.h" 1


       
# 22 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS_MAVLink.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-align"

# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/version.h" 1




       
# 26 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS_MAVLink.h" 2



# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h" 1
       






# 1 "/usr/local/lib/gcc/x86_64-apple-darwin15.6.0/6.3.0/include/stdbool.h" 1 3 4
# 9 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h" 2
# 46 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef struct param_union { union { float param_float; int32_t param_int32; uint32_t param_uint32; int16_t param_int16; uint16_t param_uint16; int8_t param_int8; uint8_t param_uint8; uint8_t bytes[4]; }; uint8_t type; } __attribute__((packed))
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
   mavlink_param_union_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef struct param_union_extended { union { struct { uint8_t is_double:1; uint8_t mavlink_type:7; union { char c; uint8_t uint8; int8_t int8; uint16_t uint16; int16_t int16; uint32_t uint32; int32_t int32; float f; uint8_t align[7]; }; }; uint8_t data[8]; }; } __attribute__((packed))
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
   mavlink_param_union_double_t;





typedef struct __mavlink_system { uint8_t sysid; uint8_t compid; } __attribute__((packed))



   mavlink_system_t;

typedef struct __mavlink_message { uint16_t checksum; uint8_t magic; uint8_t len; uint8_t incompat_flags; uint8_t compat_flags; uint8_t seq; uint8_t sysid; uint8_t compid; uint32_t msgid:24; uint64_t payload64[(255 +2 +7)/8]; uint8_t ck[2]; uint8_t signature[13]; } __attribute__((packed))
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
   mavlink_message_t;

typedef enum {
 MAVLINK_TYPE_CHAR = 0,
 MAVLINK_TYPE_UINT8_T = 1,
 MAVLINK_TYPE_INT8_T = 2,
 MAVLINK_TYPE_UINT16_T = 3,
 MAVLINK_TYPE_INT16_T = 4,
 MAVLINK_TYPE_UINT32_T = 5,
 MAVLINK_TYPE_INT32_T = 6,
 MAVLINK_TYPE_UINT64_T = 7,
 MAVLINK_TYPE_INT64_T = 8,
 MAVLINK_TYPE_FLOAT = 9,
 MAVLINK_TYPE_DOUBLE = 10
} mavlink_message_type_t;



typedef struct __mavlink_field_info {
 const char *name;
        const char *print_format;
        mavlink_message_type_t type;
        unsigned int array_length;
        unsigned int wire_offset;
        unsigned int structure_offset;
} mavlink_field_info_t;



typedef struct __mavlink_message_info {
 uint32_t msgid;
 const char *name;
 unsigned num_fields;
 mavlink_field_info_t fields[64];
} mavlink_message_info_t;
# 164 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef enum {
    MAVLINK_COMM_0,
    MAVLINK_COMM_1,
    MAVLINK_COMM_2,
    MAVLINK_COMM_3
} mavlink_channel_t;
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef enum {
    MAVLINK_PARSE_STATE_UNINIT=0,
    MAVLINK_PARSE_STATE_IDLE,
    MAVLINK_PARSE_STATE_GOT_STX,
    MAVLINK_PARSE_STATE_GOT_LENGTH,
    MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS,
    MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS,
    MAVLINK_PARSE_STATE_GOT_SEQ,
    MAVLINK_PARSE_STATE_GOT_SYSID,
    MAVLINK_PARSE_STATE_GOT_COMPID,
    MAVLINK_PARSE_STATE_GOT_MSGID1,
    MAVLINK_PARSE_STATE_GOT_MSGID2,
    MAVLINK_PARSE_STATE_GOT_MSGID3,
    MAVLINK_PARSE_STATE_GOT_PAYLOAD,
    MAVLINK_PARSE_STATE_GOT_CRC1,
    MAVLINK_PARSE_STATE_GOT_BAD_CRC1,
    MAVLINK_PARSE_STATE_SIGNATURE_WAIT
} mavlink_parse_state_t;

typedef enum {
    MAVLINK_FRAMING_INCOMPLETE=0,
    MAVLINK_FRAMING_OK=1,
    MAVLINK_FRAMING_BAD_CRC=2,
    MAVLINK_FRAMING_BAD_SIGNATURE=3
} mavlink_framing_t;
# 217 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef struct __mavlink_status {
    uint8_t msg_received;
    uint8_t buffer_overrun;
    uint8_t parse_error;
    mavlink_parse_state_t parse_state;
    uint8_t packet_idx;
    uint8_t current_rx_seq;
    uint8_t current_tx_seq;
    uint16_t packet_rx_success_count;
    uint16_t packet_rx_drop_count;
    uint8_t flags;
    uint8_t signature_wait;
    struct __mavlink_signing *signing;
    struct __mavlink_signing_streams *signing_streams;
} mavlink_status_t;




typedef bool (*mavlink_accept_unsigned_t)(const mavlink_status_t *status, uint32_t msgid);
# 246 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef struct __mavlink_signing {
    uint8_t flags;
    uint8_t link_id;
    uint64_t timestamp;
    uint8_t secret_key[32];
    mavlink_accept_unsigned_t accept_unsigned_callback;
} mavlink_signing_t;
# 261 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef struct __mavlink_signing_streams {
    uint16_t num_signing_streams;
    struct __mavlink_signing_stream {
        uint8_t link_id;
        uint8_t sysid;
        uint8_t compid;
        uint8_t timestamp_bytes[6];
    } stream[16];
} mavlink_signing_streams_t;
# 281 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/mavlink_types.h"
typedef struct __mavlink_msg_entry {
 uint32_t msgid;
 uint8_t crc_extra;
 uint8_t msg_len;
 uint8_t flags;
 uint8_t target_system_ofs;
 uint8_t target_component_ofs;
} mavlink_msg_entry_t;
# 30 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS_MAVLink.h" 2


extern AP_HAL::UARTDriver *mavlink_comm_port[5];


extern mavlink_system_t mavlink_system;




static inline bool valid_channel(mavlink_channel_t chan)
{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wtautological-constant-out-of-range-compare"
    return chan < 5;
#pragma clang diagnostic pop
}






static inline void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
    if (!valid_channel(chan)) {
        return;
    }
    mavlink_comm_port[chan]->write(ch);
}

void comm_send_buffer(mavlink_channel_t chan, const uint8_t *buf, uint8_t len);






uint8_t comm_receive_ch(mavlink_channel_t chan);





uint16_t comm_get_available(mavlink_channel_t chan);






uint16_t comm_get_txspace(mavlink_channel_t chan);





bool comm_is_idle(mavlink_channel_t chan);


# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/mavlink.h" 1




       
# 32 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/mavlink.h"
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 1




       
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h"
extern "C" {
# 30 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h"
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h" 1
       
# 43 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
    mavlink_status_t* mavlink_get_channel_status(uint8_t chan);

    void mavlink_reset_channel_status(uint8_t chan);
    uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
                                                          uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra);
    uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
                                                     uint8_t min_length, uint8_t length, uint8_t crc_extra);

    void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint32_t msgid, const char *packet,
                                                        uint8_t min_length, uint8_t length, uint8_t crc_extra);

    uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg);
    void mavlink_start_checksum(mavlink_message_t* msg);
    void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c);
    uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg,
           mavlink_status_t* status,
           uint8_t c,
           mavlink_message_t* r_message,
           mavlink_status_t* r_mavlink_status);
    uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status);
    uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status);
    uint8_t put_bitfield_n_by_index(int32_t b, uint8_t bits, uint8_t packet_index, uint8_t bit_index,
                               uint8_t* r_bit_index, uint8_t* buffer);
    const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid);

    void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len);
    void _mavlink_resend_uart(mavlink_channel_t chan, const mavlink_message_t *msg);
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
static inline uint16_t mavlink_msg_get_send_buffer_length(const mavlink_message_t* msg)
{
 if (msg->magic == 0xFE) {
  return msg->len + 5 +1 + 2;
 }
     uint16_t signature_len = (msg->incompat_flags & 0x01)?13:0;
 return msg->len + ((9 + 1) + 2) + signature_len;
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 if (src == 
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h" 3 4
           __null
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
               ) {
  memset(dest, 0, n);
 } else {
  memcpy(dest, src, n);
 }
}




static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_uint8_t_array(char *buf, uint8_t wire_offset, const uint8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_int8_t_array(char *buf, uint8_t wire_offset, const int8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}
# 228 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
static inline void _mav_put_uint16_t_array(char *buf, uint8_t wire_offset, const uint16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint16_t)); }
static inline void _mav_put_uint32_t_array(char *buf, uint8_t wire_offset, const uint32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint32_t)); }
static inline void _mav_put_uint64_t_array(char *buf, uint8_t wire_offset, const uint64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint64_t)); }
static inline void _mav_put_int16_t_array(char *buf, uint8_t wire_offset, const int16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int16_t)); }
static inline void _mav_put_int32_t_array(char *buf, uint8_t wire_offset, const int32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int32_t)); }
static inline void _mav_put_int64_t_array(char *buf, uint8_t wire_offset, const int64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int64_t)); }
static inline void _mav_put_float_array(char *buf, uint8_t wire_offset, const float *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(float)); }
static inline void _mav_put_double_array(char *buf, uint8_t wire_offset, const double *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(double)); }
# 273 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
static inline uint16_t _MAV_RETURN_uint16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int16_t _MAV_RETURN_int16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint32_t _MAV_RETURN_uint32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int32_t _MAV_RETURN_int32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint64_t _MAV_RETURN_uint64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int64_t _MAV_RETURN_int64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline float _MAV_RETURN_float(const mavlink_message_t *msg, uint8_t ofs) { return *(const float *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline double _MAV_RETURN_double(const mavlink_message_t *msg, uint8_t ofs) { return *(const double *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}


static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value,
           uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_uint8_t_array(const mavlink_message_t *msg, uint8_t *value,
       uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_int8_t_array(const mavlink_message_t *msg, int8_t *value,
             uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}
# 325 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../protocol.h"
static inline uint16_t _MAV_RETURN_uint16_t_array(const mavlink_message_t *msg, uint16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint16_t)); return array_length*sizeof(uint16_t); }
static inline uint16_t _MAV_RETURN_uint32_t_array(const mavlink_message_t *msg, uint32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint32_t)); return array_length*sizeof(uint32_t); }
static inline uint16_t _MAV_RETURN_uint64_t_array(const mavlink_message_t *msg, uint64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint64_t)); return array_length*sizeof(uint64_t); }
static inline uint16_t _MAV_RETURN_int16_t_array(const mavlink_message_t *msg, int16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int16_t)); return array_length*sizeof(int16_t); }
static inline uint16_t _MAV_RETURN_int32_t_array(const mavlink_message_t *msg, int32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int32_t)); return array_length*sizeof(int32_t); }
static inline uint16_t _MAV_RETURN_int64_t_array(const mavlink_message_t *msg, int64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int64_t)); return array_length*sizeof(int64_t); }
static inline uint16_t _MAV_RETURN_float_array(const mavlink_message_t *msg, float *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(float)); return array_length*sizeof(float); }
static inline uint16_t _MAV_RETURN_double_array(const mavlink_message_t *msg, double *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(double)); return array_length*sizeof(double); }
# 31 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 40 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h"
typedef enum ACCELCAL_VEHICLE_POS
{
   ACCELCAL_VEHICLE_POS_LEVEL=1,
   ACCELCAL_VEHICLE_POS_LEFT=2,
   ACCELCAL_VEHICLE_POS_RIGHT=3,
   ACCELCAL_VEHICLE_POS_NOSEDOWN=4,
   ACCELCAL_VEHICLE_POS_NOSEUP=5,
   ACCELCAL_VEHICLE_POS_BACK=6,
   ACCELCAL_VEHICLE_POS_SUCCESS=16777215,
   ACCELCAL_VEHICLE_POS_FAILED=16777216,
   ACCELCAL_VEHICLE_POS_ENUM_END=16777217,
} ACCELCAL_VEHICLE_POS;





typedef enum MAV_CMD
{
   MAV_CMD_NAV_WAYPOINT=16,
   MAV_CMD_NAV_LOITER_UNLIM=17,
   MAV_CMD_NAV_LOITER_TURNS=18,
   MAV_CMD_NAV_LOITER_TIME=19,
   MAV_CMD_NAV_RETURN_TO_LAUNCH=20,
   MAV_CMD_NAV_LAND=21,
   MAV_CMD_NAV_TAKEOFF=22,
   MAV_CMD_NAV_LAND_LOCAL=23,
   MAV_CMD_NAV_TAKEOFF_LOCAL=24,
   MAV_CMD_NAV_FOLLOW=25,
   MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT=30,
   MAV_CMD_NAV_LOITER_TO_ALT=31,
   MAV_CMD_DO_FOLLOW=32,
   MAV_CMD_DO_FOLLOW_REPOSITION=33,
   MAV_CMD_NAV_ROI=80,
   MAV_CMD_NAV_PATHPLANNING=81,
   MAV_CMD_NAV_SPLINE_WAYPOINT=82,
   MAV_CMD_NAV_ALTITUDE_WAIT=83,
   MAV_CMD_NAV_VTOL_TAKEOFF=84,
   MAV_CMD_NAV_VTOL_LAND=85,
   MAV_CMD_NAV_GUIDED_ENABLE=92,
   MAV_CMD_NAV_DELAY=93,
   MAV_CMD_NAV_PAYLOAD_PLACE=94,
   MAV_CMD_NAV_LAST=95,
   MAV_CMD_CONDITION_DELAY=112,
   MAV_CMD_CONDITION_CHANGE_ALT=113,
   MAV_CMD_CONDITION_DISTANCE=114,
   MAV_CMD_CONDITION_YAW=115,
   MAV_CMD_CONDITION_LAST=159,
   MAV_CMD_DO_SET_MODE=176,
   MAV_CMD_DO_JUMP=177,
   MAV_CMD_DO_CHANGE_SPEED=178,
   MAV_CMD_DO_SET_HOME=179,
   MAV_CMD_DO_SET_PARAMETER=180,
   MAV_CMD_DO_SET_RELAY=181,
   MAV_CMD_DO_REPEAT_RELAY=182,
   MAV_CMD_DO_SET_SERVO=183,
   MAV_CMD_DO_REPEAT_SERVO=184,
   MAV_CMD_DO_FLIGHTTERMINATION=185,
   MAV_CMD_DO_CHANGE_ALTITUDE=186,
   MAV_CMD_DO_LAND_START=189,
   MAV_CMD_DO_RALLY_LAND=190,
   MAV_CMD_DO_GO_AROUND=191,
   MAV_CMD_DO_REPOSITION=192,
   MAV_CMD_DO_PAUSE_CONTINUE=193,
   MAV_CMD_DO_SET_REVERSE=194,
   MAV_CMD_DO_CONTROL_VIDEO=200,
   MAV_CMD_DO_SET_ROI=201,
   MAV_CMD_DO_DIGICAM_CONFIGURE=202,
   MAV_CMD_DO_DIGICAM_CONTROL=203,
   MAV_CMD_DO_MOUNT_CONFIGURE=204,
   MAV_CMD_DO_MOUNT_CONTROL=205,
   MAV_CMD_DO_SET_CAM_TRIGG_DIST=206,
   MAV_CMD_DO_FENCE_ENABLE=207,
   MAV_CMD_DO_PARACHUTE=208,
   MAV_CMD_DO_MOTOR_TEST=209,
   MAV_CMD_DO_INVERTED_FLIGHT=210,
   MAV_CMD_DO_GRIPPER=211,
   MAV_CMD_DO_AUTOTUNE_ENABLE=212,
   MAV_CMD_NAV_SET_YAW_SPEED=213,
   MAV_CMD_DO_MOUNT_CONTROL_QUAT=220,
   MAV_CMD_DO_GUIDED_MASTER=221,
   MAV_CMD_DO_GUIDED_LIMITS=222,
   MAV_CMD_DO_ENGINE_CONTROL=223,
   MAV_CMD_DO_LAST=240,
   MAV_CMD_PREFLIGHT_CALIBRATION=241,
   MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS=242,
   MAV_CMD_PREFLIGHT_UAVCAN=243,
   MAV_CMD_PREFLIGHT_STORAGE=245,
   MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN=246,
   MAV_CMD_OVERRIDE_GOTO=252,
   MAV_CMD_MISSION_START=300,
   MAV_CMD_COMPONENT_ARM_DISARM=400,
   MAV_CMD_GET_HOME_POSITION=410,
   MAV_CMD_START_RX_PAIR=500,
   MAV_CMD_GET_MESSAGE_INTERVAL=510,
   MAV_CMD_SET_MESSAGE_INTERVAL=511,
   MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES=520,
   MAV_CMD_REQUEST_CAMERA_INFORMATION=521,
   MAV_CMD_REQUEST_CAMERA_SETTINGS=522,
   MAV_CMD_SET_CAMERA_SETTINGS_1=523,
   MAV_CMD_SET_CAMERA_SETTINGS_2=524,
   MAV_CMD_REQUEST_STORAGE_INFORMATION=525,
   MAV_CMD_STORAGE_FORMAT=526,
   MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS=527,
   MAV_CMD_REQUEST_FLIGHT_INFORMATION=528,
   MAV_CMD_IMAGE_START_CAPTURE=2000,
   MAV_CMD_IMAGE_STOP_CAPTURE=2001,
   MAV_CMD_DO_TRIGGER_CONTROL=2003,
   MAV_CMD_VIDEO_START_CAPTURE=2500,
   MAV_CMD_VIDEO_STOP_CAPTURE=2501,
   MAV_CMD_LOGGING_START=2510,
   MAV_CMD_LOGGING_STOP=2511,
   MAV_CMD_AIRFRAME_CONFIGURATION=2520,
   MAV_CMD_PANORAMA_CREATE=2800,
   MAV_CMD_DO_VTOL_TRANSITION=3000,
   MAV_CMD_SET_GUIDED_SUBMODE_STANDARD=4000,

   MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE=4001,

   MAV_CMD_NAV_FENCE_RETURN_POINT=5000,

   MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION=5001,

   MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION=5002,

   MAV_CMD_NAV_RALLY_POINT=5100,

   MAV_CMD_PAYLOAD_PREPARE_DEPLOY=30001,
   MAV_CMD_PAYLOAD_CONTROL_DEPLOY=30002,
   MAV_CMD_WAYPOINT_USER_1=31000,
   MAV_CMD_WAYPOINT_USER_2=31001,
   MAV_CMD_WAYPOINT_USER_3=31002,
   MAV_CMD_WAYPOINT_USER_4=31003,
   MAV_CMD_WAYPOINT_USER_5=31004,
   MAV_CMD_SPATIAL_USER_1=31005,
   MAV_CMD_SPATIAL_USER_2=31006,
   MAV_CMD_SPATIAL_USER_3=31007,
   MAV_CMD_SPATIAL_USER_4=31008,
   MAV_CMD_SPATIAL_USER_5=31009,
   MAV_CMD_USER_1=31010,
   MAV_CMD_USER_2=31011,
   MAV_CMD_USER_3=31012,
   MAV_CMD_USER_4=31013,
   MAV_CMD_USER_5=31014,
   MAV_CMD_POWER_OFF_INITIATED=42000,
   MAV_CMD_SOLO_BTN_FLY_CLICK=42001,
   MAV_CMD_SOLO_BTN_FLY_HOLD=42002,
   MAV_CMD_SOLO_BTN_PAUSE_CLICK=42003,
   MAV_CMD_FIXED_MAG_CAL=42004,

   MAV_CMD_FIXED_MAG_CAL_FIELD=42005,
   MAV_CMD_DO_START_MAG_CAL=42424,
   MAV_CMD_DO_ACCEPT_MAG_CAL=42425,
   MAV_CMD_DO_CANCEL_MAG_CAL=42426,
   MAV_CMD_SET_FACTORY_TEST_MODE=42427,
   MAV_CMD_DO_SEND_BANNER=42428,
   MAV_CMD_ACCELCAL_VEHICLE_POS=42429,
   MAV_CMD_GIMBAL_RESET=42501,
   MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS=42502,
   MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION=42503,
   MAV_CMD_GIMBAL_FULL_RESET=42505,
   MAV_CMD_DO_WINCH=42600,
   MAV_CMD_ENUM_END=42601,
} MAV_CMD;





typedef enum LIMITS_STATE
{
   LIMITS_INIT=0,
   LIMITS_DISABLED=1,
   LIMITS_ENABLED=2,
   LIMITS_TRIGGERED=3,
   LIMITS_RECOVERING=4,
   LIMITS_RECOVERED=5,
   LIMITS_STATE_ENUM_END=6,
} LIMITS_STATE;





typedef enum LIMIT_MODULE
{
   LIMIT_GPSLOCK=1,
   LIMIT_GEOFENCE=2,
   LIMIT_ALTITUDE=4,
   LIMIT_MODULE_ENUM_END=5,
} LIMIT_MODULE;





typedef enum RALLY_FLAGS
{
   FAVORABLE_WIND=1,
   LAND_IMMEDIATELY=2,
   RALLY_FLAGS_ENUM_END=3,
} RALLY_FLAGS;





typedef enum PARACHUTE_ACTION
{
   PARACHUTE_DISABLE=0,
   PARACHUTE_ENABLE=1,
   PARACHUTE_RELEASE=2,
   PARACHUTE_ACTION_ENUM_END=3,
} PARACHUTE_ACTION;





typedef enum GRIPPER_ACTIONS
{
   GRIPPER_ACTION_RELEASE=0,
   GRIPPER_ACTION_GRAB=1,
   GRIPPER_ACTIONS_ENUM_END=2,
} GRIPPER_ACTIONS;





typedef enum WINCH_ACTIONS
{
   WINCH_RELAXED=0,
   WINCH_RELATIVE_LENGTH_CONTROL=1,
   WINCH_RATE_CONTROL=2,
   WINCH_ACTIONS_ENUM_END=3,
} WINCH_ACTIONS;





typedef enum CAMERA_STATUS_TYPES
{
   CAMERA_STATUS_TYPE_HEARTBEAT=0,
   CAMERA_STATUS_TYPE_TRIGGER=1,
   CAMERA_STATUS_TYPE_DISCONNECT=2,
   CAMERA_STATUS_TYPE_ERROR=3,
   CAMERA_STATUS_TYPE_LOWBATT=4,
   CAMERA_STATUS_TYPE_LOWSTORE=5,
   CAMERA_STATUS_TYPE_LOWSTOREV=6,
   CAMERA_STATUS_TYPES_ENUM_END=7,
} CAMERA_STATUS_TYPES;





typedef enum CAMERA_FEEDBACK_FLAGS
{
   CAMERA_FEEDBACK_PHOTO=0,
   CAMERA_FEEDBACK_VIDEO=1,
   CAMERA_FEEDBACK_BADEXPOSURE=2,
   CAMERA_FEEDBACK_CLOSEDLOOP=3,
   CAMERA_FEEDBACK_OPENLOOP=4,
   CAMERA_FEEDBACK_FLAGS_ENUM_END=5,
} CAMERA_FEEDBACK_FLAGS;





typedef enum MAV_MODE_GIMBAL
{
   MAV_MODE_GIMBAL_UNINITIALIZED=0,
   MAV_MODE_GIMBAL_CALIBRATING_PITCH=1,
   MAV_MODE_GIMBAL_CALIBRATING_ROLL=2,
   MAV_MODE_GIMBAL_CALIBRATING_YAW=3,
   MAV_MODE_GIMBAL_INITIALIZED=4,
   MAV_MODE_GIMBAL_ACTIVE=5,
   MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT=6,
   MAV_MODE_GIMBAL_ENUM_END=7,
} MAV_MODE_GIMBAL;





typedef enum GIMBAL_AXIS
{
   GIMBAL_AXIS_YAW=0,
   GIMBAL_AXIS_PITCH=1,
   GIMBAL_AXIS_ROLL=2,
   GIMBAL_AXIS_ENUM_END=3,
} GIMBAL_AXIS;





typedef enum GIMBAL_AXIS_CALIBRATION_STATUS
{
   GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS=0,
   GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED=1,
   GIMBAL_AXIS_CALIBRATION_STATUS_FAILED=2,
   GIMBAL_AXIS_CALIBRATION_STATUS_ENUM_END=3,
} GIMBAL_AXIS_CALIBRATION_STATUS;





typedef enum GIMBAL_AXIS_CALIBRATION_REQUIRED
{
   GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN=0,
   GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE=1,
   GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE=2,
   GIMBAL_AXIS_CALIBRATION_REQUIRED_ENUM_END=3,
} GIMBAL_AXIS_CALIBRATION_REQUIRED;





typedef enum GOPRO_HEARTBEAT_STATUS
{
   GOPRO_HEARTBEAT_STATUS_DISCONNECTED=0,
   GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE=1,
   GOPRO_HEARTBEAT_STATUS_CONNECTED=2,
   GOPRO_HEARTBEAT_STATUS_ERROR=3,
   GOPRO_HEARTBEAT_STATUS_ENUM_END=4,
} GOPRO_HEARTBEAT_STATUS;





typedef enum GOPRO_HEARTBEAT_FLAGS
{
   GOPRO_FLAG_RECORDING=1,
   GOPRO_HEARTBEAT_FLAGS_ENUM_END=2,
} GOPRO_HEARTBEAT_FLAGS;





typedef enum GOPRO_REQUEST_STATUS
{
   GOPRO_REQUEST_SUCCESS=0,
   GOPRO_REQUEST_FAILED=1,
   GOPRO_REQUEST_STATUS_ENUM_END=2,
} GOPRO_REQUEST_STATUS;





typedef enum GOPRO_COMMAND
{
   GOPRO_COMMAND_POWER=0,
   GOPRO_COMMAND_CAPTURE_MODE=1,
   GOPRO_COMMAND_SHUTTER=2,
   GOPRO_COMMAND_BATTERY=3,
   GOPRO_COMMAND_MODEL=4,
   GOPRO_COMMAND_VIDEO_SETTINGS=5,
   GOPRO_COMMAND_LOW_LIGHT=6,
   GOPRO_COMMAND_PHOTO_RESOLUTION=7,
   GOPRO_COMMAND_PHOTO_BURST_RATE=8,
   GOPRO_COMMAND_PROTUNE=9,
   GOPRO_COMMAND_PROTUNE_WHITE_BALANCE=10,
   GOPRO_COMMAND_PROTUNE_COLOUR=11,
   GOPRO_COMMAND_PROTUNE_GAIN=12,
   GOPRO_COMMAND_PROTUNE_SHARPNESS=13,
   GOPRO_COMMAND_PROTUNE_EXPOSURE=14,
   GOPRO_COMMAND_TIME=15,
   GOPRO_COMMAND_CHARGING=16,
   GOPRO_COMMAND_ENUM_END=17,
} GOPRO_COMMAND;





typedef enum GOPRO_CAPTURE_MODE
{
   GOPRO_CAPTURE_MODE_VIDEO=0,
   GOPRO_CAPTURE_MODE_PHOTO=1,
   GOPRO_CAPTURE_MODE_BURST=2,
   GOPRO_CAPTURE_MODE_TIME_LAPSE=3,
   GOPRO_CAPTURE_MODE_MULTI_SHOT=4,
   GOPRO_CAPTURE_MODE_PLAYBACK=5,
   GOPRO_CAPTURE_MODE_SETUP=6,
   GOPRO_CAPTURE_MODE_UNKNOWN=255,
   GOPRO_CAPTURE_MODE_ENUM_END=256,
} GOPRO_CAPTURE_MODE;





typedef enum GOPRO_RESOLUTION
{
   GOPRO_RESOLUTION_480p=0,
   GOPRO_RESOLUTION_720p=1,
   GOPRO_RESOLUTION_960p=2,
   GOPRO_RESOLUTION_1080p=3,
   GOPRO_RESOLUTION_1440p=4,
   GOPRO_RESOLUTION_2_7k_17_9=5,
   GOPRO_RESOLUTION_2_7k_16_9=6,
   GOPRO_RESOLUTION_2_7k_4_3=7,
   GOPRO_RESOLUTION_4k_16_9=8,
   GOPRO_RESOLUTION_4k_17_9=9,
   GOPRO_RESOLUTION_720p_SUPERVIEW=10,
   GOPRO_RESOLUTION_1080p_SUPERVIEW=11,
   GOPRO_RESOLUTION_2_7k_SUPERVIEW=12,
   GOPRO_RESOLUTION_4k_SUPERVIEW=13,
   GOPRO_RESOLUTION_ENUM_END=14,
} GOPRO_RESOLUTION;





typedef enum GOPRO_FRAME_RATE
{
   GOPRO_FRAME_RATE_12=0,
   GOPRO_FRAME_RATE_15=1,
   GOPRO_FRAME_RATE_24=2,
   GOPRO_FRAME_RATE_25=3,
   GOPRO_FRAME_RATE_30=4,
   GOPRO_FRAME_RATE_48=5,
   GOPRO_FRAME_RATE_50=6,
   GOPRO_FRAME_RATE_60=7,
   GOPRO_FRAME_RATE_80=8,
   GOPRO_FRAME_RATE_90=9,
   GOPRO_FRAME_RATE_100=10,
   GOPRO_FRAME_RATE_120=11,
   GOPRO_FRAME_RATE_240=12,
   GOPRO_FRAME_RATE_12_5=13,
   GOPRO_FRAME_RATE_ENUM_END=14,
} GOPRO_FRAME_RATE;





typedef enum GOPRO_FIELD_OF_VIEW
{
   GOPRO_FIELD_OF_VIEW_WIDE=0,
   GOPRO_FIELD_OF_VIEW_MEDIUM=1,
   GOPRO_FIELD_OF_VIEW_NARROW=2,
   GOPRO_FIELD_OF_VIEW_ENUM_END=3,
} GOPRO_FIELD_OF_VIEW;





typedef enum GOPRO_VIDEO_SETTINGS_FLAGS
{
   GOPRO_VIDEO_SETTINGS_TV_MODE=1,
   GOPRO_VIDEO_SETTINGS_FLAGS_ENUM_END=2,
} GOPRO_VIDEO_SETTINGS_FLAGS;





typedef enum GOPRO_PHOTO_RESOLUTION
{
   GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM=0,
   GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM=1,
   GOPRO_PHOTO_RESOLUTION_7MP_WIDE=2,
   GOPRO_PHOTO_RESOLUTION_10MP_WIDE=3,
   GOPRO_PHOTO_RESOLUTION_12MP_WIDE=4,
   GOPRO_PHOTO_RESOLUTION_ENUM_END=5,
} GOPRO_PHOTO_RESOLUTION;





typedef enum GOPRO_PROTUNE_WHITE_BALANCE
{
   GOPRO_PROTUNE_WHITE_BALANCE_AUTO=0,
   GOPRO_PROTUNE_WHITE_BALANCE_3000K=1,
   GOPRO_PROTUNE_WHITE_BALANCE_5500K=2,
   GOPRO_PROTUNE_WHITE_BALANCE_6500K=3,
   GOPRO_PROTUNE_WHITE_BALANCE_RAW=4,
   GOPRO_PROTUNE_WHITE_BALANCE_ENUM_END=5,
} GOPRO_PROTUNE_WHITE_BALANCE;





typedef enum GOPRO_PROTUNE_COLOUR
{
   GOPRO_PROTUNE_COLOUR_STANDARD=0,
   GOPRO_PROTUNE_COLOUR_NEUTRAL=1,
   GOPRO_PROTUNE_COLOUR_ENUM_END=2,
} GOPRO_PROTUNE_COLOUR;





typedef enum GOPRO_PROTUNE_GAIN
{
   GOPRO_PROTUNE_GAIN_400=0,
   GOPRO_PROTUNE_GAIN_800=1,
   GOPRO_PROTUNE_GAIN_1600=2,
   GOPRO_PROTUNE_GAIN_3200=3,
   GOPRO_PROTUNE_GAIN_6400=4,
   GOPRO_PROTUNE_GAIN_ENUM_END=5,
} GOPRO_PROTUNE_GAIN;





typedef enum GOPRO_PROTUNE_SHARPNESS
{
   GOPRO_PROTUNE_SHARPNESS_LOW=0,
   GOPRO_PROTUNE_SHARPNESS_MEDIUM=1,
   GOPRO_PROTUNE_SHARPNESS_HIGH=2,
   GOPRO_PROTUNE_SHARPNESS_ENUM_END=3,
} GOPRO_PROTUNE_SHARPNESS;





typedef enum GOPRO_PROTUNE_EXPOSURE
{
   GOPRO_PROTUNE_EXPOSURE_NEG_5_0=0,
   GOPRO_PROTUNE_EXPOSURE_NEG_4_5=1,
   GOPRO_PROTUNE_EXPOSURE_NEG_4_0=2,
   GOPRO_PROTUNE_EXPOSURE_NEG_3_5=3,
   GOPRO_PROTUNE_EXPOSURE_NEG_3_0=4,
   GOPRO_PROTUNE_EXPOSURE_NEG_2_5=5,
   GOPRO_PROTUNE_EXPOSURE_NEG_2_0=6,
   GOPRO_PROTUNE_EXPOSURE_NEG_1_5=7,
   GOPRO_PROTUNE_EXPOSURE_NEG_1_0=8,
   GOPRO_PROTUNE_EXPOSURE_NEG_0_5=9,
   GOPRO_PROTUNE_EXPOSURE_ZERO=10,
   GOPRO_PROTUNE_EXPOSURE_POS_0_5=11,
   GOPRO_PROTUNE_EXPOSURE_POS_1_0=12,
   GOPRO_PROTUNE_EXPOSURE_POS_1_5=13,
   GOPRO_PROTUNE_EXPOSURE_POS_2_0=14,
   GOPRO_PROTUNE_EXPOSURE_POS_2_5=15,
   GOPRO_PROTUNE_EXPOSURE_POS_3_0=16,
   GOPRO_PROTUNE_EXPOSURE_POS_3_5=17,
   GOPRO_PROTUNE_EXPOSURE_POS_4_0=18,
   GOPRO_PROTUNE_EXPOSURE_POS_4_5=19,
   GOPRO_PROTUNE_EXPOSURE_POS_5_0=20,
   GOPRO_PROTUNE_EXPOSURE_ENUM_END=21,
} GOPRO_PROTUNE_EXPOSURE;





typedef enum GOPRO_CHARGING
{
   GOPRO_CHARGING_DISABLED=0,
   GOPRO_CHARGING_ENABLED=1,
   GOPRO_CHARGING_ENUM_END=2,
} GOPRO_CHARGING;





typedef enum GOPRO_MODEL
{
   GOPRO_MODEL_UNKNOWN=0,
   GOPRO_MODEL_HERO_3_PLUS_SILVER=1,
   GOPRO_MODEL_HERO_3_PLUS_BLACK=2,
   GOPRO_MODEL_HERO_4_SILVER=3,
   GOPRO_MODEL_HERO_4_BLACK=4,
   GOPRO_MODEL_ENUM_END=5,
} GOPRO_MODEL;





typedef enum GOPRO_BURST_RATE
{
   GOPRO_BURST_RATE_3_IN_1_SECOND=0,
   GOPRO_BURST_RATE_5_IN_1_SECOND=1,
   GOPRO_BURST_RATE_10_IN_1_SECOND=2,
   GOPRO_BURST_RATE_10_IN_2_SECOND=3,
   GOPRO_BURST_RATE_10_IN_3_SECOND=4,
   GOPRO_BURST_RATE_30_IN_1_SECOND=5,
   GOPRO_BURST_RATE_30_IN_2_SECOND=6,
   GOPRO_BURST_RATE_30_IN_3_SECOND=7,
   GOPRO_BURST_RATE_30_IN_6_SECOND=8,
   GOPRO_BURST_RATE_ENUM_END=9,
} GOPRO_BURST_RATE;





typedef enum LED_CONTROL_PATTERN
{
   LED_CONTROL_PATTERN_OFF=0,
   LED_CONTROL_PATTERN_FIRMWAREUPDATE=1,
   LED_CONTROL_PATTERN_CUSTOM=255,
   LED_CONTROL_PATTERN_ENUM_END=256,
} LED_CONTROL_PATTERN;





typedef enum EKF_STATUS_FLAGS
{
   EKF_ATTITUDE=1,
   EKF_VELOCITY_HORIZ=2,
   EKF_VELOCITY_VERT=4,
   EKF_POS_HORIZ_REL=8,
   EKF_POS_HORIZ_ABS=16,
   EKF_POS_VERT_ABS=32,
   EKF_POS_VERT_AGL=64,
   EKF_CONST_POS_MODE=128,
   EKF_PRED_POS_HORIZ_REL=256,
   EKF_PRED_POS_HORIZ_ABS=512,
   EKF_STATUS_FLAGS_ENUM_END=513,
} EKF_STATUS_FLAGS;





typedef enum PID_TUNING_AXIS
{
   PID_TUNING_ROLL=1,
   PID_TUNING_PITCH=2,
   PID_TUNING_YAW=3,
   PID_TUNING_ACCZ=4,
   PID_TUNING_STEER=5,
   PID_TUNING_LANDING=6,
   PID_TUNING_AXIS_ENUM_END=7,
} PID_TUNING_AXIS;





typedef enum MAG_CAL_STATUS
{
   MAG_CAL_NOT_STARTED=0,
   MAG_CAL_WAITING_TO_START=1,
   MAG_CAL_RUNNING_STEP_ONE=2,
   MAG_CAL_RUNNING_STEP_TWO=3,
   MAG_CAL_SUCCESS=4,
   MAG_CAL_FAILED=5,
   MAG_CAL_STATUS_ENUM_END=6,
} MAG_CAL_STATUS;





typedef enum MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS
{
   MAV_REMOTE_LOG_DATA_BLOCK_STOP=2147483645,
   MAV_REMOTE_LOG_DATA_BLOCK_START=2147483646,
   MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS_ENUM_END=2147483647,
} MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS;





typedef enum MAV_REMOTE_LOG_DATA_BLOCK_STATUSES
{
   MAV_REMOTE_LOG_DATA_BLOCK_NACK=0,
   MAV_REMOTE_LOG_DATA_BLOCK_ACK=1,
   MAV_REMOTE_LOG_DATA_BLOCK_STATUSES_ENUM_END=2,
} MAV_REMOTE_LOG_DATA_BLOCK_STATUSES;





typedef enum DEVICE_OP_BUSTYPE
{
   DEVICE_OP_BUSTYPE_I2C=0,
   DEVICE_OP_BUSTYPE_SPI=1,
   DEVICE_OP_BUSTYPE_ENUM_END=2,
} DEVICE_OP_BUSTYPE;





typedef enum DEEPSTALL_STAGE
{
   DEEPSTALL_STAGE_FLY_TO_LANDING=0,
   DEEPSTALL_STAGE_ESTIMATE_WIND=1,
   DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT=2,
   DEEPSTALL_STAGE_FLY_TO_ARC=3,
   DEEPSTALL_STAGE_ARC=4,
   DEEPSTALL_STAGE_APPROACH=5,
   DEEPSTALL_STAGE_LAND=6,
   DEEPSTALL_STAGE_ENUM_END=7,
} DEEPSTALL_STAGE;
# 766 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h"
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h" 1
       




typedef struct __mavlink_sensor_offsets_t { float mag_declination; int32_t raw_press; int32_t raw_temp; float gyro_cal_x; float gyro_cal_y; float gyro_cal_z; float accel_cal_x; float accel_cal_y; float accel_cal_z; int16_t mag_ofs_x; int16_t mag_ofs_y; int16_t mag_ofs_z; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
   mavlink_sensor_offsets_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline uint16_t mavlink_msg_sensor_offsets_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int16_t mag_ofs_x, int16_t mag_ofs_y, int16_t mag_ofs_z, float mag_declination, int32_t raw_press, int32_t raw_temp, float gyro_cal_x, float gyro_cal_y, float gyro_cal_z, float accel_cal_x, float accel_cal_y, float accel_cal_z)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
    mavlink_sensor_offsets_t packet;
    packet.mag_declination = mag_declination;
    packet.raw_press = raw_press;
    packet.raw_temp = raw_temp;
    packet.gyro_cal_x = gyro_cal_x;
    packet.gyro_cal_y = gyro_cal_y;
    packet.gyro_cal_z = gyro_cal_z;
    packet.accel_cal_x = accel_cal_x;
    packet.accel_cal_y = accel_cal_y;
    packet.accel_cal_z = accel_cal_z;
    packet.mag_ofs_x = mag_ofs_x;
    packet.mag_ofs_y = mag_ofs_y;
    packet.mag_ofs_z = mag_ofs_z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 150;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 134);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline uint16_t mavlink_msg_sensor_offsets_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int16_t mag_ofs_x,int16_t mag_ofs_y,int16_t mag_ofs_z,float mag_declination,int32_t raw_press,int32_t raw_temp,float gyro_cal_x,float gyro_cal_y,float gyro_cal_z,float accel_cal_x,float accel_cal_y,float accel_cal_z)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
    mavlink_sensor_offsets_t packet;
    packet.mag_declination = mag_declination;
    packet.raw_press = raw_press;
    packet.raw_temp = raw_temp;
    packet.gyro_cal_x = gyro_cal_x;
    packet.gyro_cal_y = gyro_cal_y;
    packet.gyro_cal_z = gyro_cal_z;
    packet.accel_cal_x = accel_cal_x;
    packet.accel_cal_y = accel_cal_y;
    packet.accel_cal_z = accel_cal_z;
    packet.mag_ofs_x = mag_ofs_x;
    packet.mag_ofs_y = mag_ofs_y;
    packet.mag_ofs_z = mag_ofs_z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 150;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 134);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline uint16_t mavlink_msg_sensor_offsets_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sensor_offsets_t* sensor_offsets)
{
    return mavlink_msg_sensor_offsets_pack(system_id, component_id, msg, sensor_offsets->mag_ofs_x, sensor_offsets->mag_ofs_y, sensor_offsets->mag_ofs_z, sensor_offsets->mag_declination, sensor_offsets->raw_press, sensor_offsets->raw_temp, sensor_offsets->gyro_cal_x, sensor_offsets->gyro_cal_y, sensor_offsets->gyro_cal_z, sensor_offsets->accel_cal_x, sensor_offsets->accel_cal_y, sensor_offsets->accel_cal_z);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline uint16_t mavlink_msg_sensor_offsets_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sensor_offsets_t* sensor_offsets)
{
    return mavlink_msg_sensor_offsets_pack_chan(system_id, component_id, chan, msg, sensor_offsets->mag_ofs_x, sensor_offsets->mag_ofs_y, sensor_offsets->mag_ofs_z, sensor_offsets->mag_declination, sensor_offsets->raw_press, sensor_offsets->raw_temp, sensor_offsets->gyro_cal_x, sensor_offsets->gyro_cal_y, sensor_offsets->gyro_cal_z, sensor_offsets->accel_cal_x, sensor_offsets->accel_cal_y, sensor_offsets->accel_cal_z);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline void mavlink_msg_sensor_offsets_send(mavlink_channel_t chan, int16_t mag_ofs_x, int16_t mag_ofs_y, int16_t mag_ofs_z, float mag_declination, int32_t raw_press, int32_t raw_temp, float gyro_cal_x, float gyro_cal_y, float gyro_cal_z, float accel_cal_x, float accel_cal_y, float accel_cal_z)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
    mavlink_sensor_offsets_t packet;
    packet.mag_declination = mag_declination;
    packet.raw_press = raw_press;
    packet.raw_temp = raw_temp;
    packet.gyro_cal_x = gyro_cal_x;
    packet.gyro_cal_y = gyro_cal_y;
    packet.gyro_cal_z = gyro_cal_z;
    packet.accel_cal_x = accel_cal_x;
    packet.accel_cal_y = accel_cal_y;
    packet.accel_cal_z = accel_cal_z;
    packet.mag_ofs_x = mag_ofs_x;
    packet.mag_ofs_y = mag_ofs_y;
    packet.mag_ofs_z = mag_ofs_z;

    _mav_finalize_message_chan_send(chan, 150, (const char *)&packet, 42, 42, 134);

}






static inline void mavlink_msg_sensor_offsets_send_struct(mavlink_channel_t chan, const mavlink_sensor_offsets_t* sensor_offsets)
{



    _mav_finalize_message_chan_send(chan, 150, (const char *)sensor_offsets, 42, 42, 134);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline void mavlink_msg_sensor_offsets_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int16_t mag_ofs_x, int16_t mag_ofs_y, int16_t mag_ofs_z, float mag_declination, int32_t raw_press, int32_t raw_temp, float gyro_cal_x, float gyro_cal_y, float gyro_cal_z, float accel_cal_x, float accel_cal_y, float accel_cal_z)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
    mavlink_sensor_offsets_t *packet = (mavlink_sensor_offsets_t *)msgbuf;
    packet->mag_declination = mag_declination;
    packet->raw_press = raw_press;
    packet->raw_temp = raw_temp;
    packet->gyro_cal_x = gyro_cal_x;
    packet->gyro_cal_y = gyro_cal_y;
    packet->gyro_cal_z = gyro_cal_z;
    packet->accel_cal_x = accel_cal_x;
    packet->accel_cal_y = accel_cal_y;
    packet->accel_cal_z = accel_cal_z;
    packet->mag_ofs_x = mag_ofs_x;
    packet->mag_ofs_y = mag_ofs_y;
    packet->mag_ofs_z = mag_ofs_z;

    _mav_finalize_message_chan_send(chan, 150, (const char *)packet, 42, 42, 134);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
static inline int16_t mavlink_msg_sensor_offsets_get_mag_ofs_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 36);
}






static inline int16_t mavlink_msg_sensor_offsets_get_mag_ofs_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 38);
}






static inline int16_t mavlink_msg_sensor_offsets_get_mag_ofs_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 40);
}






static inline float mavlink_msg_sensor_offsets_get_mag_declination(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline int32_t mavlink_msg_sensor_offsets_get_raw_press(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_sensor_offsets_get_raw_temp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_sensor_offsets_get_gyro_cal_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_sensor_offsets_get_gyro_cal_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_sensor_offsets_get_gyro_cal_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_sensor_offsets_get_accel_cal_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_sensor_offsets_get_accel_cal_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_sensor_offsets_get_accel_cal_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_sensor_offsets_decode(const mavlink_message_t* msg, mavlink_sensor_offsets_t* sensor_offsets)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_sensor_offsets.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(sensor_offsets, 0, 42);
    memcpy(sensor_offsets, ((const char *)(&((msg)->payload64[0]))), len);

}
# 767 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h" 1
       




typedef struct __mavlink_set_mag_offsets_t { int16_t mag_ofs_x; int16_t mag_ofs_y; int16_t mag_ofs_z; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_set_mag_offsets_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline uint16_t mavlink_msg_set_mag_offsets_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int16_t mag_ofs_x, int16_t mag_ofs_y, int16_t mag_ofs_z)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
    mavlink_set_mag_offsets_t packet;
    packet.mag_ofs_x = mag_ofs_x;
    packet.mag_ofs_y = mag_ofs_y;
    packet.mag_ofs_z = mag_ofs_z;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 151;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 219);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline uint16_t mavlink_msg_set_mag_offsets_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int16_t mag_ofs_x,int16_t mag_ofs_y,int16_t mag_ofs_z)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
    mavlink_set_mag_offsets_t packet;
    packet.mag_ofs_x = mag_ofs_x;
    packet.mag_ofs_y = mag_ofs_y;
    packet.mag_ofs_z = mag_ofs_z;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 151;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 219);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline uint16_t mavlink_msg_set_mag_offsets_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_mag_offsets_t* set_mag_offsets)
{
    return mavlink_msg_set_mag_offsets_pack(system_id, component_id, msg, set_mag_offsets->target_system, set_mag_offsets->target_component, set_mag_offsets->mag_ofs_x, set_mag_offsets->mag_ofs_y, set_mag_offsets->mag_ofs_z);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline uint16_t mavlink_msg_set_mag_offsets_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_mag_offsets_t* set_mag_offsets)
{
    return mavlink_msg_set_mag_offsets_pack_chan(system_id, component_id, chan, msg, set_mag_offsets->target_system, set_mag_offsets->target_component, set_mag_offsets->mag_ofs_x, set_mag_offsets->mag_ofs_y, set_mag_offsets->mag_ofs_z);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline void mavlink_msg_set_mag_offsets_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t mag_ofs_x, int16_t mag_ofs_y, int16_t mag_ofs_z)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
    mavlink_set_mag_offsets_t packet;
    packet.mag_ofs_x = mag_ofs_x;
    packet.mag_ofs_y = mag_ofs_y;
    packet.mag_ofs_z = mag_ofs_z;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 151, (const char *)&packet, 8, 8, 219);

}






static inline void mavlink_msg_set_mag_offsets_send_struct(mavlink_channel_t chan, const mavlink_set_mag_offsets_t* set_mag_offsets)
{



    _mav_finalize_message_chan_send(chan, 151, (const char *)set_mag_offsets, 8, 8, 219);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline void mavlink_msg_set_mag_offsets_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t mag_ofs_x, int16_t mag_ofs_y, int16_t mag_ofs_z)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
    mavlink_set_mag_offsets_t *packet = (mavlink_set_mag_offsets_t *)msgbuf;
    packet->mag_ofs_x = mag_ofs_x;
    packet->mag_ofs_y = mag_ofs_y;
    packet->mag_ofs_z = mag_ofs_z;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 151, (const char *)packet, 8, 8, 219);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_set_mag_offsets.h"
static inline uint8_t mavlink_msg_set_mag_offsets_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_set_mag_offsets_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline int16_t mavlink_msg_set_mag_offsets_get_mag_ofs_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_set_mag_offsets_get_mag_ofs_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}






static inline int16_t mavlink_msg_set_mag_offsets_get_mag_ofs_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}







static inline void mavlink_msg_set_mag_offsets_decode(const mavlink_message_t* msg, mavlink_set_mag_offsets_t* set_mag_offsets)
{







        uint8_t len = msg->len < 8? msg->len : 8;
        memset(set_mag_offsets, 0, 8);
    memcpy(set_mag_offsets, ((const char *)(&((msg)->payload64[0]))), len);

}
# 768 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h" 1
       




typedef struct __mavlink_meminfo_t { uint16_t brkval; uint16_t freemem; uint32_t freemem32; } __attribute__((packed))




   mavlink_meminfo_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline uint16_t mavlink_msg_meminfo_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t brkval, uint16_t freemem, uint32_t freemem32)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
    mavlink_meminfo_t packet;
    packet.brkval = brkval;
    packet.freemem = freemem;
    packet.freemem32 = freemem32;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 152;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 8, 208);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline uint16_t mavlink_msg_meminfo_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t brkval,uint16_t freemem,uint32_t freemem32)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
    mavlink_meminfo_t packet;
    packet.brkval = brkval;
    packet.freemem = freemem;
    packet.freemem32 = freemem32;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 152;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 8, 208);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline uint16_t mavlink_msg_meminfo_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_meminfo_t* meminfo)
{
    return mavlink_msg_meminfo_pack(system_id, component_id, msg, meminfo->brkval, meminfo->freemem, meminfo->freemem32);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline uint16_t mavlink_msg_meminfo_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_meminfo_t* meminfo)
{
    return mavlink_msg_meminfo_pack_chan(system_id, component_id, chan, msg, meminfo->brkval, meminfo->freemem, meminfo->freemem32);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline void mavlink_msg_meminfo_send(mavlink_channel_t chan, uint16_t brkval, uint16_t freemem, uint32_t freemem32)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
    mavlink_meminfo_t packet;
    packet.brkval = brkval;
    packet.freemem = freemem;
    packet.freemem32 = freemem32;

    _mav_finalize_message_chan_send(chan, 152, (const char *)&packet, 4, 8, 208);

}






static inline void mavlink_msg_meminfo_send_struct(mavlink_channel_t chan, const mavlink_meminfo_t* meminfo)
{



    _mav_finalize_message_chan_send(chan, 152, (const char *)meminfo, 4, 8, 208);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline void mavlink_msg_meminfo_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t brkval, uint16_t freemem, uint32_t freemem32)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
    mavlink_meminfo_t *packet = (mavlink_meminfo_t *)msgbuf;
    packet->brkval = brkval;
    packet->freemem = freemem;
    packet->freemem32 = freemem32;

    _mav_finalize_message_chan_send(chan, 152, (const char *)packet, 4, 8, 208);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_meminfo.h"
static inline uint16_t mavlink_msg_meminfo_get_brkval(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_meminfo_get_freemem(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint32_t mavlink_msg_meminfo_get_freemem32(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_meminfo_decode(const mavlink_message_t* msg, mavlink_meminfo_t* meminfo)
{





        uint8_t len = msg->len < 8? msg->len : 8;
        memset(meminfo, 0, 8);
    memcpy(meminfo, ((const char *)(&((msg)->payload64[0]))), len);

}
# 769 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h" 1
       




typedef struct __mavlink_ap_adc_t { uint16_t adc1; uint16_t adc2; uint16_t adc3; uint16_t adc4; uint16_t adc5; uint16_t adc6; } __attribute__((packed))







   mavlink_ap_adc_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline uint16_t mavlink_msg_ap_adc_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t adc1, uint16_t adc2, uint16_t adc3, uint16_t adc4, uint16_t adc5, uint16_t adc6)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
    mavlink_ap_adc_t packet;
    packet.adc1 = adc1;
    packet.adc2 = adc2;
    packet.adc3 = adc3;
    packet.adc4 = adc4;
    packet.adc5 = adc5;
    packet.adc6 = adc6;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 153;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 188);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline uint16_t mavlink_msg_ap_adc_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t adc1,uint16_t adc2,uint16_t adc3,uint16_t adc4,uint16_t adc5,uint16_t adc6)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
    mavlink_ap_adc_t packet;
    packet.adc1 = adc1;
    packet.adc2 = adc2;
    packet.adc3 = adc3;
    packet.adc4 = adc4;
    packet.adc5 = adc5;
    packet.adc6 = adc6;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 153;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 188);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline uint16_t mavlink_msg_ap_adc_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ap_adc_t* ap_adc)
{
    return mavlink_msg_ap_adc_pack(system_id, component_id, msg, ap_adc->adc1, ap_adc->adc2, ap_adc->adc3, ap_adc->adc4, ap_adc->adc5, ap_adc->adc6);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline uint16_t mavlink_msg_ap_adc_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ap_adc_t* ap_adc)
{
    return mavlink_msg_ap_adc_pack_chan(system_id, component_id, chan, msg, ap_adc->adc1, ap_adc->adc2, ap_adc->adc3, ap_adc->adc4, ap_adc->adc5, ap_adc->adc6);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline void mavlink_msg_ap_adc_send(mavlink_channel_t chan, uint16_t adc1, uint16_t adc2, uint16_t adc3, uint16_t adc4, uint16_t adc5, uint16_t adc6)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
    mavlink_ap_adc_t packet;
    packet.adc1 = adc1;
    packet.adc2 = adc2;
    packet.adc3 = adc3;
    packet.adc4 = adc4;
    packet.adc5 = adc5;
    packet.adc6 = adc6;

    _mav_finalize_message_chan_send(chan, 153, (const char *)&packet, 12, 12, 188);

}






static inline void mavlink_msg_ap_adc_send_struct(mavlink_channel_t chan, const mavlink_ap_adc_t* ap_adc)
{



    _mav_finalize_message_chan_send(chan, 153, (const char *)ap_adc, 12, 12, 188);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline void mavlink_msg_ap_adc_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t adc1, uint16_t adc2, uint16_t adc3, uint16_t adc4, uint16_t adc5, uint16_t adc6)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
    mavlink_ap_adc_t *packet = (mavlink_ap_adc_t *)msgbuf;
    packet->adc1 = adc1;
    packet->adc2 = adc2;
    packet->adc3 = adc3;
    packet->adc4 = adc4;
    packet->adc5 = adc5;
    packet->adc6 = adc6;

    _mav_finalize_message_chan_send(chan, 153, (const char *)packet, 12, 12, 188);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
static inline uint16_t mavlink_msg_ap_adc_get_adc1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_ap_adc_get_adc2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_ap_adc_get_adc3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_ap_adc_get_adc4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_ap_adc_get_adc5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_ap_adc_get_adc6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}







static inline void mavlink_msg_ap_adc_decode(const mavlink_message_t* msg, mavlink_ap_adc_t* ap_adc)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ap_adc.h"
        uint8_t len = msg->len < 12? msg->len : 12;
        memset(ap_adc, 0, 12);
    memcpy(ap_adc, ((const char *)(&((msg)->payload64[0]))), len);

}
# 770 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h" 1
       




typedef struct __mavlink_digicam_configure_t { float extra_value; uint16_t shutter_speed; uint8_t target_system; uint8_t target_component; uint8_t mode; uint8_t aperture; uint8_t iso; uint8_t exposure_type; uint8_t command_id; uint8_t engine_cut_off; uint8_t extra_param; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
   mavlink_digicam_configure_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline uint16_t mavlink_msg_digicam_configure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t mode, uint16_t shutter_speed, uint8_t aperture, uint8_t iso, uint8_t exposure_type, uint8_t command_id, uint8_t engine_cut_off, uint8_t extra_param, float extra_value)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
    mavlink_digicam_configure_t packet;
    packet.extra_value = extra_value;
    packet.shutter_speed = shutter_speed;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mode = mode;
    packet.aperture = aperture;
    packet.iso = iso;
    packet.exposure_type = exposure_type;
    packet.command_id = command_id;
    packet.engine_cut_off = engine_cut_off;
    packet.extra_param = extra_param;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 15);


    msg->msgid = 154;
    return mavlink_finalize_message(msg, system_id, component_id, 15, 15, 84);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline uint16_t mavlink_msg_digicam_configure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t mode,uint16_t shutter_speed,uint8_t aperture,uint8_t iso,uint8_t exposure_type,uint8_t command_id,uint8_t engine_cut_off,uint8_t extra_param,float extra_value)
{
# 165 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
    mavlink_digicam_configure_t packet;
    packet.extra_value = extra_value;
    packet.shutter_speed = shutter_speed;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mode = mode;
    packet.aperture = aperture;
    packet.iso = iso;
    packet.exposure_type = exposure_type;
    packet.command_id = command_id;
    packet.engine_cut_off = engine_cut_off;
    packet.extra_param = extra_param;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 15);


    msg->msgid = 154;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 15, 15, 84);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline uint16_t mavlink_msg_digicam_configure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_digicam_configure_t* digicam_configure)
{
    return mavlink_msg_digicam_configure_pack(system_id, component_id, msg, digicam_configure->target_system, digicam_configure->target_component, digicam_configure->mode, digicam_configure->shutter_speed, digicam_configure->aperture, digicam_configure->iso, digicam_configure->exposure_type, digicam_configure->command_id, digicam_configure->engine_cut_off, digicam_configure->extra_param, digicam_configure->extra_value);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline uint16_t mavlink_msg_digicam_configure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_digicam_configure_t* digicam_configure)
{
    return mavlink_msg_digicam_configure_pack_chan(system_id, component_id, chan, msg, digicam_configure->target_system, digicam_configure->target_component, digicam_configure->mode, digicam_configure->shutter_speed, digicam_configure->aperture, digicam_configure->iso, digicam_configure->exposure_type, digicam_configure->command_id, digicam_configure->engine_cut_off, digicam_configure->extra_param, digicam_configure->extra_value);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline void mavlink_msg_digicam_configure_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mode, uint16_t shutter_speed, uint8_t aperture, uint8_t iso, uint8_t exposure_type, uint8_t command_id, uint8_t engine_cut_off, uint8_t extra_param, float extra_value)
{
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
    mavlink_digicam_configure_t packet;
    packet.extra_value = extra_value;
    packet.shutter_speed = shutter_speed;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mode = mode;
    packet.aperture = aperture;
    packet.iso = iso;
    packet.exposure_type = exposure_type;
    packet.command_id = command_id;
    packet.engine_cut_off = engine_cut_off;
    packet.extra_param = extra_param;

    _mav_finalize_message_chan_send(chan, 154, (const char *)&packet, 15, 15, 84);

}






static inline void mavlink_msg_digicam_configure_send_struct(mavlink_channel_t chan, const mavlink_digicam_configure_t* digicam_configure)
{



    _mav_finalize_message_chan_send(chan, 154, (const char *)digicam_configure, 15, 15, 84);

}
# 287 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline void mavlink_msg_digicam_configure_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mode, uint16_t shutter_speed, uint8_t aperture, uint8_t iso, uint8_t exposure_type, uint8_t command_id, uint8_t engine_cut_off, uint8_t extra_param, float extra_value)
{
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
    mavlink_digicam_configure_t *packet = (mavlink_digicam_configure_t *)msgbuf;
    packet->extra_value = extra_value;
    packet->shutter_speed = shutter_speed;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mode = mode;
    packet->aperture = aperture;
    packet->iso = iso;
    packet->exposure_type = exposure_type;
    packet->command_id = command_id;
    packet->engine_cut_off = engine_cut_off;
    packet->extra_param = extra_param;

    _mav_finalize_message_chan_send(chan, 154, (const char *)packet, 15, 15, 84);

}
# 333 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
static inline uint8_t mavlink_msg_digicam_configure_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_digicam_configure_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_digicam_configure_get_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_digicam_configure_get_shutter_speed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint8_t mavlink_msg_digicam_configure_get_aperture(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[9];
}






static inline uint8_t mavlink_msg_digicam_configure_get_iso(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_digicam_configure_get_exposure_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_digicam_configure_get_command_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_digicam_configure_get_engine_cut_off(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}






static inline uint8_t mavlink_msg_digicam_configure_get_extra_param(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[14];
}






static inline float mavlink_msg_digicam_configure_get_extra_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}







static inline void mavlink_msg_digicam_configure_decode(const mavlink_message_t* msg, mavlink_digicam_configure_t* digicam_configure)
{
# 459 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_configure.h"
        uint8_t len = msg->len < 15? msg->len : 15;
        memset(digicam_configure, 0, 15);
    memcpy(digicam_configure, ((const char *)(&((msg)->payload64[0]))), len);

}
# 771 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h" 1
       




typedef struct __mavlink_digicam_control_t { float extra_value; uint8_t target_system; uint8_t target_component; uint8_t session; uint8_t zoom_pos; int8_t zoom_step; uint8_t focus_lock; uint8_t shot; uint8_t command_id; uint8_t extra_param; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
   mavlink_digicam_control_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline uint16_t mavlink_msg_digicam_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t session, uint8_t zoom_pos, int8_t zoom_step, uint8_t focus_lock, uint8_t shot, uint8_t command_id, uint8_t extra_param, float extra_value)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
    mavlink_digicam_control_t packet;
    packet.extra_value = extra_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.session = session;
    packet.zoom_pos = zoom_pos;
    packet.zoom_step = zoom_step;
    packet.focus_lock = focus_lock;
    packet.shot = shot;
    packet.command_id = command_id;
    packet.extra_param = extra_param;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 155;
    return mavlink_finalize_message(msg, system_id, component_id, 13, 13, 22);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline uint16_t mavlink_msg_digicam_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t session,uint8_t zoom_pos,int8_t zoom_step,uint8_t focus_lock,uint8_t shot,uint8_t command_id,uint8_t extra_param,float extra_value)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
    mavlink_digicam_control_t packet;
    packet.extra_value = extra_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.session = session;
    packet.zoom_pos = zoom_pos;
    packet.zoom_step = zoom_step;
    packet.focus_lock = focus_lock;
    packet.shot = shot;
    packet.command_id = command_id;
    packet.extra_param = extra_param;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 155;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 13, 22);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline uint16_t mavlink_msg_digicam_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_digicam_control_t* digicam_control)
{
    return mavlink_msg_digicam_control_pack(system_id, component_id, msg, digicam_control->target_system, digicam_control->target_component, digicam_control->session, digicam_control->zoom_pos, digicam_control->zoom_step, digicam_control->focus_lock, digicam_control->shot, digicam_control->command_id, digicam_control->extra_param, digicam_control->extra_value);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline uint16_t mavlink_msg_digicam_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_digicam_control_t* digicam_control)
{
    return mavlink_msg_digicam_control_pack_chan(system_id, component_id, chan, msg, digicam_control->target_system, digicam_control->target_component, digicam_control->session, digicam_control->zoom_pos, digicam_control->zoom_step, digicam_control->focus_lock, digicam_control->shot, digicam_control->command_id, digicam_control->extra_param, digicam_control->extra_value);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline void mavlink_msg_digicam_control_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t session, uint8_t zoom_pos, int8_t zoom_step, uint8_t focus_lock, uint8_t shot, uint8_t command_id, uint8_t extra_param, float extra_value)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
    mavlink_digicam_control_t packet;
    packet.extra_value = extra_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.session = session;
    packet.zoom_pos = zoom_pos;
    packet.zoom_step = zoom_step;
    packet.focus_lock = focus_lock;
    packet.shot = shot;
    packet.command_id = command_id;
    packet.extra_param = extra_param;

    _mav_finalize_message_chan_send(chan, 155, (const char *)&packet, 13, 13, 22);

}






static inline void mavlink_msg_digicam_control_send_struct(mavlink_channel_t chan, const mavlink_digicam_control_t* digicam_control)
{



    _mav_finalize_message_chan_send(chan, 155, (const char *)digicam_control, 13, 13, 22);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline void mavlink_msg_digicam_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t session, uint8_t zoom_pos, int8_t zoom_step, uint8_t focus_lock, uint8_t shot, uint8_t command_id, uint8_t extra_param, float extra_value)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
    mavlink_digicam_control_t *packet = (mavlink_digicam_control_t *)msgbuf;
    packet->extra_value = extra_value;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->session = session;
    packet->zoom_pos = zoom_pos;
    packet->zoom_step = zoom_step;
    packet->focus_lock = focus_lock;
    packet->shot = shot;
    packet->command_id = command_id;
    packet->extra_param = extra_param;

    _mav_finalize_message_chan_send(chan, 155, (const char *)packet, 13, 13, 22);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
static inline uint8_t mavlink_msg_digicam_control_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_digicam_control_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_digicam_control_get_session(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_digicam_control_get_zoom_pos(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline int8_t mavlink_msg_digicam_control_get_zoom_step(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint8_t mavlink_msg_digicam_control_get_focus_lock(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[9];
}






static inline uint8_t mavlink_msg_digicam_control_get_shot(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_digicam_control_get_command_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_digicam_control_get_extra_param(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline float mavlink_msg_digicam_control_get_extra_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}







static inline void mavlink_msg_digicam_control_decode(const mavlink_message_t* msg, mavlink_digicam_control_t* digicam_control)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_digicam_control.h"
        uint8_t len = msg->len < 13? msg->len : 13;
        memset(digicam_control, 0, 13);
    memcpy(digicam_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 772 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h" 1
       




typedef struct __mavlink_mount_configure_t { uint8_t target_system; uint8_t target_component; uint8_t mount_mode; uint8_t stab_roll; uint8_t stab_pitch; uint8_t stab_yaw; } __attribute__((packed))







   mavlink_mount_configure_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline uint16_t mavlink_msg_mount_configure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t mount_mode, uint8_t stab_roll, uint8_t stab_pitch, uint8_t stab_yaw)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
    mavlink_mount_configure_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mount_mode = mount_mode;
    packet.stab_roll = stab_roll;
    packet.stab_pitch = stab_pitch;
    packet.stab_yaw = stab_yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 156;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 19);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline uint16_t mavlink_msg_mount_configure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t mount_mode,uint8_t stab_roll,uint8_t stab_pitch,uint8_t stab_yaw)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
    mavlink_mount_configure_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mount_mode = mount_mode;
    packet.stab_roll = stab_roll;
    packet.stab_pitch = stab_pitch;
    packet.stab_yaw = stab_yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 156;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 19);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline uint16_t mavlink_msg_mount_configure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mount_configure_t* mount_configure)
{
    return mavlink_msg_mount_configure_pack(system_id, component_id, msg, mount_configure->target_system, mount_configure->target_component, mount_configure->mount_mode, mount_configure->stab_roll, mount_configure->stab_pitch, mount_configure->stab_yaw);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline uint16_t mavlink_msg_mount_configure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mount_configure_t* mount_configure)
{
    return mavlink_msg_mount_configure_pack_chan(system_id, component_id, chan, msg, mount_configure->target_system, mount_configure->target_component, mount_configure->mount_mode, mount_configure->stab_roll, mount_configure->stab_pitch, mount_configure->stab_yaw);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline void mavlink_msg_mount_configure_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mount_mode, uint8_t stab_roll, uint8_t stab_pitch, uint8_t stab_yaw)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
    mavlink_mount_configure_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mount_mode = mount_mode;
    packet.stab_roll = stab_roll;
    packet.stab_pitch = stab_pitch;
    packet.stab_yaw = stab_yaw;

    _mav_finalize_message_chan_send(chan, 156, (const char *)&packet, 6, 6, 19);

}






static inline void mavlink_msg_mount_configure_send_struct(mavlink_channel_t chan, const mavlink_mount_configure_t* mount_configure)
{



    _mav_finalize_message_chan_send(chan, 156, (const char *)mount_configure, 6, 6, 19);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline void mavlink_msg_mount_configure_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mount_mode, uint8_t stab_roll, uint8_t stab_pitch, uint8_t stab_yaw)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
    mavlink_mount_configure_t *packet = (mavlink_mount_configure_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mount_mode = mount_mode;
    packet->stab_roll = stab_roll;
    packet->stab_pitch = stab_pitch;
    packet->stab_yaw = stab_yaw;

    _mav_finalize_message_chan_send(chan, 156, (const char *)packet, 6, 6, 19);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
static inline uint8_t mavlink_msg_mount_configure_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mount_configure_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mount_configure_get_mount_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mount_configure_get_stab_roll(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_mount_configure_get_stab_pitch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mount_configure_get_stab_yaw(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}







static inline void mavlink_msg_mount_configure_decode(const mavlink_message_t* msg, mavlink_mount_configure_t* mount_configure)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_configure.h"
        uint8_t len = msg->len < 6? msg->len : 6;
        memset(mount_configure, 0, 6);
    memcpy(mount_configure, ((const char *)(&((msg)->payload64[0]))), len);

}
# 773 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h" 1
       




typedef struct __mavlink_mount_control_t { int32_t input_a; int32_t input_b; int32_t input_c; uint8_t target_system; uint8_t target_component; uint8_t save_position; } __attribute__((packed))







   mavlink_mount_control_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline uint16_t mavlink_msg_mount_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int32_t input_a, int32_t input_b, int32_t input_c, uint8_t save_position)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
    mavlink_mount_control_t packet;
    packet.input_a = input_a;
    packet.input_b = input_b;
    packet.input_c = input_c;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.save_position = save_position;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 15);


    msg->msgid = 157;
    return mavlink_finalize_message(msg, system_id, component_id, 15, 15, 21);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline uint16_t mavlink_msg_mount_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int32_t input_a,int32_t input_b,int32_t input_c,uint8_t save_position)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
    mavlink_mount_control_t packet;
    packet.input_a = input_a;
    packet.input_b = input_b;
    packet.input_c = input_c;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.save_position = save_position;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 15);


    msg->msgid = 157;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 15, 15, 21);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline uint16_t mavlink_msg_mount_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mount_control_t* mount_control)
{
    return mavlink_msg_mount_control_pack(system_id, component_id, msg, mount_control->target_system, mount_control->target_component, mount_control->input_a, mount_control->input_b, mount_control->input_c, mount_control->save_position);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline uint16_t mavlink_msg_mount_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mount_control_t* mount_control)
{
    return mavlink_msg_mount_control_pack_chan(system_id, component_id, chan, msg, mount_control->target_system, mount_control->target_component, mount_control->input_a, mount_control->input_b, mount_control->input_c, mount_control->save_position);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline void mavlink_msg_mount_control_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int32_t input_a, int32_t input_b, int32_t input_c, uint8_t save_position)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
    mavlink_mount_control_t packet;
    packet.input_a = input_a;
    packet.input_b = input_b;
    packet.input_c = input_c;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.save_position = save_position;

    _mav_finalize_message_chan_send(chan, 157, (const char *)&packet, 15, 15, 21);

}






static inline void mavlink_msg_mount_control_send_struct(mavlink_channel_t chan, const mavlink_mount_control_t* mount_control)
{



    _mav_finalize_message_chan_send(chan, 157, (const char *)mount_control, 15, 15, 21);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline void mavlink_msg_mount_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int32_t input_a, int32_t input_b, int32_t input_c, uint8_t save_position)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
    mavlink_mount_control_t *packet = (mavlink_mount_control_t *)msgbuf;
    packet->input_a = input_a;
    packet->input_b = input_b;
    packet->input_c = input_c;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->save_position = save_position;

    _mav_finalize_message_chan_send(chan, 157, (const char *)packet, 15, 15, 21);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
static inline uint8_t mavlink_msg_mount_control_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_mount_control_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}






static inline int32_t mavlink_msg_mount_control_get_input_a(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_mount_control_get_input_b(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_mount_control_get_input_c(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline uint8_t mavlink_msg_mount_control_get_save_position(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[14];
}







static inline void mavlink_msg_mount_control_decode(const mavlink_message_t* msg, mavlink_mount_control_t* mount_control)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_control.h"
        uint8_t len = msg->len < 15? msg->len : 15;
        memset(mount_control, 0, 15);
    memcpy(mount_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 774 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h" 1
       




typedef struct __mavlink_mount_status_t { int32_t pointing_a; int32_t pointing_b; int32_t pointing_c; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_mount_status_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline uint16_t mavlink_msg_mount_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int32_t pointing_a, int32_t pointing_b, int32_t pointing_c)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
    mavlink_mount_status_t packet;
    packet.pointing_a = pointing_a;
    packet.pointing_b = pointing_b;
    packet.pointing_c = pointing_c;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 158;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 134);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline uint16_t mavlink_msg_mount_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int32_t pointing_a,int32_t pointing_b,int32_t pointing_c)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
    mavlink_mount_status_t packet;
    packet.pointing_a = pointing_a;
    packet.pointing_b = pointing_b;
    packet.pointing_c = pointing_c;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 158;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 134);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline uint16_t mavlink_msg_mount_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mount_status_t* mount_status)
{
    return mavlink_msg_mount_status_pack(system_id, component_id, msg, mount_status->target_system, mount_status->target_component, mount_status->pointing_a, mount_status->pointing_b, mount_status->pointing_c);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline uint16_t mavlink_msg_mount_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mount_status_t* mount_status)
{
    return mavlink_msg_mount_status_pack_chan(system_id, component_id, chan, msg, mount_status->target_system, mount_status->target_component, mount_status->pointing_a, mount_status->pointing_b, mount_status->pointing_c);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline void mavlink_msg_mount_status_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int32_t pointing_a, int32_t pointing_b, int32_t pointing_c)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
    mavlink_mount_status_t packet;
    packet.pointing_a = pointing_a;
    packet.pointing_b = pointing_b;
    packet.pointing_c = pointing_c;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 158, (const char *)&packet, 14, 14, 134);

}






static inline void mavlink_msg_mount_status_send_struct(mavlink_channel_t chan, const mavlink_mount_status_t* mount_status)
{



    _mav_finalize_message_chan_send(chan, 158, (const char *)mount_status, 14, 14, 134);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline void mavlink_msg_mount_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int32_t pointing_a, int32_t pointing_b, int32_t pointing_c)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
    mavlink_mount_status_t *packet = (mavlink_mount_status_t *)msgbuf;
    packet->pointing_a = pointing_a;
    packet->pointing_b = pointing_b;
    packet->pointing_c = pointing_c;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 158, (const char *)packet, 14, 14, 134);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mount_status.h"
static inline uint8_t mavlink_msg_mount_status_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_mount_status_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}






static inline int32_t mavlink_msg_mount_status_get_pointing_a(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_mount_status_get_pointing_b(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_mount_status_get_pointing_c(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_mount_status_decode(const mavlink_message_t* msg, mavlink_mount_status_t* mount_status)
{







        uint8_t len = msg->len < 14? msg->len : 14;
        memset(mount_status, 0, 14);
    memcpy(mount_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 775 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h" 1
       




typedef struct __mavlink_fence_point_t { float lat; float lng; uint8_t target_system; uint8_t target_component; uint8_t idx; uint8_t count; } __attribute__((packed))







   mavlink_fence_point_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline uint16_t mavlink_msg_fence_point_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t idx, uint8_t count, float lat, float lng)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
    mavlink_fence_point_t packet;
    packet.lat = lat;
    packet.lng = lng;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;
    packet.count = count;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 160;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 78);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline uint16_t mavlink_msg_fence_point_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t idx,uint8_t count,float lat,float lng)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
    mavlink_fence_point_t packet;
    packet.lat = lat;
    packet.lng = lng;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;
    packet.count = count;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 160;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 78);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline uint16_t mavlink_msg_fence_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_fence_point_t* fence_point)
{
    return mavlink_msg_fence_point_pack(system_id, component_id, msg, fence_point->target_system, fence_point->target_component, fence_point->idx, fence_point->count, fence_point->lat, fence_point->lng);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline uint16_t mavlink_msg_fence_point_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_fence_point_t* fence_point)
{
    return mavlink_msg_fence_point_pack_chan(system_id, component_id, chan, msg, fence_point->target_system, fence_point->target_component, fence_point->idx, fence_point->count, fence_point->lat, fence_point->lng);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline void mavlink_msg_fence_point_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx, uint8_t count, float lat, float lng)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
    mavlink_fence_point_t packet;
    packet.lat = lat;
    packet.lng = lng;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;
    packet.count = count;

    _mav_finalize_message_chan_send(chan, 160, (const char *)&packet, 12, 12, 78);

}






static inline void mavlink_msg_fence_point_send_struct(mavlink_channel_t chan, const mavlink_fence_point_t* fence_point)
{



    _mav_finalize_message_chan_send(chan, 160, (const char *)fence_point, 12, 12, 78);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline void mavlink_msg_fence_point_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx, uint8_t count, float lat, float lng)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
    mavlink_fence_point_t *packet = (mavlink_fence_point_t *)msgbuf;
    packet->lat = lat;
    packet->lng = lng;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->idx = idx;
    packet->count = count;

    _mav_finalize_message_chan_send(chan, 160, (const char *)packet, 12, 12, 78);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
static inline uint8_t mavlink_msg_fence_point_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint8_t mavlink_msg_fence_point_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[9];
}






static inline uint8_t mavlink_msg_fence_point_get_idx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_fence_point_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline float mavlink_msg_fence_point_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_fence_point_get_lng(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_fence_point_decode(const mavlink_message_t* msg, mavlink_fence_point_t* fence_point)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_point.h"
        uint8_t len = msg->len < 12? msg->len : 12;
        memset(fence_point, 0, 12);
    memcpy(fence_point, ((const char *)(&((msg)->payload64[0]))), len);

}
# 776 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h" 1
       




typedef struct __mavlink_fence_fetch_point_t { uint8_t target_system; uint8_t target_component; uint8_t idx; } __attribute__((packed))




   mavlink_fence_fetch_point_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline uint16_t mavlink_msg_fence_fetch_point_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t idx)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
    mavlink_fence_fetch_point_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 161;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 68);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline uint16_t mavlink_msg_fence_fetch_point_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t idx)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
    mavlink_fence_fetch_point_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 161;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 68);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline uint16_t mavlink_msg_fence_fetch_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_fence_fetch_point_t* fence_fetch_point)
{
    return mavlink_msg_fence_fetch_point_pack(system_id, component_id, msg, fence_fetch_point->target_system, fence_fetch_point->target_component, fence_fetch_point->idx);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline uint16_t mavlink_msg_fence_fetch_point_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_fence_fetch_point_t* fence_fetch_point)
{
    return mavlink_msg_fence_fetch_point_pack_chan(system_id, component_id, chan, msg, fence_fetch_point->target_system, fence_fetch_point->target_component, fence_fetch_point->idx);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline void mavlink_msg_fence_fetch_point_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
    mavlink_fence_fetch_point_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;

    _mav_finalize_message_chan_send(chan, 161, (const char *)&packet, 3, 3, 68);

}






static inline void mavlink_msg_fence_fetch_point_send_struct(mavlink_channel_t chan, const mavlink_fence_fetch_point_t* fence_fetch_point)
{



    _mav_finalize_message_chan_send(chan, 161, (const char *)fence_fetch_point, 3, 3, 68);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline void mavlink_msg_fence_fetch_point_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
    mavlink_fence_fetch_point_t *packet = (mavlink_fence_fetch_point_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->idx = idx;

    _mav_finalize_message_chan_send(chan, 161, (const char *)packet, 3, 3, 68);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_fetch_point.h"
static inline uint8_t mavlink_msg_fence_fetch_point_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_fence_fetch_point_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_fence_fetch_point_get_idx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_fence_fetch_point_decode(const mavlink_message_t* msg, mavlink_fence_fetch_point_t* fence_fetch_point)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(fence_fetch_point, 0, 3);
    memcpy(fence_fetch_point, ((const char *)(&((msg)->payload64[0]))), len);

}
# 777 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h" 1
       




typedef struct __mavlink_fence_status_t { uint32_t breach_time; uint16_t breach_count; uint8_t breach_status; uint8_t breach_type; } __attribute__((packed))





   mavlink_fence_status_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline uint16_t mavlink_msg_fence_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t breach_status, uint16_t breach_count, uint8_t breach_type, uint32_t breach_time)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
    mavlink_fence_status_t packet;
    packet.breach_time = breach_time;
    packet.breach_count = breach_count;
    packet.breach_status = breach_status;
    packet.breach_type = breach_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 162;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 189);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline uint16_t mavlink_msg_fence_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t breach_status,uint16_t breach_count,uint8_t breach_type,uint32_t breach_time)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
    mavlink_fence_status_t packet;
    packet.breach_time = breach_time;
    packet.breach_count = breach_count;
    packet.breach_status = breach_status;
    packet.breach_type = breach_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 162;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 189);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline uint16_t mavlink_msg_fence_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_fence_status_t* fence_status)
{
    return mavlink_msg_fence_status_pack(system_id, component_id, msg, fence_status->breach_status, fence_status->breach_count, fence_status->breach_type, fence_status->breach_time);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline uint16_t mavlink_msg_fence_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_fence_status_t* fence_status)
{
    return mavlink_msg_fence_status_pack_chan(system_id, component_id, chan, msg, fence_status->breach_status, fence_status->breach_count, fence_status->breach_type, fence_status->breach_time);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline void mavlink_msg_fence_status_send(mavlink_channel_t chan, uint8_t breach_status, uint16_t breach_count, uint8_t breach_type, uint32_t breach_time)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
    mavlink_fence_status_t packet;
    packet.breach_time = breach_time;
    packet.breach_count = breach_count;
    packet.breach_status = breach_status;
    packet.breach_type = breach_type;

    _mav_finalize_message_chan_send(chan, 162, (const char *)&packet, 8, 8, 189);

}






static inline void mavlink_msg_fence_status_send_struct(mavlink_channel_t chan, const mavlink_fence_status_t* fence_status)
{



    _mav_finalize_message_chan_send(chan, 162, (const char *)fence_status, 8, 8, 189);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline void mavlink_msg_fence_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t breach_status, uint16_t breach_count, uint8_t breach_type, uint32_t breach_time)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
    mavlink_fence_status_t *packet = (mavlink_fence_status_t *)msgbuf;
    packet->breach_time = breach_time;
    packet->breach_count = breach_count;
    packet->breach_status = breach_status;
    packet->breach_type = breach_type;

    _mav_finalize_message_chan_send(chan, 162, (const char *)packet, 8, 8, 189);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_fence_status.h"
static inline uint8_t mavlink_msg_fence_status_get_breach_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint16_t mavlink_msg_fence_status_get_breach_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint8_t mavlink_msg_fence_status_get_breach_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint32_t mavlink_msg_fence_status_get_breach_time(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}







static inline void mavlink_msg_fence_status_decode(const mavlink_message_t* msg, mavlink_fence_status_t* fence_status)
{






        uint8_t len = msg->len < 8? msg->len : 8;
        memset(fence_status, 0, 8);
    memcpy(fence_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 778 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h" 1
       




typedef struct __mavlink_ahrs_t { float omegaIx; float omegaIy; float omegaIz; float accel_weight; float renorm_val; float error_rp; float error_yaw; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
   mavlink_ahrs_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline uint16_t mavlink_msg_ahrs_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float omegaIx, float omegaIy, float omegaIz, float accel_weight, float renorm_val, float error_rp, float error_yaw)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
    mavlink_ahrs_t packet;
    packet.omegaIx = omegaIx;
    packet.omegaIy = omegaIy;
    packet.omegaIz = omegaIz;
    packet.accel_weight = accel_weight;
    packet.renorm_val = renorm_val;
    packet.error_rp = error_rp;
    packet.error_yaw = error_yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 163;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 127);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline uint16_t mavlink_msg_ahrs_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float omegaIx,float omegaIy,float omegaIz,float accel_weight,float renorm_val,float error_rp,float error_yaw)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
    mavlink_ahrs_t packet;
    packet.omegaIx = omegaIx;
    packet.omegaIy = omegaIy;
    packet.omegaIz = omegaIz;
    packet.accel_weight = accel_weight;
    packet.renorm_val = renorm_val;
    packet.error_rp = error_rp;
    packet.error_yaw = error_yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 163;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 127);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline uint16_t mavlink_msg_ahrs_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ahrs_t* ahrs)
{
    return mavlink_msg_ahrs_pack(system_id, component_id, msg, ahrs->omegaIx, ahrs->omegaIy, ahrs->omegaIz, ahrs->accel_weight, ahrs->renorm_val, ahrs->error_rp, ahrs->error_yaw);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline uint16_t mavlink_msg_ahrs_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ahrs_t* ahrs)
{
    return mavlink_msg_ahrs_pack_chan(system_id, component_id, chan, msg, ahrs->omegaIx, ahrs->omegaIy, ahrs->omegaIz, ahrs->accel_weight, ahrs->renorm_val, ahrs->error_rp, ahrs->error_yaw);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline void mavlink_msg_ahrs_send(mavlink_channel_t chan, float omegaIx, float omegaIy, float omegaIz, float accel_weight, float renorm_val, float error_rp, float error_yaw)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
    mavlink_ahrs_t packet;
    packet.omegaIx = omegaIx;
    packet.omegaIy = omegaIy;
    packet.omegaIz = omegaIz;
    packet.accel_weight = accel_weight;
    packet.renorm_val = renorm_val;
    packet.error_rp = error_rp;
    packet.error_yaw = error_yaw;

    _mav_finalize_message_chan_send(chan, 163, (const char *)&packet, 28, 28, 127);

}






static inline void mavlink_msg_ahrs_send_struct(mavlink_channel_t chan, const mavlink_ahrs_t* ahrs)
{



    _mav_finalize_message_chan_send(chan, 163, (const char *)ahrs, 28, 28, 127);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline void mavlink_msg_ahrs_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float omegaIx, float omegaIy, float omegaIz, float accel_weight, float renorm_val, float error_rp, float error_yaw)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
    mavlink_ahrs_t *packet = (mavlink_ahrs_t *)msgbuf;
    packet->omegaIx = omegaIx;
    packet->omegaIy = omegaIy;
    packet->omegaIz = omegaIz;
    packet->accel_weight = accel_weight;
    packet->renorm_val = renorm_val;
    packet->error_rp = error_rp;
    packet->error_yaw = error_yaw;

    _mav_finalize_message_chan_send(chan, 163, (const char *)packet, 28, 28, 127);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
static inline float mavlink_msg_ahrs_get_omegaIx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_ahrs_get_omegaIy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_ahrs_get_omegaIz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_ahrs_get_accel_weight(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_ahrs_get_renorm_val(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_ahrs_get_error_rp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_ahrs_get_error_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_ahrs_decode(const mavlink_message_t* msg, mavlink_ahrs_t* ahrs)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(ahrs, 0, 28);
    memcpy(ahrs, ((const char *)(&((msg)->payload64[0]))), len);

}
# 779 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h" 1
       




typedef struct __mavlink_simstate_t { float roll; float pitch; float yaw; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; int32_t lat; int32_t lng; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
   mavlink_simstate_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline uint16_t mavlink_msg_simstate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, int32_t lat, int32_t lng)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
    mavlink_simstate_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lng = lng;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 164;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 154);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline uint16_t mavlink_msg_simstate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float roll,float pitch,float yaw,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,int32_t lat,int32_t lng)
{
# 165 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
    mavlink_simstate_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lng = lng;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 164;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 154);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline uint16_t mavlink_msg_simstate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_simstate_t* simstate)
{
    return mavlink_msg_simstate_pack(system_id, component_id, msg, simstate->roll, simstate->pitch, simstate->yaw, simstate->xacc, simstate->yacc, simstate->zacc, simstate->xgyro, simstate->ygyro, simstate->zgyro, simstate->lat, simstate->lng);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline uint16_t mavlink_msg_simstate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_simstate_t* simstate)
{
    return mavlink_msg_simstate_pack_chan(system_id, component_id, chan, msg, simstate->roll, simstate->pitch, simstate->yaw, simstate->xacc, simstate->yacc, simstate->zacc, simstate->xgyro, simstate->ygyro, simstate->zgyro, simstate->lat, simstate->lng);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline void mavlink_msg_simstate_send(mavlink_channel_t chan, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, int32_t lat, int32_t lng)
{
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
    mavlink_simstate_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lng = lng;

    _mav_finalize_message_chan_send(chan, 164, (const char *)&packet, 44, 44, 154);

}






static inline void mavlink_msg_simstate_send_struct(mavlink_channel_t chan, const mavlink_simstate_t* simstate)
{



    _mav_finalize_message_chan_send(chan, 164, (const char *)simstate, 44, 44, 154);

}
# 287 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline void mavlink_msg_simstate_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, int32_t lat, int32_t lng)
{
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
    mavlink_simstate_t *packet = (mavlink_simstate_t *)msgbuf;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->lat = lat;
    packet->lng = lng;

    _mav_finalize_message_chan_send(chan, 164, (const char *)packet, 44, 44, 154);

}
# 333 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
static inline float mavlink_msg_simstate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_simstate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_simstate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_simstate_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_simstate_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_simstate_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_simstate_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_simstate_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_simstate_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline int32_t mavlink_msg_simstate_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_simstate_get_lng(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 40);
}







static inline void mavlink_msg_simstate_decode(const mavlink_message_t* msg, mavlink_simstate_t* simstate)
{
# 459 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_simstate.h"
        uint8_t len = msg->len < 44? msg->len : 44;
        memset(simstate, 0, 44);
    memcpy(simstate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 780 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h" 1
       




typedef struct __mavlink_hwstatus_t { uint16_t Vcc; uint8_t I2Cerr; } __attribute__((packed))



   mavlink_hwstatus_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline uint16_t mavlink_msg_hwstatus_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t Vcc, uint8_t I2Cerr)
{







    mavlink_hwstatus_t packet;
    packet.Vcc = Vcc;
    packet.I2Cerr = I2Cerr;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 165;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 21);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline uint16_t mavlink_msg_hwstatus_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t Vcc,uint8_t I2Cerr)
{







    mavlink_hwstatus_t packet;
    packet.Vcc = Vcc;
    packet.I2Cerr = I2Cerr;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 165;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 21);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline uint16_t mavlink_msg_hwstatus_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hwstatus_t* hwstatus)
{
    return mavlink_msg_hwstatus_pack(system_id, component_id, msg, hwstatus->Vcc, hwstatus->I2Cerr);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline uint16_t mavlink_msg_hwstatus_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hwstatus_t* hwstatus)
{
    return mavlink_msg_hwstatus_pack_chan(system_id, component_id, chan, msg, hwstatus->Vcc, hwstatus->I2Cerr);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline void mavlink_msg_hwstatus_send(mavlink_channel_t chan, uint16_t Vcc, uint8_t I2Cerr)
{







    mavlink_hwstatus_t packet;
    packet.Vcc = Vcc;
    packet.I2Cerr = I2Cerr;

    _mav_finalize_message_chan_send(chan, 165, (const char *)&packet, 3, 3, 21);

}






static inline void mavlink_msg_hwstatus_send_struct(mavlink_channel_t chan, const mavlink_hwstatus_t* hwstatus)
{



    _mav_finalize_message_chan_send(chan, 165, (const char *)hwstatus, 3, 3, 21);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline void mavlink_msg_hwstatus_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t Vcc, uint8_t I2Cerr)
{







    mavlink_hwstatus_t *packet = (mavlink_hwstatus_t *)msgbuf;
    packet->Vcc = Vcc;
    packet->I2Cerr = I2Cerr;

    _mav_finalize_message_chan_send(chan, 165, (const char *)packet, 3, 3, 21);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_hwstatus.h"
static inline uint16_t mavlink_msg_hwstatus_get_Vcc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_hwstatus_get_I2Cerr(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_hwstatus_decode(const mavlink_message_t* msg, mavlink_hwstatus_t* hwstatus)
{




        uint8_t len = msg->len < 3? msg->len : 3;
        memset(hwstatus, 0, 3);
    memcpy(hwstatus, ((const char *)(&((msg)->payload64[0]))), len);

}
# 781 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h" 1
       




typedef struct __mavlink_radio_t { uint16_t rxerrors; uint16_t fixed; uint8_t rssi; uint8_t remrssi; uint8_t txbuf; uint8_t noise; uint8_t remnoise; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
   mavlink_radio_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline uint16_t mavlink_msg_radio_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
    mavlink_radio_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 166;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 21);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline uint16_t mavlink_msg_radio_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t rssi,uint8_t remrssi,uint8_t txbuf,uint8_t noise,uint8_t remnoise,uint16_t rxerrors,uint16_t fixed)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
    mavlink_radio_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 166;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 21);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline uint16_t mavlink_msg_radio_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_radio_t* radio)
{
    return mavlink_msg_radio_pack(system_id, component_id, msg, radio->rssi, radio->remrssi, radio->txbuf, radio->noise, radio->remnoise, radio->rxerrors, radio->fixed);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline uint16_t mavlink_msg_radio_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_radio_t* radio)
{
    return mavlink_msg_radio_pack_chan(system_id, component_id, chan, msg, radio->rssi, radio->remrssi, radio->txbuf, radio->noise, radio->remnoise, radio->rxerrors, radio->fixed);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline void mavlink_msg_radio_send(mavlink_channel_t chan, uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
    mavlink_radio_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

    _mav_finalize_message_chan_send(chan, 166, (const char *)&packet, 9, 9, 21);

}






static inline void mavlink_msg_radio_send_struct(mavlink_channel_t chan, const mavlink_radio_t* radio)
{



    _mav_finalize_message_chan_send(chan, 166, (const char *)radio, 9, 9, 21);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline void mavlink_msg_radio_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
    mavlink_radio_t *packet = (mavlink_radio_t *)msgbuf;
    packet->rxerrors = rxerrors;
    packet->fixed = fixed;
    packet->rssi = rssi;
    packet->remrssi = remrssi;
    packet->txbuf = txbuf;
    packet->noise = noise;
    packet->remnoise = remnoise;

    _mav_finalize_message_chan_send(chan, 166, (const char *)packet, 9, 9, 21);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
static inline uint8_t mavlink_msg_radio_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_radio_get_remrssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_radio_get_txbuf(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_radio_get_noise(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_radio_get_remnoise(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_radio_get_rxerrors(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_radio_get_fixed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_radio_decode(const mavlink_message_t* msg, mavlink_radio_t* radio)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_radio.h"
        uint8_t len = msg->len < 9? msg->len : 9;
        memset(radio, 0, 9);
    memcpy(radio, ((const char *)(&((msg)->payload64[0]))), len);

}
# 782 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h" 1
       




typedef struct __mavlink_limits_status_t { uint32_t last_trigger; uint32_t last_action; uint32_t last_recovery; uint32_t last_clear; uint16_t breach_count; uint8_t limits_state; uint8_t mods_enabled; uint8_t mods_required; uint8_t mods_triggered; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
   mavlink_limits_status_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline uint16_t mavlink_msg_limits_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t limits_state, uint32_t last_trigger, uint32_t last_action, uint32_t last_recovery, uint32_t last_clear, uint16_t breach_count, uint8_t mods_enabled, uint8_t mods_required, uint8_t mods_triggered)
{
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
    mavlink_limits_status_t packet;
    packet.last_trigger = last_trigger;
    packet.last_action = last_action;
    packet.last_recovery = last_recovery;
    packet.last_clear = last_clear;
    packet.breach_count = breach_count;
    packet.limits_state = limits_state;
    packet.mods_enabled = mods_enabled;
    packet.mods_required = mods_required;
    packet.mods_triggered = mods_triggered;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 167;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 144);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline uint16_t mavlink_msg_limits_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t limits_state,uint32_t last_trigger,uint32_t last_action,uint32_t last_recovery,uint32_t last_clear,uint16_t breach_count,uint8_t mods_enabled,uint8_t mods_required,uint8_t mods_triggered)
{
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
    mavlink_limits_status_t packet;
    packet.last_trigger = last_trigger;
    packet.last_action = last_action;
    packet.last_recovery = last_recovery;
    packet.last_clear = last_clear;
    packet.breach_count = breach_count;
    packet.limits_state = limits_state;
    packet.mods_enabled = mods_enabled;
    packet.mods_required = mods_required;
    packet.mods_triggered = mods_triggered;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 167;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 144);
}
# 175 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline uint16_t mavlink_msg_limits_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_limits_status_t* limits_status)
{
    return mavlink_msg_limits_status_pack(system_id, component_id, msg, limits_status->limits_state, limits_status->last_trigger, limits_status->last_action, limits_status->last_recovery, limits_status->last_clear, limits_status->breach_count, limits_status->mods_enabled, limits_status->mods_required, limits_status->mods_triggered);
}
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline uint16_t mavlink_msg_limits_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_limits_status_t* limits_status)
{
    return mavlink_msg_limits_status_pack_chan(system_id, component_id, chan, msg, limits_status->limits_state, limits_status->last_trigger, limits_status->last_action, limits_status->last_recovery, limits_status->last_clear, limits_status->breach_count, limits_status->mods_enabled, limits_status->mods_required, limits_status->mods_triggered);
}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline void mavlink_msg_limits_status_send(mavlink_channel_t chan, uint8_t limits_state, uint32_t last_trigger, uint32_t last_action, uint32_t last_recovery, uint32_t last_clear, uint16_t breach_count, uint8_t mods_enabled, uint8_t mods_required, uint8_t mods_triggered)
{
# 226 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
    mavlink_limits_status_t packet;
    packet.last_trigger = last_trigger;
    packet.last_action = last_action;
    packet.last_recovery = last_recovery;
    packet.last_clear = last_clear;
    packet.breach_count = breach_count;
    packet.limits_state = limits_state;
    packet.mods_enabled = mods_enabled;
    packet.mods_required = mods_required;
    packet.mods_triggered = mods_triggered;

    _mav_finalize_message_chan_send(chan, 167, (const char *)&packet, 22, 22, 144);

}






static inline void mavlink_msg_limits_status_send_struct(mavlink_channel_t chan, const mavlink_limits_status_t* limits_status)
{



    _mav_finalize_message_chan_send(chan, 167, (const char *)limits_status, 22, 22, 144);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline void mavlink_msg_limits_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t limits_state, uint32_t last_trigger, uint32_t last_action, uint32_t last_recovery, uint32_t last_clear, uint16_t breach_count, uint8_t mods_enabled, uint8_t mods_required, uint8_t mods_triggered)
{
# 279 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
    mavlink_limits_status_t *packet = (mavlink_limits_status_t *)msgbuf;
    packet->last_trigger = last_trigger;
    packet->last_action = last_action;
    packet->last_recovery = last_recovery;
    packet->last_clear = last_clear;
    packet->breach_count = breach_count;
    packet->limits_state = limits_state;
    packet->mods_enabled = mods_enabled;
    packet->mods_required = mods_required;
    packet->mods_triggered = mods_triggered;

    _mav_finalize_message_chan_send(chan, 167, (const char *)packet, 22, 22, 144);

}
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
static inline uint8_t mavlink_msg_limits_status_get_limits_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline uint32_t mavlink_msg_limits_status_get_last_trigger(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_limits_status_get_last_action(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint32_t mavlink_msg_limits_status_get_last_recovery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint32_t mavlink_msg_limits_status_get_last_clear(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 12);
}






static inline uint16_t mavlink_msg_limits_status_get_breach_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint8_t mavlink_msg_limits_status_get_mods_enabled(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[19];
}






static inline uint8_t mavlink_msg_limits_status_get_mods_required(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint8_t mavlink_msg_limits_status_get_mods_triggered(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_limits_status_decode(const mavlink_message_t* msg, mavlink_limits_status_t* limits_status)
{
# 409 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_limits_status.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(limits_status, 0, 22);
    memcpy(limits_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 783 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h" 1
       




typedef struct __mavlink_wind_t { float direction; float speed; float speed_z; } __attribute__((packed))




   mavlink_wind_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline uint16_t mavlink_msg_wind_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float direction, float speed, float speed_z)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
    mavlink_wind_t packet;
    packet.direction = direction;
    packet.speed = speed;
    packet.speed_z = speed_z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 168;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 1);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline uint16_t mavlink_msg_wind_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float direction,float speed,float speed_z)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
    mavlink_wind_t packet;
    packet.direction = direction;
    packet.speed = speed;
    packet.speed_z = speed_z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 168;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 1);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline uint16_t mavlink_msg_wind_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_wind_t* wind)
{
    return mavlink_msg_wind_pack(system_id, component_id, msg, wind->direction, wind->speed, wind->speed_z);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline uint16_t mavlink_msg_wind_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_wind_t* wind)
{
    return mavlink_msg_wind_pack_chan(system_id, component_id, chan, msg, wind->direction, wind->speed, wind->speed_z);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline void mavlink_msg_wind_send(mavlink_channel_t chan, float direction, float speed, float speed_z)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
    mavlink_wind_t packet;
    packet.direction = direction;
    packet.speed = speed;
    packet.speed_z = speed_z;

    _mav_finalize_message_chan_send(chan, 168, (const char *)&packet, 12, 12, 1);

}






static inline void mavlink_msg_wind_send_struct(mavlink_channel_t chan, const mavlink_wind_t* wind)
{



    _mav_finalize_message_chan_send(chan, 168, (const char *)wind, 12, 12, 1);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline void mavlink_msg_wind_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float direction, float speed, float speed_z)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
    mavlink_wind_t *packet = (mavlink_wind_t *)msgbuf;
    packet->direction = direction;
    packet->speed = speed;
    packet->speed_z = speed_z;

    _mav_finalize_message_chan_send(chan, 168, (const char *)packet, 12, 12, 1);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_wind.h"
static inline float mavlink_msg_wind_get_direction(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_wind_get_speed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_wind_get_speed_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}







static inline void mavlink_msg_wind_decode(const mavlink_message_t* msg, mavlink_wind_t* wind)
{





        uint8_t len = msg->len < 12? msg->len : 12;
        memset(wind, 0, 12);
    memcpy(wind, ((const char *)(&((msg)->payload64[0]))), len);

}
# 784 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h" 1
       




typedef struct __mavlink_data16_t { uint8_t type; uint8_t len; uint8_t data[16]; } __attribute__((packed))




   mavlink_data16_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline uint16_t mavlink_msg_data16_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data16_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 169;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 234);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline uint16_t mavlink_msg_data16_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t len,const uint8_t *data)
{







    mavlink_data16_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 169;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 234);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline uint16_t mavlink_msg_data16_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data16_t* data16)
{
    return mavlink_msg_data16_pack(system_id, component_id, msg, data16->type, data16->len, data16->data);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline uint16_t mavlink_msg_data16_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data16_t* data16)
{
    return mavlink_msg_data16_pack_chan(system_id, component_id, chan, msg, data16->type, data16->len, data16->data);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline void mavlink_msg_data16_send(mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data16_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*16);
    _mav_finalize_message_chan_send(chan, 169, (const char *)&packet, 18, 18, 234);

}






static inline void mavlink_msg_data16_send_struct(mavlink_channel_t chan, const mavlink_data16_t* data16)
{



    _mav_finalize_message_chan_send(chan, 169, (const char *)data16, 18, 18, 234);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline void mavlink_msg_data16_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data16_t *packet = (mavlink_data16_t *)msgbuf;
    packet->type = type;
    packet->len = len;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*16);
    _mav_finalize_message_chan_send(chan, 169, (const char *)packet, 18, 18, 234);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data16.h"
static inline uint8_t mavlink_msg_data16_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_data16_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_data16_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 16, 2);
}







static inline void mavlink_msg_data16_decode(const mavlink_message_t* msg, mavlink_data16_t* data16)
{





        uint8_t len = msg->len < 18? msg->len : 18;
        memset(data16, 0, 18);
    memcpy(data16, ((const char *)(&((msg)->payload64[0]))), len);

}
# 785 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h" 1
       




typedef struct __mavlink_data32_t { uint8_t type; uint8_t len; uint8_t data[32]; } __attribute__((packed))




   mavlink_data32_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline uint16_t mavlink_msg_data32_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data32_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 34);


    msg->msgid = 170;
    return mavlink_finalize_message(msg, system_id, component_id, 34, 34, 73);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline uint16_t mavlink_msg_data32_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t len,const uint8_t *data)
{







    mavlink_data32_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 34);


    msg->msgid = 170;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 34, 34, 73);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline uint16_t mavlink_msg_data32_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data32_t* data32)
{
    return mavlink_msg_data32_pack(system_id, component_id, msg, data32->type, data32->len, data32->data);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline uint16_t mavlink_msg_data32_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data32_t* data32)
{
    return mavlink_msg_data32_pack_chan(system_id, component_id, chan, msg, data32->type, data32->len, data32->data);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline void mavlink_msg_data32_send(mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data32_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*32);
    _mav_finalize_message_chan_send(chan, 170, (const char *)&packet, 34, 34, 73);

}






static inline void mavlink_msg_data32_send_struct(mavlink_channel_t chan, const mavlink_data32_t* data32)
{



    _mav_finalize_message_chan_send(chan, 170, (const char *)data32, 34, 34, 73);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline void mavlink_msg_data32_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data32_t *packet = (mavlink_data32_t *)msgbuf;
    packet->type = type;
    packet->len = len;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*32);
    _mav_finalize_message_chan_send(chan, 170, (const char *)packet, 34, 34, 73);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data32.h"
static inline uint8_t mavlink_msg_data32_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_data32_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_data32_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 32, 2);
}







static inline void mavlink_msg_data32_decode(const mavlink_message_t* msg, mavlink_data32_t* data32)
{





        uint8_t len = msg->len < 34? msg->len : 34;
        memset(data32, 0, 34);
    memcpy(data32, ((const char *)(&((msg)->payload64[0]))), len);

}
# 786 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h" 1
       




typedef struct __mavlink_data64_t { uint8_t type; uint8_t len; uint8_t data[64]; } __attribute__((packed))




   mavlink_data64_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline uint16_t mavlink_msg_data64_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data64_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*64);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 66);


    msg->msgid = 171;
    return mavlink_finalize_message(msg, system_id, component_id, 66, 66, 181);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline uint16_t mavlink_msg_data64_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t len,const uint8_t *data)
{







    mavlink_data64_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*64);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 66);


    msg->msgid = 171;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 66, 66, 181);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline uint16_t mavlink_msg_data64_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data64_t* data64)
{
    return mavlink_msg_data64_pack(system_id, component_id, msg, data64->type, data64->len, data64->data);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline uint16_t mavlink_msg_data64_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data64_t* data64)
{
    return mavlink_msg_data64_pack_chan(system_id, component_id, chan, msg, data64->type, data64->len, data64->data);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline void mavlink_msg_data64_send(mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data64_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*64);
    _mav_finalize_message_chan_send(chan, 171, (const char *)&packet, 66, 66, 181);

}






static inline void mavlink_msg_data64_send_struct(mavlink_channel_t chan, const mavlink_data64_t* data64)
{



    _mav_finalize_message_chan_send(chan, 171, (const char *)data64, 66, 66, 181);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline void mavlink_msg_data64_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data64_t *packet = (mavlink_data64_t *)msgbuf;
    packet->type = type;
    packet->len = len;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*64);
    _mav_finalize_message_chan_send(chan, 171, (const char *)packet, 66, 66, 181);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data64.h"
static inline uint8_t mavlink_msg_data64_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_data64_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_data64_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 64, 2);
}







static inline void mavlink_msg_data64_decode(const mavlink_message_t* msg, mavlink_data64_t* data64)
{





        uint8_t len = msg->len < 66? msg->len : 66;
        memset(data64, 0, 66);
    memcpy(data64, ((const char *)(&((msg)->payload64[0]))), len);

}
# 787 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h" 1
       




typedef struct __mavlink_data96_t { uint8_t type; uint8_t len; uint8_t data[96]; } __attribute__((packed))




   mavlink_data96_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline uint16_t mavlink_msg_data96_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data96_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*96);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 98);


    msg->msgid = 172;
    return mavlink_finalize_message(msg, system_id, component_id, 98, 98, 22);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline uint16_t mavlink_msg_data96_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t len,const uint8_t *data)
{







    mavlink_data96_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*96);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 98);


    msg->msgid = 172;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 98, 98, 22);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline uint16_t mavlink_msg_data96_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data96_t* data96)
{
    return mavlink_msg_data96_pack(system_id, component_id, msg, data96->type, data96->len, data96->data);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline uint16_t mavlink_msg_data96_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data96_t* data96)
{
    return mavlink_msg_data96_pack_chan(system_id, component_id, chan, msg, data96->type, data96->len, data96->data);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline void mavlink_msg_data96_send(mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data96_t packet;
    packet.type = type;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*96);
    _mav_finalize_message_chan_send(chan, 172, (const char *)&packet, 98, 98, 22);

}






static inline void mavlink_msg_data96_send_struct(mavlink_channel_t chan, const mavlink_data96_t* data96)
{



    _mav_finalize_message_chan_send(chan, 172, (const char *)data96, 98, 98, 22);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline void mavlink_msg_data96_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t type, uint8_t len, const uint8_t *data)
{







    mavlink_data96_t *packet = (mavlink_data96_t *)msgbuf;
    packet->type = type;
    packet->len = len;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*96);
    _mav_finalize_message_chan_send(chan, 172, (const char *)packet, 98, 98, 22);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_data96.h"
static inline uint8_t mavlink_msg_data96_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_data96_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_data96_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 96, 2);
}







static inline void mavlink_msg_data96_decode(const mavlink_message_t* msg, mavlink_data96_t* data96)
{





        uint8_t len = msg->len < 98? msg->len : 98;
        memset(data96, 0, 98);
    memcpy(data96, ((const char *)(&((msg)->payload64[0]))), len);

}
# 788 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h" 1
       




typedef struct __mavlink_rangefinder_t { float distance; float voltage; } __attribute__((packed))



   mavlink_rangefinder_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline uint16_t mavlink_msg_rangefinder_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float distance, float voltage)
{







    mavlink_rangefinder_t packet;
    packet.distance = distance;
    packet.voltage = voltage;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 173;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 83);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline uint16_t mavlink_msg_rangefinder_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float distance,float voltage)
{







    mavlink_rangefinder_t packet;
    packet.distance = distance;
    packet.voltage = voltage;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 173;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 83);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline uint16_t mavlink_msg_rangefinder_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rangefinder_t* rangefinder)
{
    return mavlink_msg_rangefinder_pack(system_id, component_id, msg, rangefinder->distance, rangefinder->voltage);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline uint16_t mavlink_msg_rangefinder_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rangefinder_t* rangefinder)
{
    return mavlink_msg_rangefinder_pack_chan(system_id, component_id, chan, msg, rangefinder->distance, rangefinder->voltage);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline void mavlink_msg_rangefinder_send(mavlink_channel_t chan, float distance, float voltage)
{







    mavlink_rangefinder_t packet;
    packet.distance = distance;
    packet.voltage = voltage;

    _mav_finalize_message_chan_send(chan, 173, (const char *)&packet, 8, 8, 83);

}






static inline void mavlink_msg_rangefinder_send_struct(mavlink_channel_t chan, const mavlink_rangefinder_t* rangefinder)
{



    _mav_finalize_message_chan_send(chan, 173, (const char *)rangefinder, 8, 8, 83);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline void mavlink_msg_rangefinder_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float distance, float voltage)
{







    mavlink_rangefinder_t *packet = (mavlink_rangefinder_t *)msgbuf;
    packet->distance = distance;
    packet->voltage = voltage;

    _mav_finalize_message_chan_send(chan, 173, (const char *)packet, 8, 8, 83);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rangefinder.h"
static inline float mavlink_msg_rangefinder_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_rangefinder_get_voltage(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_rangefinder_decode(const mavlink_message_t* msg, mavlink_rangefinder_t* rangefinder)
{




        uint8_t len = msg->len < 8? msg->len : 8;
        memset(rangefinder, 0, 8);
    memcpy(rangefinder, ((const char *)(&((msg)->payload64[0]))), len);

}
# 789 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h" 1
       




typedef struct __mavlink_airspeed_autocal_t { float vx; float vy; float vz; float diff_pressure; float EAS2TAS; float ratio; float state_x; float state_y; float state_z; float Pax; float Pby; float Pcz; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
   mavlink_airspeed_autocal_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline uint16_t mavlink_msg_airspeed_autocal_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float vx, float vy, float vz, float diff_pressure, float EAS2TAS, float ratio, float state_x, float state_y, float state_z, float Pax, float Pby, float Pcz)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
    mavlink_airspeed_autocal_t packet;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.diff_pressure = diff_pressure;
    packet.EAS2TAS = EAS2TAS;
    packet.ratio = ratio;
    packet.state_x = state_x;
    packet.state_y = state_y;
    packet.state_z = state_z;
    packet.Pax = Pax;
    packet.Pby = Pby;
    packet.Pcz = Pcz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 48);


    msg->msgid = 174;
    return mavlink_finalize_message(msg, system_id, component_id, 48, 48, 167);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline uint16_t mavlink_msg_airspeed_autocal_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float vx,float vy,float vz,float diff_pressure,float EAS2TAS,float ratio,float state_x,float state_y,float state_z,float Pax,float Pby,float Pcz)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
    mavlink_airspeed_autocal_t packet;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.diff_pressure = diff_pressure;
    packet.EAS2TAS = EAS2TAS;
    packet.ratio = ratio;
    packet.state_x = state_x;
    packet.state_y = state_y;
    packet.state_z = state_z;
    packet.Pax = Pax;
    packet.Pby = Pby;
    packet.Pcz = Pcz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 48);


    msg->msgid = 174;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 48, 48, 167);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline uint16_t mavlink_msg_airspeed_autocal_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_airspeed_autocal_t* airspeed_autocal)
{
    return mavlink_msg_airspeed_autocal_pack(system_id, component_id, msg, airspeed_autocal->vx, airspeed_autocal->vy, airspeed_autocal->vz, airspeed_autocal->diff_pressure, airspeed_autocal->EAS2TAS, airspeed_autocal->ratio, airspeed_autocal->state_x, airspeed_autocal->state_y, airspeed_autocal->state_z, airspeed_autocal->Pax, airspeed_autocal->Pby, airspeed_autocal->Pcz);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline uint16_t mavlink_msg_airspeed_autocal_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_airspeed_autocal_t* airspeed_autocal)
{
    return mavlink_msg_airspeed_autocal_pack_chan(system_id, component_id, chan, msg, airspeed_autocal->vx, airspeed_autocal->vy, airspeed_autocal->vz, airspeed_autocal->diff_pressure, airspeed_autocal->EAS2TAS, airspeed_autocal->ratio, airspeed_autocal->state_x, airspeed_autocal->state_y, airspeed_autocal->state_z, airspeed_autocal->Pax, airspeed_autocal->Pby, airspeed_autocal->Pcz);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline void mavlink_msg_airspeed_autocal_send(mavlink_channel_t chan, float vx, float vy, float vz, float diff_pressure, float EAS2TAS, float ratio, float state_x, float state_y, float state_z, float Pax, float Pby, float Pcz)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
    mavlink_airspeed_autocal_t packet;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.diff_pressure = diff_pressure;
    packet.EAS2TAS = EAS2TAS;
    packet.ratio = ratio;
    packet.state_x = state_x;
    packet.state_y = state_y;
    packet.state_z = state_z;
    packet.Pax = Pax;
    packet.Pby = Pby;
    packet.Pcz = Pcz;

    _mav_finalize_message_chan_send(chan, 174, (const char *)&packet, 48, 48, 167);

}






static inline void mavlink_msg_airspeed_autocal_send_struct(mavlink_channel_t chan, const mavlink_airspeed_autocal_t* airspeed_autocal)
{



    _mav_finalize_message_chan_send(chan, 174, (const char *)airspeed_autocal, 48, 48, 167);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline void mavlink_msg_airspeed_autocal_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float vx, float vy, float vz, float diff_pressure, float EAS2TAS, float ratio, float state_x, float state_y, float state_z, float Pax, float Pby, float Pcz)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
    mavlink_airspeed_autocal_t *packet = (mavlink_airspeed_autocal_t *)msgbuf;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->diff_pressure = diff_pressure;
    packet->EAS2TAS = EAS2TAS;
    packet->ratio = ratio;
    packet->state_x = state_x;
    packet->state_y = state_y;
    packet->state_z = state_z;
    packet->Pax = Pax;
    packet->Pby = Pby;
    packet->Pcz = Pcz;

    _mav_finalize_message_chan_send(chan, 174, (const char *)packet, 48, 48, 167);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
static inline float mavlink_msg_airspeed_autocal_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_airspeed_autocal_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_airspeed_autocal_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_airspeed_autocal_get_diff_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_airspeed_autocal_get_EAS2TAS(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_airspeed_autocal_get_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_airspeed_autocal_get_state_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_airspeed_autocal_get_state_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_airspeed_autocal_get_state_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_airspeed_autocal_get_Pax(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_airspeed_autocal_get_Pby(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_airspeed_autocal_get_Pcz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_airspeed_autocal_decode(const mavlink_message_t* msg, mavlink_airspeed_autocal_t* airspeed_autocal)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_airspeed_autocal.h"
        uint8_t len = msg->len < 48? msg->len : 48;
        memset(airspeed_autocal, 0, 48);
    memcpy(airspeed_autocal, ((const char *)(&((msg)->payload64[0]))), len);

}
# 790 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h" 1
       




typedef struct __mavlink_rally_point_t { int32_t lat; int32_t lng; int16_t alt; int16_t break_alt; uint16_t land_dir; uint8_t target_system; uint8_t target_component; uint8_t idx; uint8_t count; uint8_t flags; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
   mavlink_rally_point_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline uint16_t mavlink_msg_rally_point_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t idx, uint8_t count, int32_t lat, int32_t lng, int16_t alt, int16_t break_alt, uint16_t land_dir, uint8_t flags)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
    mavlink_rally_point_t packet;
    packet.lat = lat;
    packet.lng = lng;
    packet.alt = alt;
    packet.break_alt = break_alt;
    packet.land_dir = land_dir;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;
    packet.count = count;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 19);


    msg->msgid = 175;
    return mavlink_finalize_message(msg, system_id, component_id, 19, 19, 138);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline uint16_t mavlink_msg_rally_point_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t idx,uint8_t count,int32_t lat,int32_t lng,int16_t alt,int16_t break_alt,uint16_t land_dir,uint8_t flags)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
    mavlink_rally_point_t packet;
    packet.lat = lat;
    packet.lng = lng;
    packet.alt = alt;
    packet.break_alt = break_alt;
    packet.land_dir = land_dir;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;
    packet.count = count;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 19);


    msg->msgid = 175;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 19, 19, 138);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline uint16_t mavlink_msg_rally_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rally_point_t* rally_point)
{
    return mavlink_msg_rally_point_pack(system_id, component_id, msg, rally_point->target_system, rally_point->target_component, rally_point->idx, rally_point->count, rally_point->lat, rally_point->lng, rally_point->alt, rally_point->break_alt, rally_point->land_dir, rally_point->flags);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline uint16_t mavlink_msg_rally_point_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rally_point_t* rally_point)
{
    return mavlink_msg_rally_point_pack_chan(system_id, component_id, chan, msg, rally_point->target_system, rally_point->target_component, rally_point->idx, rally_point->count, rally_point->lat, rally_point->lng, rally_point->alt, rally_point->break_alt, rally_point->land_dir, rally_point->flags);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline void mavlink_msg_rally_point_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx, uint8_t count, int32_t lat, int32_t lng, int16_t alt, int16_t break_alt, uint16_t land_dir, uint8_t flags)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
    mavlink_rally_point_t packet;
    packet.lat = lat;
    packet.lng = lng;
    packet.alt = alt;
    packet.break_alt = break_alt;
    packet.land_dir = land_dir;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;
    packet.count = count;
    packet.flags = flags;

    _mav_finalize_message_chan_send(chan, 175, (const char *)&packet, 19, 19, 138);

}






static inline void mavlink_msg_rally_point_send_struct(mavlink_channel_t chan, const mavlink_rally_point_t* rally_point)
{



    _mav_finalize_message_chan_send(chan, 175, (const char *)rally_point, 19, 19, 138);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline void mavlink_msg_rally_point_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx, uint8_t count, int32_t lat, int32_t lng, int16_t alt, int16_t break_alt, uint16_t land_dir, uint8_t flags)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
    mavlink_rally_point_t *packet = (mavlink_rally_point_t *)msgbuf;
    packet->lat = lat;
    packet->lng = lng;
    packet->alt = alt;
    packet->break_alt = break_alt;
    packet->land_dir = land_dir;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->idx = idx;
    packet->count = count;
    packet->flags = flags;

    _mav_finalize_message_chan_send(chan, 175, (const char *)packet, 19, 19, 138);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
static inline uint8_t mavlink_msg_rally_point_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[14];
}






static inline uint8_t mavlink_msg_rally_point_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[15];
}






static inline uint8_t mavlink_msg_rally_point_get_idx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint8_t mavlink_msg_rally_point_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline int32_t mavlink_msg_rally_point_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_rally_point_get_lng(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int16_t mavlink_msg_rally_point_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_rally_point_get_break_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rally_point_get_land_dir(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint8_t mavlink_msg_rally_point_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}







static inline void mavlink_msg_rally_point_decode(const mavlink_message_t* msg, mavlink_rally_point_t* rally_point)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_point.h"
        uint8_t len = msg->len < 19? msg->len : 19;
        memset(rally_point, 0, 19);
    memcpy(rally_point, ((const char *)(&((msg)->payload64[0]))), len);

}
# 791 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h" 1
       




typedef struct __mavlink_rally_fetch_point_t { uint8_t target_system; uint8_t target_component; uint8_t idx; } __attribute__((packed))




   mavlink_rally_fetch_point_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline uint16_t mavlink_msg_rally_fetch_point_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t idx)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
    mavlink_rally_fetch_point_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 176;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 234);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline uint16_t mavlink_msg_rally_fetch_point_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t idx)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
    mavlink_rally_fetch_point_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 176;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 234);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline uint16_t mavlink_msg_rally_fetch_point_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rally_fetch_point_t* rally_fetch_point)
{
    return mavlink_msg_rally_fetch_point_pack(system_id, component_id, msg, rally_fetch_point->target_system, rally_fetch_point->target_component, rally_fetch_point->idx);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline uint16_t mavlink_msg_rally_fetch_point_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rally_fetch_point_t* rally_fetch_point)
{
    return mavlink_msg_rally_fetch_point_pack_chan(system_id, component_id, chan, msg, rally_fetch_point->target_system, rally_fetch_point->target_component, rally_fetch_point->idx);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline void mavlink_msg_rally_fetch_point_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
    mavlink_rally_fetch_point_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.idx = idx;

    _mav_finalize_message_chan_send(chan, 176, (const char *)&packet, 3, 3, 234);

}






static inline void mavlink_msg_rally_fetch_point_send_struct(mavlink_channel_t chan, const mavlink_rally_fetch_point_t* rally_fetch_point)
{



    _mav_finalize_message_chan_send(chan, 176, (const char *)rally_fetch_point, 3, 3, 234);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline void mavlink_msg_rally_fetch_point_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t idx)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
    mavlink_rally_fetch_point_t *packet = (mavlink_rally_fetch_point_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->idx = idx;

    _mav_finalize_message_chan_send(chan, 176, (const char *)packet, 3, 3, 234);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rally_fetch_point.h"
static inline uint8_t mavlink_msg_rally_fetch_point_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_rally_fetch_point_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_rally_fetch_point_get_idx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_rally_fetch_point_decode(const mavlink_message_t* msg, mavlink_rally_fetch_point_t* rally_fetch_point)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(rally_fetch_point, 0, 3);
    memcpy(rally_fetch_point, ((const char *)(&((msg)->payload64[0]))), len);

}
# 792 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h" 1
       




typedef struct __mavlink_compassmot_status_t { float current; float CompensationX; float CompensationY; float CompensationZ; uint16_t throttle; uint16_t interference; } __attribute__((packed))







   mavlink_compassmot_status_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline uint16_t mavlink_msg_compassmot_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t throttle, float current, uint16_t interference, float CompensationX, float CompensationY, float CompensationZ)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
    mavlink_compassmot_status_t packet;
    packet.current = current;
    packet.CompensationX = CompensationX;
    packet.CompensationY = CompensationY;
    packet.CompensationZ = CompensationZ;
    packet.throttle = throttle;
    packet.interference = interference;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 177;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 240);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline uint16_t mavlink_msg_compassmot_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t throttle,float current,uint16_t interference,float CompensationX,float CompensationY,float CompensationZ)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
    mavlink_compassmot_status_t packet;
    packet.current = current;
    packet.CompensationX = CompensationX;
    packet.CompensationY = CompensationY;
    packet.CompensationZ = CompensationZ;
    packet.throttle = throttle;
    packet.interference = interference;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 177;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 240);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline uint16_t mavlink_msg_compassmot_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_compassmot_status_t* compassmot_status)
{
    return mavlink_msg_compassmot_status_pack(system_id, component_id, msg, compassmot_status->throttle, compassmot_status->current, compassmot_status->interference, compassmot_status->CompensationX, compassmot_status->CompensationY, compassmot_status->CompensationZ);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline uint16_t mavlink_msg_compassmot_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_compassmot_status_t* compassmot_status)
{
    return mavlink_msg_compassmot_status_pack_chan(system_id, component_id, chan, msg, compassmot_status->throttle, compassmot_status->current, compassmot_status->interference, compassmot_status->CompensationX, compassmot_status->CompensationY, compassmot_status->CompensationZ);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline void mavlink_msg_compassmot_status_send(mavlink_channel_t chan, uint16_t throttle, float current, uint16_t interference, float CompensationX, float CompensationY, float CompensationZ)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
    mavlink_compassmot_status_t packet;
    packet.current = current;
    packet.CompensationX = CompensationX;
    packet.CompensationY = CompensationY;
    packet.CompensationZ = CompensationZ;
    packet.throttle = throttle;
    packet.interference = interference;

    _mav_finalize_message_chan_send(chan, 177, (const char *)&packet, 20, 20, 240);

}






static inline void mavlink_msg_compassmot_status_send_struct(mavlink_channel_t chan, const mavlink_compassmot_status_t* compassmot_status)
{



    _mav_finalize_message_chan_send(chan, 177, (const char *)compassmot_status, 20, 20, 240);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline void mavlink_msg_compassmot_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t throttle, float current, uint16_t interference, float CompensationX, float CompensationY, float CompensationZ)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
    mavlink_compassmot_status_t *packet = (mavlink_compassmot_status_t *)msgbuf;
    packet->current = current;
    packet->CompensationX = CompensationX;
    packet->CompensationY = CompensationY;
    packet->CompensationZ = CompensationZ;
    packet->throttle = throttle;
    packet->interference = interference;

    _mav_finalize_message_chan_send(chan, 177, (const char *)packet, 20, 20, 240);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
static inline uint16_t mavlink_msg_compassmot_status_get_throttle(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline float mavlink_msg_compassmot_status_get_current(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline uint16_t mavlink_msg_compassmot_status_get_interference(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline float mavlink_msg_compassmot_status_get_CompensationX(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_compassmot_status_get_CompensationY(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_compassmot_status_get_CompensationZ(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_compassmot_status_decode(const mavlink_message_t* msg, mavlink_compassmot_status_t* compassmot_status)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_compassmot_status.h"
        uint8_t len = msg->len < 20? msg->len : 20;
        memset(compassmot_status, 0, 20);
    memcpy(compassmot_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 793 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h" 1
       




typedef struct __mavlink_ahrs2_t { float roll; float pitch; float yaw; float altitude; int32_t lat; int32_t lng; } __attribute__((packed))







   mavlink_ahrs2_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline uint16_t mavlink_msg_ahrs2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float roll, float pitch, float yaw, float altitude, int32_t lat, int32_t lng)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
    mavlink_ahrs2_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.altitude = altitude;
    packet.lat = lat;
    packet.lng = lng;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 24);


    msg->msgid = 178;
    return mavlink_finalize_message(msg, system_id, component_id, 24, 24, 47);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline uint16_t mavlink_msg_ahrs2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float roll,float pitch,float yaw,float altitude,int32_t lat,int32_t lng)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
    mavlink_ahrs2_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.altitude = altitude;
    packet.lat = lat;
    packet.lng = lng;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 24);


    msg->msgid = 178;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 24, 24, 47);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline uint16_t mavlink_msg_ahrs2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ahrs2_t* ahrs2)
{
    return mavlink_msg_ahrs2_pack(system_id, component_id, msg, ahrs2->roll, ahrs2->pitch, ahrs2->yaw, ahrs2->altitude, ahrs2->lat, ahrs2->lng);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline uint16_t mavlink_msg_ahrs2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ahrs2_t* ahrs2)
{
    return mavlink_msg_ahrs2_pack_chan(system_id, component_id, chan, msg, ahrs2->roll, ahrs2->pitch, ahrs2->yaw, ahrs2->altitude, ahrs2->lat, ahrs2->lng);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline void mavlink_msg_ahrs2_send(mavlink_channel_t chan, float roll, float pitch, float yaw, float altitude, int32_t lat, int32_t lng)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
    mavlink_ahrs2_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.altitude = altitude;
    packet.lat = lat;
    packet.lng = lng;

    _mav_finalize_message_chan_send(chan, 178, (const char *)&packet, 24, 24, 47);

}






static inline void mavlink_msg_ahrs2_send_struct(mavlink_channel_t chan, const mavlink_ahrs2_t* ahrs2)
{



    _mav_finalize_message_chan_send(chan, 178, (const char *)ahrs2, 24, 24, 47);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline void mavlink_msg_ahrs2_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float roll, float pitch, float yaw, float altitude, int32_t lat, int32_t lng)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
    mavlink_ahrs2_t *packet = (mavlink_ahrs2_t *)msgbuf;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->altitude = altitude;
    packet->lat = lat;
    packet->lng = lng;

    _mav_finalize_message_chan_send(chan, 178, (const char *)packet, 24, 24, 47);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
static inline float mavlink_msg_ahrs2_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_ahrs2_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_ahrs2_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_ahrs2_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_ahrs2_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_ahrs2_get_lng(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}







static inline void mavlink_msg_ahrs2_decode(const mavlink_message_t* msg, mavlink_ahrs2_t* ahrs2)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs2.h"
        uint8_t len = msg->len < 24? msg->len : 24;
        memset(ahrs2, 0, 24);
    memcpy(ahrs2, ((const char *)(&((msg)->payload64[0]))), len);

}
# 794 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h" 1
       




typedef struct __mavlink_camera_status_t { uint64_t time_usec; float p1; float p2; float p3; float p4; uint16_t img_idx; uint8_t target_system; uint8_t cam_idx; uint8_t event_id; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
   mavlink_camera_status_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline uint16_t mavlink_msg_camera_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t target_system, uint8_t cam_idx, uint16_t img_idx, uint8_t event_id, float p1, float p2, float p3, float p4)
{
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
    mavlink_camera_status_t packet;
    packet.time_usec = time_usec;
    packet.p1 = p1;
    packet.p2 = p2;
    packet.p3 = p3;
    packet.p4 = p4;
    packet.img_idx = img_idx;
    packet.target_system = target_system;
    packet.cam_idx = cam_idx;
    packet.event_id = event_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 29);


    msg->msgid = 179;
    return mavlink_finalize_message(msg, system_id, component_id, 29, 29, 189);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline uint16_t mavlink_msg_camera_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t target_system,uint8_t cam_idx,uint16_t img_idx,uint8_t event_id,float p1,float p2,float p3,float p4)
{
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
    mavlink_camera_status_t packet;
    packet.time_usec = time_usec;
    packet.p1 = p1;
    packet.p2 = p2;
    packet.p3 = p3;
    packet.p4 = p4;
    packet.img_idx = img_idx;
    packet.target_system = target_system;
    packet.cam_idx = cam_idx;
    packet.event_id = event_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 29);


    msg->msgid = 179;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 29, 29, 189);
}
# 175 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline uint16_t mavlink_msg_camera_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_status_t* camera_status)
{
    return mavlink_msg_camera_status_pack(system_id, component_id, msg, camera_status->time_usec, camera_status->target_system, camera_status->cam_idx, camera_status->img_idx, camera_status->event_id, camera_status->p1, camera_status->p2, camera_status->p3, camera_status->p4);
}
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline uint16_t mavlink_msg_camera_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_status_t* camera_status)
{
    return mavlink_msg_camera_status_pack_chan(system_id, component_id, chan, msg, camera_status->time_usec, camera_status->target_system, camera_status->cam_idx, camera_status->img_idx, camera_status->event_id, camera_status->p1, camera_status->p2, camera_status->p3, camera_status->p4);
}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline void mavlink_msg_camera_status_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t target_system, uint8_t cam_idx, uint16_t img_idx, uint8_t event_id, float p1, float p2, float p3, float p4)
{
# 226 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
    mavlink_camera_status_t packet;
    packet.time_usec = time_usec;
    packet.p1 = p1;
    packet.p2 = p2;
    packet.p3 = p3;
    packet.p4 = p4;
    packet.img_idx = img_idx;
    packet.target_system = target_system;
    packet.cam_idx = cam_idx;
    packet.event_id = event_id;

    _mav_finalize_message_chan_send(chan, 179, (const char *)&packet, 29, 29, 189);

}






static inline void mavlink_msg_camera_status_send_struct(mavlink_channel_t chan, const mavlink_camera_status_t* camera_status)
{



    _mav_finalize_message_chan_send(chan, 179, (const char *)camera_status, 29, 29, 189);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline void mavlink_msg_camera_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t target_system, uint8_t cam_idx, uint16_t img_idx, uint8_t event_id, float p1, float p2, float p3, float p4)
{
# 279 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
    mavlink_camera_status_t *packet = (mavlink_camera_status_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->p1 = p1;
    packet->p2 = p2;
    packet->p3 = p3;
    packet->p4 = p4;
    packet->img_idx = img_idx;
    packet->target_system = target_system;
    packet->cam_idx = cam_idx;
    packet->event_id = event_id;

    _mav_finalize_message_chan_send(chan, 179, (const char *)packet, 29, 29, 189);

}
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
static inline uint64_t mavlink_msg_camera_status_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_camera_status_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline uint8_t mavlink_msg_camera_status_get_cam_idx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[27];
}






static inline uint16_t mavlink_msg_camera_status_get_img_idx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint8_t mavlink_msg_camera_status_get_event_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline float mavlink_msg_camera_status_get_p1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_camera_status_get_p2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_camera_status_get_p3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_camera_status_get_p4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_camera_status_decode(const mavlink_message_t* msg, mavlink_camera_status_t* camera_status)
{
# 409 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_status.h"
        uint8_t len = msg->len < 29? msg->len : 29;
        memset(camera_status, 0, 29);
    memcpy(camera_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 795 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h" 1
       




typedef struct __mavlink_camera_feedback_t { uint64_t time_usec; int32_t lat; int32_t lng; float alt_msl; float alt_rel; float roll; float pitch; float yaw; float foc_len; uint16_t img_idx; uint8_t target_system; uint8_t cam_idx; uint8_t flags; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
   mavlink_camera_feedback_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline uint16_t mavlink_msg_camera_feedback_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t target_system, uint8_t cam_idx, uint16_t img_idx, int32_t lat, int32_t lng, float alt_msl, float alt_rel, float roll, float pitch, float yaw, float foc_len, uint8_t flags)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
    mavlink_camera_feedback_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lng = lng;
    packet.alt_msl = alt_msl;
    packet.alt_rel = alt_rel;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.foc_len = foc_len;
    packet.img_idx = img_idx;
    packet.target_system = target_system;
    packet.cam_idx = cam_idx;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 45);


    msg->msgid = 180;
    return mavlink_finalize_message(msg, system_id, component_id, 45, 45, 52);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline uint16_t mavlink_msg_camera_feedback_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t target_system,uint8_t cam_idx,uint16_t img_idx,int32_t lat,int32_t lng,float alt_msl,float alt_rel,float roll,float pitch,float yaw,float foc_len,uint8_t flags)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
    mavlink_camera_feedback_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lng = lng;
    packet.alt_msl = alt_msl;
    packet.alt_rel = alt_rel;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.foc_len = foc_len;
    packet.img_idx = img_idx;
    packet.target_system = target_system;
    packet.cam_idx = cam_idx;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 45);


    msg->msgid = 180;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 45, 45, 52);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline uint16_t mavlink_msg_camera_feedback_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_feedback_t* camera_feedback)
{
    return mavlink_msg_camera_feedback_pack(system_id, component_id, msg, camera_feedback->time_usec, camera_feedback->target_system, camera_feedback->cam_idx, camera_feedback->img_idx, camera_feedback->lat, camera_feedback->lng, camera_feedback->alt_msl, camera_feedback->alt_rel, camera_feedback->roll, camera_feedback->pitch, camera_feedback->yaw, camera_feedback->foc_len, camera_feedback->flags);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline uint16_t mavlink_msg_camera_feedback_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_feedback_t* camera_feedback)
{
    return mavlink_msg_camera_feedback_pack_chan(system_id, component_id, chan, msg, camera_feedback->time_usec, camera_feedback->target_system, camera_feedback->cam_idx, camera_feedback->img_idx, camera_feedback->lat, camera_feedback->lng, camera_feedback->alt_msl, camera_feedback->alt_rel, camera_feedback->roll, camera_feedback->pitch, camera_feedback->yaw, camera_feedback->foc_len, camera_feedback->flags);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline void mavlink_msg_camera_feedback_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t target_system, uint8_t cam_idx, uint16_t img_idx, int32_t lat, int32_t lng, float alt_msl, float alt_rel, float roll, float pitch, float yaw, float foc_len, uint8_t flags)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
    mavlink_camera_feedback_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lng = lng;
    packet.alt_msl = alt_msl;
    packet.alt_rel = alt_rel;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.foc_len = foc_len;
    packet.img_idx = img_idx;
    packet.target_system = target_system;
    packet.cam_idx = cam_idx;
    packet.flags = flags;

    _mav_finalize_message_chan_send(chan, 180, (const char *)&packet, 45, 45, 52);

}






static inline void mavlink_msg_camera_feedback_send_struct(mavlink_channel_t chan, const mavlink_camera_feedback_t* camera_feedback)
{



    _mav_finalize_message_chan_send(chan, 180, (const char *)camera_feedback, 45, 45, 52);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline void mavlink_msg_camera_feedback_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t target_system, uint8_t cam_idx, uint16_t img_idx, int32_t lat, int32_t lng, float alt_msl, float alt_rel, float roll, float pitch, float yaw, float foc_len, uint8_t flags)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
    mavlink_camera_feedback_t *packet = (mavlink_camera_feedback_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->lat = lat;
    packet->lng = lng;
    packet->alt_msl = alt_msl;
    packet->alt_rel = alt_rel;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->foc_len = foc_len;
    packet->img_idx = img_idx;
    packet->target_system = target_system;
    packet->cam_idx = cam_idx;
    packet->flags = flags;

    _mav_finalize_message_chan_send(chan, 180, (const char *)packet, 45, 45, 52);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
static inline uint64_t mavlink_msg_camera_feedback_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_camera_feedback_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint8_t mavlink_msg_camera_feedback_get_cam_idx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint16_t mavlink_msg_camera_feedback_get_img_idx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 40);
}






static inline int32_t mavlink_msg_camera_feedback_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_camera_feedback_get_lng(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline float mavlink_msg_camera_feedback_get_alt_msl(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_camera_feedback_get_alt_rel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_camera_feedback_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_camera_feedback_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_camera_feedback_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_camera_feedback_get_foc_len(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline uint8_t mavlink_msg_camera_feedback_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[44];
}







static inline void mavlink_msg_camera_feedback_decode(const mavlink_message_t* msg, mavlink_camera_feedback_t* camera_feedback)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_camera_feedback.h"
        uint8_t len = msg->len < 45? msg->len : 45;
        memset(camera_feedback, 0, 45);
    memcpy(camera_feedback, ((const char *)(&((msg)->payload64[0]))), len);

}
# 796 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h" 1
       




typedef struct __mavlink_battery2_t { uint16_t voltage; int16_t current_battery; } __attribute__((packed))



   mavlink_battery2_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline uint16_t mavlink_msg_battery2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t voltage, int16_t current_battery)
{







    mavlink_battery2_t packet;
    packet.voltage = voltage;
    packet.current_battery = current_battery;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 181;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 174);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline uint16_t mavlink_msg_battery2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t voltage,int16_t current_battery)
{







    mavlink_battery2_t packet;
    packet.voltage = voltage;
    packet.current_battery = current_battery;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 181;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 174);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline uint16_t mavlink_msg_battery2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_battery2_t* battery2)
{
    return mavlink_msg_battery2_pack(system_id, component_id, msg, battery2->voltage, battery2->current_battery);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline uint16_t mavlink_msg_battery2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_battery2_t* battery2)
{
    return mavlink_msg_battery2_pack_chan(system_id, component_id, chan, msg, battery2->voltage, battery2->current_battery);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline void mavlink_msg_battery2_send(mavlink_channel_t chan, uint16_t voltage, int16_t current_battery)
{







    mavlink_battery2_t packet;
    packet.voltage = voltage;
    packet.current_battery = current_battery;

    _mav_finalize_message_chan_send(chan, 181, (const char *)&packet, 4, 4, 174);

}






static inline void mavlink_msg_battery2_send_struct(mavlink_channel_t chan, const mavlink_battery2_t* battery2)
{



    _mav_finalize_message_chan_send(chan, 181, (const char *)battery2, 4, 4, 174);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline void mavlink_msg_battery2_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t voltage, int16_t current_battery)
{







    mavlink_battery2_t *packet = (mavlink_battery2_t *)msgbuf;
    packet->voltage = voltage;
    packet->current_battery = current_battery;

    _mav_finalize_message_chan_send(chan, 181, (const char *)packet, 4, 4, 174);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_battery2.h"
static inline uint16_t mavlink_msg_battery2_get_voltage(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline int16_t mavlink_msg_battery2_get_current_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_battery2_decode(const mavlink_message_t* msg, mavlink_battery2_t* battery2)
{




        uint8_t len = msg->len < 4? msg->len : 4;
        memset(battery2, 0, 4);
    memcpy(battery2, ((const char *)(&((msg)->payload64[0]))), len);

}
# 797 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h" 1
       




typedef struct __mavlink_ahrs3_t { float roll; float pitch; float yaw; float altitude; int32_t lat; int32_t lng; float v1; float v2; float v3; float v4; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
   mavlink_ahrs3_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline uint16_t mavlink_msg_ahrs3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float roll, float pitch, float yaw, float altitude, int32_t lat, int32_t lng, float v1, float v2, float v3, float v4)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
    mavlink_ahrs3_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.altitude = altitude;
    packet.lat = lat;
    packet.lng = lng;
    packet.v1 = v1;
    packet.v2 = v2;
    packet.v3 = v3;
    packet.v4 = v4;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 182;
    return mavlink_finalize_message(msg, system_id, component_id, 40, 40, 229);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline uint16_t mavlink_msg_ahrs3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float roll,float pitch,float yaw,float altitude,int32_t lat,int32_t lng,float v1,float v2,float v3,float v4)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
    mavlink_ahrs3_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.altitude = altitude;
    packet.lat = lat;
    packet.lng = lng;
    packet.v1 = v1;
    packet.v2 = v2;
    packet.v3 = v3;
    packet.v4 = v4;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 182;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 40, 40, 229);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline uint16_t mavlink_msg_ahrs3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ahrs3_t* ahrs3)
{
    return mavlink_msg_ahrs3_pack(system_id, component_id, msg, ahrs3->roll, ahrs3->pitch, ahrs3->yaw, ahrs3->altitude, ahrs3->lat, ahrs3->lng, ahrs3->v1, ahrs3->v2, ahrs3->v3, ahrs3->v4);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline uint16_t mavlink_msg_ahrs3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ahrs3_t* ahrs3)
{
    return mavlink_msg_ahrs3_pack_chan(system_id, component_id, chan, msg, ahrs3->roll, ahrs3->pitch, ahrs3->yaw, ahrs3->altitude, ahrs3->lat, ahrs3->lng, ahrs3->v1, ahrs3->v2, ahrs3->v3, ahrs3->v4);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline void mavlink_msg_ahrs3_send(mavlink_channel_t chan, float roll, float pitch, float yaw, float altitude, int32_t lat, int32_t lng, float v1, float v2, float v3, float v4)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
    mavlink_ahrs3_t packet;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.altitude = altitude;
    packet.lat = lat;
    packet.lng = lng;
    packet.v1 = v1;
    packet.v2 = v2;
    packet.v3 = v3;
    packet.v4 = v4;

    _mav_finalize_message_chan_send(chan, 182, (const char *)&packet, 40, 40, 229);

}






static inline void mavlink_msg_ahrs3_send_struct(mavlink_channel_t chan, const mavlink_ahrs3_t* ahrs3)
{



    _mav_finalize_message_chan_send(chan, 182, (const char *)ahrs3, 40, 40, 229);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline void mavlink_msg_ahrs3_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float roll, float pitch, float yaw, float altitude, int32_t lat, int32_t lng, float v1, float v2, float v3, float v4)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
    mavlink_ahrs3_t *packet = (mavlink_ahrs3_t *)msgbuf;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->altitude = altitude;
    packet->lat = lat;
    packet->lng = lng;
    packet->v1 = v1;
    packet->v2 = v2;
    packet->v3 = v3;
    packet->v4 = v4;

    _mav_finalize_message_chan_send(chan, 182, (const char *)packet, 40, 40, 229);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
static inline float mavlink_msg_ahrs3_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_ahrs3_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_ahrs3_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_ahrs3_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_ahrs3_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_ahrs3_get_lng(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_ahrs3_get_v1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_ahrs3_get_v2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_ahrs3_get_v3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_ahrs3_get_v4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_ahrs3_decode(const mavlink_message_t* msg, mavlink_ahrs3_t* ahrs3)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ahrs3.h"
        uint8_t len = msg->len < 40? msg->len : 40;
        memset(ahrs3, 0, 40);
    memcpy(ahrs3, ((const char *)(&((msg)->payload64[0]))), len);

}
# 798 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h" 1
       




typedef struct __mavlink_autopilot_version_request_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_autopilot_version_request_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline uint16_t mavlink_msg_autopilot_version_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_autopilot_version_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 183;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 85);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline uint16_t mavlink_msg_autopilot_version_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_autopilot_version_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 183;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 85);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline uint16_t mavlink_msg_autopilot_version_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_autopilot_version_request_t* autopilot_version_request)
{
    return mavlink_msg_autopilot_version_request_pack(system_id, component_id, msg, autopilot_version_request->target_system, autopilot_version_request->target_component);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline uint16_t mavlink_msg_autopilot_version_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_autopilot_version_request_t* autopilot_version_request)
{
    return mavlink_msg_autopilot_version_request_pack_chan(system_id, component_id, chan, msg, autopilot_version_request->target_system, autopilot_version_request->target_component);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline void mavlink_msg_autopilot_version_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_autopilot_version_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 183, (const char *)&packet, 2, 2, 85);

}






static inline void mavlink_msg_autopilot_version_request_send_struct(mavlink_channel_t chan, const mavlink_autopilot_version_request_t* autopilot_version_request)
{



    _mav_finalize_message_chan_send(chan, 183, (const char *)autopilot_version_request, 2, 2, 85);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline void mavlink_msg_autopilot_version_request_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_autopilot_version_request_t *packet = (mavlink_autopilot_version_request_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 183, (const char *)packet, 2, 2, 85);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_autopilot_version_request.h"
static inline uint8_t mavlink_msg_autopilot_version_request_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_autopilot_version_request_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_autopilot_version_request_decode(const mavlink_message_t* msg, mavlink_autopilot_version_request_t* autopilot_version_request)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(autopilot_version_request, 0, 2);
    memcpy(autopilot_version_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 799 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h" 1
       




typedef struct __mavlink_remote_log_data_block_t { uint32_t seqno; uint8_t target_system; uint8_t target_component; uint8_t data[200]; } __attribute__((packed))





   mavlink_remote_log_data_block_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline uint16_t mavlink_msg_remote_log_data_block_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint32_t seqno, const uint8_t *data)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
    mavlink_remote_log_data_block_t packet;
    packet.seqno = seqno;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*200);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 206);


    msg->msgid = 184;
    return mavlink_finalize_message(msg, system_id, component_id, 206, 206, 159);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline uint16_t mavlink_msg_remote_log_data_block_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint32_t seqno,const uint8_t *data)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
    mavlink_remote_log_data_block_t packet;
    packet.seqno = seqno;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*200);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 206);


    msg->msgid = 184;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 206, 206, 159);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline uint16_t mavlink_msg_remote_log_data_block_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_remote_log_data_block_t* remote_log_data_block)
{
    return mavlink_msg_remote_log_data_block_pack(system_id, component_id, msg, remote_log_data_block->target_system, remote_log_data_block->target_component, remote_log_data_block->seqno, remote_log_data_block->data);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline uint16_t mavlink_msg_remote_log_data_block_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_remote_log_data_block_t* remote_log_data_block)
{
    return mavlink_msg_remote_log_data_block_pack_chan(system_id, component_id, chan, msg, remote_log_data_block->target_system, remote_log_data_block->target_component, remote_log_data_block->seqno, remote_log_data_block->data);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline void mavlink_msg_remote_log_data_block_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t seqno, const uint8_t *data)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
    mavlink_remote_log_data_block_t packet;
    packet.seqno = seqno;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*200);
    _mav_finalize_message_chan_send(chan, 184, (const char *)&packet, 206, 206, 159);

}






static inline void mavlink_msg_remote_log_data_block_send_struct(mavlink_channel_t chan, const mavlink_remote_log_data_block_t* remote_log_data_block)
{



    _mav_finalize_message_chan_send(chan, 184, (const char *)remote_log_data_block, 206, 206, 159);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline void mavlink_msg_remote_log_data_block_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t seqno, const uint8_t *data)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
    mavlink_remote_log_data_block_t *packet = (mavlink_remote_log_data_block_t *)msgbuf;
    packet->seqno = seqno;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*200);
    _mav_finalize_message_chan_send(chan, 184, (const char *)packet, 206, 206, 159);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_data_block.h"
static inline uint8_t mavlink_msg_remote_log_data_block_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_remote_log_data_block_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_remote_log_data_block_get_seqno(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_remote_log_data_block_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 200, 6);
}







static inline void mavlink_msg_remote_log_data_block_decode(const mavlink_message_t* msg, mavlink_remote_log_data_block_t* remote_log_data_block)
{






        uint8_t len = msg->len < 206? msg->len : 206;
        memset(remote_log_data_block, 0, 206);
    memcpy(remote_log_data_block, ((const char *)(&((msg)->payload64[0]))), len);

}
# 800 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h" 1
       




typedef struct __mavlink_remote_log_block_status_t { uint32_t seqno; uint8_t target_system; uint8_t target_component; uint8_t status; } __attribute__((packed))





   mavlink_remote_log_block_status_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline uint16_t mavlink_msg_remote_log_block_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint32_t seqno, uint8_t status)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
    mavlink_remote_log_block_status_t packet;
    packet.seqno = seqno;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.status = status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 185;
    return mavlink_finalize_message(msg, system_id, component_id, 7, 7, 186);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline uint16_t mavlink_msg_remote_log_block_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint32_t seqno,uint8_t status)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
    mavlink_remote_log_block_status_t packet;
    packet.seqno = seqno;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.status = status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 185;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 7, 7, 186);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline uint16_t mavlink_msg_remote_log_block_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_remote_log_block_status_t* remote_log_block_status)
{
    return mavlink_msg_remote_log_block_status_pack(system_id, component_id, msg, remote_log_block_status->target_system, remote_log_block_status->target_component, remote_log_block_status->seqno, remote_log_block_status->status);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline uint16_t mavlink_msg_remote_log_block_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_remote_log_block_status_t* remote_log_block_status)
{
    return mavlink_msg_remote_log_block_status_pack_chan(system_id, component_id, chan, msg, remote_log_block_status->target_system, remote_log_block_status->target_component, remote_log_block_status->seqno, remote_log_block_status->status);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline void mavlink_msg_remote_log_block_status_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t seqno, uint8_t status)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
    mavlink_remote_log_block_status_t packet;
    packet.seqno = seqno;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.status = status;

    _mav_finalize_message_chan_send(chan, 185, (const char *)&packet, 7, 7, 186);

}






static inline void mavlink_msg_remote_log_block_status_send_struct(mavlink_channel_t chan, const mavlink_remote_log_block_status_t* remote_log_block_status)
{



    _mav_finalize_message_chan_send(chan, 185, (const char *)remote_log_block_status, 7, 7, 186);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline void mavlink_msg_remote_log_block_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t seqno, uint8_t status)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
    mavlink_remote_log_block_status_t *packet = (mavlink_remote_log_block_status_t *)msgbuf;
    packet->seqno = seqno;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->status = status;

    _mav_finalize_message_chan_send(chan, 185, (const char *)packet, 7, 7, 186);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_remote_log_block_status.h"
static inline uint8_t mavlink_msg_remote_log_block_status_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_remote_log_block_status_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_remote_log_block_status_get_seqno(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_remote_log_block_status_get_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}







static inline void mavlink_msg_remote_log_block_status_decode(const mavlink_message_t* msg, mavlink_remote_log_block_status_t* remote_log_block_status)
{






        uint8_t len = msg->len < 7? msg->len : 7;
        memset(remote_log_block_status, 0, 7);
    memcpy(remote_log_block_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 801 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h" 1
       




typedef struct __mavlink_led_control_t { uint8_t target_system; uint8_t target_component; uint8_t instance; uint8_t pattern; uint8_t custom_len; uint8_t custom_bytes[24]; } __attribute__((packed))







   mavlink_led_control_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline uint16_t mavlink_msg_led_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t instance, uint8_t pattern, uint8_t custom_len, const uint8_t *custom_bytes)
{
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
    mavlink_led_control_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.instance = instance;
    packet.pattern = pattern;
    packet.custom_len = custom_len;
    mav_array_memcpy(packet.custom_bytes, custom_bytes, sizeof(uint8_t)*24);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 29);


    msg->msgid = 186;
    return mavlink_finalize_message(msg, system_id, component_id, 29, 29, 72);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline uint16_t mavlink_msg_led_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t instance,uint8_t pattern,uint8_t custom_len,const uint8_t *custom_bytes)
{
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
    mavlink_led_control_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.instance = instance;
    packet.pattern = pattern;
    packet.custom_len = custom_len;
    mav_array_memcpy(packet.custom_bytes, custom_bytes, sizeof(uint8_t)*24);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 29);


    msg->msgid = 186;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 29, 29, 72);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline uint16_t mavlink_msg_led_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_led_control_t* led_control)
{
    return mavlink_msg_led_control_pack(system_id, component_id, msg, led_control->target_system, led_control->target_component, led_control->instance, led_control->pattern, led_control->custom_len, led_control->custom_bytes);
}
# 158 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline uint16_t mavlink_msg_led_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_led_control_t* led_control)
{
    return mavlink_msg_led_control_pack_chan(system_id, component_id, chan, msg, led_control->target_system, led_control->target_component, led_control->instance, led_control->pattern, led_control->custom_len, led_control->custom_bytes);
}
# 176 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline void mavlink_msg_led_control_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t instance, uint8_t pattern, uint8_t custom_len, const uint8_t *custom_bytes)
{
# 188 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
    mavlink_led_control_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.instance = instance;
    packet.pattern = pattern;
    packet.custom_len = custom_len;
    mav_array_memcpy(packet.custom_bytes, custom_bytes, sizeof(uint8_t)*24);
    _mav_finalize_message_chan_send(chan, 186, (const char *)&packet, 29, 29, 72);

}






static inline void mavlink_msg_led_control_send_struct(mavlink_channel_t chan, const mavlink_led_control_t* led_control)
{



    _mav_finalize_message_chan_send(chan, 186, (const char *)led_control, 29, 29, 72);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline void mavlink_msg_led_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t instance, uint8_t pattern, uint8_t custom_len, const uint8_t *custom_bytes)
{
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
    mavlink_led_control_t *packet = (mavlink_led_control_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->instance = instance;
    packet->pattern = pattern;
    packet->custom_len = custom_len;
    mav_array_memcpy(packet->custom_bytes, custom_bytes, sizeof(uint8_t)*24);
    _mav_finalize_message_chan_send(chan, 186, (const char *)packet, 29, 29, 72);

}
# 255 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
static inline uint8_t mavlink_msg_led_control_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_led_control_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_led_control_get_instance(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_led_control_get_pattern(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_led_control_get_custom_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_led_control_get_custom_bytes(const mavlink_message_t* msg, uint8_t *custom_bytes)
{
    return _MAV_RETURN_uint8_t_array(msg, custom_bytes, 24, 5);
}







static inline void mavlink_msg_led_control_decode(const mavlink_message_t* msg, mavlink_led_control_t* led_control)
{
# 326 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_led_control.h"
        uint8_t len = msg->len < 29? msg->len : 29;
        memset(led_control, 0, 29);
    memcpy(led_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 802 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h" 1
       




typedef struct __mavlink_mag_cal_progress_t { float direction_x; float direction_y; float direction_z; uint8_t compass_id; uint8_t cal_mask; uint8_t cal_status; uint8_t attempt; uint8_t completion_pct; uint8_t completion_mask[10]; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
   mavlink_mag_cal_progress_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline uint16_t mavlink_msg_mag_cal_progress_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t compass_id, uint8_t cal_mask, uint8_t cal_status, uint8_t attempt, uint8_t completion_pct, const uint8_t *completion_mask, float direction_x, float direction_y, float direction_z)
{
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
    mavlink_mag_cal_progress_t packet;
    packet.direction_x = direction_x;
    packet.direction_y = direction_y;
    packet.direction_z = direction_z;
    packet.compass_id = compass_id;
    packet.cal_mask = cal_mask;
    packet.cal_status = cal_status;
    packet.attempt = attempt;
    packet.completion_pct = completion_pct;
    mav_array_memcpy(packet.completion_mask, completion_mask, sizeof(uint8_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


    msg->msgid = 191;
    return mavlink_finalize_message(msg, system_id, component_id, 27, 27, 92);
}
# 129 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline uint16_t mavlink_msg_mag_cal_progress_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t compass_id,uint8_t cal_mask,uint8_t cal_status,uint8_t attempt,uint8_t completion_pct,const uint8_t *completion_mask,float direction_x,float direction_y,float direction_z)
{
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
    mavlink_mag_cal_progress_t packet;
    packet.direction_x = direction_x;
    packet.direction_y = direction_y;
    packet.direction_z = direction_z;
    packet.compass_id = compass_id;
    packet.cal_mask = cal_mask;
    packet.cal_status = cal_status;
    packet.attempt = attempt;
    packet.completion_pct = completion_pct;
    mav_array_memcpy(packet.completion_mask, completion_mask, sizeof(uint8_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


    msg->msgid = 191;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 27, 27, 92);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline uint16_t mavlink_msg_mag_cal_progress_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mag_cal_progress_t* mag_cal_progress)
{
    return mavlink_msg_mag_cal_progress_pack(system_id, component_id, msg, mag_cal_progress->compass_id, mag_cal_progress->cal_mask, mag_cal_progress->cal_status, mag_cal_progress->attempt, mag_cal_progress->completion_pct, mag_cal_progress->completion_mask, mag_cal_progress->direction_x, mag_cal_progress->direction_y, mag_cal_progress->direction_z);
}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline uint16_t mavlink_msg_mag_cal_progress_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mag_cal_progress_t* mag_cal_progress)
{
    return mavlink_msg_mag_cal_progress_pack_chan(system_id, component_id, chan, msg, mag_cal_progress->compass_id, mag_cal_progress->cal_mask, mag_cal_progress->cal_status, mag_cal_progress->attempt, mag_cal_progress->completion_pct, mag_cal_progress->completion_mask, mag_cal_progress->direction_x, mag_cal_progress->direction_y, mag_cal_progress->direction_z);
}
# 206 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline void mavlink_msg_mag_cal_progress_send(mavlink_channel_t chan, uint8_t compass_id, uint8_t cal_mask, uint8_t cal_status, uint8_t attempt, uint8_t completion_pct, const uint8_t *completion_mask, float direction_x, float direction_y, float direction_z)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
    mavlink_mag_cal_progress_t packet;
    packet.direction_x = direction_x;
    packet.direction_y = direction_y;
    packet.direction_z = direction_z;
    packet.compass_id = compass_id;
    packet.cal_mask = cal_mask;
    packet.cal_status = cal_status;
    packet.attempt = attempt;
    packet.completion_pct = completion_pct;
    mav_array_memcpy(packet.completion_mask, completion_mask, sizeof(uint8_t)*10);
    _mav_finalize_message_chan_send(chan, 191, (const char *)&packet, 27, 27, 92);

}






static inline void mavlink_msg_mag_cal_progress_send_struct(mavlink_channel_t chan, const mavlink_mag_cal_progress_t* mag_cal_progress)
{



    _mav_finalize_message_chan_send(chan, 191, (const char *)mag_cal_progress, 27, 27, 92);

}
# 257 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline void mavlink_msg_mag_cal_progress_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t compass_id, uint8_t cal_mask, uint8_t cal_status, uint8_t attempt, uint8_t completion_pct, const uint8_t *completion_mask, float direction_x, float direction_y, float direction_z)
{
# 272 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
    mavlink_mag_cal_progress_t *packet = (mavlink_mag_cal_progress_t *)msgbuf;
    packet->direction_x = direction_x;
    packet->direction_y = direction_y;
    packet->direction_z = direction_z;
    packet->compass_id = compass_id;
    packet->cal_mask = cal_mask;
    packet->cal_status = cal_status;
    packet->attempt = attempt;
    packet->completion_pct = completion_pct;
    mav_array_memcpy(packet->completion_mask, completion_mask, sizeof(uint8_t)*10);
    _mav_finalize_message_chan_send(chan, 191, (const char *)packet, 27, 27, 92);

}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
static inline uint8_t mavlink_msg_mag_cal_progress_get_compass_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_mag_cal_progress_get_cal_mask(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}






static inline uint8_t mavlink_msg_mag_cal_progress_get_cal_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[14];
}






static inline uint8_t mavlink_msg_mag_cal_progress_get_attempt(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[15];
}






static inline uint8_t mavlink_msg_mag_cal_progress_get_completion_pct(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint16_t mavlink_msg_mag_cal_progress_get_completion_mask(const mavlink_message_t* msg, uint8_t *completion_mask)
{
    return _MAV_RETURN_uint8_t_array(msg, completion_mask, 10, 17);
}






static inline float mavlink_msg_mag_cal_progress_get_direction_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mag_cal_progress_get_direction_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mag_cal_progress_get_direction_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}







static inline void mavlink_msg_mag_cal_progress_decode(const mavlink_message_t* msg, mavlink_mag_cal_progress_t* mag_cal_progress)
{
# 401 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_progress.h"
        uint8_t len = msg->len < 27? msg->len : 27;
        memset(mag_cal_progress, 0, 27);
    memcpy(mag_cal_progress, ((const char *)(&((msg)->payload64[0]))), len);

}
# 803 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h" 1
       




typedef struct __mavlink_mag_cal_report_t { float fitness; float ofs_x; float ofs_y; float ofs_z; float diag_x; float diag_y; float diag_z; float offdiag_x; float offdiag_y; float offdiag_z; uint8_t compass_id; uint8_t cal_mask; uint8_t cal_status; uint8_t autosaved; } __attribute__((packed))
# 22 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
   mavlink_mag_cal_report_t;
# 99 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline uint16_t mavlink_msg_mag_cal_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t compass_id, uint8_t cal_mask, uint8_t cal_status, uint8_t autosaved, float fitness, float ofs_x, float ofs_y, float ofs_z, float diag_x, float diag_y, float diag_z, float offdiag_x, float offdiag_y, float offdiag_z)
{
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
    mavlink_mag_cal_report_t packet;
    packet.fitness = fitness;
    packet.ofs_x = ofs_x;
    packet.ofs_y = ofs_y;
    packet.ofs_z = ofs_z;
    packet.diag_x = diag_x;
    packet.diag_y = diag_y;
    packet.diag_z = diag_z;
    packet.offdiag_x = offdiag_x;
    packet.offdiag_y = offdiag_y;
    packet.offdiag_z = offdiag_z;
    packet.compass_id = compass_id;
    packet.cal_mask = cal_mask;
    packet.cal_status = cal_status;
    packet.autosaved = autosaved;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 192;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 36);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline uint16_t mavlink_msg_mag_cal_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t compass_id,uint8_t cal_mask,uint8_t cal_status,uint8_t autosaved,float fitness,float ofs_x,float ofs_y,float ofs_z,float diag_x,float diag_y,float diag_z,float offdiag_x,float offdiag_y,float offdiag_z)
{
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
    mavlink_mag_cal_report_t packet;
    packet.fitness = fitness;
    packet.ofs_x = ofs_x;
    packet.ofs_y = ofs_y;
    packet.ofs_z = ofs_z;
    packet.diag_x = diag_x;
    packet.diag_y = diag_y;
    packet.diag_z = diag_z;
    packet.offdiag_x = offdiag_x;
    packet.offdiag_y = offdiag_y;
    packet.offdiag_z = offdiag_z;
    packet.compass_id = compass_id;
    packet.cal_mask = cal_mask;
    packet.cal_status = cal_status;
    packet.autosaved = autosaved;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 192;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 36);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline uint16_t mavlink_msg_mag_cal_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mag_cal_report_t* mag_cal_report)
{
    return mavlink_msg_mag_cal_report_pack(system_id, component_id, msg, mag_cal_report->compass_id, mag_cal_report->cal_mask, mag_cal_report->cal_status, mag_cal_report->autosaved, mag_cal_report->fitness, mag_cal_report->ofs_x, mag_cal_report->ofs_y, mag_cal_report->ofs_z, mag_cal_report->diag_x, mag_cal_report->diag_y, mag_cal_report->diag_z, mag_cal_report->offdiag_x, mag_cal_report->offdiag_y, mag_cal_report->offdiag_z);
}
# 234 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline uint16_t mavlink_msg_mag_cal_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mag_cal_report_t* mag_cal_report)
{
    return mavlink_msg_mag_cal_report_pack_chan(system_id, component_id, chan, msg, mag_cal_report->compass_id, mag_cal_report->cal_mask, mag_cal_report->cal_status, mag_cal_report->autosaved, mag_cal_report->fitness, mag_cal_report->ofs_x, mag_cal_report->ofs_y, mag_cal_report->ofs_z, mag_cal_report->diag_x, mag_cal_report->diag_y, mag_cal_report->diag_z, mag_cal_report->offdiag_x, mag_cal_report->offdiag_y, mag_cal_report->offdiag_z);
}
# 260 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline void mavlink_msg_mag_cal_report_send(mavlink_channel_t chan, uint8_t compass_id, uint8_t cal_mask, uint8_t cal_status, uint8_t autosaved, float fitness, float ofs_x, float ofs_y, float ofs_z, float diag_x, float diag_y, float diag_z, float offdiag_x, float offdiag_y, float offdiag_z)
{
# 281 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
    mavlink_mag_cal_report_t packet;
    packet.fitness = fitness;
    packet.ofs_x = ofs_x;
    packet.ofs_y = ofs_y;
    packet.ofs_z = ofs_z;
    packet.diag_x = diag_x;
    packet.diag_y = diag_y;
    packet.diag_z = diag_z;
    packet.offdiag_x = offdiag_x;
    packet.offdiag_y = offdiag_y;
    packet.offdiag_z = offdiag_z;
    packet.compass_id = compass_id;
    packet.cal_mask = cal_mask;
    packet.cal_status = cal_status;
    packet.autosaved = autosaved;

    _mav_finalize_message_chan_send(chan, 192, (const char *)&packet, 44, 44, 36);

}






static inline void mavlink_msg_mag_cal_report_send_struct(mavlink_channel_t chan, const mavlink_mag_cal_report_t* mag_cal_report)
{



    _mav_finalize_message_chan_send(chan, 192, (const char *)mag_cal_report, 44, 44, 36);

}
# 323 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline void mavlink_msg_mag_cal_report_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t compass_id, uint8_t cal_mask, uint8_t cal_status, uint8_t autosaved, float fitness, float ofs_x, float ofs_y, float ofs_z, float diag_x, float diag_y, float diag_z, float offdiag_x, float offdiag_y, float offdiag_z)
{
# 344 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
    mavlink_mag_cal_report_t *packet = (mavlink_mag_cal_report_t *)msgbuf;
    packet->fitness = fitness;
    packet->ofs_x = ofs_x;
    packet->ofs_y = ofs_y;
    packet->ofs_z = ofs_z;
    packet->diag_x = diag_x;
    packet->diag_y = diag_y;
    packet->diag_z = diag_z;
    packet->offdiag_x = offdiag_x;
    packet->offdiag_y = offdiag_y;
    packet->offdiag_z = offdiag_z;
    packet->compass_id = compass_id;
    packet->cal_mask = cal_mask;
    packet->cal_status = cal_status;
    packet->autosaved = autosaved;

    _mav_finalize_message_chan_send(chan, 192, (const char *)packet, 44, 44, 36);

}
# 375 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
static inline uint8_t mavlink_msg_mag_cal_report_get_compass_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_mag_cal_report_get_cal_mask(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}






static inline uint8_t mavlink_msg_mag_cal_report_get_cal_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint8_t mavlink_msg_mag_cal_report_get_autosaved(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline float mavlink_msg_mag_cal_report_get_fitness(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mag_cal_report_get_ofs_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mag_cal_report_get_ofs_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mag_cal_report_get_ofs_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_mag_cal_report_get_diag_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_mag_cal_report_get_diag_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_mag_cal_report_get_diag_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_mag_cal_report_get_offdiag_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_mag_cal_report_get_offdiag_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_mag_cal_report_get_offdiag_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_mag_cal_report_decode(const mavlink_message_t* msg, mavlink_mag_cal_report_t* mag_cal_report)
{
# 534 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_mag_cal_report.h"
        uint8_t len = msg->len < 44? msg->len : 44;
        memset(mag_cal_report, 0, 44);
    memcpy(mag_cal_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 804 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h" 1
       




typedef struct __mavlink_ekf_status_report_t { float velocity_variance; float pos_horiz_variance; float pos_vert_variance; float compass_variance; float terrain_alt_variance; uint16_t flags; } __attribute__((packed))







   mavlink_ekf_status_report_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline uint16_t mavlink_msg_ekf_status_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t flags, float velocity_variance, float pos_horiz_variance, float pos_vert_variance, float compass_variance, float terrain_alt_variance)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
    mavlink_ekf_status_report_t packet;
    packet.velocity_variance = velocity_variance;
    packet.pos_horiz_variance = pos_horiz_variance;
    packet.pos_vert_variance = pos_vert_variance;
    packet.compass_variance = compass_variance;
    packet.terrain_alt_variance = terrain_alt_variance;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 193;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 71);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline uint16_t mavlink_msg_ekf_status_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t flags,float velocity_variance,float pos_horiz_variance,float pos_vert_variance,float compass_variance,float terrain_alt_variance)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
    mavlink_ekf_status_report_t packet;
    packet.velocity_variance = velocity_variance;
    packet.pos_horiz_variance = pos_horiz_variance;
    packet.pos_vert_variance = pos_vert_variance;
    packet.compass_variance = compass_variance;
    packet.terrain_alt_variance = terrain_alt_variance;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 193;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 71);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline uint16_t mavlink_msg_ekf_status_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ekf_status_report_t* ekf_status_report)
{
    return mavlink_msg_ekf_status_report_pack(system_id, component_id, msg, ekf_status_report->flags, ekf_status_report->velocity_variance, ekf_status_report->pos_horiz_variance, ekf_status_report->pos_vert_variance, ekf_status_report->compass_variance, ekf_status_report->terrain_alt_variance);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline uint16_t mavlink_msg_ekf_status_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ekf_status_report_t* ekf_status_report)
{
    return mavlink_msg_ekf_status_report_pack_chan(system_id, component_id, chan, msg, ekf_status_report->flags, ekf_status_report->velocity_variance, ekf_status_report->pos_horiz_variance, ekf_status_report->pos_vert_variance, ekf_status_report->compass_variance, ekf_status_report->terrain_alt_variance);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline void mavlink_msg_ekf_status_report_send(mavlink_channel_t chan, uint16_t flags, float velocity_variance, float pos_horiz_variance, float pos_vert_variance, float compass_variance, float terrain_alt_variance)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
    mavlink_ekf_status_report_t packet;
    packet.velocity_variance = velocity_variance;
    packet.pos_horiz_variance = pos_horiz_variance;
    packet.pos_vert_variance = pos_vert_variance;
    packet.compass_variance = compass_variance;
    packet.terrain_alt_variance = terrain_alt_variance;
    packet.flags = flags;

    _mav_finalize_message_chan_send(chan, 193, (const char *)&packet, 22, 22, 71);

}






static inline void mavlink_msg_ekf_status_report_send_struct(mavlink_channel_t chan, const mavlink_ekf_status_report_t* ekf_status_report)
{



    _mav_finalize_message_chan_send(chan, 193, (const char *)ekf_status_report, 22, 22, 71);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline void mavlink_msg_ekf_status_report_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t flags, float velocity_variance, float pos_horiz_variance, float pos_vert_variance, float compass_variance, float terrain_alt_variance)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
    mavlink_ekf_status_report_t *packet = (mavlink_ekf_status_report_t *)msgbuf;
    packet->velocity_variance = velocity_variance;
    packet->pos_horiz_variance = pos_horiz_variance;
    packet->pos_vert_variance = pos_vert_variance;
    packet->compass_variance = compass_variance;
    packet->terrain_alt_variance = terrain_alt_variance;
    packet->flags = flags;

    _mav_finalize_message_chan_send(chan, 193, (const char *)packet, 22, 22, 71);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
static inline uint16_t mavlink_msg_ekf_status_report_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline float mavlink_msg_ekf_status_report_get_velocity_variance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_ekf_status_report_get_pos_horiz_variance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_ekf_status_report_get_pos_vert_variance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_ekf_status_report_get_compass_variance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_ekf_status_report_get_terrain_alt_variance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_ekf_status_report_decode(const mavlink_message_t* msg, mavlink_ekf_status_report_t* ekf_status_report)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_ekf_status_report.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(ekf_status_report, 0, 22);
    memcpy(ekf_status_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 805 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h" 1
       




typedef struct __mavlink_pid_tuning_t { float desired; float achieved; float FF; float P; float I; float D; uint8_t axis; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
   mavlink_pid_tuning_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline uint16_t mavlink_msg_pid_tuning_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t axis, float desired, float achieved, float FF, float P, float I, float D)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
    mavlink_pid_tuning_t packet;
    packet.desired = desired;
    packet.achieved = achieved;
    packet.FF = FF;
    packet.P = P;
    packet.I = I;
    packet.D = D;
    packet.axis = axis;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 194;
    return mavlink_finalize_message(msg, system_id, component_id, 25, 25, 98);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline uint16_t mavlink_msg_pid_tuning_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t axis,float desired,float achieved,float FF,float P,float I,float D)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
    mavlink_pid_tuning_t packet;
    packet.desired = desired;
    packet.achieved = achieved;
    packet.FF = FF;
    packet.P = P;
    packet.I = I;
    packet.D = D;
    packet.axis = axis;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 194;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 25, 98);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline uint16_t mavlink_msg_pid_tuning_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_pid_tuning_t* pid_tuning)
{
    return mavlink_msg_pid_tuning_pack(system_id, component_id, msg, pid_tuning->axis, pid_tuning->desired, pid_tuning->achieved, pid_tuning->FF, pid_tuning->P, pid_tuning->I, pid_tuning->D);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline uint16_t mavlink_msg_pid_tuning_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_pid_tuning_t* pid_tuning)
{
    return mavlink_msg_pid_tuning_pack_chan(system_id, component_id, chan, msg, pid_tuning->axis, pid_tuning->desired, pid_tuning->achieved, pid_tuning->FF, pid_tuning->P, pid_tuning->I, pid_tuning->D);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline void mavlink_msg_pid_tuning_send(mavlink_channel_t chan, uint8_t axis, float desired, float achieved, float FF, float P, float I, float D)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
    mavlink_pid_tuning_t packet;
    packet.desired = desired;
    packet.achieved = achieved;
    packet.FF = FF;
    packet.P = P;
    packet.I = I;
    packet.D = D;
    packet.axis = axis;

    _mav_finalize_message_chan_send(chan, 194, (const char *)&packet, 25, 25, 98);

}






static inline void mavlink_msg_pid_tuning_send_struct(mavlink_channel_t chan, const mavlink_pid_tuning_t* pid_tuning)
{



    _mav_finalize_message_chan_send(chan, 194, (const char *)pid_tuning, 25, 25, 98);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline void mavlink_msg_pid_tuning_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t axis, float desired, float achieved, float FF, float P, float I, float D)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
    mavlink_pid_tuning_t *packet = (mavlink_pid_tuning_t *)msgbuf;
    packet->desired = desired;
    packet->achieved = achieved;
    packet->FF = FF;
    packet->P = P;
    packet->I = I;
    packet->D = D;
    packet->axis = axis;

    _mav_finalize_message_chan_send(chan, 194, (const char *)packet, 25, 25, 98);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
static inline uint8_t mavlink_msg_pid_tuning_get_axis(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline float mavlink_msg_pid_tuning_get_desired(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_pid_tuning_get_achieved(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_pid_tuning_get_FF(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_pid_tuning_get_P(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_pid_tuning_get_I(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_pid_tuning_get_D(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_pid_tuning_decode(const mavlink_message_t* msg, mavlink_pid_tuning_t* pid_tuning)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_pid_tuning.h"
        uint8_t len = msg->len < 25? msg->len : 25;
        memset(pid_tuning, 0, 25);
    memcpy(pid_tuning, ((const char *)(&((msg)->payload64[0]))), len);

}
# 806 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h" 1
       




typedef struct __mavlink_deepstall_t { int32_t landing_lat; int32_t landing_lon; int32_t path_lat; int32_t path_lon; int32_t arc_entry_lat; int32_t arc_entry_lon; float altitude; float expected_travel_distance; float cross_track_error; uint8_t stage; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
   mavlink_deepstall_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline uint16_t mavlink_msg_deepstall_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t landing_lat, int32_t landing_lon, int32_t path_lat, int32_t path_lon, int32_t arc_entry_lat, int32_t arc_entry_lon, float altitude, float expected_travel_distance, float cross_track_error, uint8_t stage)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
    mavlink_deepstall_t packet;
    packet.landing_lat = landing_lat;
    packet.landing_lon = landing_lon;
    packet.path_lat = path_lat;
    packet.path_lon = path_lon;
    packet.arc_entry_lat = arc_entry_lat;
    packet.arc_entry_lon = arc_entry_lon;
    packet.altitude = altitude;
    packet.expected_travel_distance = expected_travel_distance;
    packet.cross_track_error = cross_track_error;
    packet.stage = stage;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 195;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 120);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline uint16_t mavlink_msg_deepstall_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t landing_lat,int32_t landing_lon,int32_t path_lat,int32_t path_lon,int32_t arc_entry_lat,int32_t arc_entry_lon,float altitude,float expected_travel_distance,float cross_track_error,uint8_t stage)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
    mavlink_deepstall_t packet;
    packet.landing_lat = landing_lat;
    packet.landing_lon = landing_lon;
    packet.path_lat = path_lat;
    packet.path_lon = path_lon;
    packet.arc_entry_lat = arc_entry_lat;
    packet.arc_entry_lon = arc_entry_lon;
    packet.altitude = altitude;
    packet.expected_travel_distance = expected_travel_distance;
    packet.cross_track_error = cross_track_error;
    packet.stage = stage;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 195;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 120);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline uint16_t mavlink_msg_deepstall_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_deepstall_t* deepstall)
{
    return mavlink_msg_deepstall_pack(system_id, component_id, msg, deepstall->landing_lat, deepstall->landing_lon, deepstall->path_lat, deepstall->path_lon, deepstall->arc_entry_lat, deepstall->arc_entry_lon, deepstall->altitude, deepstall->expected_travel_distance, deepstall->cross_track_error, deepstall->stage);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline uint16_t mavlink_msg_deepstall_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_deepstall_t* deepstall)
{
    return mavlink_msg_deepstall_pack_chan(system_id, component_id, chan, msg, deepstall->landing_lat, deepstall->landing_lon, deepstall->path_lat, deepstall->path_lon, deepstall->arc_entry_lat, deepstall->arc_entry_lon, deepstall->altitude, deepstall->expected_travel_distance, deepstall->cross_track_error, deepstall->stage);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline void mavlink_msg_deepstall_send(mavlink_channel_t chan, int32_t landing_lat, int32_t landing_lon, int32_t path_lat, int32_t path_lon, int32_t arc_entry_lat, int32_t arc_entry_lon, float altitude, float expected_travel_distance, float cross_track_error, uint8_t stage)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
    mavlink_deepstall_t packet;
    packet.landing_lat = landing_lat;
    packet.landing_lon = landing_lon;
    packet.path_lat = path_lat;
    packet.path_lon = path_lon;
    packet.arc_entry_lat = arc_entry_lat;
    packet.arc_entry_lon = arc_entry_lon;
    packet.altitude = altitude;
    packet.expected_travel_distance = expected_travel_distance;
    packet.cross_track_error = cross_track_error;
    packet.stage = stage;

    _mav_finalize_message_chan_send(chan, 195, (const char *)&packet, 37, 37, 120);

}






static inline void mavlink_msg_deepstall_send_struct(mavlink_channel_t chan, const mavlink_deepstall_t* deepstall)
{



    _mav_finalize_message_chan_send(chan, 195, (const char *)deepstall, 37, 37, 120);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline void mavlink_msg_deepstall_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t landing_lat, int32_t landing_lon, int32_t path_lat, int32_t path_lon, int32_t arc_entry_lat, int32_t arc_entry_lon, float altitude, float expected_travel_distance, float cross_track_error, uint8_t stage)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
    mavlink_deepstall_t *packet = (mavlink_deepstall_t *)msgbuf;
    packet->landing_lat = landing_lat;
    packet->landing_lon = landing_lon;
    packet->path_lat = path_lat;
    packet->path_lon = path_lon;
    packet->arc_entry_lat = arc_entry_lat;
    packet->arc_entry_lon = arc_entry_lon;
    packet->altitude = altitude;
    packet->expected_travel_distance = expected_travel_distance;
    packet->cross_track_error = cross_track_error;
    packet->stage = stage;

    _mav_finalize_message_chan_send(chan, 195, (const char *)packet, 37, 37, 120);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
static inline int32_t mavlink_msg_deepstall_get_landing_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_deepstall_get_landing_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_deepstall_get_path_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_deepstall_get_path_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_deepstall_get_arc_entry_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_deepstall_get_arc_entry_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_deepstall_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_deepstall_get_expected_travel_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_deepstall_get_cross_track_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline uint8_t mavlink_msg_deepstall_get_stage(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}







static inline void mavlink_msg_deepstall_decode(const mavlink_message_t* msg, mavlink_deepstall_t* deepstall)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_deepstall.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(deepstall, 0, 37);
    memcpy(deepstall, ((const char *)(&((msg)->payload64[0]))), len);

}
# 807 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h" 1
       




typedef struct __mavlink_gimbal_report_t { float delta_time; float delta_angle_x; float delta_angle_y; float delta_angle_z; float delta_velocity_x; float delta_velocity_y; float delta_velocity_z; float joint_roll; float joint_el; float joint_az; uint8_t target_system; uint8_t target_component; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
   mavlink_gimbal_report_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline uint16_t mavlink_msg_gimbal_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, float delta_time, float delta_angle_x, float delta_angle_y, float delta_angle_z, float delta_velocity_x, float delta_velocity_y, float delta_velocity_z, float joint_roll, float joint_el, float joint_az)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
    mavlink_gimbal_report_t packet;
    packet.delta_time = delta_time;
    packet.delta_angle_x = delta_angle_x;
    packet.delta_angle_y = delta_angle_y;
    packet.delta_angle_z = delta_angle_z;
    packet.delta_velocity_x = delta_velocity_x;
    packet.delta_velocity_y = delta_velocity_y;
    packet.delta_velocity_z = delta_velocity_z;
    packet.joint_roll = joint_roll;
    packet.joint_el = joint_el;
    packet.joint_az = joint_az;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 200;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 134);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline uint16_t mavlink_msg_gimbal_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,float delta_time,float delta_angle_x,float delta_angle_y,float delta_angle_z,float delta_velocity_x,float delta_velocity_y,float delta_velocity_z,float joint_roll,float joint_el,float joint_az)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
    mavlink_gimbal_report_t packet;
    packet.delta_time = delta_time;
    packet.delta_angle_x = delta_angle_x;
    packet.delta_angle_y = delta_angle_y;
    packet.delta_angle_z = delta_angle_z;
    packet.delta_velocity_x = delta_velocity_x;
    packet.delta_velocity_y = delta_velocity_y;
    packet.delta_velocity_z = delta_velocity_z;
    packet.joint_roll = joint_roll;
    packet.joint_el = joint_el;
    packet.joint_az = joint_az;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 200;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 134);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline uint16_t mavlink_msg_gimbal_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gimbal_report_t* gimbal_report)
{
    return mavlink_msg_gimbal_report_pack(system_id, component_id, msg, gimbal_report->target_system, gimbal_report->target_component, gimbal_report->delta_time, gimbal_report->delta_angle_x, gimbal_report->delta_angle_y, gimbal_report->delta_angle_z, gimbal_report->delta_velocity_x, gimbal_report->delta_velocity_y, gimbal_report->delta_velocity_z, gimbal_report->joint_roll, gimbal_report->joint_el, gimbal_report->joint_az);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline uint16_t mavlink_msg_gimbal_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gimbal_report_t* gimbal_report)
{
    return mavlink_msg_gimbal_report_pack_chan(system_id, component_id, chan, msg, gimbal_report->target_system, gimbal_report->target_component, gimbal_report->delta_time, gimbal_report->delta_angle_x, gimbal_report->delta_angle_y, gimbal_report->delta_angle_z, gimbal_report->delta_velocity_x, gimbal_report->delta_velocity_y, gimbal_report->delta_velocity_z, gimbal_report->joint_roll, gimbal_report->joint_el, gimbal_report->joint_az);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline void mavlink_msg_gimbal_report_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, float delta_time, float delta_angle_x, float delta_angle_y, float delta_angle_z, float delta_velocity_x, float delta_velocity_y, float delta_velocity_z, float joint_roll, float joint_el, float joint_az)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
    mavlink_gimbal_report_t packet;
    packet.delta_time = delta_time;
    packet.delta_angle_x = delta_angle_x;
    packet.delta_angle_y = delta_angle_y;
    packet.delta_angle_z = delta_angle_z;
    packet.delta_velocity_x = delta_velocity_x;
    packet.delta_velocity_y = delta_velocity_y;
    packet.delta_velocity_z = delta_velocity_z;
    packet.joint_roll = joint_roll;
    packet.joint_el = joint_el;
    packet.joint_az = joint_az;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 200, (const char *)&packet, 42, 42, 134);

}






static inline void mavlink_msg_gimbal_report_send_struct(mavlink_channel_t chan, const mavlink_gimbal_report_t* gimbal_report)
{



    _mav_finalize_message_chan_send(chan, 200, (const char *)gimbal_report, 42, 42, 134);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline void mavlink_msg_gimbal_report_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, float delta_time, float delta_angle_x, float delta_angle_y, float delta_angle_z, float delta_velocity_x, float delta_velocity_y, float delta_velocity_z, float joint_roll, float joint_el, float joint_az)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
    mavlink_gimbal_report_t *packet = (mavlink_gimbal_report_t *)msgbuf;
    packet->delta_time = delta_time;
    packet->delta_angle_x = delta_angle_x;
    packet->delta_angle_y = delta_angle_y;
    packet->delta_angle_z = delta_angle_z;
    packet->delta_velocity_x = delta_velocity_x;
    packet->delta_velocity_y = delta_velocity_y;
    packet->delta_velocity_z = delta_velocity_z;
    packet->joint_roll = joint_roll;
    packet->joint_el = joint_el;
    packet->joint_az = joint_az;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 200, (const char *)packet, 42, 42, 134);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
static inline uint8_t mavlink_msg_gimbal_report_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_gimbal_report_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}






static inline float mavlink_msg_gimbal_report_get_delta_time(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_gimbal_report_get_delta_angle_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_gimbal_report_get_delta_angle_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_gimbal_report_get_delta_angle_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_gimbal_report_get_delta_velocity_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_gimbal_report_get_delta_velocity_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_gimbal_report_get_delta_velocity_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_gimbal_report_get_joint_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_gimbal_report_get_joint_el(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_gimbal_report_get_joint_az(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_gimbal_report_decode(const mavlink_message_t* msg, mavlink_gimbal_report_t* gimbal_report)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_report.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(gimbal_report, 0, 42);
    memcpy(gimbal_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 808 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h" 1
       




typedef struct __mavlink_gimbal_control_t { float demanded_rate_x; float demanded_rate_y; float demanded_rate_z; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_gimbal_control_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline uint16_t mavlink_msg_gimbal_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, float demanded_rate_x, float demanded_rate_y, float demanded_rate_z)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
    mavlink_gimbal_control_t packet;
    packet.demanded_rate_x = demanded_rate_x;
    packet.demanded_rate_y = demanded_rate_y;
    packet.demanded_rate_z = demanded_rate_z;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 201;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 205);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline uint16_t mavlink_msg_gimbal_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,float demanded_rate_x,float demanded_rate_y,float demanded_rate_z)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
    mavlink_gimbal_control_t packet;
    packet.demanded_rate_x = demanded_rate_x;
    packet.demanded_rate_y = demanded_rate_y;
    packet.demanded_rate_z = demanded_rate_z;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 201;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 205);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline uint16_t mavlink_msg_gimbal_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gimbal_control_t* gimbal_control)
{
    return mavlink_msg_gimbal_control_pack(system_id, component_id, msg, gimbal_control->target_system, gimbal_control->target_component, gimbal_control->demanded_rate_x, gimbal_control->demanded_rate_y, gimbal_control->demanded_rate_z);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline uint16_t mavlink_msg_gimbal_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gimbal_control_t* gimbal_control)
{
    return mavlink_msg_gimbal_control_pack_chan(system_id, component_id, chan, msg, gimbal_control->target_system, gimbal_control->target_component, gimbal_control->demanded_rate_x, gimbal_control->demanded_rate_y, gimbal_control->demanded_rate_z);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline void mavlink_msg_gimbal_control_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, float demanded_rate_x, float demanded_rate_y, float demanded_rate_z)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
    mavlink_gimbal_control_t packet;
    packet.demanded_rate_x = demanded_rate_x;
    packet.demanded_rate_y = demanded_rate_y;
    packet.demanded_rate_z = demanded_rate_z;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 201, (const char *)&packet, 14, 14, 205);

}






static inline void mavlink_msg_gimbal_control_send_struct(mavlink_channel_t chan, const mavlink_gimbal_control_t* gimbal_control)
{



    _mav_finalize_message_chan_send(chan, 201, (const char *)gimbal_control, 14, 14, 205);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline void mavlink_msg_gimbal_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, float demanded_rate_x, float demanded_rate_y, float demanded_rate_z)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
    mavlink_gimbal_control_t *packet = (mavlink_gimbal_control_t *)msgbuf;
    packet->demanded_rate_x = demanded_rate_x;
    packet->demanded_rate_y = demanded_rate_y;
    packet->demanded_rate_z = demanded_rate_z;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 201, (const char *)packet, 14, 14, 205);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_control.h"
static inline uint8_t mavlink_msg_gimbal_control_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_gimbal_control_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}






static inline float mavlink_msg_gimbal_control_get_demanded_rate_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_gimbal_control_get_demanded_rate_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_gimbal_control_get_demanded_rate_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}







static inline void mavlink_msg_gimbal_control_decode(const mavlink_message_t* msg, mavlink_gimbal_control_t* gimbal_control)
{







        uint8_t len = msg->len < 14? msg->len : 14;
        memset(gimbal_control, 0, 14);
    memcpy(gimbal_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 809 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h" 1
       




typedef struct __mavlink_gimbal_torque_cmd_report_t { int16_t rl_torque_cmd; int16_t el_torque_cmd; int16_t az_torque_cmd; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_gimbal_torque_cmd_report_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline uint16_t mavlink_msg_gimbal_torque_cmd_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int16_t rl_torque_cmd, int16_t el_torque_cmd, int16_t az_torque_cmd)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
    mavlink_gimbal_torque_cmd_report_t packet;
    packet.rl_torque_cmd = rl_torque_cmd;
    packet.el_torque_cmd = el_torque_cmd;
    packet.az_torque_cmd = az_torque_cmd;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 214;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 69);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline uint16_t mavlink_msg_gimbal_torque_cmd_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int16_t rl_torque_cmd,int16_t el_torque_cmd,int16_t az_torque_cmd)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
    mavlink_gimbal_torque_cmd_report_t packet;
    packet.rl_torque_cmd = rl_torque_cmd;
    packet.el_torque_cmd = el_torque_cmd;
    packet.az_torque_cmd = az_torque_cmd;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 214;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 69);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline uint16_t mavlink_msg_gimbal_torque_cmd_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gimbal_torque_cmd_report_t* gimbal_torque_cmd_report)
{
    return mavlink_msg_gimbal_torque_cmd_report_pack(system_id, component_id, msg, gimbal_torque_cmd_report->target_system, gimbal_torque_cmd_report->target_component, gimbal_torque_cmd_report->rl_torque_cmd, gimbal_torque_cmd_report->el_torque_cmd, gimbal_torque_cmd_report->az_torque_cmd);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline uint16_t mavlink_msg_gimbal_torque_cmd_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gimbal_torque_cmd_report_t* gimbal_torque_cmd_report)
{
    return mavlink_msg_gimbal_torque_cmd_report_pack_chan(system_id, component_id, chan, msg, gimbal_torque_cmd_report->target_system, gimbal_torque_cmd_report->target_component, gimbal_torque_cmd_report->rl_torque_cmd, gimbal_torque_cmd_report->el_torque_cmd, gimbal_torque_cmd_report->az_torque_cmd);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline void mavlink_msg_gimbal_torque_cmd_report_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t rl_torque_cmd, int16_t el_torque_cmd, int16_t az_torque_cmd)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
    mavlink_gimbal_torque_cmd_report_t packet;
    packet.rl_torque_cmd = rl_torque_cmd;
    packet.el_torque_cmd = el_torque_cmd;
    packet.az_torque_cmd = az_torque_cmd;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 214, (const char *)&packet, 8, 8, 69);

}






static inline void mavlink_msg_gimbal_torque_cmd_report_send_struct(mavlink_channel_t chan, const mavlink_gimbal_torque_cmd_report_t* gimbal_torque_cmd_report)
{



    _mav_finalize_message_chan_send(chan, 214, (const char *)gimbal_torque_cmd_report, 8, 8, 69);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline void mavlink_msg_gimbal_torque_cmd_report_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t rl_torque_cmd, int16_t el_torque_cmd, int16_t az_torque_cmd)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
    mavlink_gimbal_torque_cmd_report_t *packet = (mavlink_gimbal_torque_cmd_report_t *)msgbuf;
    packet->rl_torque_cmd = rl_torque_cmd;
    packet->el_torque_cmd = el_torque_cmd;
    packet->az_torque_cmd = az_torque_cmd;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 214, (const char *)packet, 8, 8, 69);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gimbal_torque_cmd_report.h"
static inline uint8_t mavlink_msg_gimbal_torque_cmd_report_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_gimbal_torque_cmd_report_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline int16_t mavlink_msg_gimbal_torque_cmd_report_get_rl_torque_cmd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_gimbal_torque_cmd_report_get_el_torque_cmd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}






static inline int16_t mavlink_msg_gimbal_torque_cmd_report_get_az_torque_cmd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}







static inline void mavlink_msg_gimbal_torque_cmd_report_decode(const mavlink_message_t* msg, mavlink_gimbal_torque_cmd_report_t* gimbal_torque_cmd_report)
{







        uint8_t len = msg->len < 8? msg->len : 8;
        memset(gimbal_torque_cmd_report, 0, 8);
    memcpy(gimbal_torque_cmd_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 810 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h" 1
       




typedef struct __mavlink_gopro_heartbeat_t { uint8_t status; uint8_t capture_mode; uint8_t flags; } __attribute__((packed))




   mavlink_gopro_heartbeat_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline uint16_t mavlink_msg_gopro_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t status, uint8_t capture_mode, uint8_t flags)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
    mavlink_gopro_heartbeat_t packet;
    packet.status = status;
    packet.capture_mode = capture_mode;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 215;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 101);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline uint16_t mavlink_msg_gopro_heartbeat_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t status,uint8_t capture_mode,uint8_t flags)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
    mavlink_gopro_heartbeat_t packet;
    packet.status = status;
    packet.capture_mode = capture_mode;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 215;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 101);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline uint16_t mavlink_msg_gopro_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gopro_heartbeat_t* gopro_heartbeat)
{
    return mavlink_msg_gopro_heartbeat_pack(system_id, component_id, msg, gopro_heartbeat->status, gopro_heartbeat->capture_mode, gopro_heartbeat->flags);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline uint16_t mavlink_msg_gopro_heartbeat_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gopro_heartbeat_t* gopro_heartbeat)
{
    return mavlink_msg_gopro_heartbeat_pack_chan(system_id, component_id, chan, msg, gopro_heartbeat->status, gopro_heartbeat->capture_mode, gopro_heartbeat->flags);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline void mavlink_msg_gopro_heartbeat_send(mavlink_channel_t chan, uint8_t status, uint8_t capture_mode, uint8_t flags)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
    mavlink_gopro_heartbeat_t packet;
    packet.status = status;
    packet.capture_mode = capture_mode;
    packet.flags = flags;

    _mav_finalize_message_chan_send(chan, 215, (const char *)&packet, 3, 3, 101);

}






static inline void mavlink_msg_gopro_heartbeat_send_struct(mavlink_channel_t chan, const mavlink_gopro_heartbeat_t* gopro_heartbeat)
{



    _mav_finalize_message_chan_send(chan, 215, (const char *)gopro_heartbeat, 3, 3, 101);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline void mavlink_msg_gopro_heartbeat_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t status, uint8_t capture_mode, uint8_t flags)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
    mavlink_gopro_heartbeat_t *packet = (mavlink_gopro_heartbeat_t *)msgbuf;
    packet->status = status;
    packet->capture_mode = capture_mode;
    packet->flags = flags;

    _mav_finalize_message_chan_send(chan, 215, (const char *)packet, 3, 3, 101);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_heartbeat.h"
static inline uint8_t mavlink_msg_gopro_heartbeat_get_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gopro_heartbeat_get_capture_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gopro_heartbeat_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_gopro_heartbeat_decode(const mavlink_message_t* msg, mavlink_gopro_heartbeat_t* gopro_heartbeat)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(gopro_heartbeat, 0, 3);
    memcpy(gopro_heartbeat, ((const char *)(&((msg)->payload64[0]))), len);

}
# 811 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h" 1
       




typedef struct __mavlink_gopro_get_request_t { uint8_t target_system; uint8_t target_component; uint8_t cmd_id; } __attribute__((packed))




   mavlink_gopro_get_request_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline uint16_t mavlink_msg_gopro_get_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t cmd_id)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
    mavlink_gopro_get_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.cmd_id = cmd_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 216;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 50);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline uint16_t mavlink_msg_gopro_get_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t cmd_id)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
    mavlink_gopro_get_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.cmd_id = cmd_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 216;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 50);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline uint16_t mavlink_msg_gopro_get_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gopro_get_request_t* gopro_get_request)
{
    return mavlink_msg_gopro_get_request_pack(system_id, component_id, msg, gopro_get_request->target_system, gopro_get_request->target_component, gopro_get_request->cmd_id);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline uint16_t mavlink_msg_gopro_get_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gopro_get_request_t* gopro_get_request)
{
    return mavlink_msg_gopro_get_request_pack_chan(system_id, component_id, chan, msg, gopro_get_request->target_system, gopro_get_request->target_component, gopro_get_request->cmd_id);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline void mavlink_msg_gopro_get_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t cmd_id)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
    mavlink_gopro_get_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.cmd_id = cmd_id;

    _mav_finalize_message_chan_send(chan, 216, (const char *)&packet, 3, 3, 50);

}






static inline void mavlink_msg_gopro_get_request_send_struct(mavlink_channel_t chan, const mavlink_gopro_get_request_t* gopro_get_request)
{



    _mav_finalize_message_chan_send(chan, 216, (const char *)gopro_get_request, 3, 3, 50);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline void mavlink_msg_gopro_get_request_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t cmd_id)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
    mavlink_gopro_get_request_t *packet = (mavlink_gopro_get_request_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->cmd_id = cmd_id;

    _mav_finalize_message_chan_send(chan, 216, (const char *)packet, 3, 3, 50);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_request.h"
static inline uint8_t mavlink_msg_gopro_get_request_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gopro_get_request_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gopro_get_request_get_cmd_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_gopro_get_request_decode(const mavlink_message_t* msg, mavlink_gopro_get_request_t* gopro_get_request)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(gopro_get_request, 0, 3);
    memcpy(gopro_get_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 812 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h" 1
       




typedef struct __mavlink_gopro_get_response_t { uint8_t cmd_id; uint8_t status; uint8_t value[4]; } __attribute__((packed))




   mavlink_gopro_get_response_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline uint16_t mavlink_msg_gopro_get_response_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t cmd_id, uint8_t status, const uint8_t *value)
{







    mavlink_gopro_get_response_t packet;
    packet.cmd_id = cmd_id;
    packet.status = status;
    mav_array_memcpy(packet.value, value, sizeof(uint8_t)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 217;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 202);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline uint16_t mavlink_msg_gopro_get_response_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t cmd_id,uint8_t status,const uint8_t *value)
{







    mavlink_gopro_get_response_t packet;
    packet.cmd_id = cmd_id;
    packet.status = status;
    mav_array_memcpy(packet.value, value, sizeof(uint8_t)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 217;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 202);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline uint16_t mavlink_msg_gopro_get_response_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gopro_get_response_t* gopro_get_response)
{
    return mavlink_msg_gopro_get_response_pack(system_id, component_id, msg, gopro_get_response->cmd_id, gopro_get_response->status, gopro_get_response->value);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline uint16_t mavlink_msg_gopro_get_response_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gopro_get_response_t* gopro_get_response)
{
    return mavlink_msg_gopro_get_response_pack_chan(system_id, component_id, chan, msg, gopro_get_response->cmd_id, gopro_get_response->status, gopro_get_response->value);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline void mavlink_msg_gopro_get_response_send(mavlink_channel_t chan, uint8_t cmd_id, uint8_t status, const uint8_t *value)
{







    mavlink_gopro_get_response_t packet;
    packet.cmd_id = cmd_id;
    packet.status = status;
    mav_array_memcpy(packet.value, value, sizeof(uint8_t)*4);
    _mav_finalize_message_chan_send(chan, 217, (const char *)&packet, 6, 6, 202);

}






static inline void mavlink_msg_gopro_get_response_send_struct(mavlink_channel_t chan, const mavlink_gopro_get_response_t* gopro_get_response)
{



    _mav_finalize_message_chan_send(chan, 217, (const char *)gopro_get_response, 6, 6, 202);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline void mavlink_msg_gopro_get_response_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t cmd_id, uint8_t status, const uint8_t *value)
{







    mavlink_gopro_get_response_t *packet = (mavlink_gopro_get_response_t *)msgbuf;
    packet->cmd_id = cmd_id;
    packet->status = status;
    mav_array_memcpy(packet->value, value, sizeof(uint8_t)*4);
    _mav_finalize_message_chan_send(chan, 217, (const char *)packet, 6, 6, 202);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_get_response.h"
static inline uint8_t mavlink_msg_gopro_get_response_get_cmd_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gopro_get_response_get_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_gopro_get_response_get_value(const mavlink_message_t* msg, uint8_t *value)
{
    return _MAV_RETURN_uint8_t_array(msg, value, 4, 2);
}







static inline void mavlink_msg_gopro_get_response_decode(const mavlink_message_t* msg, mavlink_gopro_get_response_t* gopro_get_response)
{





        uint8_t len = msg->len < 6? msg->len : 6;
        memset(gopro_get_response, 0, 6);
    memcpy(gopro_get_response, ((const char *)(&((msg)->payload64[0]))), len);

}
# 813 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h" 1
       




typedef struct __mavlink_gopro_set_request_t { uint8_t target_system; uint8_t target_component; uint8_t cmd_id; uint8_t value[4]; } __attribute__((packed))





   mavlink_gopro_set_request_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline uint16_t mavlink_msg_gopro_set_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t cmd_id, const uint8_t *value)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
    mavlink_gopro_set_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.cmd_id = cmd_id;
    mav_array_memcpy(packet.value, value, sizeof(uint8_t)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 218;
    return mavlink_finalize_message(msg, system_id, component_id, 7, 7, 17);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline uint16_t mavlink_msg_gopro_set_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t cmd_id,const uint8_t *value)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
    mavlink_gopro_set_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.cmd_id = cmd_id;
    mav_array_memcpy(packet.value, value, sizeof(uint8_t)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 218;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 7, 7, 17);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline uint16_t mavlink_msg_gopro_set_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gopro_set_request_t* gopro_set_request)
{
    return mavlink_msg_gopro_set_request_pack(system_id, component_id, msg, gopro_set_request->target_system, gopro_set_request->target_component, gopro_set_request->cmd_id, gopro_set_request->value);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline uint16_t mavlink_msg_gopro_set_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gopro_set_request_t* gopro_set_request)
{
    return mavlink_msg_gopro_set_request_pack_chan(system_id, component_id, chan, msg, gopro_set_request->target_system, gopro_set_request->target_component, gopro_set_request->cmd_id, gopro_set_request->value);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline void mavlink_msg_gopro_set_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t cmd_id, const uint8_t *value)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
    mavlink_gopro_set_request_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.cmd_id = cmd_id;
    mav_array_memcpy(packet.value, value, sizeof(uint8_t)*4);
    _mav_finalize_message_chan_send(chan, 218, (const char *)&packet, 7, 7, 17);

}






static inline void mavlink_msg_gopro_set_request_send_struct(mavlink_channel_t chan, const mavlink_gopro_set_request_t* gopro_set_request)
{



    _mav_finalize_message_chan_send(chan, 218, (const char *)gopro_set_request, 7, 7, 17);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline void mavlink_msg_gopro_set_request_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t cmd_id, const uint8_t *value)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
    mavlink_gopro_set_request_t *packet = (mavlink_gopro_set_request_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->cmd_id = cmd_id;
    mav_array_memcpy(packet->value, value, sizeof(uint8_t)*4);
    _mav_finalize_message_chan_send(chan, 218, (const char *)packet, 7, 7, 17);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_request.h"
static inline uint8_t mavlink_msg_gopro_set_request_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gopro_set_request_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gopro_set_request_get_cmd_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_gopro_set_request_get_value(const mavlink_message_t* msg, uint8_t *value)
{
    return _MAV_RETURN_uint8_t_array(msg, value, 4, 3);
}







static inline void mavlink_msg_gopro_set_request_decode(const mavlink_message_t* msg, mavlink_gopro_set_request_t* gopro_set_request)
{






        uint8_t len = msg->len < 7? msg->len : 7;
        memset(gopro_set_request, 0, 7);
    memcpy(gopro_set_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 814 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h" 1
       




typedef struct __mavlink_gopro_set_response_t { uint8_t cmd_id; uint8_t status; } __attribute__((packed))



   mavlink_gopro_set_response_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline uint16_t mavlink_msg_gopro_set_response_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t cmd_id, uint8_t status)
{







    mavlink_gopro_set_response_t packet;
    packet.cmd_id = cmd_id;
    packet.status = status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 219;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 162);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline uint16_t mavlink_msg_gopro_set_response_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t cmd_id,uint8_t status)
{







    mavlink_gopro_set_response_t packet;
    packet.cmd_id = cmd_id;
    packet.status = status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 219;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 162);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline uint16_t mavlink_msg_gopro_set_response_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gopro_set_response_t* gopro_set_response)
{
    return mavlink_msg_gopro_set_response_pack(system_id, component_id, msg, gopro_set_response->cmd_id, gopro_set_response->status);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline uint16_t mavlink_msg_gopro_set_response_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gopro_set_response_t* gopro_set_response)
{
    return mavlink_msg_gopro_set_response_pack_chan(system_id, component_id, chan, msg, gopro_set_response->cmd_id, gopro_set_response->status);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline void mavlink_msg_gopro_set_response_send(mavlink_channel_t chan, uint8_t cmd_id, uint8_t status)
{







    mavlink_gopro_set_response_t packet;
    packet.cmd_id = cmd_id;
    packet.status = status;

    _mav_finalize_message_chan_send(chan, 219, (const char *)&packet, 2, 2, 162);

}






static inline void mavlink_msg_gopro_set_response_send_struct(mavlink_channel_t chan, const mavlink_gopro_set_response_t* gopro_set_response)
{



    _mav_finalize_message_chan_send(chan, 219, (const char *)gopro_set_response, 2, 2, 162);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline void mavlink_msg_gopro_set_response_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t cmd_id, uint8_t status)
{







    mavlink_gopro_set_response_t *packet = (mavlink_gopro_set_response_t *)msgbuf;
    packet->cmd_id = cmd_id;
    packet->status = status;

    _mav_finalize_message_chan_send(chan, 219, (const char *)packet, 2, 2, 162);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_gopro_set_response.h"
static inline uint8_t mavlink_msg_gopro_set_response_get_cmd_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gopro_set_response_get_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_gopro_set_response_decode(const mavlink_message_t* msg, mavlink_gopro_set_response_t* gopro_set_response)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(gopro_set_response, 0, 2);
    memcpy(gopro_set_response, ((const char *)(&((msg)->payload64[0]))), len);

}
# 815 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h" 1
       




typedef struct __mavlink_rpm_t { float rpm1; float rpm2; } __attribute__((packed))



   mavlink_rpm_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline uint16_t mavlink_msg_rpm_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float rpm1, float rpm2)
{







    mavlink_rpm_t packet;
    packet.rpm1 = rpm1;
    packet.rpm2 = rpm2;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 226;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 207);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline uint16_t mavlink_msg_rpm_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float rpm1,float rpm2)
{







    mavlink_rpm_t packet;
    packet.rpm1 = rpm1;
    packet.rpm2 = rpm2;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 226;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 207);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline uint16_t mavlink_msg_rpm_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rpm_t* rpm)
{
    return mavlink_msg_rpm_pack(system_id, component_id, msg, rpm->rpm1, rpm->rpm2);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline uint16_t mavlink_msg_rpm_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rpm_t* rpm)
{
    return mavlink_msg_rpm_pack_chan(system_id, component_id, chan, msg, rpm->rpm1, rpm->rpm2);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline void mavlink_msg_rpm_send(mavlink_channel_t chan, float rpm1, float rpm2)
{







    mavlink_rpm_t packet;
    packet.rpm1 = rpm1;
    packet.rpm2 = rpm2;

    _mav_finalize_message_chan_send(chan, 226, (const char *)&packet, 8, 8, 207);

}






static inline void mavlink_msg_rpm_send_struct(mavlink_channel_t chan, const mavlink_rpm_t* rpm)
{



    _mav_finalize_message_chan_send(chan, 226, (const char *)rpm, 8, 8, 207);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline void mavlink_msg_rpm_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float rpm1, float rpm2)
{







    mavlink_rpm_t *packet = (mavlink_rpm_t *)msgbuf;
    packet->rpm1 = rpm1;
    packet->rpm2 = rpm2;

    _mav_finalize_message_chan_send(chan, 226, (const char *)packet, 8, 8, 207);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_rpm.h"
static inline float mavlink_msg_rpm_get_rpm1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_rpm_get_rpm2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_rpm_decode(const mavlink_message_t* msg, mavlink_rpm_t* rpm)
{




        uint8_t len = msg->len < 8? msg->len : 8;
        memset(rpm, 0, 8);
    memcpy(rpm, ((const char *)(&((msg)->payload64[0]))), len);

}
# 816 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h" 1
       




typedef struct __mavlink_device_op_read_t { uint32_t request_id; uint8_t target_system; uint8_t target_component; uint8_t bustype; uint8_t bus; uint8_t address; char busname[40]; uint8_t regstart; uint8_t count; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
   mavlink_device_op_read_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline uint16_t mavlink_msg_device_op_read_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint32_t request_id, uint8_t bustype, uint8_t bus, uint8_t address, const char *busname, uint8_t regstart, uint8_t count)
{
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
    mavlink_device_op_read_t packet;
    packet.request_id = request_id;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.bustype = bustype;
    packet.bus = bus;
    packet.address = address;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.busname, busname, sizeof(char)*40);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 11000;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 134);
}
# 129 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline uint16_t mavlink_msg_device_op_read_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint32_t request_id,uint8_t bustype,uint8_t bus,uint8_t address,const char *busname,uint8_t regstart,uint8_t count)
{
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
    mavlink_device_op_read_t packet;
    packet.request_id = request_id;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.bustype = bustype;
    packet.bus = bus;
    packet.address = address;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.busname, busname, sizeof(char)*40);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 11000;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 134);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline uint16_t mavlink_msg_device_op_read_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_device_op_read_t* device_op_read)
{
    return mavlink_msg_device_op_read_pack(system_id, component_id, msg, device_op_read->target_system, device_op_read->target_component, device_op_read->request_id, device_op_read->bustype, device_op_read->bus, device_op_read->address, device_op_read->busname, device_op_read->regstart, device_op_read->count);
}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline uint16_t mavlink_msg_device_op_read_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_device_op_read_t* device_op_read)
{
    return mavlink_msg_device_op_read_pack_chan(system_id, component_id, chan, msg, device_op_read->target_system, device_op_read->target_component, device_op_read->request_id, device_op_read->bustype, device_op_read->bus, device_op_read->address, device_op_read->busname, device_op_read->regstart, device_op_read->count);
}
# 206 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline void mavlink_msg_device_op_read_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t request_id, uint8_t bustype, uint8_t bus, uint8_t address, const char *busname, uint8_t regstart, uint8_t count)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
    mavlink_device_op_read_t packet;
    packet.request_id = request_id;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.bustype = bustype;
    packet.bus = bus;
    packet.address = address;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.busname, busname, sizeof(char)*40);
    _mav_finalize_message_chan_send(chan, 11000, (const char *)&packet, 51, 51, 134);

}






static inline void mavlink_msg_device_op_read_send_struct(mavlink_channel_t chan, const mavlink_device_op_read_t* device_op_read)
{



    _mav_finalize_message_chan_send(chan, 11000, (const char *)device_op_read, 51, 51, 134);

}
# 257 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline void mavlink_msg_device_op_read_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t request_id, uint8_t bustype, uint8_t bus, uint8_t address, const char *busname, uint8_t regstart, uint8_t count)
{
# 272 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
    mavlink_device_op_read_t *packet = (mavlink_device_op_read_t *)msgbuf;
    packet->request_id = request_id;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->bustype = bustype;
    packet->bus = bus;
    packet->address = address;
    packet->regstart = regstart;
    packet->count = count;
    mav_array_memcpy(packet->busname, busname, sizeof(char)*40);
    _mav_finalize_message_chan_send(chan, 11000, (const char *)packet, 51, 51, 134);

}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
static inline uint8_t mavlink_msg_device_op_read_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_device_op_read_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_device_op_read_get_request_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_device_op_read_get_bustype(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_device_op_read_get_bus(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_device_op_read_get_address(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_device_op_read_get_busname(const mavlink_message_t* msg, char *busname)
{
    return _MAV_RETURN_char_array(msg, busname, 40, 9);
}






static inline uint8_t mavlink_msg_device_op_read_get_regstart(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[49];
}






static inline uint8_t mavlink_msg_device_op_read_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}







static inline void mavlink_msg_device_op_read_decode(const mavlink_message_t* msg, mavlink_device_op_read_t* device_op_read)
{
# 401 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read.h"
        uint8_t len = msg->len < 51? msg->len : 51;
        memset(device_op_read, 0, 51);
    memcpy(device_op_read, ((const char *)(&((msg)->payload64[0]))), len);

}
# 817 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h" 1
       




typedef struct __mavlink_device_op_read_reply_t { uint32_t request_id; uint8_t result; uint8_t regstart; uint8_t count; uint8_t data[128]; } __attribute__((packed))






   mavlink_device_op_read_reply_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline uint16_t mavlink_msg_device_op_read_reply_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t request_id, uint8_t result, uint8_t regstart, uint8_t count, const uint8_t *data)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
    mavlink_device_op_read_reply_t packet;
    packet.request_id = request_id;
    packet.result = result;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*128);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 135);


    msg->msgid = 11001;
    return mavlink_finalize_message(msg, system_id, component_id, 135, 135, 15);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline uint16_t mavlink_msg_device_op_read_reply_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t request_id,uint8_t result,uint8_t regstart,uint8_t count,const uint8_t *data)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
    mavlink_device_op_read_reply_t packet;
    packet.request_id = request_id;
    packet.result = result;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*128);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 135);


    msg->msgid = 11001;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 135, 135, 15);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline uint16_t mavlink_msg_device_op_read_reply_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_device_op_read_reply_t* device_op_read_reply)
{
    return mavlink_msg_device_op_read_reply_pack(system_id, component_id, msg, device_op_read_reply->request_id, device_op_read_reply->result, device_op_read_reply->regstart, device_op_read_reply->count, device_op_read_reply->data);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline uint16_t mavlink_msg_device_op_read_reply_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_device_op_read_reply_t* device_op_read_reply)
{
    return mavlink_msg_device_op_read_reply_pack_chan(system_id, component_id, chan, msg, device_op_read_reply->request_id, device_op_read_reply->result, device_op_read_reply->regstart, device_op_read_reply->count, device_op_read_reply->data);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline void mavlink_msg_device_op_read_reply_send(mavlink_channel_t chan, uint32_t request_id, uint8_t result, uint8_t regstart, uint8_t count, const uint8_t *data)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
    mavlink_device_op_read_reply_t packet;
    packet.request_id = request_id;
    packet.result = result;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*128);
    _mav_finalize_message_chan_send(chan, 11001, (const char *)&packet, 135, 135, 15);

}






static inline void mavlink_msg_device_op_read_reply_send_struct(mavlink_channel_t chan, const mavlink_device_op_read_reply_t* device_op_read_reply)
{



    _mav_finalize_message_chan_send(chan, 11001, (const char *)device_op_read_reply, 135, 135, 15);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline void mavlink_msg_device_op_read_reply_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t request_id, uint8_t result, uint8_t regstart, uint8_t count, const uint8_t *data)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
    mavlink_device_op_read_reply_t *packet = (mavlink_device_op_read_reply_t *)msgbuf;
    packet->request_id = request_id;
    packet->result = result;
    packet->regstart = regstart;
    packet->count = count;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*128);
    _mav_finalize_message_chan_send(chan, 11001, (const char *)packet, 135, 135, 15);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_read_reply.h"
static inline uint32_t mavlink_msg_device_op_read_reply_get_request_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_device_op_read_reply_get_result(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_device_op_read_reply_get_regstart(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_device_op_read_reply_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint16_t mavlink_msg_device_op_read_reply_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 128, 7);
}







static inline void mavlink_msg_device_op_read_reply_decode(const mavlink_message_t* msg, mavlink_device_op_read_reply_t* device_op_read_reply)
{







        uint8_t len = msg->len < 135? msg->len : 135;
        memset(device_op_read_reply, 0, 135);
    memcpy(device_op_read_reply, ((const char *)(&((msg)->payload64[0]))), len);

}
# 818 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h" 1
       




typedef struct __mavlink_device_op_write_t { uint32_t request_id; uint8_t target_system; uint8_t target_component; uint8_t bustype; uint8_t bus; uint8_t address; char busname[40]; uint8_t regstart; uint8_t count; uint8_t data[128]; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
   mavlink_device_op_write_t;
# 84 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline uint16_t mavlink_msg_device_op_write_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint32_t request_id, uint8_t bustype, uint8_t bus, uint8_t address, const char *busname, uint8_t regstart, uint8_t count, const uint8_t *data)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
    mavlink_device_op_write_t packet;
    packet.request_id = request_id;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.bustype = bustype;
    packet.bus = bus;
    packet.address = address;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.busname, busname, sizeof(char)*40);
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*128);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 179);


    msg->msgid = 11002;
    return mavlink_finalize_message(msg, system_id, component_id, 179, 179, 234);
}
# 137 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline uint16_t mavlink_msg_device_op_write_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint32_t request_id,uint8_t bustype,uint8_t bus,uint8_t address,const char *busname,uint8_t regstart,uint8_t count,const uint8_t *data)
{
# 155 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
    mavlink_device_op_write_t packet;
    packet.request_id = request_id;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.bustype = bustype;
    packet.bus = bus;
    packet.address = address;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.busname, busname, sizeof(char)*40);
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*128);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 179);


    msg->msgid = 11002;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 179, 179, 234);
}
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline uint16_t mavlink_msg_device_op_write_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_device_op_write_t* device_op_write)
{
    return mavlink_msg_device_op_write_pack(system_id, component_id, msg, device_op_write->target_system, device_op_write->target_component, device_op_write->request_id, device_op_write->bustype, device_op_write->bus, device_op_write->address, device_op_write->busname, device_op_write->regstart, device_op_write->count, device_op_write->data);
}
# 195 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline uint16_t mavlink_msg_device_op_write_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_device_op_write_t* device_op_write)
{
    return mavlink_msg_device_op_write_pack_chan(system_id, component_id, chan, msg, device_op_write->target_system, device_op_write->target_component, device_op_write->request_id, device_op_write->bustype, device_op_write->bus, device_op_write->address, device_op_write->busname, device_op_write->regstart, device_op_write->count, device_op_write->data);
}
# 217 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline void mavlink_msg_device_op_write_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t request_id, uint8_t bustype, uint8_t bus, uint8_t address, const char *busname, uint8_t regstart, uint8_t count, const uint8_t *data)
{
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
    mavlink_device_op_write_t packet;
    packet.request_id = request_id;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.bustype = bustype;
    packet.bus = bus;
    packet.address = address;
    packet.regstart = regstart;
    packet.count = count;
    mav_array_memcpy(packet.busname, busname, sizeof(char)*40);
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*128);
    _mav_finalize_message_chan_send(chan, 11002, (const char *)&packet, 179, 179, 234);

}






static inline void mavlink_msg_device_op_write_send_struct(mavlink_channel_t chan, const mavlink_device_op_write_t* device_op_write)
{



    _mav_finalize_message_chan_send(chan, 11002, (const char *)device_op_write, 179, 179, 234);

}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline void mavlink_msg_device_op_write_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint32_t request_id, uint8_t bustype, uint8_t bus, uint8_t address, const char *busname, uint8_t regstart, uint8_t count, const uint8_t *data)
{
# 286 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
    mavlink_device_op_write_t *packet = (mavlink_device_op_write_t *)msgbuf;
    packet->request_id = request_id;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->bustype = bustype;
    packet->bus = bus;
    packet->address = address;
    packet->regstart = regstart;
    packet->count = count;
    mav_array_memcpy(packet->busname, busname, sizeof(char)*40);
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*128);
    _mav_finalize_message_chan_send(chan, 11002, (const char *)packet, 179, 179, 234);

}
# 312 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
static inline uint8_t mavlink_msg_device_op_write_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_device_op_write_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_device_op_write_get_request_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_device_op_write_get_bustype(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_device_op_write_get_bus(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_device_op_write_get_address(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_device_op_write_get_busname(const mavlink_message_t* msg, char *busname)
{
    return _MAV_RETURN_char_array(msg, busname, 40, 9);
}






static inline uint8_t mavlink_msg_device_op_write_get_regstart(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[49];
}






static inline uint8_t mavlink_msg_device_op_write_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_device_op_write_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 128, 51);
}







static inline void mavlink_msg_device_op_write_decode(const mavlink_message_t* msg, mavlink_device_op_write_t* device_op_write)
{
# 427 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write.h"
        uint8_t len = msg->len < 179? msg->len : 179;
        memset(device_op_write, 0, 179);
    memcpy(device_op_write, ((const char *)(&((msg)->payload64[0]))), len);

}
# 819 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h" 1
       




typedef struct __mavlink_device_op_write_reply_t { uint32_t request_id; uint8_t result; } __attribute__((packed))



   mavlink_device_op_write_reply_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline uint16_t mavlink_msg_device_op_write_reply_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t request_id, uint8_t result)
{







    mavlink_device_op_write_reply_t packet;
    packet.request_id = request_id;
    packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 11003;
    return mavlink_finalize_message(msg, system_id, component_id, 5, 5, 64);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline uint16_t mavlink_msg_device_op_write_reply_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t request_id,uint8_t result)
{







    mavlink_device_op_write_reply_t packet;
    packet.request_id = request_id;
    packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 11003;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 5, 5, 64);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline uint16_t mavlink_msg_device_op_write_reply_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_device_op_write_reply_t* device_op_write_reply)
{
    return mavlink_msg_device_op_write_reply_pack(system_id, component_id, msg, device_op_write_reply->request_id, device_op_write_reply->result);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline uint16_t mavlink_msg_device_op_write_reply_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_device_op_write_reply_t* device_op_write_reply)
{
    return mavlink_msg_device_op_write_reply_pack_chan(system_id, component_id, chan, msg, device_op_write_reply->request_id, device_op_write_reply->result);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline void mavlink_msg_device_op_write_reply_send(mavlink_channel_t chan, uint32_t request_id, uint8_t result)
{







    mavlink_device_op_write_reply_t packet;
    packet.request_id = request_id;
    packet.result = result;

    _mav_finalize_message_chan_send(chan, 11003, (const char *)&packet, 5, 5, 64);

}






static inline void mavlink_msg_device_op_write_reply_send_struct(mavlink_channel_t chan, const mavlink_device_op_write_reply_t* device_op_write_reply)
{



    _mav_finalize_message_chan_send(chan, 11003, (const char *)device_op_write_reply, 5, 5, 64);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline void mavlink_msg_device_op_write_reply_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t request_id, uint8_t result)
{







    mavlink_device_op_write_reply_t *packet = (mavlink_device_op_write_reply_t *)msgbuf;
    packet->request_id = request_id;
    packet->result = result;

    _mav_finalize_message_chan_send(chan, 11003, (const char *)packet, 5, 5, 64);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_device_op_write_reply.h"
static inline uint32_t mavlink_msg_device_op_write_reply_get_request_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_device_op_write_reply_get_result(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}







static inline void mavlink_msg_device_op_write_reply_decode(const mavlink_message_t* msg, mavlink_device_op_write_reply_t* device_op_write_reply)
{




        uint8_t len = msg->len < 5? msg->len : 5;
        memset(device_op_write_reply, 0, 5);
    memcpy(device_op_write_reply, ((const char *)(&((msg)->payload64[0]))), len);

}
# 820 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h" 1
       




typedef struct __mavlink_adap_tuning_t { float desired; float achieved; float error; float theta; float omega; float sigma; float theta_dot; float omega_dot; float sigma_dot; float f; float f_dot; float u; uint8_t axis; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
   mavlink_adap_tuning_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline uint16_t mavlink_msg_adap_tuning_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t axis, float desired, float achieved, float error, float theta, float omega, float sigma, float theta_dot, float omega_dot, float sigma_dot, float f, float f_dot, float u)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
    mavlink_adap_tuning_t packet;
    packet.desired = desired;
    packet.achieved = achieved;
    packet.error = error;
    packet.theta = theta;
    packet.omega = omega;
    packet.sigma = sigma;
    packet.theta_dot = theta_dot;
    packet.omega_dot = omega_dot;
    packet.sigma_dot = sigma_dot;
    packet.f = f;
    packet.f_dot = f_dot;
    packet.u = u;
    packet.axis = axis;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 49);


    msg->msgid = 11010;
    return mavlink_finalize_message(msg, system_id, component_id, 49, 49, 46);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline uint16_t mavlink_msg_adap_tuning_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t axis,float desired,float achieved,float error,float theta,float omega,float sigma,float theta_dot,float omega_dot,float sigma_dot,float f,float f_dot,float u)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
    mavlink_adap_tuning_t packet;
    packet.desired = desired;
    packet.achieved = achieved;
    packet.error = error;
    packet.theta = theta;
    packet.omega = omega;
    packet.sigma = sigma;
    packet.theta_dot = theta_dot;
    packet.omega_dot = omega_dot;
    packet.sigma_dot = sigma_dot;
    packet.f = f;
    packet.f_dot = f_dot;
    packet.u = u;
    packet.axis = axis;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 49);


    msg->msgid = 11010;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 49, 49, 46);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline uint16_t mavlink_msg_adap_tuning_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_adap_tuning_t* adap_tuning)
{
    return mavlink_msg_adap_tuning_pack(system_id, component_id, msg, adap_tuning->axis, adap_tuning->desired, adap_tuning->achieved, adap_tuning->error, adap_tuning->theta, adap_tuning->omega, adap_tuning->sigma, adap_tuning->theta_dot, adap_tuning->omega_dot, adap_tuning->sigma_dot, adap_tuning->f, adap_tuning->f_dot, adap_tuning->u);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline uint16_t mavlink_msg_adap_tuning_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_adap_tuning_t* adap_tuning)
{
    return mavlink_msg_adap_tuning_pack_chan(system_id, component_id, chan, msg, adap_tuning->axis, adap_tuning->desired, adap_tuning->achieved, adap_tuning->error, adap_tuning->theta, adap_tuning->omega, adap_tuning->sigma, adap_tuning->theta_dot, adap_tuning->omega_dot, adap_tuning->sigma_dot, adap_tuning->f, adap_tuning->f_dot, adap_tuning->u);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline void mavlink_msg_adap_tuning_send(mavlink_channel_t chan, uint8_t axis, float desired, float achieved, float error, float theta, float omega, float sigma, float theta_dot, float omega_dot, float sigma_dot, float f, float f_dot, float u)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
    mavlink_adap_tuning_t packet;
    packet.desired = desired;
    packet.achieved = achieved;
    packet.error = error;
    packet.theta = theta;
    packet.omega = omega;
    packet.sigma = sigma;
    packet.theta_dot = theta_dot;
    packet.omega_dot = omega_dot;
    packet.sigma_dot = sigma_dot;
    packet.f = f;
    packet.f_dot = f_dot;
    packet.u = u;
    packet.axis = axis;

    _mav_finalize_message_chan_send(chan, 11010, (const char *)&packet, 49, 49, 46);

}






static inline void mavlink_msg_adap_tuning_send_struct(mavlink_channel_t chan, const mavlink_adap_tuning_t* adap_tuning)
{



    _mav_finalize_message_chan_send(chan, 11010, (const char *)adap_tuning, 49, 49, 46);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline void mavlink_msg_adap_tuning_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t axis, float desired, float achieved, float error, float theta, float omega, float sigma, float theta_dot, float omega_dot, float sigma_dot, float f, float f_dot, float u)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
    mavlink_adap_tuning_t *packet = (mavlink_adap_tuning_t *)msgbuf;
    packet->desired = desired;
    packet->achieved = achieved;
    packet->error = error;
    packet->theta = theta;
    packet->omega = omega;
    packet->sigma = sigma;
    packet->theta_dot = theta_dot;
    packet->omega_dot = omega_dot;
    packet->sigma_dot = sigma_dot;
    packet->f = f;
    packet->f_dot = f_dot;
    packet->u = u;
    packet->axis = axis;

    _mav_finalize_message_chan_send(chan, 11010, (const char *)packet, 49, 49, 46);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
static inline uint8_t mavlink_msg_adap_tuning_get_axis(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[48];
}






static inline float mavlink_msg_adap_tuning_get_desired(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_adap_tuning_get_achieved(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_adap_tuning_get_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_adap_tuning_get_theta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_adap_tuning_get_omega(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_adap_tuning_get_sigma(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_adap_tuning_get_theta_dot(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_adap_tuning_get_omega_dot(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_adap_tuning_get_sigma_dot(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_adap_tuning_get_f(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_adap_tuning_get_f_dot(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_adap_tuning_get_u(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_adap_tuning_decode(const mavlink_message_t* msg, mavlink_adap_tuning_t* adap_tuning)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_adap_tuning.h"
        uint8_t len = msg->len < 49? msg->len : 49;
        memset(adap_tuning, 0, 49);
    memcpy(adap_tuning, ((const char *)(&((msg)->payload64[0]))), len);

}
# 821 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h" 1
       




typedef struct __mavlink_vision_position_delta_t { uint64_t time_usec; uint64_t time_delta_usec; float angle_delta[3]; float position_delta[3]; float confidence; } __attribute__((packed))






   mavlink_vision_position_delta_t;
# 64 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline uint16_t mavlink_msg_vision_position_delta_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint64_t time_delta_usec, const float *angle_delta, const float *position_delta, float confidence)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
    mavlink_vision_position_delta_t packet;
    packet.time_usec = time_usec;
    packet.time_delta_usec = time_delta_usec;
    packet.confidence = confidence;
    mav_array_memcpy(packet.angle_delta, angle_delta, sizeof(float)*3);
    mav_array_memcpy(packet.position_delta, position_delta, sizeof(float)*3);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 11011;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 106);
}
# 102 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline uint16_t mavlink_msg_vision_position_delta_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint64_t time_delta_usec,const float *angle_delta,const float *position_delta,float confidence)
{
# 115 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
    mavlink_vision_position_delta_t packet;
    packet.time_usec = time_usec;
    packet.time_delta_usec = time_delta_usec;
    packet.confidence = confidence;
    mav_array_memcpy(packet.angle_delta, angle_delta, sizeof(float)*3);
    mav_array_memcpy(packet.position_delta, position_delta, sizeof(float)*3);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 11011;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 106);
}
# 136 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline uint16_t mavlink_msg_vision_position_delta_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_position_delta_t* vision_position_delta)
{
    return mavlink_msg_vision_position_delta_pack(system_id, component_id, msg, vision_position_delta->time_usec, vision_position_delta->time_delta_usec, vision_position_delta->angle_delta, vision_position_delta->position_delta, vision_position_delta->confidence);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline uint16_t mavlink_msg_vision_position_delta_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_position_delta_t* vision_position_delta)
{
    return mavlink_msg_vision_position_delta_pack_chan(system_id, component_id, chan, msg, vision_position_delta->time_usec, vision_position_delta->time_delta_usec, vision_position_delta->angle_delta, vision_position_delta->position_delta, vision_position_delta->confidence);
}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline void mavlink_msg_vision_position_delta_send(mavlink_channel_t chan, uint64_t time_usec, uint64_t time_delta_usec, const float *angle_delta, const float *position_delta, float confidence)
{
# 178 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
    mavlink_vision_position_delta_t packet;
    packet.time_usec = time_usec;
    packet.time_delta_usec = time_delta_usec;
    packet.confidence = confidence;
    mav_array_memcpy(packet.angle_delta, angle_delta, sizeof(float)*3);
    mav_array_memcpy(packet.position_delta, position_delta, sizeof(float)*3);
    _mav_finalize_message_chan_send(chan, 11011, (const char *)&packet, 44, 44, 106);

}






static inline void mavlink_msg_vision_position_delta_send_struct(mavlink_channel_t chan, const mavlink_vision_position_delta_t* vision_position_delta)
{



    _mav_finalize_message_chan_send(chan, 11011, (const char *)vision_position_delta, 44, 44, 106);

}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline void mavlink_msg_vision_position_delta_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint64_t time_delta_usec, const float *angle_delta, const float *position_delta, float confidence)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
    mavlink_vision_position_delta_t *packet = (mavlink_vision_position_delta_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->time_delta_usec = time_delta_usec;
    packet->confidence = confidence;
    mav_array_memcpy(packet->angle_delta, angle_delta, sizeof(float)*3);
    mav_array_memcpy(packet->position_delta, position_delta, sizeof(float)*3);
    _mav_finalize_message_chan_send(chan, 11011, (const char *)packet, 44, 44, 106);

}
# 242 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_vision_position_delta.h"
static inline uint64_t mavlink_msg_vision_position_delta_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint64_t mavlink_msg_vision_position_delta_get_time_delta_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}






static inline uint16_t mavlink_msg_vision_position_delta_get_angle_delta(const mavlink_message_t* msg, float *angle_delta)
{
    return _MAV_RETURN_float_array(msg, angle_delta, 3, 16);
}






static inline uint16_t mavlink_msg_vision_position_delta_get_position_delta(const mavlink_message_t* msg, float *position_delta)
{
    return _MAV_RETURN_float_array(msg, position_delta, 3, 28);
}






static inline float mavlink_msg_vision_position_delta_get_confidence(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}







static inline void mavlink_msg_vision_position_delta_decode(const mavlink_message_t* msg, mavlink_vision_position_delta_t* vision_position_delta)
{







        uint8_t len = msg->len < 44? msg->len : 44;
        memset(vision_position_delta, 0, 44);
    memcpy(vision_position_delta, ((const char *)(&((msg)->payload64[0]))), len);

}
# 822 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h" 1
       




typedef struct __mavlink_aoa_ssa_t { uint64_t time_usec; float AOA; float SSA; } __attribute__((packed))




   mavlink_aoa_ssa_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline uint16_t mavlink_msg_aoa_ssa_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float AOA, float SSA)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
    mavlink_aoa_ssa_t packet;
    packet.time_usec = time_usec;
    packet.AOA = AOA;
    packet.SSA = SSA;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 11020;
    return mavlink_finalize_message(msg, system_id, component_id, 16, 16, 205);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline uint16_t mavlink_msg_aoa_ssa_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float AOA,float SSA)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
    mavlink_aoa_ssa_t packet;
    packet.time_usec = time_usec;
    packet.AOA = AOA;
    packet.SSA = SSA;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 11020;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 16, 205);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline uint16_t mavlink_msg_aoa_ssa_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_aoa_ssa_t* aoa_ssa)
{
    return mavlink_msg_aoa_ssa_pack(system_id, component_id, msg, aoa_ssa->time_usec, aoa_ssa->AOA, aoa_ssa->SSA);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline uint16_t mavlink_msg_aoa_ssa_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_aoa_ssa_t* aoa_ssa)
{
    return mavlink_msg_aoa_ssa_pack_chan(system_id, component_id, chan, msg, aoa_ssa->time_usec, aoa_ssa->AOA, aoa_ssa->SSA);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline void mavlink_msg_aoa_ssa_send(mavlink_channel_t chan, uint64_t time_usec, float AOA, float SSA)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
    mavlink_aoa_ssa_t packet;
    packet.time_usec = time_usec;
    packet.AOA = AOA;
    packet.SSA = SSA;

    _mav_finalize_message_chan_send(chan, 11020, (const char *)&packet, 16, 16, 205);

}






static inline void mavlink_msg_aoa_ssa_send_struct(mavlink_channel_t chan, const mavlink_aoa_ssa_t* aoa_ssa)
{



    _mav_finalize_message_chan_send(chan, 11020, (const char *)aoa_ssa, 16, 16, 205);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline void mavlink_msg_aoa_ssa_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float AOA, float SSA)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
    mavlink_aoa_ssa_t *packet = (mavlink_aoa_ssa_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->AOA = AOA;
    packet->SSA = SSA;

    _mav_finalize_message_chan_send(chan, 11020, (const char *)packet, 16, 16, 205);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/./mavlink_msg_aoa_ssa.h"
static inline uint64_t mavlink_msg_aoa_ssa_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_aoa_ssa_get_AOA(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_aoa_ssa_get_SSA(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_aoa_ssa_decode(const mavlink_message_t* msg, mavlink_aoa_ssa_t* aoa_ssa)
{





        uint8_t len = msg->len < 16? msg->len : 16;
        memset(aoa_ssa, 0, 16);
    memcpy(aoa_ssa, ((const char *)(&((msg)->payload64[0]))), len);

}
# 823 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2


# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 1




       
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h"
extern "C" {
# 40 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h"
typedef enum MAV_AUTOPILOT
{
   MAV_AUTOPILOT_GENERIC=0,
   MAV_AUTOPILOT_RESERVED=1,
   MAV_AUTOPILOT_SLUGS=2,
   MAV_AUTOPILOT_ARDUPILOTMEGA=3,
   MAV_AUTOPILOT_OPENPILOT=4,
   MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY=5,
   MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY=6,
   MAV_AUTOPILOT_GENERIC_MISSION_FULL=7,
   MAV_AUTOPILOT_INVALID=8,
   MAV_AUTOPILOT_PPZ=9,
   MAV_AUTOPILOT_UDB=10,
   MAV_AUTOPILOT_FP=11,
   MAV_AUTOPILOT_PX4=12,
   MAV_AUTOPILOT_SMACCMPILOT=13,
   MAV_AUTOPILOT_AUTOQUAD=14,
   MAV_AUTOPILOT_ARMAZILA=15,
   MAV_AUTOPILOT_AEROB=16,
   MAV_AUTOPILOT_ASLUAV=17,
   MAV_AUTOPILOT_SMARTAP=18,
   MAV_AUTOPILOT_ENUM_END=19,
} MAV_AUTOPILOT;





typedef enum MAV_TYPE
{
   MAV_TYPE_GENERIC=0,
   MAV_TYPE_FIXED_WING=1,
   MAV_TYPE_QUADROTOR=2,
   MAV_TYPE_COAXIAL=3,
   MAV_TYPE_HELICOPTER=4,
   MAV_TYPE_ANTENNA_TRACKER=5,
   MAV_TYPE_GCS=6,
   MAV_TYPE_AIRSHIP=7,
   MAV_TYPE_FREE_BALLOON=8,
   MAV_TYPE_ROCKET=9,
   MAV_TYPE_GROUND_ROVER=10,
   MAV_TYPE_SURFACE_BOAT=11,
   MAV_TYPE_SUBMARINE=12,
   MAV_TYPE_HEXAROTOR=13,
   MAV_TYPE_OCTOROTOR=14,
   MAV_TYPE_TRICOPTER=15,
   MAV_TYPE_FLAPPING_WING=16,
   MAV_TYPE_KITE=17,
   MAV_TYPE_ONBOARD_CONTROLLER=18,
   MAV_TYPE_VTOL_DUOROTOR=19,
   MAV_TYPE_VTOL_QUADROTOR=20,
   MAV_TYPE_VTOL_TILTROTOR=21,
   MAV_TYPE_VTOL_RESERVED2=22,
   MAV_TYPE_VTOL_RESERVED3=23,
   MAV_TYPE_VTOL_RESERVED4=24,
   MAV_TYPE_VTOL_RESERVED5=25,
   MAV_TYPE_GIMBAL=26,
   MAV_TYPE_ADSB=27,
   MAV_TYPE_DODECAROTOR=28,
   MAV_TYPE_ENUM_END=29,
} MAV_TYPE;





typedef enum FIRMWARE_VERSION_TYPE
{
   FIRMWARE_VERSION_TYPE_DEV=0,
   FIRMWARE_VERSION_TYPE_ALPHA=64,
   FIRMWARE_VERSION_TYPE_BETA=128,
   FIRMWARE_VERSION_TYPE_RC=192,
   FIRMWARE_VERSION_TYPE_OFFICIAL=255,
   FIRMWARE_VERSION_TYPE_ENUM_END=256,
} FIRMWARE_VERSION_TYPE;





typedef enum MAV_MODE_FLAG
{
   MAV_MODE_FLAG_CUSTOM_MODE_ENABLED=1,
   MAV_MODE_FLAG_TEST_ENABLED=2,
   MAV_MODE_FLAG_AUTO_ENABLED=4,
   MAV_MODE_FLAG_GUIDED_ENABLED=8,
   MAV_MODE_FLAG_STABILIZE_ENABLED=16,
   MAV_MODE_FLAG_HIL_ENABLED=32,
   MAV_MODE_FLAG_MANUAL_INPUT_ENABLED=64,
   MAV_MODE_FLAG_SAFETY_ARMED=128,
   MAV_MODE_FLAG_ENUM_END=129,
} MAV_MODE_FLAG;





typedef enum MAV_MODE_FLAG_DECODE_POSITION
{
   MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE=1,
   MAV_MODE_FLAG_DECODE_POSITION_TEST=2,
   MAV_MODE_FLAG_DECODE_POSITION_AUTO=4,
   MAV_MODE_FLAG_DECODE_POSITION_GUIDED=8,
   MAV_MODE_FLAG_DECODE_POSITION_STABILIZE=16,
   MAV_MODE_FLAG_DECODE_POSITION_HIL=32,
   MAV_MODE_FLAG_DECODE_POSITION_MANUAL=64,
   MAV_MODE_FLAG_DECODE_POSITION_SAFETY=128,
   MAV_MODE_FLAG_DECODE_POSITION_ENUM_END=129,
} MAV_MODE_FLAG_DECODE_POSITION;





typedef enum MAV_GOTO
{
   MAV_GOTO_DO_HOLD=0,
   MAV_GOTO_DO_CONTINUE=1,
   MAV_GOTO_HOLD_AT_CURRENT_POSITION=2,
   MAV_GOTO_HOLD_AT_SPECIFIED_POSITION=3,
   MAV_GOTO_ENUM_END=4,
} MAV_GOTO;






typedef enum MAV_MODE
{
   MAV_MODE_PREFLIGHT=0,
   MAV_MODE_MANUAL_DISARMED=64,
   MAV_MODE_TEST_DISARMED=66,
   MAV_MODE_STABILIZE_DISARMED=80,
   MAV_MODE_GUIDED_DISARMED=88,
   MAV_MODE_AUTO_DISARMED=92,
   MAV_MODE_MANUAL_ARMED=192,
   MAV_MODE_TEST_ARMED=194,
   MAV_MODE_STABILIZE_ARMED=208,
   MAV_MODE_GUIDED_ARMED=216,
   MAV_MODE_AUTO_ARMED=220,
   MAV_MODE_ENUM_END=221,
} MAV_MODE;





typedef enum MAV_STATE
{
   MAV_STATE_UNINIT=0,
   MAV_STATE_BOOT=1,
   MAV_STATE_CALIBRATING=2,
   MAV_STATE_STANDBY=3,
   MAV_STATE_ACTIVE=4,
   MAV_STATE_CRITICAL=5,
   MAV_STATE_EMERGENCY=6,
   MAV_STATE_POWEROFF=7,
   MAV_STATE_ENUM_END=8,
} MAV_STATE;





typedef enum MAV_COMPONENT
{
   MAV_COMP_ID_ALL=0,
   MAV_COMP_ID_CAMERA=100,
   MAV_COMP_ID_SERVO1=140,
   MAV_COMP_ID_SERVO2=141,
   MAV_COMP_ID_SERVO3=142,
   MAV_COMP_ID_SERVO4=143,
   MAV_COMP_ID_SERVO5=144,
   MAV_COMP_ID_SERVO6=145,
   MAV_COMP_ID_SERVO7=146,
   MAV_COMP_ID_SERVO8=147,
   MAV_COMP_ID_SERVO9=148,
   MAV_COMP_ID_SERVO10=149,
   MAV_COMP_ID_SERVO11=150,
   MAV_COMP_ID_SERVO12=151,
   MAV_COMP_ID_SERVO13=152,
   MAV_COMP_ID_SERVO14=153,
   MAV_COMP_ID_GIMBAL=154,
   MAV_COMP_ID_LOG=155,
   MAV_COMP_ID_ADSB=156,
   MAV_COMP_ID_OSD=157,
   MAV_COMP_ID_PERIPHERAL=158,
   MAV_COMP_ID_QX1_GIMBAL=159,
   MAV_COMP_ID_MAPPER=180,
   MAV_COMP_ID_MISSIONPLANNER=190,
   MAV_COMP_ID_PATHPLANNER=195,
   MAV_COMP_ID_IMU=200,
   MAV_COMP_ID_IMU_2=201,
   MAV_COMP_ID_IMU_3=202,
   MAV_COMP_ID_GPS=220,
   MAV_COMP_ID_UDP_BRIDGE=240,
   MAV_COMP_ID_UART_BRIDGE=241,
   MAV_COMP_ID_SYSTEM_CONTROL=250,
   MAV_COMPONENT_ENUM_END=251,
} MAV_COMPONENT;





typedef enum MAV_SYS_STATUS_SENSOR
{
   MAV_SYS_STATUS_SENSOR_3D_GYRO=1,
   MAV_SYS_STATUS_SENSOR_3D_ACCEL=2,
   MAV_SYS_STATUS_SENSOR_3D_MAG=4,
   MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE=8,
   MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE=16,
   MAV_SYS_STATUS_SENSOR_GPS=32,
   MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW=64,
   MAV_SYS_STATUS_SENSOR_VISION_POSITION=128,
   MAV_SYS_STATUS_SENSOR_LASER_POSITION=256,
   MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH=512,
   MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL=1024,
   MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION=2048,
   MAV_SYS_STATUS_SENSOR_YAW_POSITION=4096,
   MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL=8192,
   MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL=16384,
   MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS=32768,
   MAV_SYS_STATUS_SENSOR_RC_RECEIVER=65536,
   MAV_SYS_STATUS_SENSOR_3D_GYRO2=131072,
   MAV_SYS_STATUS_SENSOR_3D_ACCEL2=262144,
   MAV_SYS_STATUS_SENSOR_3D_MAG2=524288,
   MAV_SYS_STATUS_GEOFENCE=1048576,
   MAV_SYS_STATUS_AHRS=2097152,
   MAV_SYS_STATUS_TERRAIN=4194304,
   MAV_SYS_STATUS_REVERSE_MOTOR=8388608,
   MAV_SYS_STATUS_LOGGING=16777216,
   MAV_SYS_STATUS_SENSOR_BATTERY=33554432,
   MAV_SYS_STATUS_SENSOR_ENUM_END=33554433,
} MAV_SYS_STATUS_SENSOR;





typedef enum MAV_FRAME
{
   MAV_FRAME_GLOBAL=0,
   MAV_FRAME_LOCAL_NED=1,
   MAV_FRAME_MISSION=2,
   MAV_FRAME_GLOBAL_RELATIVE_ALT=3,
   MAV_FRAME_LOCAL_ENU=4,
   MAV_FRAME_GLOBAL_INT=5,
   MAV_FRAME_GLOBAL_RELATIVE_ALT_INT=6,
   MAV_FRAME_LOCAL_OFFSET_NED=7,
   MAV_FRAME_BODY_NED=8,
   MAV_FRAME_BODY_OFFSET_NED=9,
   MAV_FRAME_GLOBAL_TERRAIN_ALT=10,
   MAV_FRAME_GLOBAL_TERRAIN_ALT_INT=11,
   MAV_FRAME_ENUM_END=12,
} MAV_FRAME;





typedef enum MAVLINK_DATA_STREAM_TYPE
{
   MAVLINK_DATA_STREAM_IMG_JPEG=1,
   MAVLINK_DATA_STREAM_IMG_BMP=2,
   MAVLINK_DATA_STREAM_IMG_RAW8U=3,
   MAVLINK_DATA_STREAM_IMG_RAW32U=4,
   MAVLINK_DATA_STREAM_IMG_PGM=5,
   MAVLINK_DATA_STREAM_IMG_PNG=6,
   MAVLINK_DATA_STREAM_TYPE_ENUM_END=7,
} MAVLINK_DATA_STREAM_TYPE;





typedef enum FENCE_ACTION
{
   FENCE_ACTION_NONE=0,
   FENCE_ACTION_GUIDED=1,
   FENCE_ACTION_REPORT=2,
   FENCE_ACTION_GUIDED_THR_PASS=3,
   FENCE_ACTION_RTL=4,
   FENCE_ACTION_ENUM_END=5,
} FENCE_ACTION;





typedef enum FENCE_BREACH
{
   FENCE_BREACH_NONE=0,
   FENCE_BREACH_MINALT=1,
   FENCE_BREACH_MAXALT=2,
   FENCE_BREACH_BOUNDARY=3,
   FENCE_BREACH_ENUM_END=4,
} FENCE_BREACH;





typedef enum MAV_MOUNT_MODE
{
   MAV_MOUNT_MODE_RETRACT=0,
   MAV_MOUNT_MODE_NEUTRAL=1,
   MAV_MOUNT_MODE_MAVLINK_TARGETING=2,
   MAV_MOUNT_MODE_RC_TARGETING=3,
   MAV_MOUNT_MODE_GPS_POINT=4,
   MAV_MOUNT_MODE_ENUM_END=5,
} MAV_MOUNT_MODE;







typedef enum MAV_DATA_STREAM
{
   MAV_DATA_STREAM_ALL=0,
   MAV_DATA_STREAM_RAW_SENSORS=1,
   MAV_DATA_STREAM_EXTENDED_STATUS=2,
   MAV_DATA_STREAM_RC_CHANNELS=3,
   MAV_DATA_STREAM_RAW_CONTROLLER=4,
   MAV_DATA_STREAM_POSITION=6,
   MAV_DATA_STREAM_EXTRA1=10,
   MAV_DATA_STREAM_EXTRA2=11,
   MAV_DATA_STREAM_EXTRA3=12,
   MAV_DATA_STREAM_ENUM_END=13,
} MAV_DATA_STREAM;







typedef enum MAV_ROI
{
   MAV_ROI_NONE=0,
   MAV_ROI_WPNEXT=1,
   MAV_ROI_WPINDEX=2,
   MAV_ROI_LOCATION=3,
   MAV_ROI_TARGET=4,
   MAV_ROI_ENUM_END=5,
} MAV_ROI;





typedef enum MAV_CMD_ACK
{
   MAV_CMD_ACK_OK=1,
   MAV_CMD_ACK_ERR_FAIL=2,
   MAV_CMD_ACK_ERR_ACCESS_DENIED=3,
   MAV_CMD_ACK_ERR_NOT_SUPPORTED=4,
   MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED=5,
   MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE=6,
   MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE=7,
   MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE=8,
   MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE=9,
   MAV_CMD_ACK_ENUM_END=10,
} MAV_CMD_ACK;





typedef enum MAV_PARAM_TYPE
{
   MAV_PARAM_TYPE_UINT8=1,
   MAV_PARAM_TYPE_INT8=2,
   MAV_PARAM_TYPE_UINT16=3,
   MAV_PARAM_TYPE_INT16=4,
   MAV_PARAM_TYPE_UINT32=5,
   MAV_PARAM_TYPE_INT32=6,
   MAV_PARAM_TYPE_UINT64=7,
   MAV_PARAM_TYPE_INT64=8,
   MAV_PARAM_TYPE_REAL32=9,
   MAV_PARAM_TYPE_REAL64=10,
   MAV_PARAM_TYPE_ENUM_END=11,
} MAV_PARAM_TYPE;





typedef enum MAV_RESULT
{
   MAV_RESULT_ACCEPTED=0,
   MAV_RESULT_TEMPORARILY_REJECTED=1,
   MAV_RESULT_DENIED=2,
   MAV_RESULT_UNSUPPORTED=3,
   MAV_RESULT_FAILED=4,
   MAV_RESULT_ENUM_END=5,
} MAV_RESULT;





typedef enum MAV_MISSION_RESULT
{
   MAV_MISSION_ACCEPTED=0,
   MAV_MISSION_ERROR=1,
   MAV_MISSION_UNSUPPORTED_FRAME=2,
   MAV_MISSION_UNSUPPORTED=3,
   MAV_MISSION_NO_SPACE=4,
   MAV_MISSION_INVALID=5,
   MAV_MISSION_INVALID_PARAM1=6,
   MAV_MISSION_INVALID_PARAM2=7,
   MAV_MISSION_INVALID_PARAM3=8,
   MAV_MISSION_INVALID_PARAM4=9,
   MAV_MISSION_INVALID_PARAM5_X=10,
   MAV_MISSION_INVALID_PARAM6_Y=11,
   MAV_MISSION_INVALID_PARAM7=12,
   MAV_MISSION_INVALID_SEQUENCE=13,
   MAV_MISSION_DENIED=14,
   MAV_MISSION_RESULT_ENUM_END=15,
} MAV_MISSION_RESULT;





typedef enum MAV_SEVERITY
{
   MAV_SEVERITY_EMERGENCY=0,
   MAV_SEVERITY_ALERT=1,
   MAV_SEVERITY_CRITICAL=2,
   MAV_SEVERITY_ERROR=3,
   MAV_SEVERITY_WARNING=4,
   MAV_SEVERITY_NOTICE=5,
   MAV_SEVERITY_INFO=6,
   MAV_SEVERITY_DEBUG=7,
   MAV_SEVERITY_ENUM_END=8,
} MAV_SEVERITY;





typedef enum MAV_POWER_STATUS
{
   MAV_POWER_STATUS_BRICK_VALID=1,
   MAV_POWER_STATUS_SERVO_VALID=2,
   MAV_POWER_STATUS_USB_CONNECTED=4,
   MAV_POWER_STATUS_PERIPH_OVERCURRENT=8,
   MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT=16,
   MAV_POWER_STATUS_CHANGED=32,
   MAV_POWER_STATUS_ENUM_END=33,
} MAV_POWER_STATUS;





typedef enum SERIAL_CONTROL_DEV
{
   SERIAL_CONTROL_DEV_TELEM1=0,
   SERIAL_CONTROL_DEV_TELEM2=1,
   SERIAL_CONTROL_DEV_GPS1=2,
   SERIAL_CONTROL_DEV_GPS2=3,
   SERIAL_CONTROL_DEV_SHELL=10,
   SERIAL_CONTROL_DEV_ENUM_END=11,
} SERIAL_CONTROL_DEV;





typedef enum SERIAL_CONTROL_FLAG
{
   SERIAL_CONTROL_FLAG_REPLY=1,
   SERIAL_CONTROL_FLAG_RESPOND=2,
   SERIAL_CONTROL_FLAG_EXCLUSIVE=4,
   SERIAL_CONTROL_FLAG_BLOCKING=8,
   SERIAL_CONTROL_FLAG_MULTI=16,
   SERIAL_CONTROL_FLAG_ENUM_END=17,
} SERIAL_CONTROL_FLAG;





typedef enum MAV_DISTANCE_SENSOR
{
   MAV_DISTANCE_SENSOR_LASER=0,
   MAV_DISTANCE_SENSOR_ULTRASOUND=1,
   MAV_DISTANCE_SENSOR_INFRARED=2,
   MAV_DISTANCE_SENSOR_RADAR=3,
   MAV_DISTANCE_SENSOR_UNKNOWN=4,
   MAV_DISTANCE_SENSOR_ENUM_END=5,
} MAV_DISTANCE_SENSOR;





typedef enum MAV_SENSOR_ORIENTATION
{
   MAV_SENSOR_ROTATION_NONE=0,
   MAV_SENSOR_ROTATION_YAW_45=1,
   MAV_SENSOR_ROTATION_YAW_90=2,
   MAV_SENSOR_ROTATION_YAW_135=3,
   MAV_SENSOR_ROTATION_YAW_180=4,
   MAV_SENSOR_ROTATION_YAW_225=5,
   MAV_SENSOR_ROTATION_YAW_270=6,
   MAV_SENSOR_ROTATION_YAW_315=7,
   MAV_SENSOR_ROTATION_ROLL_180=8,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_45=9,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_90=10,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_135=11,
   MAV_SENSOR_ROTATION_PITCH_180=12,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_225=13,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_270=14,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_315=15,
   MAV_SENSOR_ROTATION_ROLL_90=16,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_45=17,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_90=18,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_135=19,
   MAV_SENSOR_ROTATION_ROLL_270=20,
   MAV_SENSOR_ROTATION_ROLL_270_YAW_45=21,
   MAV_SENSOR_ROTATION_ROLL_270_YAW_90=22,
   MAV_SENSOR_ROTATION_ROLL_270_YAW_135=23,
   MAV_SENSOR_ROTATION_PITCH_90=24,
   MAV_SENSOR_ROTATION_PITCH_270=25,
   MAV_SENSOR_ROTATION_PITCH_180_YAW_90=26,
   MAV_SENSOR_ROTATION_PITCH_180_YAW_270=27,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_90=28,
   MAV_SENSOR_ROTATION_ROLL_180_PITCH_90=29,
   MAV_SENSOR_ROTATION_ROLL_270_PITCH_90=30,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_180=31,
   MAV_SENSOR_ROTATION_ROLL_270_PITCH_180=32,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_270=33,
   MAV_SENSOR_ROTATION_ROLL_180_PITCH_270=34,
   MAV_SENSOR_ROTATION_ROLL_270_PITCH_270=35,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90=36,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_270=37,
   MAV_SENSOR_ROTATION_ROLL_315_PITCH_315_YAW_315=38,
   MAV_SENSOR_ORIENTATION_ENUM_END=39,
} MAV_SENSOR_ORIENTATION;





typedef enum MAV_PROTOCOL_CAPABILITY
{
   MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT=1,
   MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT=2,
   MAV_PROTOCOL_CAPABILITY_MISSION_INT=4,
   MAV_PROTOCOL_CAPABILITY_COMMAND_INT=8,
   MAV_PROTOCOL_CAPABILITY_PARAM_UNION=16,
   MAV_PROTOCOL_CAPABILITY_FTP=32,
   MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET=64,
   MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED=128,
   MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT=256,
   MAV_PROTOCOL_CAPABILITY_TERRAIN=512,
   MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET=1024,
   MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION=2048,
   MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION=4096,
   MAV_PROTOCOL_CAPABILITY_MAVLINK2=8192,
   MAV_PROTOCOL_CAPABILITY_MISSION_FENCE=16384,
   MAV_PROTOCOL_CAPABILITY_MISSION_RALLY=32768,
   MAV_PROTOCOL_CAPABILITY_ENUM_END=32769,
} MAV_PROTOCOL_CAPABILITY;





typedef enum MAV_MISSION_TYPE
{
   MAV_MISSION_TYPE_MISSION=0,
   MAV_MISSION_TYPE_FENCE=1,
   MAV_MISSION_TYPE_RALLY=2,
   MAV_MISSION_TYPE_ALL=255,
   MAV_MISSION_TYPE_ENUM_END=256,
} MAV_MISSION_TYPE;





typedef enum MAV_ESTIMATOR_TYPE
{
   MAV_ESTIMATOR_TYPE_NAIVE=1,
   MAV_ESTIMATOR_TYPE_VISION=2,
   MAV_ESTIMATOR_TYPE_VIO=3,
   MAV_ESTIMATOR_TYPE_GPS=4,
   MAV_ESTIMATOR_TYPE_GPS_INS=5,
   MAV_ESTIMATOR_TYPE_ENUM_END=6,
} MAV_ESTIMATOR_TYPE;





typedef enum MAV_BATTERY_TYPE
{
   MAV_BATTERY_TYPE_UNKNOWN=0,
   MAV_BATTERY_TYPE_LIPO=1,
   MAV_BATTERY_TYPE_LIFE=2,
   MAV_BATTERY_TYPE_LION=3,
   MAV_BATTERY_TYPE_NIMH=4,
   MAV_BATTERY_TYPE_ENUM_END=5,
} MAV_BATTERY_TYPE;





typedef enum MAV_BATTERY_FUNCTION
{
   MAV_BATTERY_FUNCTION_UNKNOWN=0,
   MAV_BATTERY_FUNCTION_ALL=1,
   MAV_BATTERY_FUNCTION_PROPULSION=2,
   MAV_BATTERY_FUNCTION_AVIONICS=3,
   MAV_BATTERY_TYPE_PAYLOAD=4,
   MAV_BATTERY_FUNCTION_ENUM_END=5,
} MAV_BATTERY_FUNCTION;





typedef enum MAV_VTOL_STATE
{
   MAV_VTOL_STATE_UNDEFINED=0,
   MAV_VTOL_STATE_TRANSITION_TO_FW=1,
   MAV_VTOL_STATE_TRANSITION_TO_MC=2,
   MAV_VTOL_STATE_MC=3,
   MAV_VTOL_STATE_FW=4,
   MAV_VTOL_STATE_ENUM_END=5,
} MAV_VTOL_STATE;





typedef enum MAV_LANDED_STATE
{
   MAV_LANDED_STATE_UNDEFINED=0,
   MAV_LANDED_STATE_ON_GROUND=1,
   MAV_LANDED_STATE_IN_AIR=2,
   MAV_LANDED_STATE_TAKEOFF=3,
   MAV_LANDED_STATE_LANDING=4,
   MAV_LANDED_STATE_ENUM_END=5,
} MAV_LANDED_STATE;





typedef enum ADSB_ALTITUDE_TYPE
{
   ADSB_ALTITUDE_TYPE_PRESSURE_QNH=0,
   ADSB_ALTITUDE_TYPE_GEOMETRIC=1,
   ADSB_ALTITUDE_TYPE_ENUM_END=2,
} ADSB_ALTITUDE_TYPE;





typedef enum ADSB_EMITTER_TYPE
{
   ADSB_EMITTER_TYPE_NO_INFO=0,
   ADSB_EMITTER_TYPE_LIGHT=1,
   ADSB_EMITTER_TYPE_SMALL=2,
   ADSB_EMITTER_TYPE_LARGE=3,
   ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE=4,
   ADSB_EMITTER_TYPE_HEAVY=5,
   ADSB_EMITTER_TYPE_HIGHLY_MANUV=6,
   ADSB_EMITTER_TYPE_ROTOCRAFT=7,
   ADSB_EMITTER_TYPE_UNASSIGNED=8,
   ADSB_EMITTER_TYPE_GLIDER=9,
   ADSB_EMITTER_TYPE_LIGHTER_AIR=10,
   ADSB_EMITTER_TYPE_PARACHUTE=11,
   ADSB_EMITTER_TYPE_ULTRA_LIGHT=12,
   ADSB_EMITTER_TYPE_UNASSIGNED2=13,
   ADSB_EMITTER_TYPE_UAV=14,
   ADSB_EMITTER_TYPE_SPACE=15,
   ADSB_EMITTER_TYPE_UNASSGINED3=16,
   ADSB_EMITTER_TYPE_EMERGENCY_SURFACE=17,
   ADSB_EMITTER_TYPE_SERVICE_SURFACE=18,
   ADSB_EMITTER_TYPE_POINT_OBSTACLE=19,
   ADSB_EMITTER_TYPE_ENUM_END=20,
} ADSB_EMITTER_TYPE;





typedef enum ADSB_FLAGS
{
   ADSB_FLAGS_VALID_COORDS=1,
   ADSB_FLAGS_VALID_ALTITUDE=2,
   ADSB_FLAGS_VALID_HEADING=4,
   ADSB_FLAGS_VALID_VELOCITY=8,
   ADSB_FLAGS_VALID_CALLSIGN=16,
   ADSB_FLAGS_VALID_SQUAWK=32,
   ADSB_FLAGS_SIMULATED=64,
   ADSB_FLAGS_ENUM_END=65,
} ADSB_FLAGS;





typedef enum MAV_DO_REPOSITION_FLAGS
{
   MAV_DO_REPOSITION_FLAGS_CHANGE_MODE=1,
   MAV_DO_REPOSITION_FLAGS_ENUM_END=2,
} MAV_DO_REPOSITION_FLAGS;





typedef enum ESTIMATOR_STATUS_FLAGS
{
   ESTIMATOR_ATTITUDE=1,
   ESTIMATOR_VELOCITY_HORIZ=2,
   ESTIMATOR_VELOCITY_VERT=4,
   ESTIMATOR_POS_HORIZ_REL=8,
   ESTIMATOR_POS_HORIZ_ABS=16,
   ESTIMATOR_POS_VERT_ABS=32,
   ESTIMATOR_POS_VERT_AGL=64,
   ESTIMATOR_CONST_POS_MODE=128,
   ESTIMATOR_PRED_POS_HORIZ_REL=256,
   ESTIMATOR_PRED_POS_HORIZ_ABS=512,
   ESTIMATOR_GPS_GLITCH=1024,
   ESTIMATOR_STATUS_FLAGS_ENUM_END=1025,
} ESTIMATOR_STATUS_FLAGS;





typedef enum MOTOR_TEST_ORDER
{
   MOTOR_TEST_ORDER_DEFAULT=0,
   MOTOR_TEST_ORDER_SEQUENCE=1,
   MOTOR_TEST_ORDER_BOARD=2,
   MOTOR_TEST_ORDER_ENUM_END=3,
} MOTOR_TEST_ORDER;





typedef enum MOTOR_TEST_THROTTLE_TYPE
{
   MOTOR_TEST_THROTTLE_PERCENT=0,
   MOTOR_TEST_THROTTLE_PWM=1,
   MOTOR_TEST_THROTTLE_PILOT=2,
   MOTOR_TEST_COMPASS_CAL=3,
   MOTOR_TEST_THROTTLE_TYPE_ENUM_END=4,
} MOTOR_TEST_THROTTLE_TYPE;





typedef enum GPS_INPUT_IGNORE_FLAGS
{
   GPS_INPUT_IGNORE_FLAG_ALT=1,
   GPS_INPUT_IGNORE_FLAG_HDOP=2,
   GPS_INPUT_IGNORE_FLAG_VDOP=4,
   GPS_INPUT_IGNORE_FLAG_VEL_HORIZ=8,
   GPS_INPUT_IGNORE_FLAG_VEL_VERT=16,
   GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY=32,
   GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY=64,
   GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY=128,
   GPS_INPUT_IGNORE_FLAGS_ENUM_END=129,
} GPS_INPUT_IGNORE_FLAGS;





typedef enum MAV_COLLISION_ACTION
{
   MAV_COLLISION_ACTION_NONE=0,
   MAV_COLLISION_ACTION_REPORT=1,
   MAV_COLLISION_ACTION_ASCEND_OR_DESCEND=2,
   MAV_COLLISION_ACTION_MOVE_HORIZONTALLY=3,
   MAV_COLLISION_ACTION_MOVE_PERPENDICULAR=4,
   MAV_COLLISION_ACTION_RTL=5,
   MAV_COLLISION_ACTION_HOVER=6,
   MAV_COLLISION_ACTION_ENUM_END=7,
} MAV_COLLISION_ACTION;





typedef enum MAV_COLLISION_THREAT_LEVEL
{
   MAV_COLLISION_THREAT_LEVEL_NONE=0,
   MAV_COLLISION_THREAT_LEVEL_LOW=1,
   MAV_COLLISION_THREAT_LEVEL_HIGH=2,
   MAV_COLLISION_THREAT_LEVEL_ENUM_END=3,
} MAV_COLLISION_THREAT_LEVEL;





typedef enum MAV_COLLISION_SRC
{
   MAV_COLLISION_SRC_ADSB=0,
   MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT=1,
   MAV_COLLISION_SRC_ENUM_END=2,
} MAV_COLLISION_SRC;





typedef enum GPS_FIX_TYPE
{
   GPS_FIX_TYPE_NO_GPS=0,
   GPS_FIX_TYPE_NO_FIX=1,
   GPS_FIX_TYPE_2D_FIX=2,
   GPS_FIX_TYPE_3D_FIX=3,
   GPS_FIX_TYPE_DGPS=4,
   GPS_FIX_TYPE_RTK_FLOAT=5,
   GPS_FIX_TYPE_RTK_FIXED=6,
   GPS_FIX_TYPE_STATIC=7,
   GPS_FIX_TYPE_ENUM_END=8,
} GPS_FIX_TYPE;





typedef enum RTK_BASELINE_COORDINATE_SYSTEM
{
   RTK_BASELINE_COORDINATE_SYSTEM_ECEF=0,
   RTK_BASELINE_COORDINATE_SYSTEM_NED=1,
   RTK_BASELINE_COORDINATE_SYSTEM_ENUM_END=2,
} RTK_BASELINE_COORDINATE_SYSTEM;
# 903 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h"
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h" 1
       




typedef struct __mavlink_heartbeat_t { uint32_t custom_mode; uint8_t type; uint8_t autopilot; uint8_t base_mode; uint8_t system_status; uint8_t mavlink_version; } __attribute__((packed))







   mavlink_heartbeat_t;
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
    packet.type = type;
    packet.autopilot = autopilot;
    packet.base_mode = base_mode;
    packet.system_status = system_status;
    packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 0;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 50);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t autopilot,uint8_t base_mode,uint32_t custom_mode,uint8_t system_status)
{
# 123 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
    packet.type = type;
    packet.autopilot = autopilot;
    packet.base_mode = base_mode;
    packet.system_status = system_status;
    packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 0;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 50);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
    return mavlink_msg_heartbeat_pack_chan(system_id, component_id, chan, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
    packet.type = type;
    packet.autopilot = autopilot;
    packet.base_mode = base_mode;
    packet.system_status = system_status;
    packet.mavlink_version = 3;

    _mav_finalize_message_chan_send(chan, 0, (const char *)&packet, 9, 9, 50);

}






static inline void mavlink_msg_heartbeat_send_struct(mavlink_channel_t chan, const mavlink_heartbeat_t* heartbeat)
{



    _mav_finalize_message_chan_send(chan, 0, (const char *)heartbeat, 9, 9, 50);

}
# 224 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline void mavlink_msg_heartbeat_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
    mavlink_heartbeat_t *packet = (mavlink_heartbeat_t *)msgbuf;
    packet->custom_mode = custom_mode;
    packet->type = type;
    packet->autopilot = autopilot;
    packet->base_mode = base_mode;
    packet->system_status = system_status;
    packet->mavlink_version = 3;

    _mav_finalize_message_chan_send(chan, 0, (const char *)packet, 9, 9, 50);

}
# 260 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_heartbeat_get_autopilot(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_heartbeat_get_base_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint32_t mavlink_msg_heartbeat_get_custom_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_heartbeat_get_system_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_heartbeat_get_mavlink_version(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}







static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_heartbeat.h"
        uint8_t len = msg->len < 9? msg->len : 9;
        memset(heartbeat, 0, 9);
    memcpy(heartbeat, ((const char *)(&((msg)->payload64[0]))), len);

}
# 904 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h" 1
       




typedef struct __mavlink_sys_status_t { uint32_t onboard_control_sensors_present; uint32_t onboard_control_sensors_enabled; uint32_t onboard_control_sensors_health; uint16_t load; uint16_t voltage_battery; int16_t current_battery; uint16_t drop_rate_comm; uint16_t errors_comm; uint16_t errors_count1; uint16_t errors_count2; uint16_t errors_count3; uint16_t errors_count4; int8_t battery_remaining; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
   mavlink_sys_status_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t onboard_control_sensors_present, uint32_t onboard_control_sensors_enabled, uint32_t onboard_control_sensors_health, uint16_t load, uint16_t voltage_battery, int16_t current_battery, int8_t battery_remaining, uint16_t drop_rate_comm, uint16_t errors_comm, uint16_t errors_count1, uint16_t errors_count2, uint16_t errors_count3, uint16_t errors_count4)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
    mavlink_sys_status_t packet;
    packet.onboard_control_sensors_present = onboard_control_sensors_present;
    packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
    packet.onboard_control_sensors_health = onboard_control_sensors_health;
    packet.load = load;
    packet.voltage_battery = voltage_battery;
    packet.current_battery = current_battery;
    packet.drop_rate_comm = drop_rate_comm;
    packet.errors_comm = errors_comm;
    packet.errors_count1 = errors_count1;
    packet.errors_count2 = errors_count2;
    packet.errors_count3 = errors_count3;
    packet.errors_count4 = errors_count4;
    packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


    msg->msgid = 1;
    return mavlink_finalize_message(msg, system_id, component_id, 31, 31, 124);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t onboard_control_sensors_present,uint32_t onboard_control_sensors_enabled,uint32_t onboard_control_sensors_health,uint16_t load,uint16_t voltage_battery,int16_t current_battery,int8_t battery_remaining,uint16_t drop_rate_comm,uint16_t errors_comm,uint16_t errors_count1,uint16_t errors_count2,uint16_t errors_count3,uint16_t errors_count4)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
    mavlink_sys_status_t packet;
    packet.onboard_control_sensors_present = onboard_control_sensors_present;
    packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
    packet.onboard_control_sensors_health = onboard_control_sensors_health;
    packet.load = load;
    packet.voltage_battery = voltage_battery;
    packet.current_battery = current_battery;
    packet.drop_rate_comm = drop_rate_comm;
    packet.errors_comm = errors_comm;
    packet.errors_count1 = errors_count1;
    packet.errors_count2 = errors_count2;
    packet.errors_count3 = errors_count3;
    packet.errors_count4 = errors_count4;
    packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


    msg->msgid = 1;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 31, 31, 124);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
    return mavlink_msg_sys_status_pack(system_id, component_id, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
    return mavlink_msg_sys_status_pack_chan(system_id, component_id, chan, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline void mavlink_msg_sys_status_send(mavlink_channel_t chan, uint32_t onboard_control_sensors_present, uint32_t onboard_control_sensors_enabled, uint32_t onboard_control_sensors_health, uint16_t load, uint16_t voltage_battery, int16_t current_battery, int8_t battery_remaining, uint16_t drop_rate_comm, uint16_t errors_comm, uint16_t errors_count1, uint16_t errors_count2, uint16_t errors_count3, uint16_t errors_count4)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
    mavlink_sys_status_t packet;
    packet.onboard_control_sensors_present = onboard_control_sensors_present;
    packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
    packet.onboard_control_sensors_health = onboard_control_sensors_health;
    packet.load = load;
    packet.voltage_battery = voltage_battery;
    packet.current_battery = current_battery;
    packet.drop_rate_comm = drop_rate_comm;
    packet.errors_comm = errors_comm;
    packet.errors_count1 = errors_count1;
    packet.errors_count2 = errors_count2;
    packet.errors_count3 = errors_count3;
    packet.errors_count4 = errors_count4;
    packet.battery_remaining = battery_remaining;

    _mav_finalize_message_chan_send(chan, 1, (const char *)&packet, 31, 31, 124);

}






static inline void mavlink_msg_sys_status_send_struct(mavlink_channel_t chan, const mavlink_sys_status_t* sys_status)
{



    _mav_finalize_message_chan_send(chan, 1, (const char *)sys_status, 31, 31, 124);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline void mavlink_msg_sys_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t onboard_control_sensors_present, uint32_t onboard_control_sensors_enabled, uint32_t onboard_control_sensors_health, uint16_t load, uint16_t voltage_battery, int16_t current_battery, int8_t battery_remaining, uint16_t drop_rate_comm, uint16_t errors_comm, uint16_t errors_count1, uint16_t errors_count2, uint16_t errors_count3, uint16_t errors_count4)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
    mavlink_sys_status_t *packet = (mavlink_sys_status_t *)msgbuf;
    packet->onboard_control_sensors_present = onboard_control_sensors_present;
    packet->onboard_control_sensors_enabled = onboard_control_sensors_enabled;
    packet->onboard_control_sensors_health = onboard_control_sensors_health;
    packet->load = load;
    packet->voltage_battery = voltage_battery;
    packet->current_battery = current_battery;
    packet->drop_rate_comm = drop_rate_comm;
    packet->errors_comm = errors_comm;
    packet->errors_count1 = errors_count1;
    packet->errors_count2 = errors_count2;
    packet->errors_count3 = errors_count3;
    packet->errors_count4 = errors_count4;
    packet->battery_remaining = battery_remaining;

    _mav_finalize_message_chan_send(chan, 1, (const char *)packet, 31, 31, 124);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_present(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_enabled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_health(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint16_t mavlink_msg_sys_status_get_load(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_sys_status_get_voltage_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline int16_t mavlink_msg_sys_status_get_current_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int8_t mavlink_msg_sys_status_get_battery_remaining(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_sys_status_get_drop_rate_comm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_comm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}







static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sys_status.h"
        uint8_t len = msg->len < 31? msg->len : 31;
        memset(sys_status, 0, 31);
    memcpy(sys_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 905 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h" 1
       




typedef struct __mavlink_system_time_t { uint64_t time_unix_usec; uint32_t time_boot_ms; } __attribute__((packed))



   mavlink_system_time_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_unix_usec, uint32_t time_boot_ms)
{







    mavlink_system_time_t packet;
    packet.time_unix_usec = time_unix_usec;
    packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 2;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 137);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_unix_usec,uint32_t time_boot_ms)
{







    mavlink_system_time_t packet;
    packet.time_unix_usec = time_unix_usec;
    packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 2;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 137);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
    return mavlink_msg_system_time_pack(system_id, component_id, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
    return mavlink_msg_system_time_pack_chan(system_id, component_id, chan, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline void mavlink_msg_system_time_send(mavlink_channel_t chan, uint64_t time_unix_usec, uint32_t time_boot_ms)
{







    mavlink_system_time_t packet;
    packet.time_unix_usec = time_unix_usec;
    packet.time_boot_ms = time_boot_ms;

    _mav_finalize_message_chan_send(chan, 2, (const char *)&packet, 12, 12, 137);

}






static inline void mavlink_msg_system_time_send_struct(mavlink_channel_t chan, const mavlink_system_time_t* system_time)
{



    _mav_finalize_message_chan_send(chan, 2, (const char *)system_time, 12, 12, 137);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline void mavlink_msg_system_time_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_unix_usec, uint32_t time_boot_ms)
{







    mavlink_system_time_t *packet = (mavlink_system_time_t *)msgbuf;
    packet->time_unix_usec = time_unix_usec;
    packet->time_boot_ms = time_boot_ms;

    _mav_finalize_message_chan_send(chan, 2, (const char *)packet, 12, 12, 137);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_system_time.h"
static inline uint64_t mavlink_msg_system_time_get_time_unix_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_system_time_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_system_time_decode(const mavlink_message_t* msg, mavlink_system_time_t* system_time)
{




        uint8_t len = msg->len < 12? msg->len : 12;
        memset(system_time, 0, 12);
    memcpy(system_time, ((const char *)(&((msg)->payload64[0]))), len);

}
# 906 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h" 1
       




typedef struct __mavlink_ping_t { uint64_t time_usec; uint32_t seq; uint8_t target_system; uint8_t target_component; } __attribute__((packed))





   mavlink_ping_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint32_t seq, uint8_t target_system, uint8_t target_component)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
    mavlink_ping_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 4;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 237);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint32_t seq,uint8_t target_system,uint8_t target_component)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
    mavlink_ping_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 4;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 237);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
    return mavlink_msg_ping_pack(system_id, component_id, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
    return mavlink_msg_ping_pack_chan(system_id, component_id, chan, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline void mavlink_msg_ping_send(mavlink_channel_t chan, uint64_t time_usec, uint32_t seq, uint8_t target_system, uint8_t target_component)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
    mavlink_ping_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 4, (const char *)&packet, 14, 14, 237);

}






static inline void mavlink_msg_ping_send_struct(mavlink_channel_t chan, const mavlink_ping_t* ping)
{



    _mav_finalize_message_chan_send(chan, 4, (const char *)ping, 14, 14, 237);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline void mavlink_msg_ping_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint32_t seq, uint8_t target_system, uint8_t target_component)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
    mavlink_ping_t *packet = (mavlink_ping_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->seq = seq;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 4, (const char *)packet, 14, 14, 237);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_ping.h"
static inline uint64_t mavlink_msg_ping_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_ping_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint8_t mavlink_msg_ping_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_ping_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_ping_decode(const mavlink_message_t* msg, mavlink_ping_t* ping)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(ping, 0, 14);
    memcpy(ping, ((const char *)(&((msg)->payload64[0]))), len);

}
# 907 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h" 1
       




typedef struct __mavlink_change_operator_control_t { uint8_t target_system; uint8_t control_request; uint8_t version; char passkey[25]; } __attribute__((packed))





   mavlink_change_operator_control_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t control_request, uint8_t version, const char *passkey)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
    mavlink_change_operator_control_t packet;
    packet.target_system = target_system;
    packet.control_request = control_request;
    packet.version = version;
    mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 5;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 217);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t control_request,uint8_t version,const char *passkey)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
    mavlink_change_operator_control_t packet;
    packet.target_system = target_system;
    packet.control_request = control_request;
    packet.version = version;
    mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 5;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 217);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
    return mavlink_msg_change_operator_control_pack(system_id, component_id, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
    return mavlink_msg_change_operator_control_pack_chan(system_id, component_id, chan, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline void mavlink_msg_change_operator_control_send(mavlink_channel_t chan, uint8_t target_system, uint8_t control_request, uint8_t version, const char *passkey)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
    mavlink_change_operator_control_t packet;
    packet.target_system = target_system;
    packet.control_request = control_request;
    packet.version = version;
    mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
    _mav_finalize_message_chan_send(chan, 5, (const char *)&packet, 28, 28, 217);

}






static inline void mavlink_msg_change_operator_control_send_struct(mavlink_channel_t chan, const mavlink_change_operator_control_t* change_operator_control)
{



    _mav_finalize_message_chan_send(chan, 5, (const char *)change_operator_control, 28, 28, 217);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline void mavlink_msg_change_operator_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t control_request, uint8_t version, const char *passkey)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
    mavlink_change_operator_control_t *packet = (mavlink_change_operator_control_t *)msgbuf;
    packet->target_system = target_system;
    packet->control_request = control_request;
    packet->version = version;
    mav_array_memcpy(packet->passkey, passkey, sizeof(char)*25);
    _mav_finalize_message_chan_send(chan, 5, (const char *)packet, 28, 28, 217);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control.h"
static inline uint8_t mavlink_msg_change_operator_control_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_get_control_request(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_get_version(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_change_operator_control_get_passkey(const mavlink_message_t* msg, char *passkey)
{
    return _MAV_RETURN_char_array(msg, passkey, 25, 3);
}







static inline void mavlink_msg_change_operator_control_decode(const mavlink_message_t* msg, mavlink_change_operator_control_t* change_operator_control)
{






        uint8_t len = msg->len < 28? msg->len : 28;
        memset(change_operator_control, 0, 28);
    memcpy(change_operator_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 908 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h" 1
       




typedef struct __mavlink_change_operator_control_ack_t { uint8_t gcs_system_id; uint8_t control_request; uint8_t ack; } __attribute__((packed))




   mavlink_change_operator_control_ack_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t gcs_system_id, uint8_t control_request, uint8_t ack)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
    mavlink_change_operator_control_ack_t packet;
    packet.gcs_system_id = gcs_system_id;
    packet.control_request = control_request;
    packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 6;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 104);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t gcs_system_id,uint8_t control_request,uint8_t ack)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
    mavlink_change_operator_control_ack_t packet;
    packet.gcs_system_id = gcs_system_id;
    packet.control_request = control_request;
    packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 6;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 104);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
    return mavlink_msg_change_operator_control_ack_pack(system_id, component_id, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
    return mavlink_msg_change_operator_control_ack_pack_chan(system_id, component_id, chan, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline void mavlink_msg_change_operator_control_ack_send(mavlink_channel_t chan, uint8_t gcs_system_id, uint8_t control_request, uint8_t ack)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
    mavlink_change_operator_control_ack_t packet;
    packet.gcs_system_id = gcs_system_id;
    packet.control_request = control_request;
    packet.ack = ack;

    _mav_finalize_message_chan_send(chan, 6, (const char *)&packet, 3, 3, 104);

}






static inline void mavlink_msg_change_operator_control_ack_send_struct(mavlink_channel_t chan, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{



    _mav_finalize_message_chan_send(chan, 6, (const char *)change_operator_control_ack, 3, 3, 104);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline void mavlink_msg_change_operator_control_ack_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t gcs_system_id, uint8_t control_request, uint8_t ack)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
    mavlink_change_operator_control_ack_t *packet = (mavlink_change_operator_control_ack_t *)msgbuf;
    packet->gcs_system_id = gcs_system_id;
    packet->control_request = control_request;
    packet->ack = ack;

    _mav_finalize_message_chan_send(chan, 6, (const char *)packet, 3, 3, 104);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_change_operator_control_ack.h"
static inline uint8_t mavlink_msg_change_operator_control_ack_get_gcs_system_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_control_request(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_ack(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_change_operator_control_ack_decode(const mavlink_message_t* msg, mavlink_change_operator_control_ack_t* change_operator_control_ack)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(change_operator_control_ack, 0, 3);
    memcpy(change_operator_control_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 909 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h" 1
       




typedef struct __mavlink_auth_key_t { char key[32]; } __attribute__((packed))


   mavlink_auth_key_t;
# 47 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const char *key)
{






    mavlink_auth_key_t packet;

    mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 7;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 119);
}
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   const char *key)
{






    mavlink_auth_key_t packet;

    mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 7;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 119);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
    return mavlink_msg_auth_key_pack(system_id, component_id, msg, auth_key->key);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
    return mavlink_msg_auth_key_pack_chan(system_id, component_id, chan, msg, auth_key->key);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline void mavlink_msg_auth_key_send(mavlink_channel_t chan, const char *key)
{






    mavlink_auth_key_t packet;

    mav_array_memcpy(packet.key, key, sizeof(char)*32);
    _mav_finalize_message_chan_send(chan, 7, (const char *)&packet, 32, 32, 119);

}






static inline void mavlink_msg_auth_key_send_struct(mavlink_channel_t chan, const mavlink_auth_key_t* auth_key)
{



    _mav_finalize_message_chan_send(chan, 7, (const char *)auth_key, 32, 32, 119);

}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline void mavlink_msg_auth_key_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, const char *key)
{






    mavlink_auth_key_t *packet = (mavlink_auth_key_t *)msgbuf;

    mav_array_memcpy(packet->key, key, sizeof(char)*32);
    _mav_finalize_message_chan_send(chan, 7, (const char *)packet, 32, 32, 119);

}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_get_key(const mavlink_message_t* msg, char *key)
{
    return _MAV_RETURN_char_array(msg, key, 32, 0);
}







static inline void mavlink_msg_auth_key_decode(const mavlink_message_t* msg, mavlink_auth_key_t* auth_key)
{



        uint8_t len = msg->len < 32? msg->len : 32;
        memset(auth_key, 0, 32);
    memcpy(auth_key, ((const char *)(&((msg)->payload64[0]))), len);

}
# 910 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h" 1
       




typedef struct __mavlink_set_mode_t { uint32_t custom_mode; uint8_t target_system; uint8_t base_mode; } __attribute__((packed))




   mavlink_set_mode_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t base_mode, uint32_t custom_mode)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
    mavlink_set_mode_t packet;
    packet.custom_mode = custom_mode;
    packet.target_system = target_system;
    packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 11;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 89);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t base_mode,uint32_t custom_mode)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
    mavlink_set_mode_t packet;
    packet.custom_mode = custom_mode;
    packet.target_system = target_system;
    packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 11;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 89);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
    return mavlink_msg_set_mode_pack(system_id, component_id, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
    return mavlink_msg_set_mode_pack_chan(system_id, component_id, chan, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline void mavlink_msg_set_mode_send(mavlink_channel_t chan, uint8_t target_system, uint8_t base_mode, uint32_t custom_mode)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
    mavlink_set_mode_t packet;
    packet.custom_mode = custom_mode;
    packet.target_system = target_system;
    packet.base_mode = base_mode;

    _mav_finalize_message_chan_send(chan, 11, (const char *)&packet, 6, 6, 89);

}






static inline void mavlink_msg_set_mode_send_struct(mavlink_channel_t chan, const mavlink_set_mode_t* set_mode)
{



    _mav_finalize_message_chan_send(chan, 11, (const char *)set_mode, 6, 6, 89);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline void mavlink_msg_set_mode_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t base_mode, uint32_t custom_mode)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
    mavlink_set_mode_t *packet = (mavlink_set_mode_t *)msgbuf;
    packet->custom_mode = custom_mode;
    packet->target_system = target_system;
    packet->base_mode = base_mode;

    _mav_finalize_message_chan_send(chan, 11, (const char *)packet, 6, 6, 89);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_mode.h"
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}







static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{





        uint8_t len = msg->len < 6? msg->len : 6;
        memset(set_mode, 0, 6);
    memcpy(set_mode, ((const char *)(&((msg)->payload64[0]))), len);

}
# 911 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h" 1
       




typedef struct __mavlink_param_request_read_t { int16_t param_index; uint8_t target_system; uint8_t target_component; char param_id[16]; } __attribute__((packed))





   mavlink_param_request_read_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
    mavlink_param_request_read_t packet;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 20;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 214);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
    mavlink_param_request_read_t packet;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 20;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 214);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
    return mavlink_msg_param_request_read_pack(system_id, component_id, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
    return mavlink_msg_param_request_read_pack_chan(system_id, component_id, chan, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline void mavlink_msg_param_request_read_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
    mavlink_param_request_read_t packet;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 20, (const char *)&packet, 20, 20, 214);

}






static inline void mavlink_msg_param_request_read_send_struct(mavlink_channel_t chan, const mavlink_param_request_read_t* param_request_read)
{



    _mav_finalize_message_chan_send(chan, 20, (const char *)param_request_read, 20, 20, 214);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline void mavlink_msg_param_request_read_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
    mavlink_param_request_read_t *packet = (mavlink_param_request_read_t *)msgbuf;
    packet->param_index = param_index;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 20, (const char *)packet, 20, 20, 214);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_read.h"
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 4);
}






static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}







static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{






        uint8_t len = msg->len < 20? msg->len : 20;
        memset(param_request_read, 0, 20);
    memcpy(param_request_read, ((const char *)(&((msg)->payload64[0]))), len);

}
# 912 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h" 1
       




typedef struct __mavlink_param_request_list_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_param_request_list_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_param_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 21;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 159);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_param_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 21;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 159);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
    return mavlink_msg_param_request_list_pack(system_id, component_id, msg, param_request_list->target_system, param_request_list->target_component);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
    return mavlink_msg_param_request_list_pack_chan(system_id, component_id, chan, msg, param_request_list->target_system, param_request_list->target_component);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline void mavlink_msg_param_request_list_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_param_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 21, (const char *)&packet, 2, 2, 159);

}






static inline void mavlink_msg_param_request_list_send_struct(mavlink_channel_t chan, const mavlink_param_request_list_t* param_request_list)
{



    _mav_finalize_message_chan_send(chan, 21, (const char *)param_request_list, 2, 2, 159);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline void mavlink_msg_param_request_list_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_param_request_list_t *packet = (mavlink_param_request_list_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 21, (const char *)packet, 2, 2, 159);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_request_list.h"
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(param_request_list, 0, 2);
    memcpy(param_request_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 913 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h" 1
       




typedef struct __mavlink_param_value_t { float param_value; uint16_t param_count; uint16_t param_index; char param_id[16]; uint8_t param_type; } __attribute__((packed))






   mavlink_param_value_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
    mavlink_param_value_t packet;
    packet.param_value = param_value;
    packet.param_count = param_count;
    packet.param_index = param_index;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 22;
    return mavlink_finalize_message(msg, system_id, component_id, 25, 25, 220);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   const char *param_id,float param_value,uint8_t param_type,uint16_t param_count,uint16_t param_index)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
    mavlink_param_value_t packet;
    packet.param_value = param_value;
    packet.param_count = param_count;
    packet.param_index = param_index;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 22;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 25, 220);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
    return mavlink_msg_param_value_pack(system_id, component_id, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
    return mavlink_msg_param_value_pack_chan(system_id, component_id, chan, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
    mavlink_param_value_t packet;
    packet.param_value = param_value;
    packet.param_count = param_count;
    packet.param_index = param_index;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 22, (const char *)&packet, 25, 25, 220);

}






static inline void mavlink_msg_param_value_send_struct(mavlink_channel_t chan, const mavlink_param_value_t* param_value)
{



    _mav_finalize_message_chan_send(chan, 22, (const char *)param_value, 25, 25, 220);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline void mavlink_msg_param_value_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
    mavlink_param_value_t *packet = (mavlink_param_value_t *)msgbuf;
    packet->param_value = param_value;
    packet->param_count = param_count;
    packet->param_index = param_index;
    packet->param_type = param_type;
    mav_array_memcpy(packet->param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 22, (const char *)packet, 25, 25, 220);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 8);
}






static inline float mavlink_msg_param_value_get_param_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_value_get_param_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint16_t mavlink_msg_param_value_get_param_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_param_value_get_param_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}







static inline void mavlink_msg_param_value_decode(const mavlink_message_t* msg, mavlink_param_value_t* param_value)
{







        uint8_t len = msg->len < 25? msg->len : 25;
        memset(param_value, 0, 25);
    memcpy(param_value, ((const char *)(&((msg)->payload64[0]))), len);

}
# 914 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h" 1
       




typedef struct __mavlink_param_set_t { float param_value; uint8_t target_system; uint8_t target_component; char param_id[16]; uint8_t param_type; } __attribute__((packed))






   mavlink_param_set_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
    mavlink_param_set_t packet;
    packet.param_value = param_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


    msg->msgid = 23;
    return mavlink_finalize_message(msg, system_id, component_id, 23, 23, 168);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *param_id,float param_value,uint8_t param_type)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
    mavlink_param_set_t packet;
    packet.param_value = param_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


    msg->msgid = 23;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 23, 23, 168);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
    return mavlink_msg_param_set_pack(system_id, component_id, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
    return mavlink_msg_param_set_pack_chan(system_id, component_id, chan, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline void mavlink_msg_param_set_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
    mavlink_param_set_t packet;
    packet.param_value = param_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 23, (const char *)&packet, 23, 23, 168);

}






static inline void mavlink_msg_param_set_send_struct(mavlink_channel_t chan, const mavlink_param_set_t* param_set)
{



    _mav_finalize_message_chan_send(chan, 23, (const char *)param_set, 23, 23, 168);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline void mavlink_msg_param_set_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
    mavlink_param_set_t *packet = (mavlink_param_set_t *)msgbuf;
    packet->param_value = param_value;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->param_type = param_type;
    mav_array_memcpy(packet->param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 23, (const char *)packet, 23, 23, 168);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_set.h"
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 6);
}






static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[22];
}







static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{







        uint8_t len = msg->len < 23? msg->len : 23;
        memset(param_set, 0, 23);
    memcpy(param_set, ((const char *)(&((msg)->payload64[0]))), len);

}
# 915 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h" 1
       




typedef struct __mavlink_gps_raw_int_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; uint16_t eph; uint16_t epv; uint16_t vel; uint16_t cog; uint8_t fix_type; uint8_t satellites_visible; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
   mavlink_gps_raw_int_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 24;
    return mavlink_finalize_message(msg, system_id, component_id, 30, 30, 24);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 24;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 30, 24);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
    return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
    return mavlink_msg_gps_raw_int_pack_chan(system_id, component_id, chan, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

    _mav_finalize_message_chan_send(chan, 24, (const char *)&packet, 30, 30, 24);

}






static inline void mavlink_msg_gps_raw_int_send_struct(mavlink_channel_t chan, const mavlink_gps_raw_int_t* gps_raw_int)
{



    _mav_finalize_message_chan_send(chan, 24, (const char *)gps_raw_int, 30, 30, 24);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline void mavlink_msg_gps_raw_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
    mavlink_gps_raw_int_t *packet = (mavlink_gps_raw_int_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->eph = eph;
    packet->epv = epv;
    packet->vel = vel;
    packet->cog = cog;
    packet->fix_type = fix_type;
    packet->satellites_visible = satellites_visible;

    _mav_finalize_message_chan_send(chan, 24, (const char *)packet, 30, 30, 24);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
static inline uint64_t mavlink_msg_gps_raw_int_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline int32_t mavlink_msg_gps_raw_int_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_raw_int_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_raw_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_eph(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_epv(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_cog(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}







static inline void mavlink_msg_gps_raw_int_decode(const mavlink_message_t* msg, mavlink_gps_raw_int_t* gps_raw_int)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_raw_int.h"
        uint8_t len = msg->len < 30? msg->len : 30;
        memset(gps_raw_int, 0, 30);
    memcpy(gps_raw_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 916 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h" 1
       




typedef struct __mavlink_gps_status_t { uint8_t satellites_visible; uint8_t satellite_prn[20]; uint8_t satellite_used[20]; uint8_t satellite_elevation[20]; uint8_t satellite_azimuth[20]; uint8_t satellite_snr[20]; } __attribute__((packed))







   mavlink_gps_status_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t satellites_visible, const uint8_t *satellite_prn, const uint8_t *satellite_used, const uint8_t *satellite_elevation, const uint8_t *satellite_azimuth, const uint8_t *satellite_snr)
{
# 84 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
    mavlink_gps_status_t packet;
    packet.satellites_visible = satellites_visible;
    mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


    msg->msgid = 25;
    return mavlink_finalize_message(msg, system_id, component_id, 101, 101, 23);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t satellites_visible,const uint8_t *satellite_prn,const uint8_t *satellite_used,const uint8_t *satellite_elevation,const uint8_t *satellite_azimuth,const uint8_t *satellite_snr)
{
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
    mavlink_gps_status_t packet;
    packet.satellites_visible = satellites_visible;
    mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


    msg->msgid = 25;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 101, 101, 23);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
    return mavlink_msg_gps_status_pack(system_id, component_id, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
    return mavlink_msg_gps_status_pack_chan(system_id, component_id, chan, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline void mavlink_msg_gps_status_send(mavlink_channel_t chan, uint8_t satellites_visible, const uint8_t *satellite_prn, const uint8_t *satellite_used, const uint8_t *satellite_elevation, const uint8_t *satellite_azimuth, const uint8_t *satellite_snr)
{
# 192 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
    mavlink_gps_status_t packet;
    packet.satellites_visible = satellites_visible;
    mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
    _mav_finalize_message_chan_send(chan, 25, (const char *)&packet, 101, 101, 23);

}






static inline void mavlink_msg_gps_status_send_struct(mavlink_channel_t chan, const mavlink_gps_status_t* gps_status)
{



    _mav_finalize_message_chan_send(chan, 25, (const char *)gps_status, 101, 101, 23);

}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline void mavlink_msg_gps_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t satellites_visible, const uint8_t *satellite_prn, const uint8_t *satellite_used, const uint8_t *satellite_elevation, const uint8_t *satellite_azimuth, const uint8_t *satellite_snr)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
    mavlink_gps_status_t *packet = (mavlink_gps_status_t *)msgbuf;
    packet->satellites_visible = satellites_visible;
    mav_array_memcpy(packet->satellite_prn, satellite_prn, sizeof(uint8_t)*20);
    mav_array_memcpy(packet->satellite_used, satellite_used, sizeof(uint8_t)*20);
    mav_array_memcpy(packet->satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
    mav_array_memcpy(packet->satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
    mav_array_memcpy(packet->satellite_snr, satellite_snr, sizeof(uint8_t)*20);
    _mav_finalize_message_chan_send(chan, 25, (const char *)packet, 101, 101, 23);

}
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
static inline uint8_t mavlink_msg_gps_status_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_prn(const mavlink_message_t* msg, uint8_t *satellite_prn)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_prn, 20, 1);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_used(const mavlink_message_t* msg, uint8_t *satellite_used)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_used, 20, 21);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_elevation(const mavlink_message_t* msg, uint8_t *satellite_elevation)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_elevation, 20, 41);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_azimuth(const mavlink_message_t* msg, uint8_t *satellite_azimuth)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_azimuth, 20, 61);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_snr(const mavlink_message_t* msg, uint8_t *satellite_snr)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_snr, 20, 81);
}







static inline void mavlink_msg_gps_status_decode(const mavlink_message_t* msg, mavlink_gps_status_t* gps_status)
{
# 330 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_status.h"
        uint8_t len = msg->len < 101? msg->len : 101;
        memset(gps_status, 0, 101);
    memcpy(gps_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 917 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h" 1
       




typedef struct __mavlink_scaled_imu_t { uint32_t time_boot_ms; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
   mavlink_scaled_imu_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
    mavlink_scaled_imu_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 26;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 170);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
    mavlink_scaled_imu_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 26;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 170);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
    return mavlink_msg_scaled_imu_pack(system_id, component_id, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
    return mavlink_msg_scaled_imu_pack_chan(system_id, component_id, chan, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
    mavlink_scaled_imu_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

    _mav_finalize_message_chan_send(chan, 26, (const char *)&packet, 22, 22, 170);

}






static inline void mavlink_msg_scaled_imu_send_struct(mavlink_channel_t chan, const mavlink_scaled_imu_t* scaled_imu)
{



    _mav_finalize_message_chan_send(chan, 26, (const char *)scaled_imu, 22, 22, 170);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline void mavlink_msg_scaled_imu_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
    mavlink_scaled_imu_t *packet = (mavlink_scaled_imu_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->xmag = xmag;
    packet->ymag = ymag;
    packet->zmag = zmag;

    _mav_finalize_message_chan_send(chan, 26, (const char *)packet, 22, 22, 170);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
static inline uint32_t mavlink_msg_scaled_imu_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu_decode(const mavlink_message_t* msg, mavlink_scaled_imu_t* scaled_imu)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(scaled_imu, 0, 22);
    memcpy(scaled_imu, ((const char *)(&((msg)->payload64[0]))), len);

}
# 918 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h" 1
       




typedef struct __mavlink_raw_imu_t { uint64_t time_usec; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
   mavlink_raw_imu_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 27;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 26, 144);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 27;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 26, 144);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
    return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
    return mavlink_msg_raw_imu_pack_chan(system_id, component_id, chan, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

    _mav_finalize_message_chan_send(chan, 27, (const char *)&packet, 26, 26, 144);

}






static inline void mavlink_msg_raw_imu_send_struct(mavlink_channel_t chan, const mavlink_raw_imu_t* raw_imu)
{



    _mav_finalize_message_chan_send(chan, 27, (const char *)raw_imu, 26, 26, 144);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline void mavlink_msg_raw_imu_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
    mavlink_raw_imu_t *packet = (mavlink_raw_imu_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->xmag = xmag;
    packet->ymag = ymag;
    packet->zmag = zmag;

    _mav_finalize_message_chan_send(chan, 27, (const char *)packet, 26, 26, 144);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
static inline uint64_t mavlink_msg_raw_imu_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_imu_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_imu_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_imu_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_imu_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_raw_imu_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_raw_imu_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_raw_imu_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_raw_imu_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_raw_imu_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 24);
}







static inline void mavlink_msg_raw_imu_decode(const mavlink_message_t* msg, mavlink_raw_imu_t* raw_imu)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_imu.h"
        uint8_t len = msg->len < 26? msg->len : 26;
        memset(raw_imu, 0, 26);
    memcpy(raw_imu, ((const char *)(&((msg)->payload64[0]))), len);

}
# 919 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h" 1
       




typedef struct __mavlink_raw_pressure_t { uint64_t time_usec; int16_t press_abs; int16_t press_diff1; int16_t press_diff2; int16_t temperature; } __attribute__((packed))






   mavlink_raw_pressure_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t press_abs, int16_t press_diff1, int16_t press_diff2, int16_t temperature)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
    mavlink_raw_pressure_t packet;
    packet.time_usec = time_usec;
    packet.press_abs = press_abs;
    packet.press_diff1 = press_diff1;
    packet.press_diff2 = press_diff2;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 28;
    return mavlink_finalize_message(msg, system_id, component_id, 16, 16, 67);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,int16_t press_abs,int16_t press_diff1,int16_t press_diff2,int16_t temperature)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
    mavlink_raw_pressure_t packet;
    packet.time_usec = time_usec;
    packet.press_abs = press_abs;
    packet.press_diff1 = press_diff1;
    packet.press_diff2 = press_diff2;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 28;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 16, 67);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
    return mavlink_msg_raw_pressure_pack(system_id, component_id, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
    return mavlink_msg_raw_pressure_pack_chan(system_id, component_id, chan, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline void mavlink_msg_raw_pressure_send(mavlink_channel_t chan, uint64_t time_usec, int16_t press_abs, int16_t press_diff1, int16_t press_diff2, int16_t temperature)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
    mavlink_raw_pressure_t packet;
    packet.time_usec = time_usec;
    packet.press_abs = press_abs;
    packet.press_diff1 = press_diff1;
    packet.press_diff2 = press_diff2;
    packet.temperature = temperature;

    _mav_finalize_message_chan_send(chan, 28, (const char *)&packet, 16, 16, 67);

}






static inline void mavlink_msg_raw_pressure_send_struct(mavlink_channel_t chan, const mavlink_raw_pressure_t* raw_pressure)
{



    _mav_finalize_message_chan_send(chan, 28, (const char *)raw_pressure, 16, 16, 67);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline void mavlink_msg_raw_pressure_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, int16_t press_abs, int16_t press_diff1, int16_t press_diff2, int16_t temperature)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
    mavlink_raw_pressure_t *packet = (mavlink_raw_pressure_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->press_abs = press_abs;
    packet->press_diff1 = press_diff1;
    packet->press_diff2 = press_diff2;
    packet->temperature = temperature;

    _mav_finalize_message_chan_send(chan, 28, (const char *)packet, 16, 16, 67);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_raw_pressure.h"
static inline uint64_t mavlink_msg_raw_pressure_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_pressure_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}







static inline void mavlink_msg_raw_pressure_decode(const mavlink_message_t* msg, mavlink_raw_pressure_t* raw_pressure)
{







        uint8_t len = msg->len < 16? msg->len : 16;
        memset(raw_pressure, 0, 16);
    memcpy(raw_pressure, ((const char *)(&((msg)->payload64[0]))), len);

}
# 920 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h" 1
       




typedef struct __mavlink_scaled_pressure_t { uint32_t time_boot_ms; float press_abs; float press_diff; int16_t temperature; } __attribute__((packed))





   mavlink_scaled_pressure_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
    mavlink_scaled_pressure_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 29;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 115);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
    mavlink_scaled_pressure_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 29;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 115);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
    return mavlink_msg_scaled_pressure_pack(system_id, component_id, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
    return mavlink_msg_scaled_pressure_pack_chan(system_id, component_id, chan, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
    mavlink_scaled_pressure_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

    _mav_finalize_message_chan_send(chan, 29, (const char *)&packet, 14, 14, 115);

}






static inline void mavlink_msg_scaled_pressure_send_struct(mavlink_channel_t chan, const mavlink_scaled_pressure_t* scaled_pressure)
{



    _mav_finalize_message_chan_send(chan, 29, (const char *)scaled_pressure, 14, 14, 115);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline void mavlink_msg_scaled_pressure_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
    mavlink_scaled_pressure_t *packet = (mavlink_scaled_pressure_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->press_abs = press_abs;
    packet->press_diff = press_diff;
    packet->temperature = temperature;

    _mav_finalize_message_chan_send(chan, 29, (const char *)packet, 14, 14, 115);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure.h"
static inline uint32_t mavlink_msg_scaled_pressure_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure_get_press_diff(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure_decode(const mavlink_message_t* msg, mavlink_scaled_pressure_t* scaled_pressure)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(scaled_pressure, 0, 14);
    memcpy(scaled_pressure, ((const char *)(&((msg)->payload64[0]))), len);

}
# 921 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h" 1
       




typedef struct __mavlink_attitude_t { uint32_t time_boot_ms; float roll; float pitch; float yaw; float rollspeed; float pitchspeed; float yawspeed; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
   mavlink_attitude_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
    mavlink_attitude_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 30;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 39);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
    mavlink_attitude_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 30;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 39);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
    return mavlink_msg_attitude_pack(system_id, component_id, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
    return mavlink_msg_attitude_pack_chan(system_id, component_id, chan, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
    mavlink_attitude_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

    _mav_finalize_message_chan_send(chan, 30, (const char *)&packet, 28, 28, 39);

}






static inline void mavlink_msg_attitude_send_struct(mavlink_channel_t chan, const mavlink_attitude_t* attitude)
{



    _mav_finalize_message_chan_send(chan, 30, (const char *)attitude, 28, 28, 39);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline void mavlink_msg_attitude_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
    mavlink_attitude_t *packet = (mavlink_attitude_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->rollspeed = rollspeed;
    packet->pitchspeed = pitchspeed;
    packet->yawspeed = yawspeed;

    _mav_finalize_message_chan_send(chan, 30, (const char *)packet, 28, 28, 39);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
static inline uint32_t mavlink_msg_attitude_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(attitude, 0, 28);
    memcpy(attitude, ((const char *)(&((msg)->payload64[0]))), len);

}
# 922 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h" 1
       




typedef struct __mavlink_attitude_quaternion_t { uint32_t time_boot_ms; float q1; float q2; float q3; float q4; float rollspeed; float pitchspeed; float yawspeed; } __attribute__((packed))
# 16 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
   mavlink_attitude_quaternion_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
    mavlink_attitude_quaternion_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 31;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 246);
}
# 124 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float q1,float q2,float q3,float q4,float rollspeed,float pitchspeed,float yawspeed)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
    mavlink_attitude_quaternion_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 31;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 246);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
    return mavlink_msg_attitude_quaternion_pack(system_id, component_id, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
    return mavlink_msg_attitude_quaternion_pack_chan(system_id, component_id, chan, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 200 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
    mavlink_attitude_quaternion_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

    _mav_finalize_message_chan_send(chan, 31, (const char *)&packet, 32, 32, 246);

}






static inline void mavlink_msg_attitude_quaternion_send_struct(mavlink_channel_t chan, const mavlink_attitude_quaternion_t* attitude_quaternion)
{



    _mav_finalize_message_chan_send(chan, 31, (const char *)attitude_quaternion, 32, 32, 246);

}
# 251 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline void mavlink_msg_attitude_quaternion_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
# 266 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
    mavlink_attitude_quaternion_t *packet = (mavlink_attitude_quaternion_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->q1 = q1;
    packet->q2 = q2;
    packet->q3 = q3;
    packet->q4 = q4;
    packet->rollspeed = rollspeed;
    packet->pitchspeed = pitchspeed;
    packet->yawspeed = yawspeed;

    _mav_finalize_message_chan_send(chan, 31, (const char *)packet, 32, 32, 246);

}
# 291 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
static inline uint32_t mavlink_msg_attitude_quaternion_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_quaternion_get_q1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_quaternion_get_q2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_quaternion_get_q3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_quaternion_get_q4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_attitude_quaternion_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_t* attitude_quaternion)
{
# 384 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(attitude_quaternion, 0, 32);
    memcpy(attitude_quaternion, ((const char *)(&((msg)->payload64[0]))), len);

}
# 923 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h" 1
       




typedef struct __mavlink_local_position_ned_t { uint32_t time_boot_ms; float x; float y; float z; float vx; float vy; float vz; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
   mavlink_local_position_ned_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
    mavlink_local_position_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 32;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 185);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float x,float y,float z,float vx,float vy,float vz)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
    mavlink_local_position_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 32;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 185);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
    return mavlink_msg_local_position_ned_pack(system_id, component_id, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
    return mavlink_msg_local_position_ned_pack_chan(system_id, component_id, chan, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
    mavlink_local_position_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;

    _mav_finalize_message_chan_send(chan, 32, (const char *)&packet, 28, 28, 185);

}






static inline void mavlink_msg_local_position_ned_send_struct(mavlink_channel_t chan, const mavlink_local_position_ned_t* local_position_ned)
{



    _mav_finalize_message_chan_send(chan, 32, (const char *)local_position_ned, 28, 28, 185);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline void mavlink_msg_local_position_ned_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
    mavlink_local_position_ned_t *packet = (mavlink_local_position_ned_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;

    _mav_finalize_message_chan_send(chan, 32, (const char *)packet, 28, 28, 185);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
static inline uint32_t mavlink_msg_local_position_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_decode(const mavlink_message_t* msg, mavlink_local_position_ned_t* local_position_ned)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(local_position_ned, 0, 28);
    memcpy(local_position_ned, ((const char *)(&((msg)->payload64[0]))), len);

}
# 924 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h" 1
       




typedef struct __mavlink_global_position_int_t { uint32_t time_boot_ms; int32_t lat; int32_t lon; int32_t alt; int32_t relative_alt; int16_t vx; int16_t vy; int16_t vz; uint16_t hdg; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
   mavlink_global_position_int_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
    mavlink_global_position_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 33;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 104);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,int16_t vx,int16_t vy,int16_t vz,uint16_t hdg)
{
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
    mavlink_global_position_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 33;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 104);
}
# 175 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
    return mavlink_msg_global_position_int_pack(system_id, component_id, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
    return mavlink_msg_global_position_int_pack_chan(system_id, component_id, chan, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
# 226 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
    mavlink_global_position_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.hdg = hdg;

    _mav_finalize_message_chan_send(chan, 33, (const char *)&packet, 28, 28, 104);

}






static inline void mavlink_msg_global_position_int_send_struct(mavlink_channel_t chan, const mavlink_global_position_int_t* global_position_int)
{



    _mav_finalize_message_chan_send(chan, 33, (const char *)global_position_int, 28, 28, 104);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline void mavlink_msg_global_position_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
# 279 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
    mavlink_global_position_int_t *packet = (mavlink_global_position_int_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->relative_alt = relative_alt;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->hdg = hdg;

    _mav_finalize_message_chan_send(chan, 33, (const char *)packet, 28, 28, 104);

}
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 24);
}






static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}







static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
# 409 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(global_position_int, 0, 28);
    memcpy(global_position_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 925 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h" 1
       




typedef struct __mavlink_rc_channels_scaled_t { uint32_t time_boot_ms; int16_t chan1_scaled; int16_t chan2_scaled; int16_t chan3_scaled; int16_t chan4_scaled; int16_t chan5_scaled; int16_t chan6_scaled; int16_t chan7_scaled; int16_t chan8_scaled; uint8_t port; uint8_t rssi; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
   mavlink_rc_channels_scaled_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
    mavlink_rc_channels_scaled_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_scaled = chan1_scaled;
    packet.chan2_scaled = chan2_scaled;
    packet.chan3_scaled = chan3_scaled;
    packet.chan4_scaled = chan4_scaled;
    packet.chan5_scaled = chan5_scaled;
    packet.chan6_scaled = chan6_scaled;
    packet.chan7_scaled = chan7_scaled;
    packet.chan8_scaled = chan8_scaled;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 34;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 237);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t port,int16_t chan1_scaled,int16_t chan2_scaled,int16_t chan3_scaled,int16_t chan4_scaled,int16_t chan5_scaled,int16_t chan6_scaled,int16_t chan7_scaled,int16_t chan8_scaled,uint8_t rssi)
{
# 165 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
    mavlink_rc_channels_scaled_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_scaled = chan1_scaled;
    packet.chan2_scaled = chan2_scaled;
    packet.chan3_scaled = chan3_scaled;
    packet.chan4_scaled = chan4_scaled;
    packet.chan5_scaled = chan5_scaled;
    packet.chan6_scaled = chan6_scaled;
    packet.chan7_scaled = chan7_scaled;
    packet.chan8_scaled = chan8_scaled;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 34;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 237);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
    return mavlink_msg_rc_channels_scaled_pack(system_id, component_id, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
    return mavlink_msg_rc_channels_scaled_pack_chan(system_id, component_id, chan, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
    mavlink_rc_channels_scaled_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_scaled = chan1_scaled;
    packet.chan2_scaled = chan2_scaled;
    packet.chan3_scaled = chan3_scaled;
    packet.chan4_scaled = chan4_scaled;
    packet.chan5_scaled = chan5_scaled;
    packet.chan6_scaled = chan6_scaled;
    packet.chan7_scaled = chan7_scaled;
    packet.chan8_scaled = chan8_scaled;
    packet.port = port;
    packet.rssi = rssi;

    _mav_finalize_message_chan_send(chan, 34, (const char *)&packet, 22, 22, 237);

}






static inline void mavlink_msg_rc_channels_scaled_send_struct(mavlink_channel_t chan, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{



    _mav_finalize_message_chan_send(chan, 34, (const char *)rc_channels_scaled, 22, 22, 237);

}
# 287 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline void mavlink_msg_rc_channels_scaled_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
    mavlink_rc_channels_scaled_t *packet = (mavlink_rc_channels_scaled_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->chan1_scaled = chan1_scaled;
    packet->chan2_scaled = chan2_scaled;
    packet->chan3_scaled = chan3_scaled;
    packet->chan4_scaled = chan4_scaled;
    packet->chan5_scaled = chan5_scaled;
    packet->chan6_scaled = chan6_scaled;
    packet->chan7_scaled = chan7_scaled;
    packet->chan8_scaled = chan8_scaled;
    packet->port = port;
    packet->rssi = rssi;

    _mav_finalize_message_chan_send(chan, 34, (const char *)packet, 22, 22, 237);

}
# 333 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
static inline uint32_t mavlink_msg_rc_channels_scaled_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_port(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan1_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan2_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan3_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan4_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan5_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan6_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan7_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan8_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_scaled_decode(const mavlink_message_t* msg, mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
# 459 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_scaled.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(rc_channels_scaled, 0, 22);
    memcpy(rc_channels_scaled, ((const char *)(&((msg)->payload64[0]))), len);

}
# 926 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h" 1
       




typedef struct __mavlink_rc_channels_raw_t { uint32_t time_boot_ms; uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint8_t port; uint8_t rssi; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
   mavlink_rc_channels_raw_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
    mavlink_rc_channels_raw_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 35;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 244);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t port,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint8_t rssi)
{
# 165 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
    mavlink_rc_channels_raw_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 35;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 244);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
    return mavlink_msg_rc_channels_raw_pack(system_id, component_id, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
    return mavlink_msg_rc_channels_raw_pack_chan(system_id, component_id, chan, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
    mavlink_rc_channels_raw_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.port = port;
    packet.rssi = rssi;

    _mav_finalize_message_chan_send(chan, 35, (const char *)&packet, 22, 22, 244);

}






static inline void mavlink_msg_rc_channels_raw_send_struct(mavlink_channel_t chan, const mavlink_rc_channels_raw_t* rc_channels_raw)
{



    _mav_finalize_message_chan_send(chan, 35, (const char *)rc_channels_raw, 22, 22, 244);

}
# 287 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline void mavlink_msg_rc_channels_raw_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
    mavlink_rc_channels_raw_t *packet = (mavlink_rc_channels_raw_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->chan1_raw = chan1_raw;
    packet->chan2_raw = chan2_raw;
    packet->chan3_raw = chan3_raw;
    packet->chan4_raw = chan4_raw;
    packet->chan5_raw = chan5_raw;
    packet->chan6_raw = chan6_raw;
    packet->chan7_raw = chan7_raw;
    packet->chan8_raw = chan8_raw;
    packet->port = port;
    packet->rssi = rssi;

    _mav_finalize_message_chan_send(chan, 35, (const char *)packet, 22, 22, 244);

}
# 333 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
static inline uint32_t mavlink_msg_rc_channels_raw_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_port(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_raw_decode(const mavlink_message_t* msg, mavlink_rc_channels_raw_t* rc_channels_raw)
{
# 459 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_raw.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(rc_channels_raw, 0, 22);
    memcpy(rc_channels_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 927 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h" 1
       




typedef struct __mavlink_servo_output_raw_t { uint32_t time_usec; uint16_t servo1_raw; uint16_t servo2_raw; uint16_t servo3_raw; uint16_t servo4_raw; uint16_t servo5_raw; uint16_t servo6_raw; uint16_t servo7_raw; uint16_t servo8_raw; uint8_t port; uint16_t servo9_raw; uint16_t servo10_raw; uint16_t servo11_raw; uint16_t servo12_raw; uint16_t servo13_raw; uint16_t servo14_raw; uint16_t servo15_raw; uint16_t servo16_raw; } __attribute__((packed))
# 26 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
   mavlink_servo_output_raw_t;
# 115 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw, uint16_t servo9_raw, uint16_t servo10_raw, uint16_t servo11_raw, uint16_t servo12_raw, uint16_t servo13_raw, uint16_t servo14_raw, uint16_t servo15_raw, uint16_t servo16_raw)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
    mavlink_servo_output_raw_t packet;
    packet.time_usec = time_usec;
    packet.servo1_raw = servo1_raw;
    packet.servo2_raw = servo2_raw;
    packet.servo3_raw = servo3_raw;
    packet.servo4_raw = servo4_raw;
    packet.servo5_raw = servo5_raw;
    packet.servo6_raw = servo6_raw;
    packet.servo7_raw = servo7_raw;
    packet.servo8_raw = servo8_raw;
    packet.port = port;
    packet.servo9_raw = servo9_raw;
    packet.servo10_raw = servo10_raw;
    packet.servo11_raw = servo11_raw;
    packet.servo12_raw = servo12_raw;
    packet.servo13_raw = servo13_raw;
    packet.servo14_raw = servo14_raw;
    packet.servo15_raw = servo15_raw;
    packet.servo16_raw = servo16_raw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 36;
    return mavlink_finalize_message(msg, system_id, component_id, 21, 37, 222);
}
# 194 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_usec,uint8_t port,uint16_t servo1_raw,uint16_t servo2_raw,uint16_t servo3_raw,uint16_t servo4_raw,uint16_t servo5_raw,uint16_t servo6_raw,uint16_t servo7_raw,uint16_t servo8_raw,uint16_t servo9_raw,uint16_t servo10_raw,uint16_t servo11_raw,uint16_t servo12_raw,uint16_t servo13_raw,uint16_t servo14_raw,uint16_t servo15_raw,uint16_t servo16_raw)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
    mavlink_servo_output_raw_t packet;
    packet.time_usec = time_usec;
    packet.servo1_raw = servo1_raw;
    packet.servo2_raw = servo2_raw;
    packet.servo3_raw = servo3_raw;
    packet.servo4_raw = servo4_raw;
    packet.servo5_raw = servo5_raw;
    packet.servo6_raw = servo6_raw;
    packet.servo7_raw = servo7_raw;
    packet.servo8_raw = servo8_raw;
    packet.port = port;
    packet.servo9_raw = servo9_raw;
    packet.servo10_raw = servo10_raw;
    packet.servo11_raw = servo11_raw;
    packet.servo12_raw = servo12_raw;
    packet.servo13_raw = servo13_raw;
    packet.servo14_raw = servo14_raw;
    packet.servo15_raw = servo15_raw;
    packet.servo16_raw = servo16_raw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 36;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 21, 37, 222);
}
# 256 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
    return mavlink_msg_servo_output_raw_pack(system_id, component_id, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw, servo_output_raw->servo9_raw, servo_output_raw->servo10_raw, servo_output_raw->servo11_raw, servo_output_raw->servo12_raw, servo_output_raw->servo13_raw, servo_output_raw->servo14_raw, servo_output_raw->servo15_raw, servo_output_raw->servo16_raw);
}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
    return mavlink_msg_servo_output_raw_pack_chan(system_id, component_id, chan, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw, servo_output_raw->servo9_raw, servo_output_raw->servo10_raw, servo_output_raw->servo11_raw, servo_output_raw->servo12_raw, servo_output_raw->servo13_raw, servo_output_raw->servo14_raw, servo_output_raw->servo15_raw, servo_output_raw->servo16_raw);
}
# 300 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw, uint16_t servo9_raw, uint16_t servo10_raw, uint16_t servo11_raw, uint16_t servo12_raw, uint16_t servo13_raw, uint16_t servo14_raw, uint16_t servo15_raw, uint16_t servo16_raw)
{
# 325 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
    mavlink_servo_output_raw_t packet;
    packet.time_usec = time_usec;
    packet.servo1_raw = servo1_raw;
    packet.servo2_raw = servo2_raw;
    packet.servo3_raw = servo3_raw;
    packet.servo4_raw = servo4_raw;
    packet.servo5_raw = servo5_raw;
    packet.servo6_raw = servo6_raw;
    packet.servo7_raw = servo7_raw;
    packet.servo8_raw = servo8_raw;
    packet.port = port;
    packet.servo9_raw = servo9_raw;
    packet.servo10_raw = servo10_raw;
    packet.servo11_raw = servo11_raw;
    packet.servo12_raw = servo12_raw;
    packet.servo13_raw = servo13_raw;
    packet.servo14_raw = servo14_raw;
    packet.servo15_raw = servo15_raw;
    packet.servo16_raw = servo16_raw;

    _mav_finalize_message_chan_send(chan, 36, (const char *)&packet, 21, 37, 222);

}






static inline void mavlink_msg_servo_output_raw_send_struct(mavlink_channel_t chan, const mavlink_servo_output_raw_t* servo_output_raw)
{



    _mav_finalize_message_chan_send(chan, 36, (const char *)servo_output_raw, 21, 37, 222);

}
# 371 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline void mavlink_msg_servo_output_raw_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw, uint16_t servo9_raw, uint16_t servo10_raw, uint16_t servo11_raw, uint16_t servo12_raw, uint16_t servo13_raw, uint16_t servo14_raw, uint16_t servo15_raw, uint16_t servo16_raw)
{
# 396 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
    mavlink_servo_output_raw_t *packet = (mavlink_servo_output_raw_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->servo1_raw = servo1_raw;
    packet->servo2_raw = servo2_raw;
    packet->servo3_raw = servo3_raw;
    packet->servo4_raw = servo4_raw;
    packet->servo5_raw = servo5_raw;
    packet->servo6_raw = servo6_raw;
    packet->servo7_raw = servo7_raw;
    packet->servo8_raw = servo8_raw;
    packet->port = port;
    packet->servo9_raw = servo9_raw;
    packet->servo10_raw = servo10_raw;
    packet->servo11_raw = servo11_raw;
    packet->servo12_raw = servo12_raw;
    packet->servo13_raw = servo13_raw;
    packet->servo14_raw = servo14_raw;
    packet->servo15_raw = servo15_raw;
    packet->servo16_raw = servo16_raw;

    _mav_finalize_message_chan_send(chan, 36, (const char *)packet, 21, 37, 222);

}
# 431 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
static inline uint32_t mavlink_msg_servo_output_raw_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_servo_output_raw_get_port(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo9_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 21);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo10_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 23);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo11_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 25);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo12_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 27);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo13_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 29);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo14_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 31);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo15_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 33);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo16_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 35);
}







static inline void mavlink_msg_servo_output_raw_decode(const mavlink_message_t* msg, mavlink_servo_output_raw_t* servo_output_raw)
{
# 634 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_servo_output_raw.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(servo_output_raw, 0, 37);
    memcpy(servo_output_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 928 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h" 1
       




typedef struct __mavlink_mission_request_partial_list_t { int16_t start_index; int16_t end_index; uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))






   mavlink_mission_request_partial_list_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index, uint8_t mission_type)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
    mavlink_mission_request_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 37;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 7, 212);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index,uint8_t mission_type)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
    mavlink_mission_request_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 37;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 7, 212);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
    return mavlink_msg_mission_request_partial_list_pack(system_id, component_id, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index, mission_request_partial_list->mission_type);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
    return mavlink_msg_mission_request_partial_list_pack_chan(system_id, component_id, chan, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index, mission_request_partial_list->mission_type);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline void mavlink_msg_mission_request_partial_list_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index, uint8_t mission_type)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
    mavlink_mission_request_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 37, (const char *)&packet, 6, 7, 212);

}






static inline void mavlink_msg_mission_request_partial_list_send_struct(mavlink_channel_t chan, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{



    _mav_finalize_message_chan_send(chan, 37, (const char *)mission_request_partial_list, 6, 7, 212);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline void mavlink_msg_mission_request_partial_list_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index, uint8_t mission_type)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
    mavlink_mission_request_partial_list_t *packet = (mavlink_mission_request_partial_list_t *)msgbuf;
    packet->start_index = start_index;
    packet->end_index = end_index;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 37, (const char *)packet, 6, 7, 212);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_partial_list.h"
static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_start_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_end_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}






static inline uint8_t mavlink_msg_mission_request_partial_list_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}







static inline void mavlink_msg_mission_request_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_request_partial_list_t* mission_request_partial_list)
{







        uint8_t len = msg->len < 7? msg->len : 7;
        memset(mission_request_partial_list, 0, 7);
    memcpy(mission_request_partial_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 929 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h" 1
       




typedef struct __mavlink_mission_write_partial_list_t { int16_t start_index; int16_t end_index; uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))






   mavlink_mission_write_partial_list_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index, uint8_t mission_type)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
    mavlink_mission_write_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 38;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 7, 9);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index,uint8_t mission_type)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
    mavlink_mission_write_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 7);


    msg->msgid = 38;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 7, 9);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
    return mavlink_msg_mission_write_partial_list_pack(system_id, component_id, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index, mission_write_partial_list->mission_type);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
    return mavlink_msg_mission_write_partial_list_pack_chan(system_id, component_id, chan, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index, mission_write_partial_list->mission_type);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline void mavlink_msg_mission_write_partial_list_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index, uint8_t mission_type)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
    mavlink_mission_write_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 38, (const char *)&packet, 6, 7, 9);

}






static inline void mavlink_msg_mission_write_partial_list_send_struct(mavlink_channel_t chan, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{



    _mav_finalize_message_chan_send(chan, 38, (const char *)mission_write_partial_list, 6, 7, 9);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline void mavlink_msg_mission_write_partial_list_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index, uint8_t mission_type)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
    mavlink_mission_write_partial_list_t *packet = (mavlink_mission_write_partial_list_t *)msgbuf;
    packet->start_index = start_index;
    packet->end_index = end_index;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 38, (const char *)packet, 6, 7, 9);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_write_partial_list.h"
static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_start_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_end_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}






static inline uint8_t mavlink_msg_mission_write_partial_list_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}







static inline void mavlink_msg_mission_write_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_write_partial_list_t* mission_write_partial_list)
{







        uint8_t len = msg->len < 7? msg->len : 7;
        memset(mission_write_partial_list, 0, 7);
    memcpy(mission_write_partial_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 930 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h" 1
       




typedef struct __mavlink_mission_item_t { float param1; float param2; float param3; float param4; float x; float y; float z; uint16_t seq; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t frame; uint8_t current; uint8_t autocontinue; uint8_t mission_type; } __attribute__((packed))
# 23 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
   mavlink_mission_item_t;
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z, uint8_t mission_type)
{
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
    mavlink_mission_item_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 39;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 38, 254);
}
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,float x,float y,float z,uint8_t mission_type)
{
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
    mavlink_mission_item_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 39;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 38, 254);
}
# 229 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
    return mavlink_msg_mission_item_pack(system_id, component_id, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z, mission_item->mission_type);
}
# 243 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
    return mavlink_msg_mission_item_pack_chan(system_id, component_id, chan, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z, mission_item->mission_type);
}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z, uint8_t mission_type)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
    mavlink_mission_item_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 39, (const char *)&packet, 37, 38, 254);

}






static inline void mavlink_msg_mission_item_send_struct(mavlink_channel_t chan, const mavlink_mission_item_t* mission_item)
{



    _mav_finalize_message_chan_send(chan, 39, (const char *)mission_item, 37, 38, 254);

}
# 335 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline void mavlink_msg_mission_item_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z, uint8_t mission_type)
{
# 357 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
    mavlink_mission_item_t *packet = (mavlink_mission_item_t *)msgbuf;
    packet->param1 = param1;
    packet->param2 = param2;
    packet->param3 = param3;
    packet->param4 = param4;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->seq = seq;
    packet->command = command;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->frame = frame;
    packet->current = current;
    packet->autocontinue = autocontinue;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 39, (const char *)packet, 37, 38, 254);

}
# 389 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline uint8_t mavlink_msg_mission_item_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}







static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
# 559 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item.h"
        uint8_t len = msg->len < 38? msg->len : 38;
        memset(mission_item, 0, 38);
    memcpy(mission_item, ((const char *)(&((msg)->payload64[0]))), len);

}
# 931 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h" 1
       




typedef struct __mavlink_mission_request_t { uint16_t seq; uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))





   mavlink_mission_request_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t mission_type)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
    mavlink_mission_request_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 40;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 5, 230);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t mission_type)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
    mavlink_mission_request_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 40;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 5, 230);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
    return mavlink_msg_mission_request_pack(system_id, component_id, msg, mission_request->target_system, mission_request->target_component, mission_request->seq, mission_request->mission_type);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
    return mavlink_msg_mission_request_pack_chan(system_id, component_id, chan, msg, mission_request->target_system, mission_request->target_component, mission_request->seq, mission_request->mission_type);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t mission_type)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
    mavlink_mission_request_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 40, (const char *)&packet, 4, 5, 230);

}






static inline void mavlink_msg_mission_request_send_struct(mavlink_channel_t chan, const mavlink_mission_request_t* mission_request)
{



    _mav_finalize_message_chan_send(chan, 40, (const char *)mission_request, 4, 5, 230);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline void mavlink_msg_mission_request_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t mission_type)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
    mavlink_mission_request_t *packet = (mavlink_mission_request_t *)msgbuf;
    packet->seq = seq;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 40, (const char *)packet, 4, 5, 230);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request.h"
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_mission_request_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}







static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{






        uint8_t len = msg->len < 5? msg->len : 5;
        memset(mission_request, 0, 5);
    memcpy(mission_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 932 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h" 1
       




typedef struct __mavlink_mission_set_current_t { uint16_t seq; uint8_t target_system; uint8_t target_component; } __attribute__((packed))




   mavlink_mission_set_current_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
    mavlink_mission_set_current_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 41;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 28);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
    mavlink_mission_set_current_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 41;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 28);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
    return mavlink_msg_mission_set_current_pack(system_id, component_id, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
    return mavlink_msg_mission_set_current_pack_chan(system_id, component_id, chan, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline void mavlink_msg_mission_set_current_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
    mavlink_mission_set_current_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 41, (const char *)&packet, 4, 4, 28);

}






static inline void mavlink_msg_mission_set_current_send_struct(mavlink_channel_t chan, const mavlink_mission_set_current_t* mission_set_current)
{



    _mav_finalize_message_chan_send(chan, 41, (const char *)mission_set_current, 4, 4, 28);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline void mavlink_msg_mission_set_current_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
    mavlink_mission_set_current_t *packet = (mavlink_mission_set_current_t *)msgbuf;
    packet->seq = seq;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 41, (const char *)packet, 4, 4, 28);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_set_current.h"
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(mission_set_current, 0, 4);
    memcpy(mission_set_current, ((const char *)(&((msg)->payload64[0]))), len);

}
# 933 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h" 1
       




typedef struct __mavlink_mission_current_t { uint16_t seq; } __attribute__((packed))


   mavlink_mission_current_t;
# 47 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t seq)
{






    mavlink_mission_current_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 42;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 28);
}
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t seq)
{






    mavlink_mission_current_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 42;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 28);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
    return mavlink_msg_mission_current_pack(system_id, component_id, msg, mission_current->seq);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
    return mavlink_msg_mission_current_pack_chan(system_id, component_id, chan, msg, mission_current->seq);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{






    mavlink_mission_current_t packet;
    packet.seq = seq;

    _mav_finalize_message_chan_send(chan, 42, (const char *)&packet, 2, 2, 28);

}






static inline void mavlink_msg_mission_current_send_struct(mavlink_channel_t chan, const mavlink_mission_current_t* mission_current)
{



    _mav_finalize_message_chan_send(chan, 42, (const char *)mission_current, 2, 2, 28);

}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline void mavlink_msg_mission_current_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t seq)
{






    mavlink_mission_current_t *packet = (mavlink_mission_current_t *)msgbuf;
    packet->seq = seq;

    _mav_finalize_message_chan_send(chan, 42, (const char *)packet, 2, 2, 28);

}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_current_decode(const mavlink_message_t* msg, mavlink_mission_current_t* mission_current)
{



        uint8_t len = msg->len < 2? msg->len : 2;
        memset(mission_current, 0, 2);
    memcpy(mission_current, ((const char *)(&((msg)->payload64[0]))), len);

}
# 934 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h" 1
       




typedef struct __mavlink_mission_request_list_t { uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))




   mavlink_mission_request_list_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t mission_type)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
    mavlink_mission_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 43;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 3, 132);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t mission_type)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
    mavlink_mission_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 43;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 3, 132);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
    return mavlink_msg_mission_request_list_pack(system_id, component_id, msg, mission_request_list->target_system, mission_request_list->target_component, mission_request_list->mission_type);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
    return mavlink_msg_mission_request_list_pack_chan(system_id, component_id, chan, msg, mission_request_list->target_system, mission_request_list->target_component, mission_request_list->mission_type);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline void mavlink_msg_mission_request_list_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mission_type)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
    mavlink_mission_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 43, (const char *)&packet, 2, 3, 132);

}






static inline void mavlink_msg_mission_request_list_send_struct(mavlink_channel_t chan, const mavlink_mission_request_list_t* mission_request_list)
{



    _mav_finalize_message_chan_send(chan, 43, (const char *)mission_request_list, 2, 3, 132);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline void mavlink_msg_mission_request_list_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mission_type)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
    mavlink_mission_request_list_t *packet = (mavlink_mission_request_list_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 43, (const char *)packet, 2, 3, 132);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_list.h"
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mission_request_list_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(mission_request_list, 0, 3);
    memcpy(mission_request_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 935 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h" 1
       




typedef struct __mavlink_mission_count_t { uint16_t count; uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))





   mavlink_mission_count_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t count, uint8_t mission_type)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
    mavlink_mission_count_t packet;
    packet.count = count;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 44;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 5, 221);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t count,uint8_t mission_type)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
    mavlink_mission_count_t packet;
    packet.count = count;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 44;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 5, 221);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
    return mavlink_msg_mission_count_pack(system_id, component_id, msg, mission_count->target_system, mission_count->target_component, mission_count->count, mission_count->mission_type);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
    return mavlink_msg_mission_count_pack_chan(system_id, component_id, chan, msg, mission_count->target_system, mission_count->target_component, mission_count->count, mission_count->mission_type);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count, uint8_t mission_type)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
    mavlink_mission_count_t packet;
    packet.count = count;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 44, (const char *)&packet, 4, 5, 221);

}






static inline void mavlink_msg_mission_count_send_struct(mavlink_channel_t chan, const mavlink_mission_count_t* mission_count)
{



    _mav_finalize_message_chan_send(chan, 44, (const char *)mission_count, 4, 5, 221);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline void mavlink_msg_mission_count_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count, uint8_t mission_type)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
    mavlink_mission_count_t *packet = (mavlink_mission_count_t *)msgbuf;
    packet->count = count;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 44, (const char *)packet, 4, 5, 221);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_count.h"
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_mission_count_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}







static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{






        uint8_t len = msg->len < 5? msg->len : 5;
        memset(mission_count, 0, 5);
    memcpy(mission_count, ((const char *)(&((msg)->payload64[0]))), len);

}
# 936 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h" 1
       




typedef struct __mavlink_mission_clear_all_t { uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))




   mavlink_mission_clear_all_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t mission_type)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
    mavlink_mission_clear_all_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 45;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 3, 232);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t mission_type)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
    mavlink_mission_clear_all_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 45;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 3, 232);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
    return mavlink_msg_mission_clear_all_pack(system_id, component_id, msg, mission_clear_all->target_system, mission_clear_all->target_component, mission_clear_all->mission_type);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
    return mavlink_msg_mission_clear_all_pack_chan(system_id, component_id, chan, msg, mission_clear_all->target_system, mission_clear_all->target_component, mission_clear_all->mission_type);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline void mavlink_msg_mission_clear_all_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mission_type)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
    mavlink_mission_clear_all_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 45, (const char *)&packet, 2, 3, 232);

}






static inline void mavlink_msg_mission_clear_all_send_struct(mavlink_channel_t chan, const mavlink_mission_clear_all_t* mission_clear_all)
{



    _mav_finalize_message_chan_send(chan, 45, (const char *)mission_clear_all, 2, 3, 232);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline void mavlink_msg_mission_clear_all_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t mission_type)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
    mavlink_mission_clear_all_t *packet = (mavlink_mission_clear_all_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 45, (const char *)packet, 2, 3, 232);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_clear_all.h"
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mission_clear_all_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(mission_clear_all, 0, 3);
    memcpy(mission_clear_all, ((const char *)(&((msg)->payload64[0]))), len);

}
# 937 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h" 1
       




typedef struct __mavlink_mission_item_reached_t { uint16_t seq; } __attribute__((packed))


   mavlink_mission_item_reached_t;
# 47 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t seq)
{






    mavlink_mission_item_reached_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 46;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 11);
}
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t seq)
{






    mavlink_mission_item_reached_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 46;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 11);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
    return mavlink_msg_mission_item_reached_pack(system_id, component_id, msg, mission_item_reached->seq);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
    return mavlink_msg_mission_item_reached_pack_chan(system_id, component_id, chan, msg, mission_item_reached->seq);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{






    mavlink_mission_item_reached_t packet;
    packet.seq = seq;

    _mav_finalize_message_chan_send(chan, 46, (const char *)&packet, 2, 2, 11);

}






static inline void mavlink_msg_mission_item_reached_send_struct(mavlink_channel_t chan, const mavlink_mission_item_reached_t* mission_item_reached)
{



    _mav_finalize_message_chan_send(chan, 46, (const char *)mission_item_reached, 2, 2, 11);

}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline void mavlink_msg_mission_item_reached_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t seq)
{






    mavlink_mission_item_reached_t *packet = (mavlink_mission_item_reached_t *)msgbuf;
    packet->seq = seq;

    _mav_finalize_message_chan_send(chan, 46, (const char *)packet, 2, 2, 11);

}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_item_reached_decode(const mavlink_message_t* msg, mavlink_mission_item_reached_t* mission_item_reached)
{



        uint8_t len = msg->len < 2? msg->len : 2;
        memset(mission_item_reached, 0, 2);
    memcpy(mission_item_reached, ((const char *)(&((msg)->payload64[0]))), len);

}
# 938 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h" 1
       




typedef struct __mavlink_mission_ack_t { uint8_t target_system; uint8_t target_component; uint8_t type; uint8_t mission_type; } __attribute__((packed))





   mavlink_mission_ack_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t type, uint8_t mission_type)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
    mavlink_mission_ack_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type = type;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 47;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 4, 153);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t type,uint8_t mission_type)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
    mavlink_mission_ack_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type = type;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 47;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 4, 153);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
    return mavlink_msg_mission_ack_pack(system_id, component_id, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type, mission_ack->mission_type);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
    return mavlink_msg_mission_ack_pack_chan(system_id, component_id, chan, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type, mission_ack->mission_type);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type, uint8_t mission_type)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
    mavlink_mission_ack_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type = type;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 47, (const char *)&packet, 3, 4, 153);

}






static inline void mavlink_msg_mission_ack_send_struct(mavlink_channel_t chan, const mavlink_mission_ack_t* mission_ack)
{



    _mav_finalize_message_chan_send(chan, 47, (const char *)mission_ack, 3, 4, 153);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline void mavlink_msg_mission_ack_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type, uint8_t mission_type)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
    mavlink_mission_ack_t *packet = (mavlink_mission_ack_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->type = type;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 47, (const char *)packet, 3, 4, 153);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_ack.h"
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_ack_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}







static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{






        uint8_t len = msg->len < 4? msg->len : 4;
        memset(mission_ack, 0, 4);
    memcpy(mission_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 939 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h" 1
       




typedef struct __mavlink_set_gps_global_origin_t { int32_t latitude; int32_t longitude; int32_t altitude; uint8_t target_system; } __attribute__((packed))





   mavlink_set_gps_global_origin_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
    mavlink_set_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 48;
    return mavlink_finalize_message(msg, system_id, component_id, 13, 13, 41);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,int32_t latitude,int32_t longitude,int32_t altitude)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
    mavlink_set_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 48;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 13, 41);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
    return mavlink_msg_set_gps_global_origin_pack(system_id, component_id, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
    return mavlink_msg_set_gps_global_origin_pack_chan(system_id, component_id, chan, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline void mavlink_msg_set_gps_global_origin_send(mavlink_channel_t chan, uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
    mavlink_set_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.target_system = target_system;

    _mav_finalize_message_chan_send(chan, 48, (const char *)&packet, 13, 13, 41);

}






static inline void mavlink_msg_set_gps_global_origin_send_struct(mavlink_channel_t chan, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{



    _mav_finalize_message_chan_send(chan, 48, (const char *)set_gps_global_origin, 13, 13, 41);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline void mavlink_msg_set_gps_global_origin_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
    mavlink_set_gps_global_origin_t *packet = (mavlink_set_gps_global_origin_t *)msgbuf;
    packet->latitude = latitude;
    packet->longitude = longitude;
    packet->altitude = altitude;
    packet->target_system = target_system;

    _mav_finalize_message_chan_send(chan, 48, (const char *)packet, 13, 13, 41);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_gps_global_origin.h"
static inline uint8_t mavlink_msg_set_gps_global_origin_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_set_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_set_gps_global_origin_t* set_gps_global_origin)
{






        uint8_t len = msg->len < 13? msg->len : 13;
        memset(set_gps_global_origin, 0, 13);
    memcpy(set_gps_global_origin, ((const char *)(&((msg)->payload64[0]))), len);

}
# 940 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h" 1
       




typedef struct __mavlink_gps_global_origin_t { int32_t latitude; int32_t longitude; int32_t altitude; } __attribute__((packed))




   mavlink_gps_global_origin_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t latitude, int32_t longitude, int32_t altitude)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
    mavlink_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 49;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 39);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t latitude,int32_t longitude,int32_t altitude)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
    mavlink_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 49;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 39);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
    return mavlink_msg_gps_global_origin_pack(system_id, component_id, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
    return mavlink_msg_gps_global_origin_pack_chan(system_id, component_id, chan, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline void mavlink_msg_gps_global_origin_send(mavlink_channel_t chan, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
    mavlink_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;

    _mav_finalize_message_chan_send(chan, 49, (const char *)&packet, 12, 12, 39);

}






static inline void mavlink_msg_gps_global_origin_send_struct(mavlink_channel_t chan, const mavlink_gps_global_origin_t* gps_global_origin)
{



    _mav_finalize_message_chan_send(chan, 49, (const char *)gps_global_origin, 12, 12, 39);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline void mavlink_msg_gps_global_origin_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
    mavlink_gps_global_origin_t *packet = (mavlink_gps_global_origin_t *)msgbuf;
    packet->latitude = latitude;
    packet->longitude = longitude;
    packet->altitude = altitude;

    _mav_finalize_message_chan_send(chan, 49, (const char *)packet, 12, 12, 39);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_global_origin.h"
static inline int32_t mavlink_msg_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_gps_global_origin_t* gps_global_origin)
{





        uint8_t len = msg->len < 12? msg->len : 12;
        memset(gps_global_origin, 0, 12);
    memcpy(gps_global_origin, ((const char *)(&((msg)->payload64[0]))), len);

}
# 941 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h" 1
       




typedef struct __mavlink_param_map_rc_t { float param_value0; float scale; float param_value_min; float param_value_max; int16_t param_index; uint8_t target_system; uint8_t target_component; char param_id[16]; uint8_t parameter_rc_channel_index; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
   mavlink_param_map_rc_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index, uint8_t parameter_rc_channel_index, float param_value0, float scale, float param_value_min, float param_value_max)
{
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
    mavlink_param_map_rc_t packet;
    packet.param_value0 = param_value0;
    packet.scale = scale;
    packet.param_value_min = param_value_min;
    packet.param_value_max = param_value_max;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.parameter_rc_channel_index = parameter_rc_channel_index;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 50;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 78);
}
# 129 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index,uint8_t parameter_rc_channel_index,float param_value0,float scale,float param_value_min,float param_value_max)
{
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
    mavlink_param_map_rc_t packet;
    packet.param_value0 = param_value0;
    packet.scale = scale;
    packet.param_value_min = param_value_min;
    packet.param_value_max = param_value_max;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.parameter_rc_channel_index = parameter_rc_channel_index;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 50;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 78);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
    return mavlink_msg_param_map_rc_pack(system_id, component_id, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
    return mavlink_msg_param_map_rc_pack_chan(system_id, component_id, chan, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 206 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline void mavlink_msg_param_map_rc_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index, uint8_t parameter_rc_channel_index, float param_value0, float scale, float param_value_min, float param_value_max)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
    mavlink_param_map_rc_t packet;
    packet.param_value0 = param_value0;
    packet.scale = scale;
    packet.param_value_min = param_value_min;
    packet.param_value_max = param_value_max;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.parameter_rc_channel_index = parameter_rc_channel_index;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 50, (const char *)&packet, 37, 37, 78);

}






static inline void mavlink_msg_param_map_rc_send_struct(mavlink_channel_t chan, const mavlink_param_map_rc_t* param_map_rc)
{



    _mav_finalize_message_chan_send(chan, 50, (const char *)param_map_rc, 37, 37, 78);

}
# 257 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline void mavlink_msg_param_map_rc_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index, uint8_t parameter_rc_channel_index, float param_value0, float scale, float param_value_min, float param_value_max)
{
# 272 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
    mavlink_param_map_rc_t *packet = (mavlink_param_map_rc_t *)msgbuf;
    packet->param_value0 = param_value0;
    packet->scale = scale;
    packet->param_value_min = param_value_min;
    packet->param_value_max = param_value_max;
    packet->param_index = param_index;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->parameter_rc_channel_index = parameter_rc_channel_index;
    mav_array_memcpy(packet->param_id, param_id, sizeof(char)*16);
    _mav_finalize_message_chan_send(chan, 50, (const char *)packet, 37, 37, 78);

}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
static inline uint8_t mavlink_msg_param_map_rc_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline uint8_t mavlink_msg_param_map_rc_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[19];
}






static inline uint16_t mavlink_msg_param_map_rc_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 20);
}






static inline int16_t mavlink_msg_param_map_rc_get_param_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint8_t mavlink_msg_param_map_rc_get_parameter_rc_channel_index(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_param_map_rc_get_param_value0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_param_map_rc_get_scale(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_param_map_rc_get_param_value_min(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_param_map_rc_get_param_value_max(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_param_map_rc_decode(const mavlink_message_t* msg, mavlink_param_map_rc_t* param_map_rc)
{
# 401 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_param_map_rc.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(param_map_rc, 0, 37);
    memcpy(param_map_rc, ((const char *)(&((msg)->payload64[0]))), len);

}
# 942 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h" 1
       




typedef struct __mavlink_mission_request_int_t { uint16_t seq; uint8_t target_system; uint8_t target_component; uint8_t mission_type; } __attribute__((packed))





   mavlink_mission_request_int_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t mission_type)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
    mavlink_mission_request_int_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 51;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 5, 196);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t mission_type)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
    mavlink_mission_request_int_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 5);


    msg->msgid = 51;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 5, 196);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_int_t* mission_request_int)
{
    return mavlink_msg_mission_request_int_pack(system_id, component_id, msg, mission_request_int->target_system, mission_request_int->target_component, mission_request_int->seq, mission_request_int->mission_type);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_int_t* mission_request_int)
{
    return mavlink_msg_mission_request_int_pack_chan(system_id, component_id, chan, msg, mission_request_int->target_system, mission_request_int->target_component, mission_request_int->seq, mission_request_int->mission_type);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline void mavlink_msg_mission_request_int_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t mission_type)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
    mavlink_mission_request_int_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 51, (const char *)&packet, 4, 5, 196);

}






static inline void mavlink_msg_mission_request_int_send_struct(mavlink_channel_t chan, const mavlink_mission_request_int_t* mission_request_int)
{



    _mav_finalize_message_chan_send(chan, 51, (const char *)mission_request_int, 4, 5, 196);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline void mavlink_msg_mission_request_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t mission_type)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
    mavlink_mission_request_int_t *packet = (mavlink_mission_request_int_t *)msgbuf;
    packet->seq = seq;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 51, (const char *)packet, 4, 5, 196);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_request_int.h"
static inline uint8_t mavlink_msg_mission_request_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_request_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_request_int_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_mission_request_int_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}







static inline void mavlink_msg_mission_request_int_decode(const mavlink_message_t* msg, mavlink_mission_request_int_t* mission_request_int)
{






        uint8_t len = msg->len < 5? msg->len : 5;
        memset(mission_request_int, 0, 5);
    memcpy(mission_request_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 943 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h" 1
       




typedef struct __mavlink_safety_set_allowed_area_t { float p1x; float p1y; float p1z; float p2x; float p2y; float p2z; uint8_t target_system; uint8_t target_component; uint8_t frame; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
   mavlink_safety_set_allowed_area_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
    mavlink_safety_set_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


    msg->msgid = 54;
    return mavlink_finalize_message(msg, system_id, component_id, 27, 27, 15);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
    mavlink_safety_set_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


    msg->msgid = 54;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 27, 27, 15);
}
# 175 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
    return mavlink_msg_safety_set_allowed_area_pack(system_id, component_id, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
    return mavlink_msg_safety_set_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline void mavlink_msg_safety_set_allowed_area_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 226 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
    mavlink_safety_set_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;

    _mav_finalize_message_chan_send(chan, 54, (const char *)&packet, 27, 27, 15);

}






static inline void mavlink_msg_safety_set_allowed_area_send_struct(mavlink_channel_t chan, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{



    _mav_finalize_message_chan_send(chan, 54, (const char *)safety_set_allowed_area, 27, 27, 15);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline void mavlink_msg_safety_set_allowed_area_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 279 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
    mavlink_safety_set_allowed_area_t *packet = (mavlink_safety_set_allowed_area_t *)msgbuf;
    packet->p1x = p1x;
    packet->p1y = p1y;
    packet->p1z = p1z;
    packet->p2x = p2x;
    packet->p2y = p2y;
    packet->p2z = p2z;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->frame = frame;

    _mav_finalize_message_chan_send(chan, 54, (const char *)packet, 27, 27, 15);

}
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_set_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
# 409 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_set_allowed_area.h"
        uint8_t len = msg->len < 27? msg->len : 27;
        memset(safety_set_allowed_area, 0, 27);
    memcpy(safety_set_allowed_area, ((const char *)(&((msg)->payload64[0]))), len);

}
# 944 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h" 1
       




typedef struct __mavlink_safety_allowed_area_t { float p1x; float p1y; float p1z; float p2x; float p2y; float p2z; uint8_t frame; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
   mavlink_safety_allowed_area_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
    mavlink_safety_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 55;
    return mavlink_finalize_message(msg, system_id, component_id, 25, 25, 3);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
    mavlink_safety_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 55;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 25, 3);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
    return mavlink_msg_safety_allowed_area_pack(system_id, component_id, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
    return mavlink_msg_safety_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline void mavlink_msg_safety_allowed_area_send(mavlink_channel_t chan, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
    mavlink_safety_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.frame = frame;

    _mav_finalize_message_chan_send(chan, 55, (const char *)&packet, 25, 25, 3);

}






static inline void mavlink_msg_safety_allowed_area_send_struct(mavlink_channel_t chan, const mavlink_safety_allowed_area_t* safety_allowed_area)
{



    _mav_finalize_message_chan_send(chan, 55, (const char *)safety_allowed_area, 25, 25, 3);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline void mavlink_msg_safety_allowed_area_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
    mavlink_safety_allowed_area_t *packet = (mavlink_safety_allowed_area_t *)msgbuf;
    packet->p1x = p1x;
    packet->p1y = p1y;
    packet->p1z = p1z;
    packet->p2x = p2x;
    packet->p2y = p2y;
    packet->p2z = p2z;
    packet->frame = frame;

    _mav_finalize_message_chan_send(chan, 55, (const char *)packet, 25, 25, 3);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
static inline uint8_t mavlink_msg_safety_allowed_area_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline float mavlink_msg_safety_allowed_area_get_p1x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_allowed_area_get_p1y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_allowed_area_get_p1z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_allowed_area_get_p2x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_allowed_area_get_p2y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_allowed_area_get_p2z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_allowed_area_t* safety_allowed_area)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_safety_allowed_area.h"
        uint8_t len = msg->len < 25? msg->len : 25;
        memset(safety_allowed_area, 0, 25);
    memcpy(safety_allowed_area, ((const char *)(&((msg)->payload64[0]))), len);

}
# 945 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h" 1
       




typedef struct __mavlink_attitude_quaternion_cov_t { uint64_t time_usec; float q[4]; float rollspeed; float pitchspeed; float yawspeed; float covariance[9]; } __attribute__((packed))







   mavlink_attitude_quaternion_cov_t;
# 68 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *q, float rollspeed, float pitchspeed, float yawspeed, const float *covariance)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
    mavlink_attitude_quaternion_cov_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 72);


    msg->msgid = 61;
    return mavlink_finalize_message(msg, system_id, component_id, 72, 72, 167);
}
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *q,float rollspeed,float pitchspeed,float yawspeed,const float *covariance)
{
# 123 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
    mavlink_attitude_quaternion_cov_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 72);


    msg->msgid = 61;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 72, 72, 167);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
    return mavlink_msg_attitude_quaternion_cov_pack(system_id, component_id, msg, attitude_quaternion_cov->time_usec, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
    return mavlink_msg_attitude_quaternion_cov_pack_chan(system_id, component_id, chan, msg, attitude_quaternion_cov->time_usec, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline void mavlink_msg_attitude_quaternion_cov_send(mavlink_channel_t chan, uint64_t time_usec, const float *q, float rollspeed, float pitchspeed, float yawspeed, const float *covariance)
{
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
    mavlink_attitude_quaternion_cov_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
    _mav_finalize_message_chan_send(chan, 61, (const char *)&packet, 72, 72, 167);

}






static inline void mavlink_msg_attitude_quaternion_cov_send_struct(mavlink_channel_t chan, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{



    _mav_finalize_message_chan_send(chan, 61, (const char *)attitude_quaternion_cov, 72, 72, 167);

}
# 222 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline void mavlink_msg_attitude_quaternion_cov_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, const float *q, float rollspeed, float pitchspeed, float yawspeed, const float *covariance)
{
# 234 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
    mavlink_attitude_quaternion_cov_t *packet = (mavlink_attitude_quaternion_cov_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->rollspeed = rollspeed;
    packet->pitchspeed = pitchspeed;
    packet->yawspeed = yawspeed;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    mav_array_memcpy(packet->covariance, covariance, sizeof(float)*9);
    _mav_finalize_message_chan_send(chan, 61, (const char *)packet, 72, 72, 167);

}
# 256 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint64_t mavlink_msg_attitude_quaternion_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 8);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
    return _MAV_RETURN_float_array(msg, covariance, 9, 36);
}







static inline void mavlink_msg_attitude_quaternion_cov_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
# 327 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_quaternion_cov.h"
        uint8_t len = msg->len < 72? msg->len : 72;
        memset(attitude_quaternion_cov, 0, 72);
    memcpy(attitude_quaternion_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 946 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h" 1
       




typedef struct __mavlink_nav_controller_output_t { float nav_roll; float nav_pitch; float alt_error; float aspd_error; float xtrack_error; int16_t nav_bearing; int16_t target_bearing; uint16_t wp_dist; } __attribute__((packed))
# 16 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
   mavlink_nav_controller_output_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float nav_roll, float nav_pitch, int16_t nav_bearing, int16_t target_bearing, uint16_t wp_dist, float alt_error, float aspd_error, float xtrack_error)
{
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
    mavlink_nav_controller_output_t packet;
    packet.nav_roll = nav_roll;
    packet.nav_pitch = nav_pitch;
    packet.alt_error = alt_error;
    packet.aspd_error = aspd_error;
    packet.xtrack_error = xtrack_error;
    packet.nav_bearing = nav_bearing;
    packet.target_bearing = target_bearing;
    packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 62;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 26, 183);
}
# 124 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float nav_roll,float nav_pitch,int16_t nav_bearing,int16_t target_bearing,uint16_t wp_dist,float alt_error,float aspd_error,float xtrack_error)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
    mavlink_nav_controller_output_t packet;
    packet.nav_roll = nav_roll;
    packet.nav_pitch = nav_pitch;
    packet.alt_error = alt_error;
    packet.aspd_error = aspd_error;
    packet.xtrack_error = xtrack_error;
    packet.nav_bearing = nav_bearing;
    packet.target_bearing = target_bearing;
    packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 62;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 26, 183);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
    return mavlink_msg_nav_controller_output_pack(system_id, component_id, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
    return mavlink_msg_nav_controller_output_pack_chan(system_id, component_id, chan, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 200 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline void mavlink_msg_nav_controller_output_send(mavlink_channel_t chan, float nav_roll, float nav_pitch, int16_t nav_bearing, int16_t target_bearing, uint16_t wp_dist, float alt_error, float aspd_error, float xtrack_error)
{
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
    mavlink_nav_controller_output_t packet;
    packet.nav_roll = nav_roll;
    packet.nav_pitch = nav_pitch;
    packet.alt_error = alt_error;
    packet.aspd_error = aspd_error;
    packet.xtrack_error = xtrack_error;
    packet.nav_bearing = nav_bearing;
    packet.target_bearing = target_bearing;
    packet.wp_dist = wp_dist;

    _mav_finalize_message_chan_send(chan, 62, (const char *)&packet, 26, 26, 183);

}






static inline void mavlink_msg_nav_controller_output_send_struct(mavlink_channel_t chan, const mavlink_nav_controller_output_t* nav_controller_output)
{



    _mav_finalize_message_chan_send(chan, 62, (const char *)nav_controller_output, 26, 26, 183);

}
# 251 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline void mavlink_msg_nav_controller_output_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float nav_roll, float nav_pitch, int16_t nav_bearing, int16_t target_bearing, uint16_t wp_dist, float alt_error, float aspd_error, float xtrack_error)
{
# 266 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
    mavlink_nav_controller_output_t *packet = (mavlink_nav_controller_output_t *)msgbuf;
    packet->nav_roll = nav_roll;
    packet->nav_pitch = nav_pitch;
    packet->alt_error = alt_error;
    packet->aspd_error = aspd_error;
    packet->xtrack_error = xtrack_error;
    packet->nav_bearing = nav_bearing;
    packet->target_bearing = target_bearing;
    packet->wp_dist = wp_dist;

    _mav_finalize_message_chan_send(chan, 62, (const char *)packet, 26, 26, 183);

}
# 291 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
static inline float mavlink_msg_nav_controller_output_get_nav_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_nav_controller_output_get_nav_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_nav_controller_output_get_nav_bearing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_nav_controller_output_get_target_bearing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline uint16_t mavlink_msg_nav_controller_output_get_wp_dist(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline float mavlink_msg_nav_controller_output_get_alt_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_nav_controller_output_get_aspd_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_nav_controller_output_get_xtrack_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_nav_controller_output_decode(const mavlink_message_t* msg, mavlink_nav_controller_output_t* nav_controller_output)
{
# 384 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_nav_controller_output.h"
        uint8_t len = msg->len < 26? msg->len : 26;
        memset(nav_controller_output, 0, 26);
    memcpy(nav_controller_output, ((const char *)(&((msg)->payload64[0]))), len);

}
# 947 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h" 1
       




typedef struct __mavlink_global_position_int_cov_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; int32_t relative_alt; float vx; float vy; float vz; float covariance[36]; uint8_t estimator_type; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
   mavlink_global_position_int_cov_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t estimator_type, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, float vx, float vy, float vz, const float *covariance)
{
# 100 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
    mavlink_global_position_int_cov_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 181);


    msg->msgid = 63;
    return mavlink_finalize_message(msg, system_id, component_id, 181, 181, 119);
}
# 136 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t estimator_type,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,float vx,float vy,float vz,const float *covariance)
{
# 154 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
    mavlink_global_position_int_cov_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 181);


    msg->msgid = 63;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 181, 181, 119);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
    return mavlink_msg_global_position_int_cov_pack(system_id, component_id, msg, global_position_int_cov->time_usec, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 194 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
    return mavlink_msg_global_position_int_cov_pack_chan(system_id, component_id, chan, msg, global_position_int_cov->time_usec, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline void mavlink_msg_global_position_int_cov_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t estimator_type, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, float vx, float vy, float vz, const float *covariance)
{
# 232 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
    mavlink_global_position_int_cov_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
    _mav_finalize_message_chan_send(chan, 63, (const char *)&packet, 181, 181, 119);

}






static inline void mavlink_msg_global_position_int_cov_send_struct(mavlink_channel_t chan, const mavlink_global_position_int_cov_t* global_position_int_cov)
{



    _mav_finalize_message_chan_send(chan, 63, (const char *)global_position_int_cov, 181, 181, 119);

}
# 269 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline void mavlink_msg_global_position_int_cov_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t estimator_type, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, float vx, float vy, float vz, const float *covariance)
{
# 285 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
    mavlink_global_position_int_cov_t *packet = (mavlink_global_position_int_cov_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->relative_alt = relative_alt;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->estimator_type = estimator_type;
    mav_array_memcpy(packet->covariance, covariance, sizeof(float)*36);
    _mav_finalize_message_chan_send(chan, 63, (const char *)packet, 181, 181, 119);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
static inline uint64_t mavlink_msg_global_position_int_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_global_position_int_cov_get_estimator_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[180];
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_relative_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_global_position_int_cov_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_global_position_int_cov_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_global_position_int_cov_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline uint16_t mavlink_msg_global_position_int_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
    return _MAV_RETURN_float_array(msg, covariance, 36, 36);
}







static inline void mavlink_msg_global_position_int_cov_decode(const mavlink_message_t* msg, mavlink_global_position_int_cov_t* global_position_int_cov)
{
# 426 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_position_int_cov.h"
        uint8_t len = msg->len < 181? msg->len : 181;
        memset(global_position_int_cov, 0, 181);
    memcpy(global_position_int_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 948 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h" 1
       




typedef struct __mavlink_local_position_ned_cov_t { uint64_t time_usec; float x; float y; float z; float vx; float vy; float vz; float ax; float ay; float az; float covariance[45]; uint8_t estimator_type; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
   mavlink_local_position_ned_cov_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t estimator_type, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, const float *covariance)
{
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
    mavlink_local_position_ned_cov_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ax = ax;
    packet.ay = ay;
    packet.az = az;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 225);


    msg->msgid = 64;
    return mavlink_finalize_message(msg, system_id, component_id, 225, 225, 191);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t estimator_type,float x,float y,float z,float vx,float vy,float vz,float ax,float ay,float az,const float *covariance)
{
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
    mavlink_local_position_ned_cov_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ax = ax;
    packet.ay = ay;
    packet.az = az;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 225);


    msg->msgid = 64;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 225, 225, 191);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
    return mavlink_msg_local_position_ned_cov_pack(system_id, component_id, msg, local_position_ned_cov->time_usec, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 212 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
    return mavlink_msg_local_position_ned_cov_pack_chan(system_id, component_id, chan, msg, local_position_ned_cov->time_usec, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 236 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline void mavlink_msg_local_position_ned_cov_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t estimator_type, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, const float *covariance)
{
# 254 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
    mavlink_local_position_ned_cov_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ax = ax;
    packet.ay = ay;
    packet.az = az;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
    _mav_finalize_message_chan_send(chan, 64, (const char *)&packet, 225, 225, 191);

}






static inline void mavlink_msg_local_position_ned_cov_send_struct(mavlink_channel_t chan, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{



    _mav_finalize_message_chan_send(chan, 64, (const char *)local_position_ned_cov, 225, 225, 191);

}
# 293 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline void mavlink_msg_local_position_ned_cov_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t estimator_type, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, const float *covariance)
{
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
    mavlink_local_position_ned_cov_t *packet = (mavlink_local_position_ned_cov_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->ax = ax;
    packet->ay = ay;
    packet->az = az;
    packet->estimator_type = estimator_type;
    mav_array_memcpy(packet->covariance, covariance, sizeof(float)*45);
    _mav_finalize_message_chan_send(chan, 64, (const char *)packet, 225, 225, 191);

}
# 339 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
static inline uint64_t mavlink_msg_local_position_ned_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_local_position_ned_cov_get_estimator_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[224];
}






static inline float mavlink_msg_local_position_ned_cov_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_cov_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_cov_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_cov_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_cov_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_local_position_ned_cov_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_local_position_ned_cov_get_ax(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_local_position_ned_cov_get_ay(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_local_position_ned_cov_get_az(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline uint16_t mavlink_msg_local_position_ned_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
    return _MAV_RETURN_float_array(msg, covariance, 45, 44);
}







static inline void mavlink_msg_local_position_ned_cov_decode(const mavlink_message_t* msg, mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
# 476 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_cov.h"
        uint8_t len = msg->len < 225? msg->len : 225;
        memset(local_position_ned_cov, 0, 225);
    memcpy(local_position_ned_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 949 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h" 1
       




typedef struct __mavlink_rc_channels_t { uint32_t time_boot_ms; uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint16_t chan9_raw; uint16_t chan10_raw; uint16_t chan11_raw; uint16_t chan12_raw; uint16_t chan13_raw; uint16_t chan14_raw; uint16_t chan15_raw; uint16_t chan16_raw; uint16_t chan17_raw; uint16_t chan18_raw; uint8_t chancount; uint8_t rssi; } __attribute__((packed))
# 29 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
   mavlink_rc_channels_t;
# 127 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t chancount, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint16_t chan13_raw, uint16_t chan14_raw, uint16_t chan15_raw, uint16_t chan16_raw, uint16_t chan17_raw, uint16_t chan18_raw, uint8_t rssi)
{
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
    mavlink_rc_channels_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.chan13_raw = chan13_raw;
    packet.chan14_raw = chan14_raw;
    packet.chan15_raw = chan15_raw;
    packet.chan16_raw = chan16_raw;
    packet.chan17_raw = chan17_raw;
    packet.chan18_raw = chan18_raw;
    packet.chancount = chancount;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 65;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 118);
}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t chancount,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint16_t chan13_raw,uint16_t chan14_raw,uint16_t chan15_raw,uint16_t chan16_raw,uint16_t chan17_raw,uint16_t chan18_raw,uint8_t rssi)
{
# 245 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
    mavlink_rc_channels_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.chan13_raw = chan13_raw;
    packet.chan14_raw = chan14_raw;
    packet.chan15_raw = chan15_raw;
    packet.chan16_raw = chan16_raw;
    packet.chan17_raw = chan17_raw;
    packet.chan18_raw = chan18_raw;
    packet.chancount = chancount;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 65;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 118);
}
# 283 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
    return mavlink_msg_rc_channels_pack(system_id, component_id, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
    return mavlink_msg_rc_channels_pack_chan(system_id, component_id, chan, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 330 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline void mavlink_msg_rc_channels_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t chancount, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint16_t chan13_raw, uint16_t chan14_raw, uint16_t chan15_raw, uint16_t chan16_raw, uint16_t chan17_raw, uint16_t chan18_raw, uint8_t rssi)
{
# 358 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
    mavlink_rc_channels_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.chan13_raw = chan13_raw;
    packet.chan14_raw = chan14_raw;
    packet.chan15_raw = chan15_raw;
    packet.chan16_raw = chan16_raw;
    packet.chan17_raw = chan17_raw;
    packet.chan18_raw = chan18_raw;
    packet.chancount = chancount;
    packet.rssi = rssi;

    _mav_finalize_message_chan_send(chan, 65, (const char *)&packet, 42, 42, 118);

}






static inline void mavlink_msg_rc_channels_send_struct(mavlink_channel_t chan, const mavlink_rc_channels_t* rc_channels)
{



    _mav_finalize_message_chan_send(chan, 65, (const char *)rc_channels, 42, 42, 118);

}
# 407 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline void mavlink_msg_rc_channels_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t chancount, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint16_t chan13_raw, uint16_t chan14_raw, uint16_t chan15_raw, uint16_t chan16_raw, uint16_t chan17_raw, uint16_t chan18_raw, uint8_t rssi)
{
# 435 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
    mavlink_rc_channels_t *packet = (mavlink_rc_channels_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->chan1_raw = chan1_raw;
    packet->chan2_raw = chan2_raw;
    packet->chan3_raw = chan3_raw;
    packet->chan4_raw = chan4_raw;
    packet->chan5_raw = chan5_raw;
    packet->chan6_raw = chan6_raw;
    packet->chan7_raw = chan7_raw;
    packet->chan8_raw = chan8_raw;
    packet->chan9_raw = chan9_raw;
    packet->chan10_raw = chan10_raw;
    packet->chan11_raw = chan11_raw;
    packet->chan12_raw = chan12_raw;
    packet->chan13_raw = chan13_raw;
    packet->chan14_raw = chan14_raw;
    packet->chan15_raw = chan15_raw;
    packet->chan16_raw = chan16_raw;
    packet->chan17_raw = chan17_raw;
    packet->chan18_raw = chan18_raw;
    packet->chancount = chancount;
    packet->rssi = rssi;

    _mav_finalize_message_chan_send(chan, 65, (const char *)packet, 42, 42, 118);

}
# 473 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
static inline uint32_t mavlink_msg_rc_channels_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_get_chancount(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_rc_channels_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan9_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan10_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan11_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan12_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan13_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan14_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan15_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan16_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan17_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 36);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan18_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 38);
}






static inline uint8_t mavlink_msg_rc_channels_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_rc_channels_decode(const mavlink_message_t* msg, mavlink_rc_channels_t* rc_channels)
{
# 709 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(rc_channels, 0, 42);
    memcpy(rc_channels, ((const char *)(&((msg)->payload64[0]))), len);

}
# 950 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h" 1
       




typedef struct __mavlink_request_data_stream_t { uint16_t req_message_rate; uint8_t target_system; uint8_t target_component; uint8_t req_stream_id; uint8_t start_stop; } __attribute__((packed))






   mavlink_request_data_stream_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t req_stream_id, uint16_t req_message_rate, uint8_t start_stop)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
    mavlink_request_data_stream_t packet;
    packet.req_message_rate = req_message_rate;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.req_stream_id = req_stream_id;
    packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 66;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 148);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t req_stream_id,uint16_t req_message_rate,uint8_t start_stop)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
    mavlink_request_data_stream_t packet;
    packet.req_message_rate = req_message_rate;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.req_stream_id = req_stream_id;
    packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 66;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 148);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
    return mavlink_msg_request_data_stream_pack(system_id, component_id, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
    return mavlink_msg_request_data_stream_pack_chan(system_id, component_id, chan, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline void mavlink_msg_request_data_stream_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t req_stream_id, uint16_t req_message_rate, uint8_t start_stop)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
    mavlink_request_data_stream_t packet;
    packet.req_message_rate = req_message_rate;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.req_stream_id = req_stream_id;
    packet.start_stop = start_stop;

    _mav_finalize_message_chan_send(chan, 66, (const char *)&packet, 6, 6, 148);

}






static inline void mavlink_msg_request_data_stream_send_struct(mavlink_channel_t chan, const mavlink_request_data_stream_t* request_data_stream)
{



    _mav_finalize_message_chan_send(chan, 66, (const char *)request_data_stream, 6, 6, 148);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline void mavlink_msg_request_data_stream_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t req_stream_id, uint16_t req_message_rate, uint8_t start_stop)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
    mavlink_request_data_stream_t *packet = (mavlink_request_data_stream_t *)msgbuf;
    packet->req_message_rate = req_message_rate;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->req_stream_id = req_stream_id;
    packet->start_stop = start_stop;

    _mav_finalize_message_chan_send(chan, 66, (const char *)packet, 6, 6, 148);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_request_data_stream.h"
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}







static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{







        uint8_t len = msg->len < 6? msg->len : 6;
        memset(request_data_stream, 0, 6);
    memcpy(request_data_stream, ((const char *)(&((msg)->payload64[0]))), len);

}
# 951 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h" 1
       




typedef struct __mavlink_data_stream_t { uint16_t message_rate; uint8_t stream_id; uint8_t on_off; } __attribute__((packed))




   mavlink_data_stream_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t stream_id, uint16_t message_rate, uint8_t on_off)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
    mavlink_data_stream_t packet;
    packet.message_rate = message_rate;
    packet.stream_id = stream_id;
    packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 67;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 21);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t stream_id,uint16_t message_rate,uint8_t on_off)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
    mavlink_data_stream_t packet;
    packet.message_rate = message_rate;
    packet.stream_id = stream_id;
    packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 67;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 21);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
    return mavlink_msg_data_stream_pack(system_id, component_id, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
    return mavlink_msg_data_stream_pack_chan(system_id, component_id, chan, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline void mavlink_msg_data_stream_send(mavlink_channel_t chan, uint8_t stream_id, uint16_t message_rate, uint8_t on_off)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
    mavlink_data_stream_t packet;
    packet.message_rate = message_rate;
    packet.stream_id = stream_id;
    packet.on_off = on_off;

    _mav_finalize_message_chan_send(chan, 67, (const char *)&packet, 4, 4, 21);

}






static inline void mavlink_msg_data_stream_send_struct(mavlink_channel_t chan, const mavlink_data_stream_t* data_stream)
{



    _mav_finalize_message_chan_send(chan, 67, (const char *)data_stream, 4, 4, 21);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline void mavlink_msg_data_stream_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t stream_id, uint16_t message_rate, uint8_t on_off)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
    mavlink_data_stream_t *packet = (mavlink_data_stream_t *)msgbuf;
    packet->message_rate = message_rate;
    packet->stream_id = stream_id;
    packet->on_off = on_off;

    _mav_finalize_message_chan_send(chan, 67, (const char *)packet, 4, 4, 21);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_stream.h"
static inline uint8_t mavlink_msg_data_stream_get_stream_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_data_stream_get_message_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_data_stream_get_on_off(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}







static inline void mavlink_msg_data_stream_decode(const mavlink_message_t* msg, mavlink_data_stream_t* data_stream)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(data_stream, 0, 4);
    memcpy(data_stream, ((const char *)(&((msg)->payload64[0]))), len);

}
# 952 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h" 1
       




typedef struct __mavlink_manual_control_t { int16_t x; int16_t y; int16_t z; int16_t r; uint16_t buttons; uint8_t target; } __attribute__((packed))







   mavlink_manual_control_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target, int16_t x, int16_t y, int16_t z, int16_t r, uint16_t buttons)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
    mavlink_manual_control_t packet;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.r = r;
    packet.buttons = buttons;
    packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


    msg->msgid = 69;
    return mavlink_finalize_message(msg, system_id, component_id, 11, 11, 243);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target,int16_t x,int16_t y,int16_t z,int16_t r,uint16_t buttons)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
    mavlink_manual_control_t packet;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.r = r;
    packet.buttons = buttons;
    packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


    msg->msgid = 69;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 11, 11, 243);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
    return mavlink_msg_manual_control_pack(system_id, component_id, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
    return mavlink_msg_manual_control_pack_chan(system_id, component_id, chan, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline void mavlink_msg_manual_control_send(mavlink_channel_t chan, uint8_t target, int16_t x, int16_t y, int16_t z, int16_t r, uint16_t buttons)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
    mavlink_manual_control_t packet;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.r = r;
    packet.buttons = buttons;
    packet.target = target;

    _mav_finalize_message_chan_send(chan, 69, (const char *)&packet, 11, 11, 243);

}






static inline void mavlink_msg_manual_control_send_struct(mavlink_channel_t chan, const mavlink_manual_control_t* manual_control)
{



    _mav_finalize_message_chan_send(chan, 69, (const char *)manual_control, 11, 11, 243);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline void mavlink_msg_manual_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target, int16_t x, int16_t y, int16_t z, int16_t r, uint16_t buttons)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
    mavlink_manual_control_t *packet = (mavlink_manual_control_t *)msgbuf;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->r = r;
    packet->buttons = buttons;
    packet->target = target;

    _mav_finalize_message_chan_send(chan, 69, (const char *)packet, 11, 11, 243);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
static inline uint8_t mavlink_msg_manual_control_get_target(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline int16_t mavlink_msg_manual_control_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_manual_control_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}






static inline int16_t mavlink_msg_manual_control_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_manual_control_get_r(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline uint16_t mavlink_msg_manual_control_get_buttons(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}







static inline void mavlink_msg_manual_control_decode(const mavlink_message_t* msg, mavlink_manual_control_t* manual_control)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_control.h"
        uint8_t len = msg->len < 11? msg->len : 11;
        memset(manual_control, 0, 11);
    memcpy(manual_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 953 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h" 1
       




typedef struct __mavlink_rc_channels_override_t { uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint8_t target_system; uint8_t target_component; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
   mavlink_rc_channels_override_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
    mavlink_rc_channels_override_t packet;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 70;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 124);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
    mavlink_rc_channels_override_t packet;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 70;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 124);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
    return mavlink_msg_rc_channels_override_pack(system_id, component_id, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
    return mavlink_msg_rc_channels_override_pack_chan(system_id, component_id, chan, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline void mavlink_msg_rc_channels_override_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
    mavlink_rc_channels_override_t packet;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 70, (const char *)&packet, 18, 18, 124);

}






static inline void mavlink_msg_rc_channels_override_send_struct(mavlink_channel_t chan, const mavlink_rc_channels_override_t* rc_channels_override)
{



    _mav_finalize_message_chan_send(chan, 70, (const char *)rc_channels_override, 18, 18, 124);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline void mavlink_msg_rc_channels_override_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
    mavlink_rc_channels_override_t *packet = (mavlink_rc_channels_override_t *)msgbuf;
    packet->chan1_raw = chan1_raw;
    packet->chan2_raw = chan2_raw;
    packet->chan3_raw = chan3_raw;
    packet->chan4_raw = chan4_raw;
    packet->chan5_raw = chan5_raw;
    packet->chan6_raw = chan6_raw;
    packet->chan7_raw = chan7_raw;
    packet->chan8_raw = chan8_raw;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 70, (const char *)packet, 18, 18, 124);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
static inline uint8_t mavlink_msg_rc_channels_override_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint8_t mavlink_msg_rc_channels_override_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}







static inline void mavlink_msg_rc_channels_override_decode(const mavlink_message_t* msg, mavlink_rc_channels_override_t* rc_channels_override)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_rc_channels_override.h"
        uint8_t len = msg->len < 18? msg->len : 18;
        memset(rc_channels_override, 0, 18);
    memcpy(rc_channels_override, ((const char *)(&((msg)->payload64[0]))), len);

}
# 954 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h" 1
       




typedef struct __mavlink_mission_item_int_t { float param1; float param2; float param3; float param4; int32_t x; int32_t y; float z; uint16_t seq; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t frame; uint8_t current; uint8_t autocontinue; uint8_t mission_type; } __attribute__((packed))
# 23 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
   mavlink_mission_item_int_t;
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z, uint8_t mission_type)
{
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
    mavlink_mission_item_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 73;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 38, 38);
}
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z,uint8_t mission_type)
{
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
    mavlink_mission_item_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;
    packet.mission_type = mission_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 73;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 38, 38);
}
# 229 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
    return mavlink_msg_mission_item_int_pack(system_id, component_id, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z, mission_item_int->mission_type);
}
# 243 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
    return mavlink_msg_mission_item_int_pack_chan(system_id, component_id, chan, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z, mission_item_int->mission_type);
}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline void mavlink_msg_mission_item_int_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z, uint8_t mission_type)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
    mavlink_mission_item_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;
    packet.mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 73, (const char *)&packet, 37, 38, 38);

}






static inline void mavlink_msg_mission_item_int_send_struct(mavlink_channel_t chan, const mavlink_mission_item_int_t* mission_item_int)
{



    _mav_finalize_message_chan_send(chan, 73, (const char *)mission_item_int, 37, 38, 38);

}
# 335 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline void mavlink_msg_mission_item_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z, uint8_t mission_type)
{
# 357 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
    mavlink_mission_item_int_t *packet = (mavlink_mission_item_int_t *)msgbuf;
    packet->param1 = param1;
    packet->param2 = param2;
    packet->param3 = param3;
    packet->param4 = param4;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->seq = seq;
    packet->command = command;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->frame = frame;
    packet->current = current;
    packet->autocontinue = autocontinue;
    packet->mission_type = mission_type;

    _mav_finalize_message_chan_send(chan, 73, (const char *)packet, 37, 38, 38);

}
# 389 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
static inline uint8_t mavlink_msg_mission_item_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_int_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_int_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_int_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_int_get_current(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_int_get_autocontinue(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_int_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_int_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_int_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_int_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_mission_item_int_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_mission_item_int_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_mission_item_int_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline uint8_t mavlink_msg_mission_item_int_get_mission_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}







static inline void mavlink_msg_mission_item_int_decode(const mavlink_message_t* msg, mavlink_mission_item_int_t* mission_item_int)
{
# 559 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mission_item_int.h"
        uint8_t len = msg->len < 38? msg->len : 38;
        memset(mission_item_int, 0, 38);
    memcpy(mission_item_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 955 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h" 1
       




typedef struct __mavlink_vfr_hud_t { float airspeed; float groundspeed; float alt; float climb; int16_t heading; uint16_t throttle; } __attribute__((packed))







   mavlink_vfr_hud_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
# 81 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
    packet.groundspeed = groundspeed;
    packet.alt = alt;
    packet.climb = climb;
    packet.heading = heading;
    packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 74;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 20);
}
# 110 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float airspeed,float groundspeed,int16_t heading,uint16_t throttle,float alt,float climb)
{
# 125 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
    packet.groundspeed = groundspeed;
    packet.alt = alt;
    packet.climb = climb;
    packet.heading = heading;
    packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 74;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 20);
}
# 148 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
    return mavlink_msg_vfr_hud_pack(system_id, component_id, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
    return mavlink_msg_vfr_hud_pack_chan(system_id, component_id, chan, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
    packet.groundspeed = groundspeed;
    packet.alt = alt;
    packet.climb = climb;
    packet.heading = heading;
    packet.throttle = throttle;

    _mav_finalize_message_chan_send(chan, 74, (const char *)&packet, 20, 20, 20);

}






static inline void mavlink_msg_vfr_hud_send_struct(mavlink_channel_t chan, const mavlink_vfr_hud_t* vfr_hud)
{



    _mav_finalize_message_chan_send(chan, 74, (const char *)vfr_hud, 20, 20, 20);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline void mavlink_msg_vfr_hud_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
    mavlink_vfr_hud_t *packet = (mavlink_vfr_hud_t *)msgbuf;
    packet->airspeed = airspeed;
    packet->groundspeed = groundspeed;
    packet->alt = alt;
    packet->climb = climb;
    packet->heading = heading;
    packet->throttle = throttle;

    _mav_finalize_message_chan_send(chan, 74, (const char *)packet, 20, 20, 20);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
static inline float mavlink_msg_vfr_hud_get_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_vfr_hud_get_groundspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_vfr_hud_get_heading(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint16_t mavlink_msg_vfr_hud_get_throttle(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline float mavlink_msg_vfr_hud_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vfr_hud_get_climb(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_vfr_hud_decode(const mavlink_message_t* msg, mavlink_vfr_hud_t* vfr_hud)
{
# 334 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vfr_hud.h"
        uint8_t len = msg->len < 20? msg->len : 20;
        memset(vfr_hud, 0, 20);
    memcpy(vfr_hud, ((const char *)(&((msg)->payload64[0]))), len);

}
# 956 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h" 1
       




typedef struct __mavlink_command_int_t { float param1; float param2; float param3; float param4; int32_t x; int32_t y; float z; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t frame; uint8_t current; uint8_t autocontinue; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
   mavlink_command_int_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
    mavlink_command_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 75;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 158);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
    mavlink_command_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 75;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 158);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
    return mavlink_msg_command_int_pack(system_id, component_id, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
    return mavlink_msg_command_int_pack_chan(system_id, component_id, chan, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline void mavlink_msg_command_int_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
    mavlink_command_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

    _mav_finalize_message_chan_send(chan, 75, (const char *)&packet, 35, 35, 158);

}






static inline void mavlink_msg_command_int_send_struct(mavlink_channel_t chan, const mavlink_command_int_t* command_int)
{



    _mav_finalize_message_chan_send(chan, 75, (const char *)command_int, 35, 35, 158);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline void mavlink_msg_command_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
    mavlink_command_int_t *packet = (mavlink_command_int_t *)msgbuf;
    packet->param1 = param1;
    packet->param2 = param2;
    packet->param3 = param3;
    packet->param4 = param4;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->command = command;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->frame = frame;
    packet->current = current;
    packet->autocontinue = autocontinue;

    _mav_finalize_message_chan_send(chan, 75, (const char *)packet, 35, 35, 158);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
static inline uint8_t mavlink_msg_command_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_command_int_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint16_t mavlink_msg_command_int_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_int_get_current(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_command_int_get_autocontinue(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline float mavlink_msg_command_int_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_int_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_int_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_int_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_command_int_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_command_int_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_command_int_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_int_decode(const mavlink_message_t* msg, mavlink_command_int_t* command_int)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_int.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(command_int, 0, 35);
    memcpy(command_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 957 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h" 1
       




typedef struct __mavlink_command_long_t { float param1; float param2; float param3; float param4; float param5; float param6; float param7; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t confirmation; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
   mavlink_command_long_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
    mavlink_command_long_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.param5 = param5;
    packet.param6 = param6;
    packet.param7 = param7;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 76;
    return mavlink_finalize_message(msg, system_id, component_id, 33, 33, 152);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t command,uint8_t confirmation,float param1,float param2,float param3,float param4,float param5,float param6,float param7)
{
# 165 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
    mavlink_command_long_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.param5 = param5;
    packet.param6 = param6;
    packet.param7 = param7;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 76;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 33, 152);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
    return mavlink_msg_command_long_pack(system_id, component_id, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
    return mavlink_msg_command_long_pack_chan(system_id, component_id, chan, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline void mavlink_msg_command_long_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
    mavlink_command_long_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.param5 = param5;
    packet.param6 = param6;
    packet.param7 = param7;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.confirmation = confirmation;

    _mav_finalize_message_chan_send(chan, 76, (const char *)&packet, 33, 33, 152);

}






static inline void mavlink_msg_command_long_send_struct(mavlink_channel_t chan, const mavlink_command_long_t* command_long)
{



    _mav_finalize_message_chan_send(chan, 76, (const char *)command_long, 33, 33, 152);

}
# 287 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline void mavlink_msg_command_long_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
    mavlink_command_long_t *packet = (mavlink_command_long_t *)msgbuf;
    packet->param1 = param1;
    packet->param2 = param2;
    packet->param3 = param3;
    packet->param4 = param4;
    packet->param5 = param5;
    packet->param6 = param6;
    packet->param7 = param7;
    packet->command = command;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->confirmation = confirmation;

    _mav_finalize_message_chan_send(chan, 76, (const char *)packet, 33, 33, 152);

}
# 333 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
# 459 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_long.h"
        uint8_t len = msg->len < 33? msg->len : 33;
        memset(command_long, 0, 33);
    memcpy(command_long, ((const char *)(&((msg)->payload64[0]))), len);

}
# 958 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h" 1
       




typedef struct __mavlink_command_ack_t { uint16_t command; uint8_t result; } __attribute__((packed))



   mavlink_command_ack_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t command, uint8_t result)
{







    mavlink_command_ack_t packet;
    packet.command = command;
    packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 77;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 143);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t command,uint8_t result)
{







    mavlink_command_ack_t packet;
    packet.command = command;
    packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 77;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 143);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
    return mavlink_msg_command_ack_pack(system_id, component_id, msg, command_ack->command, command_ack->result);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
    return mavlink_msg_command_ack_pack_chan(system_id, component_id, chan, msg, command_ack->command, command_ack->result);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline void mavlink_msg_command_ack_send(mavlink_channel_t chan, uint16_t command, uint8_t result)
{







    mavlink_command_ack_t packet;
    packet.command = command;
    packet.result = result;

    _mav_finalize_message_chan_send(chan, 77, (const char *)&packet, 3, 3, 143);

}






static inline void mavlink_msg_command_ack_send_struct(mavlink_channel_t chan, const mavlink_command_ack_t* command_ack)
{



    _mav_finalize_message_chan_send(chan, 77, (const char *)command_ack, 3, 3, 143);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline void mavlink_msg_command_ack_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t command, uint8_t result)
{







    mavlink_command_ack_t *packet = (mavlink_command_ack_t *)msgbuf;
    packet->command = command;
    packet->result = result;

    _mav_finalize_message_chan_send(chan, 77, (const char *)packet, 3, 3, 143);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_command_ack_get_result(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{




        uint8_t len = msg->len < 3? msg->len : 3;
        memset(command_ack, 0, 3);
    memcpy(command_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 959 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h" 1
       




typedef struct __mavlink_manual_setpoint_t { uint32_t time_boot_ms; float roll; float pitch; float yaw; float thrust; uint8_t mode_switch; uint8_t manual_override_switch; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
   mavlink_manual_setpoint_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust, uint8_t mode_switch, uint8_t manual_override_switch)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
    mavlink_manual_setpoint_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.thrust = thrust;
    packet.mode_switch = mode_switch;
    packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 81;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 106);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float roll,float pitch,float yaw,float thrust,uint8_t mode_switch,uint8_t manual_override_switch)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
    mavlink_manual_setpoint_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.thrust = thrust;
    packet.mode_switch = mode_switch;
    packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 81;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 106);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
    return mavlink_msg_manual_setpoint_pack(system_id, component_id, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
    return mavlink_msg_manual_setpoint_pack_chan(system_id, component_id, chan, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline void mavlink_msg_manual_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust, uint8_t mode_switch, uint8_t manual_override_switch)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
    mavlink_manual_setpoint_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.thrust = thrust;
    packet.mode_switch = mode_switch;
    packet.manual_override_switch = manual_override_switch;

    _mav_finalize_message_chan_send(chan, 81, (const char *)&packet, 22, 22, 106);

}






static inline void mavlink_msg_manual_setpoint_send_struct(mavlink_channel_t chan, const mavlink_manual_setpoint_t* manual_setpoint)
{



    _mav_finalize_message_chan_send(chan, 81, (const char *)manual_setpoint, 22, 22, 106);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline void mavlink_msg_manual_setpoint_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust, uint8_t mode_switch, uint8_t manual_override_switch)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
    mavlink_manual_setpoint_t *packet = (mavlink_manual_setpoint_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->thrust = thrust;
    packet->mode_switch = mode_switch;
    packet->manual_override_switch = manual_override_switch;

    _mav_finalize_message_chan_send(chan, 81, (const char *)packet, 22, 22, 106);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
static inline uint32_t mavlink_msg_manual_setpoint_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_manual_setpoint_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_manual_setpoint_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_manual_setpoint_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_manual_setpoint_get_thrust(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline uint8_t mavlink_msg_manual_setpoint_get_mode_switch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint8_t mavlink_msg_manual_setpoint_get_manual_override_switch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_manual_setpoint_decode(const mavlink_message_t* msg, mavlink_manual_setpoint_t* manual_setpoint)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_manual_setpoint.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(manual_setpoint, 0, 22);
    memcpy(manual_setpoint, ((const char *)(&((msg)->payload64[0]))), len);

}
# 960 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h" 1
       




typedef struct __mavlink_set_attitude_target_t { uint32_t time_boot_ms; float q[4]; float body_roll_rate; float body_pitch_rate; float body_yaw_rate; float thrust; uint8_t target_system; uint8_t target_component; uint8_t type_mask; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
   mavlink_set_attitude_target_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
    mavlink_set_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


    msg->msgid = 82;
    return mavlink_finalize_message(msg, system_id, component_id, 39, 39, 49);
}
# 129 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
    mavlink_set_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


    msg->msgid = 82;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 39, 39, 49);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
    return mavlink_msg_set_attitude_target_pack(system_id, component_id, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
    return mavlink_msg_set_attitude_target_pack_chan(system_id, component_id, chan, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 206 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline void mavlink_msg_set_attitude_target_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
    mavlink_set_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 82, (const char *)&packet, 39, 39, 49);

}






static inline void mavlink_msg_set_attitude_target_send_struct(mavlink_channel_t chan, const mavlink_set_attitude_target_t* set_attitude_target)
{



    _mav_finalize_message_chan_send(chan, 82, (const char *)set_attitude_target, 39, 39, 49);

}
# 257 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline void mavlink_msg_set_attitude_target_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 272 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
    mavlink_set_attitude_target_t *packet = (mavlink_set_attitude_target_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->body_roll_rate = body_roll_rate;
    packet->body_pitch_rate = body_pitch_rate;
    packet->body_yaw_rate = body_yaw_rate;
    packet->thrust = thrust;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->type_mask = type_mask;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 82, (const char *)packet, 39, 39, 49);

}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
static inline uint32_t mavlink_msg_set_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint16_t mavlink_msg_set_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_set_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_attitude_target_get_thrust(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_set_attitude_target_decode(const mavlink_message_t* msg, mavlink_set_attitude_target_t* set_attitude_target)
{
# 401 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_attitude_target.h"
        uint8_t len = msg->len < 39? msg->len : 39;
        memset(set_attitude_target, 0, 39);
    memcpy(set_attitude_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 961 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h" 1
       




typedef struct __mavlink_attitude_target_t { uint32_t time_boot_ms; float q[4]; float body_roll_rate; float body_pitch_rate; float body_yaw_rate; float thrust; uint8_t type_mask; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
   mavlink_attitude_target_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 85 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
    mavlink_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 83;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 22);
}
# 115 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
    mavlink_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 83;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 22);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
    return mavlink_msg_attitude_target_pack(system_id, component_id, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
    return mavlink_msg_attitude_target_pack_chan(system_id, component_id, chan, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 186 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline void mavlink_msg_attitude_target_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 199 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
    mavlink_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 83, (const char *)&packet, 37, 37, 22);

}






static inline void mavlink_msg_attitude_target_send_struct(mavlink_channel_t chan, const mavlink_attitude_target_t* attitude_target)
{



    _mav_finalize_message_chan_send(chan, 83, (const char *)attitude_target, 37, 37, 22);

}
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline void mavlink_msg_attitude_target_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 246 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
    mavlink_attitude_target_t *packet = (mavlink_attitude_target_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->body_roll_rate = body_roll_rate;
    packet->body_pitch_rate = body_pitch_rate;
    packet->body_yaw_rate = body_yaw_rate;
    packet->thrust = thrust;
    packet->type_mask = type_mask;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 83, (const char *)packet, 37, 37, 22);

}
# 269 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
static inline uint32_t mavlink_msg_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint16_t mavlink_msg_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_attitude_target_get_thrust(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_attitude_target_decode(const mavlink_message_t* msg, mavlink_attitude_target_t* attitude_target)
{
# 351 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_attitude_target.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(attitude_target, 0, 37);
    memcpy(attitude_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 962 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h" 1
       




typedef struct __mavlink_set_position_target_local_ned_t { uint32_t time_boot_ms; float x; float y; float z; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t target_system; uint8_t target_component; uint8_t coordinate_frame; } __attribute__((packed))
# 24 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
   mavlink_set_position_target_local_ned_t;
# 107 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
    mavlink_set_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 84;
    return mavlink_finalize_message(msg, system_id, component_id, 53, 53, 143);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 205 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
    mavlink_set_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 84;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 53, 143);
}
# 238 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
    return mavlink_msg_set_position_target_local_ned_pack(system_id, component_id, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 252 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
    return mavlink_msg_set_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 280 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline void mavlink_msg_set_position_target_local_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 303 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
    mavlink_set_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 84, (const char *)&packet, 53, 53, 143);

}






static inline void mavlink_msg_set_position_target_local_ned_send_struct(mavlink_channel_t chan, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{



    _mav_finalize_message_chan_send(chan, 84, (const char *)set_position_target_local_ned, 53, 53, 143);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline void mavlink_msg_set_position_target_local_ned_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 370 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
    mavlink_set_position_target_local_ned_t *packet = (mavlink_set_position_target_local_ned_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->afx = afx;
    packet->afy = afy;
    packet->afz = afz;
    packet->yaw = yaw;
    packet->yaw_rate = yaw_rate;
    packet->type_mask = type_mask;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 84, (const char *)packet, 53, 53, 143);

}
# 403 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint32_t mavlink_msg_set_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_set_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_set_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_set_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
# 584 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_local_ned.h"
        uint8_t len = msg->len < 53? msg->len : 53;
        memset(set_position_target_local_ned, 0, 53);
    memcpy(set_position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), len);

}
# 963 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h" 1
       




typedef struct __mavlink_position_target_local_ned_t { uint32_t time_boot_ms; float x; float y; float z; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t coordinate_frame; } __attribute__((packed))
# 22 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
   mavlink_position_target_local_ned_t;
# 99 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
    mavlink_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 85;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 140);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
    mavlink_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 85;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 140);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
    return mavlink_msg_position_target_local_ned_pack(system_id, component_id, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 234 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
    return mavlink_msg_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 260 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline void mavlink_msg_position_target_local_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 281 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
    mavlink_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 85, (const char *)&packet, 51, 51, 140);

}






static inline void mavlink_msg_position_target_local_ned_send_struct(mavlink_channel_t chan, const mavlink_position_target_local_ned_t* position_target_local_ned)
{



    _mav_finalize_message_chan_send(chan, 85, (const char *)position_target_local_ned, 51, 51, 140);

}
# 323 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline void mavlink_msg_position_target_local_ned_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 344 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
    mavlink_position_target_local_ned_t *packet = (mavlink_position_target_local_ned_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->afx = afx;
    packet->afy = afy;
    packet->afz = afz;
    packet->yaw = yaw;
    packet->yaw_rate = yaw_rate;
    packet->type_mask = type_mask;
    packet->coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 85, (const char *)packet, 51, 51, 140);

}
# 375 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
static inline uint32_t mavlink_msg_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_position_target_local_ned_t* position_target_local_ned)
{
# 534 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_local_ned.h"
        uint8_t len = msg->len < 51? msg->len : 51;
        memset(position_target_local_ned, 0, 51);
    memcpy(position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), len);

}
# 964 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h" 1
       




typedef struct __mavlink_set_position_target_global_int_t { uint32_t time_boot_ms; int32_t lat_int; int32_t lon_int; float alt; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t target_system; uint8_t target_component; uint8_t coordinate_frame; } __attribute__((packed))
# 24 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
   mavlink_set_position_target_global_int_t;
# 107 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
    mavlink_set_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 86;
    return mavlink_finalize_message(msg, system_id, component_id, 53, 53, 5);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 205 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
    mavlink_set_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 86;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 53, 5);
}
# 238 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
    return mavlink_msg_set_position_target_global_int_pack(system_id, component_id, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 252 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
    return mavlink_msg_set_position_target_global_int_pack_chan(system_id, component_id, chan, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 280 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline void mavlink_msg_set_position_target_global_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 303 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
    mavlink_set_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 86, (const char *)&packet, 53, 53, 5);

}






static inline void mavlink_msg_set_position_target_global_int_send_struct(mavlink_channel_t chan, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{



    _mav_finalize_message_chan_send(chan, 86, (const char *)set_position_target_global_int, 53, 53, 5);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline void mavlink_msg_set_position_target_global_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 370 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
    mavlink_set_position_target_global_int_t *packet = (mavlink_set_position_target_global_int_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->lat_int = lat_int;
    packet->lon_int = lon_int;
    packet->alt = alt;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->afx = afx;
    packet->afy = afy;
    packet->afz = afz;
    packet->yaw = yaw;
    packet->yaw_rate = yaw_rate;
    packet->type_mask = type_mask;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 86, (const char *)packet, 53, 53, 5);

}
# 403 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
static inline uint32_t mavlink_msg_set_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_set_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
# 584 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_position_target_global_int.h"
        uint8_t len = msg->len < 53? msg->len : 53;
        memset(set_position_target_global_int, 0, 53);
    memcpy(set_position_target_global_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 965 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h" 1
       




typedef struct __mavlink_position_target_global_int_t { uint32_t time_boot_ms; int32_t lat_int; int32_t lon_int; float alt; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t coordinate_frame; } __attribute__((packed))
# 22 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
   mavlink_position_target_global_int_t;
# 99 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
    mavlink_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 87;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 150);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
    mavlink_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 87;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 150);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
    return mavlink_msg_position_target_global_int_pack(system_id, component_id, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 234 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
    return mavlink_msg_position_target_global_int_pack_chan(system_id, component_id, chan, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 260 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline void mavlink_msg_position_target_global_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 281 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
    mavlink_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 87, (const char *)&packet, 51, 51, 150);

}






static inline void mavlink_msg_position_target_global_int_send_struct(mavlink_channel_t chan, const mavlink_position_target_global_int_t* position_target_global_int)
{



    _mav_finalize_message_chan_send(chan, 87, (const char *)position_target_global_int, 51, 51, 150);

}
# 323 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline void mavlink_msg_position_target_global_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 344 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
    mavlink_position_target_global_int_t *packet = (mavlink_position_target_global_int_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->lat_int = lat_int;
    packet->lon_int = lon_int;
    packet->alt = alt;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->afx = afx;
    packet->afy = afy;
    packet->afz = afz;
    packet->yaw = yaw;
    packet->yaw_rate = yaw_rate;
    packet->type_mask = type_mask;
    packet->coordinate_frame = coordinate_frame;

    _mav_finalize_message_chan_send(chan, 87, (const char *)packet, 51, 51, 150);

}
# 375 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
static inline uint32_t mavlink_msg_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_position_target_global_int_t* position_target_global_int)
{
# 534 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_position_target_global_int.h"
        uint8_t len = msg->len < 51? msg->len : 51;
        memset(position_target_global_int, 0, 51);
    memcpy(position_target_global_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 966 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h" 1
       




typedef struct __mavlink_local_position_ned_system_global_offset_t { uint32_t time_boot_ms; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
   mavlink_local_position_ned_system_global_offset_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
    mavlink_local_position_ned_system_global_offset_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 89;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 231);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
    mavlink_local_position_ned_system_global_offset_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 89;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 231);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
    return mavlink_msg_local_position_ned_system_global_offset_pack(system_id, component_id, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
    return mavlink_msg_local_position_ned_system_global_offset_pack_chan(system_id, component_id, chan, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline void mavlink_msg_local_position_ned_system_global_offset_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float roll, float pitch, float yaw)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
    mavlink_local_position_ned_system_global_offset_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

    _mav_finalize_message_chan_send(chan, 89, (const char *)&packet, 28, 28, 231);

}






static inline void mavlink_msg_local_position_ned_system_global_offset_send_struct(mavlink_channel_t chan, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{



    _mav_finalize_message_chan_send(chan, 89, (const char *)local_position_ned_system_global_offset, 28, 28, 231);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline void mavlink_msg_local_position_ned_system_global_offset_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float roll, float pitch, float yaw)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
    mavlink_local_position_ned_system_global_offset_t *packet = (mavlink_local_position_ned_system_global_offset_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;

    _mav_finalize_message_chan_send(chan, 89, (const char *)packet, 28, 28, 231);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint32_t mavlink_msg_local_position_ned_system_global_offset_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_system_global_offset_decode(const mavlink_message_t* msg, mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_local_position_ned_system_global_offset.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(local_position_ned_system_global_offset, 0, 28);
    memcpy(local_position_ned_system_global_offset, ((const char *)(&((msg)->payload64[0]))), len);

}
# 967 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h" 1
       




typedef struct __mavlink_hil_state_t { uint64_t time_usec; float roll; float pitch; float yaw; float rollspeed; float pitchspeed; float yawspeed; int32_t lat; int32_t lon; int32_t alt; int16_t vx; int16_t vy; int16_t vz; int16_t xacc; int16_t yacc; int16_t zacc; } __attribute__((packed))
# 24 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
   mavlink_hil_state_t;
# 107 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
    mavlink_hil_state_t packet;
    packet.time_usec = time_usec;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


    msg->msgid = 90;
    return mavlink_finalize_message(msg, system_id, component_id, 56, 56, 183);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 205 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
    mavlink_hil_state_t packet;
    packet.time_usec = time_usec;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


    msg->msgid = 90;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 56, 56, 183);
}
# 238 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
    return mavlink_msg_hil_state_pack(system_id, component_id, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 252 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
    return mavlink_msg_hil_state_pack_chan(system_id, component_id, chan, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 280 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 303 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
    mavlink_hil_state_t packet;
    packet.time_usec = time_usec;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;

    _mav_finalize_message_chan_send(chan, 90, (const char *)&packet, 56, 56, 183);

}






static inline void mavlink_msg_hil_state_send_struct(mavlink_channel_t chan, const mavlink_hil_state_t* hil_state)
{



    _mav_finalize_message_chan_send(chan, 90, (const char *)hil_state, 56, 56, 183);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline void mavlink_msg_hil_state_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 370 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
    mavlink_hil_state_t *packet = (mavlink_hil_state_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->rollspeed = rollspeed;
    packet->pitchspeed = pitchspeed;
    packet->yawspeed = yawspeed;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;

    _mav_finalize_message_chan_send(chan, 90, (const char *)packet, 56, 56, 183);

}
# 403 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
static inline uint64_t mavlink_msg_hil_state_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_state_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_state_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_state_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_state_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_state_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline int32_t mavlink_msg_hil_state_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 40);
}






static inline int16_t mavlink_msg_hil_state_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 46);
}






static inline int16_t mavlink_msg_hil_state_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 52);
}






static inline int16_t mavlink_msg_hil_state_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 54);
}







static inline void mavlink_msg_hil_state_decode(const mavlink_message_t* msg, mavlink_hil_state_t* hil_state)
{
# 584 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state.h"
        uint8_t len = msg->len < 56? msg->len : 56;
        memset(hil_state, 0, 56);
    memcpy(hil_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 968 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h" 1
       




typedef struct __mavlink_hil_controls_t { uint64_t time_usec; float roll_ailerons; float pitch_elevator; float yaw_rudder; float throttle; float aux1; float aux2; float aux3; float aux4; uint8_t mode; uint8_t nav_mode; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
   mavlink_hil_controls_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float roll_ailerons, float pitch_elevator, float yaw_rudder, float throttle, float aux1, float aux2, float aux3, float aux4, uint8_t mode, uint8_t nav_mode)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
    mavlink_hil_controls_t packet;
    packet.time_usec = time_usec;
    packet.roll_ailerons = roll_ailerons;
    packet.pitch_elevator = pitch_elevator;
    packet.yaw_rudder = yaw_rudder;
    packet.throttle = throttle;
    packet.aux1 = aux1;
    packet.aux2 = aux2;
    packet.aux3 = aux3;
    packet.aux4 = aux4;
    packet.mode = mode;
    packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 91;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 63);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float roll_ailerons,float pitch_elevator,float yaw_rudder,float throttle,float aux1,float aux2,float aux3,float aux4,uint8_t mode,uint8_t nav_mode)
{
# 165 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
    mavlink_hil_controls_t packet;
    packet.time_usec = time_usec;
    packet.roll_ailerons = roll_ailerons;
    packet.pitch_elevator = pitch_elevator;
    packet.yaw_rudder = yaw_rudder;
    packet.throttle = throttle;
    packet.aux1 = aux1;
    packet.aux2 = aux2;
    packet.aux3 = aux3;
    packet.aux4 = aux4;
    packet.mode = mode;
    packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 91;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 63);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
    return mavlink_msg_hil_controls_pack(system_id, component_id, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
    return mavlink_msg_hil_controls_pack_chan(system_id, component_id, chan, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline void mavlink_msg_hil_controls_send(mavlink_channel_t chan, uint64_t time_usec, float roll_ailerons, float pitch_elevator, float yaw_rudder, float throttle, float aux1, float aux2, float aux3, float aux4, uint8_t mode, uint8_t nav_mode)
{
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
    mavlink_hil_controls_t packet;
    packet.time_usec = time_usec;
    packet.roll_ailerons = roll_ailerons;
    packet.pitch_elevator = pitch_elevator;
    packet.yaw_rudder = yaw_rudder;
    packet.throttle = throttle;
    packet.aux1 = aux1;
    packet.aux2 = aux2;
    packet.aux3 = aux3;
    packet.aux4 = aux4;
    packet.mode = mode;
    packet.nav_mode = nav_mode;

    _mav_finalize_message_chan_send(chan, 91, (const char *)&packet, 42, 42, 63);

}






static inline void mavlink_msg_hil_controls_send_struct(mavlink_channel_t chan, const mavlink_hil_controls_t* hil_controls)
{



    _mav_finalize_message_chan_send(chan, 91, (const char *)hil_controls, 42, 42, 63);

}
# 287 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline void mavlink_msg_hil_controls_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float roll_ailerons, float pitch_elevator, float yaw_rudder, float throttle, float aux1, float aux2, float aux3, float aux4, uint8_t mode, uint8_t nav_mode)
{
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
    mavlink_hil_controls_t *packet = (mavlink_hil_controls_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->roll_ailerons = roll_ailerons;
    packet->pitch_elevator = pitch_elevator;
    packet->yaw_rudder = yaw_rudder;
    packet->throttle = throttle;
    packet->aux1 = aux1;
    packet->aux2 = aux2;
    packet->aux3 = aux3;
    packet->aux4 = aux4;
    packet->mode = mode;
    packet->nav_mode = nav_mode;

    _mav_finalize_message_chan_send(chan, 91, (const char *)packet, 42, 42, 63);

}
# 333 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
static inline uint64_t mavlink_msg_hil_controls_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_controls_get_roll_ailerons(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_controls_get_pitch_elevator(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_controls_get_yaw_rudder(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_controls_get_throttle(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_controls_get_aux1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_controls_get_aux2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_controls_get_aux3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_controls_get_aux4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline uint8_t mavlink_msg_hil_controls_get_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_hil_controls_get_nav_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_hil_controls_decode(const mavlink_message_t* msg, mavlink_hil_controls_t* hil_controls)
{
# 459 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_controls.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(hil_controls, 0, 42);
    memcpy(hil_controls, ((const char *)(&((msg)->payload64[0]))), len);

}
# 969 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h" 1
       




typedef struct __mavlink_hil_rc_inputs_raw_t { uint64_t time_usec; uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint16_t chan9_raw; uint16_t chan10_raw; uint16_t chan11_raw; uint16_t chan12_raw; uint8_t rssi; } __attribute__((packed))
# 22 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
   mavlink_hil_rc_inputs_raw_t;
# 99 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint8_t rssi)
{
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
    mavlink_hil_rc_inputs_raw_t packet;
    packet.time_usec = time_usec;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 92;
    return mavlink_finalize_message(msg, system_id, component_id, 33, 33, 54);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint8_t rssi)
{
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
    mavlink_hil_rc_inputs_raw_t packet;
    packet.time_usec = time_usec;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 92;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 33, 54);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
    return mavlink_msg_hil_rc_inputs_raw_pack(system_id, component_id, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 234 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
    return mavlink_msg_hil_rc_inputs_raw_pack_chan(system_id, component_id, chan, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 260 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline void mavlink_msg_hil_rc_inputs_raw_send(mavlink_channel_t chan, uint64_t time_usec, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint8_t rssi)
{
# 281 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
    mavlink_hil_rc_inputs_raw_t packet;
    packet.time_usec = time_usec;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.rssi = rssi;

    _mav_finalize_message_chan_send(chan, 92, (const char *)&packet, 33, 33, 54);

}






static inline void mavlink_msg_hil_rc_inputs_raw_send_struct(mavlink_channel_t chan, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{



    _mav_finalize_message_chan_send(chan, 92, (const char *)hil_rc_inputs_raw, 33, 33, 54);

}
# 323 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline void mavlink_msg_hil_rc_inputs_raw_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint8_t rssi)
{
# 344 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
    mavlink_hil_rc_inputs_raw_t *packet = (mavlink_hil_rc_inputs_raw_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->chan1_raw = chan1_raw;
    packet->chan2_raw = chan2_raw;
    packet->chan3_raw = chan3_raw;
    packet->chan4_raw = chan4_raw;
    packet->chan5_raw = chan5_raw;
    packet->chan6_raw = chan6_raw;
    packet->chan7_raw = chan7_raw;
    packet->chan8_raw = chan8_raw;
    packet->chan9_raw = chan9_raw;
    packet->chan10_raw = chan10_raw;
    packet->chan11_raw = chan11_raw;
    packet->chan12_raw = chan12_raw;
    packet->rssi = rssi;

    _mav_finalize_message_chan_send(chan, 92, (const char *)packet, 33, 33, 54);

}
# 375 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint64_t mavlink_msg_hil_rc_inputs_raw_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan9_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan10_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan11_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan12_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_hil_rc_inputs_raw_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}







static inline void mavlink_msg_hil_rc_inputs_raw_decode(const mavlink_message_t* msg, mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
# 534 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_rc_inputs_raw.h"
        uint8_t len = msg->len < 33? msg->len : 33;
        memset(hil_rc_inputs_raw, 0, 33);
    memcpy(hil_rc_inputs_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 970 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h" 1
       




typedef struct __mavlink_hil_actuator_controls_t { uint64_t time_usec; uint64_t flags; float controls[16]; uint8_t mode; } __attribute__((packed))





   mavlink_hil_actuator_controls_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *controls, uint8_t mode, uint64_t flags)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
    mavlink_hil_actuator_controls_t packet;
    packet.time_usec = time_usec;
    packet.flags = flags;
    packet.mode = mode;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 81);


    msg->msgid = 93;
    return mavlink_finalize_message(msg, system_id, component_id, 81, 81, 47);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *controls,uint8_t mode,uint64_t flags)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
    mavlink_hil_actuator_controls_t packet;
    packet.time_usec = time_usec;
    packet.flags = flags;
    packet.mode = mode;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 81);


    msg->msgid = 93;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 81, 81, 47);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_actuator_controls_t* hil_actuator_controls)
{
    return mavlink_msg_hil_actuator_controls_pack(system_id, component_id, msg, hil_actuator_controls->time_usec, hil_actuator_controls->controls, hil_actuator_controls->mode, hil_actuator_controls->flags);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_actuator_controls_t* hil_actuator_controls)
{
    return mavlink_msg_hil_actuator_controls_pack_chan(system_id, component_id, chan, msg, hil_actuator_controls->time_usec, hil_actuator_controls->controls, hil_actuator_controls->mode, hil_actuator_controls->flags);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline void mavlink_msg_hil_actuator_controls_send(mavlink_channel_t chan, uint64_t time_usec, const float *controls, uint8_t mode, uint64_t flags)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
    mavlink_hil_actuator_controls_t packet;
    packet.time_usec = time_usec;
    packet.flags = flags;
    packet.mode = mode;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*16);
    _mav_finalize_message_chan_send(chan, 93, (const char *)&packet, 81, 81, 47);

}






static inline void mavlink_msg_hil_actuator_controls_send_struct(mavlink_channel_t chan, const mavlink_hil_actuator_controls_t* hil_actuator_controls)
{



    _mav_finalize_message_chan_send(chan, 93, (const char *)hil_actuator_controls, 81, 81, 47);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline void mavlink_msg_hil_actuator_controls_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, const float *controls, uint8_t mode, uint64_t flags)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
    mavlink_hil_actuator_controls_t *packet = (mavlink_hil_actuator_controls_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->flags = flags;
    packet->mode = mode;
    mav_array_memcpy(packet->controls, controls, sizeof(float)*16);
    _mav_finalize_message_chan_send(chan, 93, (const char *)packet, 81, 81, 47);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_actuator_controls.h"
static inline uint64_t mavlink_msg_hil_actuator_controls_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_actuator_controls_get_controls(const mavlink_message_t* msg, float *controls)
{
    return _MAV_RETURN_float_array(msg, controls, 16, 16);
}






static inline uint8_t mavlink_msg_hil_actuator_controls_get_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[80];
}






static inline uint64_t mavlink_msg_hil_actuator_controls_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_hil_actuator_controls_decode(const mavlink_message_t* msg, mavlink_hil_actuator_controls_t* hil_actuator_controls)
{






        uint8_t len = msg->len < 81? msg->len : 81;
        memset(hil_actuator_controls, 0, 81);
    memcpy(hil_actuator_controls, ((const char *)(&((msg)->payload64[0]))), len);

}
# 971 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h" 1
       




typedef struct __mavlink_optical_flow_t { uint64_t time_usec; float flow_comp_m_x; float flow_comp_m_y; float ground_distance; int16_t flow_x; int16_t flow_y; uint8_t sensor_id; uint8_t quality; float flow_rate_x; float flow_rate_y; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
   mavlink_optical_flow_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t sensor_id, int16_t flow_x, int16_t flow_y, float flow_comp_m_x, float flow_comp_m_y, uint8_t quality, float ground_distance, float flow_rate_x, float flow_rate_y)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
    mavlink_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.flow_comp_m_x = flow_comp_m_x;
    packet.flow_comp_m_y = flow_comp_m_y;
    packet.ground_distance = ground_distance;
    packet.flow_x = flow_x;
    packet.flow_y = flow_y;
    packet.sensor_id = sensor_id;
    packet.quality = quality;
    packet.flow_rate_x = flow_rate_x;
    packet.flow_rate_y = flow_rate_y;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 34);


    msg->msgid = 100;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 34, 175);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t sensor_id,int16_t flow_x,int16_t flow_y,float flow_comp_m_x,float flow_comp_m_y,uint8_t quality,float ground_distance,float flow_rate_x,float flow_rate_y)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
    mavlink_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.flow_comp_m_x = flow_comp_m_x;
    packet.flow_comp_m_y = flow_comp_m_y;
    packet.ground_distance = ground_distance;
    packet.flow_x = flow_x;
    packet.flow_y = flow_y;
    packet.sensor_id = sensor_id;
    packet.quality = quality;
    packet.flow_rate_x = flow_rate_x;
    packet.flow_rate_y = flow_rate_y;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 34);


    msg->msgid = 100;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 34, 175);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
    return mavlink_msg_optical_flow_pack(system_id, component_id, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance, optical_flow->flow_rate_x, optical_flow->flow_rate_y);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
    return mavlink_msg_optical_flow_pack_chan(system_id, component_id, chan, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance, optical_flow->flow_rate_x, optical_flow->flow_rate_y);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline void mavlink_msg_optical_flow_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t sensor_id, int16_t flow_x, int16_t flow_y, float flow_comp_m_x, float flow_comp_m_y, uint8_t quality, float ground_distance, float flow_rate_x, float flow_rate_y)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
    mavlink_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.flow_comp_m_x = flow_comp_m_x;
    packet.flow_comp_m_y = flow_comp_m_y;
    packet.ground_distance = ground_distance;
    packet.flow_x = flow_x;
    packet.flow_y = flow_y;
    packet.sensor_id = sensor_id;
    packet.quality = quality;
    packet.flow_rate_x = flow_rate_x;
    packet.flow_rate_y = flow_rate_y;

    _mav_finalize_message_chan_send(chan, 100, (const char *)&packet, 26, 34, 175);

}






static inline void mavlink_msg_optical_flow_send_struct(mavlink_channel_t chan, const mavlink_optical_flow_t* optical_flow)
{



    _mav_finalize_message_chan_send(chan, 100, (const char *)optical_flow, 26, 34, 175);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline void mavlink_msg_optical_flow_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t sensor_id, int16_t flow_x, int16_t flow_y, float flow_comp_m_x, float flow_comp_m_y, uint8_t quality, float ground_distance, float flow_rate_x, float flow_rate_y)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
    mavlink_optical_flow_t *packet = (mavlink_optical_flow_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->flow_comp_m_x = flow_comp_m_x;
    packet->flow_comp_m_y = flow_comp_m_y;
    packet->ground_distance = ground_distance;
    packet->flow_x = flow_x;
    packet->flow_y = flow_y;
    packet->sensor_id = sensor_id;
    packet->quality = quality;
    packet->flow_rate_x = flow_rate_x;
    packet->flow_rate_y = flow_rate_y;

    _mav_finalize_message_chan_send(chan, 100, (const char *)packet, 26, 34, 175);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
static inline uint64_t mavlink_msg_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline int16_t mavlink_msg_optical_flow_get_flow_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_optical_flow_get_flow_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline uint8_t mavlink_msg_optical_flow_get_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline float mavlink_msg_optical_flow_get_ground_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_optical_flow_get_flow_rate_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 26);
}






static inline float mavlink_msg_optical_flow_get_flow_rate_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 30);
}







static inline void mavlink_msg_optical_flow_decode(const mavlink_message_t* msg, mavlink_optical_flow_t* optical_flow)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow.h"
        uint8_t len = msg->len < 34? msg->len : 34;
        memset(optical_flow, 0, 34);
    memcpy(optical_flow, ((const char *)(&((msg)->payload64[0]))), len);

}
# 972 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h" 1
       




typedef struct __mavlink_global_vision_position_estimate_t { uint64_t usec; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
   mavlink_global_vision_position_estimate_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
    mavlink_global_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 101;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 102);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
    mavlink_global_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 101;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 102);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
    return mavlink_msg_global_vision_position_estimate_pack(system_id, component_id, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
    return mavlink_msg_global_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline void mavlink_msg_global_vision_position_estimate_send(mavlink_channel_t chan, uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
    mavlink_global_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

    _mav_finalize_message_chan_send(chan, 101, (const char *)&packet, 32, 32, 102);

}






static inline void mavlink_msg_global_vision_position_estimate_send_struct(mavlink_channel_t chan, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{



    _mav_finalize_message_chan_send(chan, 101, (const char *)global_vision_position_estimate, 32, 32, 102);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline void mavlink_msg_global_vision_position_estimate_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
    mavlink_global_vision_position_estimate_t *packet = (mavlink_global_vision_position_estimate_t *)msgbuf;
    packet->usec = usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;

    _mav_finalize_message_chan_send(chan, 101, (const char *)packet, 32, 32, 102);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint64_t mavlink_msg_global_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_global_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_global_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_global_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_global_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_global_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_global_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_global_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_global_vision_position_estimate.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(global_vision_position_estimate, 0, 32);
    memcpy(global_vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 973 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h" 1
       




typedef struct __mavlink_vision_position_estimate_t { uint64_t usec; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
   mavlink_vision_position_estimate_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
    mavlink_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 102;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 158);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
    mavlink_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 102;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 158);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
    return mavlink_msg_vision_position_estimate_pack(system_id, component_id, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
    return mavlink_msg_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline void mavlink_msg_vision_position_estimate_send(mavlink_channel_t chan, uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
    mavlink_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

    _mav_finalize_message_chan_send(chan, 102, (const char *)&packet, 32, 32, 158);

}






static inline void mavlink_msg_vision_position_estimate_send_struct(mavlink_channel_t chan, const mavlink_vision_position_estimate_t* vision_position_estimate)
{



    _mav_finalize_message_chan_send(chan, 102, (const char *)vision_position_estimate, 32, 32, 158);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline void mavlink_msg_vision_position_estimate_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
    mavlink_vision_position_estimate_t *packet = (mavlink_vision_position_estimate_t *)msgbuf;
    packet->usec = usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;

    _mav_finalize_message_chan_send(chan, 102, (const char *)packet, 32, 32, 158);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
static inline uint64_t mavlink_msg_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_vision_position_estimate_t* vision_position_estimate)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_position_estimate.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(vision_position_estimate, 0, 32);
    memcpy(vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 974 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h" 1
       




typedef struct __mavlink_vision_speed_estimate_t { uint64_t usec; float x; float y; float z; } __attribute__((packed))





   mavlink_vision_speed_estimate_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
    mavlink_vision_speed_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 103;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 208);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
    mavlink_vision_speed_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 103;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 208);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
    return mavlink_msg_vision_speed_estimate_pack(system_id, component_id, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
    return mavlink_msg_vision_speed_estimate_pack_chan(system_id, component_id, chan, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline void mavlink_msg_vision_speed_estimate_send(mavlink_channel_t chan, uint64_t usec, float x, float y, float z)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
    mavlink_vision_speed_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;

    _mav_finalize_message_chan_send(chan, 103, (const char *)&packet, 20, 20, 208);

}






static inline void mavlink_msg_vision_speed_estimate_send_struct(mavlink_channel_t chan, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{



    _mav_finalize_message_chan_send(chan, 103, (const char *)vision_speed_estimate, 20, 20, 208);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline void mavlink_msg_vision_speed_estimate_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t usec, float x, float y, float z)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
    mavlink_vision_speed_estimate_t *packet = (mavlink_vision_speed_estimate_t *)msgbuf;
    packet->usec = usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;

    _mav_finalize_message_chan_send(chan, 103, (const char *)packet, 20, 20, 208);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vision_speed_estimate.h"
static inline uint64_t mavlink_msg_vision_speed_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_speed_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_speed_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_speed_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_vision_speed_estimate_decode(const mavlink_message_t* msg, mavlink_vision_speed_estimate_t* vision_speed_estimate)
{






        uint8_t len = msg->len < 20? msg->len : 20;
        memset(vision_speed_estimate, 0, 20);
    memcpy(vision_speed_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 975 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h" 1
       




typedef struct __mavlink_vicon_position_estimate_t { uint64_t usec; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
   mavlink_vicon_position_estimate_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
    mavlink_vicon_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 104;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 56);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
    mavlink_vicon_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 104;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 56);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
    return mavlink_msg_vicon_position_estimate_pack(system_id, component_id, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
    return mavlink_msg_vicon_position_estimate_pack_chan(system_id, component_id, chan, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline void mavlink_msg_vicon_position_estimate_send(mavlink_channel_t chan, uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
    mavlink_vicon_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

    _mav_finalize_message_chan_send(chan, 104, (const char *)&packet, 32, 32, 56);

}






static inline void mavlink_msg_vicon_position_estimate_send_struct(mavlink_channel_t chan, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{



    _mav_finalize_message_chan_send(chan, 104, (const char *)vicon_position_estimate, 32, 32, 56);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline void mavlink_msg_vicon_position_estimate_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
    mavlink_vicon_position_estimate_t *packet = (mavlink_vicon_position_estimate_t *)msgbuf;
    packet->usec = usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;

    _mav_finalize_message_chan_send(chan, 104, (const char *)packet, 32, 32, 56);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
static inline uint64_t mavlink_msg_vicon_position_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vicon_position_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vicon_position_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vicon_position_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vicon_position_estimate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vicon_position_estimate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vicon_position_estimate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vicon_position_estimate_decode(const mavlink_message_t* msg, mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vicon_position_estimate.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(vicon_position_estimate, 0, 32);
    memcpy(vicon_position_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 976 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h" 1
       




typedef struct __mavlink_highres_imu_t { uint64_t time_usec; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; float xmag; float ymag; float zmag; float abs_pressure; float diff_pressure; float pressure_alt; float temperature; uint16_t fields_updated; } __attribute__((packed))
# 23 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
   mavlink_highres_imu_t;
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint16_t fields_updated)
{
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
    mavlink_highres_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


    msg->msgid = 105;
    return mavlink_finalize_message(msg, system_id, component_id, 62, 62, 93);
}
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint16_t fields_updated)
{
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
    mavlink_highres_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


    msg->msgid = 105;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 62, 62, 93);
}
# 229 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
    return mavlink_msg_highres_imu_pack(system_id, component_id, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 243 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
    return mavlink_msg_highres_imu_pack_chan(system_id, component_id, chan, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline void mavlink_msg_highres_imu_send(mavlink_channel_t chan, uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint16_t fields_updated)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
    mavlink_highres_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

    _mav_finalize_message_chan_send(chan, 105, (const char *)&packet, 62, 62, 93);

}






static inline void mavlink_msg_highres_imu_send_struct(mavlink_channel_t chan, const mavlink_highres_imu_t* highres_imu)
{



    _mav_finalize_message_chan_send(chan, 105, (const char *)highres_imu, 62, 62, 93);

}
# 335 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline void mavlink_msg_highres_imu_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint16_t fields_updated)
{
# 357 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
    mavlink_highres_imu_t *packet = (mavlink_highres_imu_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->xmag = xmag;
    packet->ymag = ymag;
    packet->zmag = zmag;
    packet->abs_pressure = abs_pressure;
    packet->diff_pressure = diff_pressure;
    packet->pressure_alt = pressure_alt;
    packet->temperature = temperature;
    packet->fields_updated = fields_updated;

    _mav_finalize_message_chan_send(chan, 105, (const char *)packet, 62, 62, 93);

}
# 389 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
static inline uint64_t mavlink_msg_highres_imu_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_highres_imu_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_highres_imu_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_highres_imu_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_highres_imu_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_highres_imu_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_highres_imu_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_highres_imu_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_highres_imu_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_highres_imu_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_highres_imu_get_abs_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_highres_imu_get_diff_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_highres_imu_get_pressure_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_highres_imu_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 56);
}






static inline uint16_t mavlink_msg_highres_imu_get_fields_updated(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 60);
}







static inline void mavlink_msg_highres_imu_decode(const mavlink_message_t* msg, mavlink_highres_imu_t* highres_imu)
{
# 559 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_highres_imu.h"
        uint8_t len = msg->len < 62? msg->len : 62;
        memset(highres_imu, 0, 62);
    memcpy(highres_imu, ((const char *)(&((msg)->payload64[0]))), len);

}
# 977 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h" 1
       




typedef struct __mavlink_optical_flow_rad_t { uint64_t time_usec; uint32_t integration_time_us; float integrated_x; float integrated_y; float integrated_xgyro; float integrated_ygyro; float integrated_zgyro; uint32_t time_delta_distance_us; float distance; int16_t temperature; uint8_t sensor_id; uint8_t quality; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
   mavlink_optical_flow_rad_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
    mavlink_optical_flow_rad_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 106;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 138);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
    mavlink_optical_flow_rad_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 106;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 138);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
    return mavlink_msg_optical_flow_rad_pack(system_id, component_id, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
    return mavlink_msg_optical_flow_rad_pack_chan(system_id, component_id, chan, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline void mavlink_msg_optical_flow_rad_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
    mavlink_optical_flow_rad_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

    _mav_finalize_message_chan_send(chan, 106, (const char *)&packet, 44, 44, 138);

}






static inline void mavlink_msg_optical_flow_rad_send_struct(mavlink_channel_t chan, const mavlink_optical_flow_rad_t* optical_flow_rad)
{



    _mav_finalize_message_chan_send(chan, 106, (const char *)optical_flow_rad, 44, 44, 138);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline void mavlink_msg_optical_flow_rad_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
    mavlink_optical_flow_rad_t *packet = (mavlink_optical_flow_rad_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->integration_time_us = integration_time_us;
    packet->integrated_x = integrated_x;
    packet->integrated_y = integrated_y;
    packet->integrated_xgyro = integrated_xgyro;
    packet->integrated_ygyro = integrated_ygyro;
    packet->integrated_zgyro = integrated_zgyro;
    packet->time_delta_distance_us = time_delta_distance_us;
    packet->distance = distance;
    packet->temperature = temperature;
    packet->sensor_id = sensor_id;
    packet->quality = quality;

    _mav_finalize_message_chan_send(chan, 106, (const char *)packet, 44, 44, 138);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
static inline uint64_t mavlink_msg_optical_flow_rad_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_sensor_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_integration_time_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_optical_flow_rad_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_time_delta_distance_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_optical_flow_rad_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_optical_flow_rad_decode(const mavlink_message_t* msg, mavlink_optical_flow_rad_t* optical_flow_rad)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_optical_flow_rad.h"
        uint8_t len = msg->len < 44? msg->len : 44;
        memset(optical_flow_rad, 0, 44);
    memcpy(optical_flow_rad, ((const char *)(&((msg)->payload64[0]))), len);

}
# 978 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h" 1
       




typedef struct __mavlink_hil_sensor_t { uint64_t time_usec; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; float xmag; float ymag; float zmag; float abs_pressure; float diff_pressure; float pressure_alt; float temperature; uint32_t fields_updated; } __attribute__((packed))
# 23 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
   mavlink_hil_sensor_t;
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint32_t fields_updated)
{
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
    mavlink_hil_sensor_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 107;
    return mavlink_finalize_message(msg, system_id, component_id, 64, 64, 108);
}
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint32_t fields_updated)
{
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
    mavlink_hil_sensor_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 107;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 64, 108);
}
# 229 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
    return mavlink_msg_hil_sensor_pack(system_id, component_id, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 243 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
    return mavlink_msg_hil_sensor_pack_chan(system_id, component_id, chan, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline void mavlink_msg_hil_sensor_send(mavlink_channel_t chan, uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint32_t fields_updated)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
    mavlink_hil_sensor_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

    _mav_finalize_message_chan_send(chan, 107, (const char *)&packet, 64, 64, 108);

}






static inline void mavlink_msg_hil_sensor_send_struct(mavlink_channel_t chan, const mavlink_hil_sensor_t* hil_sensor)
{



    _mav_finalize_message_chan_send(chan, 107, (const char *)hil_sensor, 64, 64, 108);

}
# 335 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline void mavlink_msg_hil_sensor_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint32_t fields_updated)
{
# 357 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
    mavlink_hil_sensor_t *packet = (mavlink_hil_sensor_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->xmag = xmag;
    packet->ymag = ymag;
    packet->zmag = zmag;
    packet->abs_pressure = abs_pressure;
    packet->diff_pressure = diff_pressure;
    packet->pressure_alt = pressure_alt;
    packet->temperature = temperature;
    packet->fields_updated = fields_updated;

    _mav_finalize_message_chan_send(chan, 107, (const char *)packet, 64, 64, 108);

}
# 389 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
static inline uint64_t mavlink_msg_hil_sensor_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_sensor_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_sensor_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_sensor_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_sensor_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_sensor_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_sensor_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_sensor_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_sensor_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_hil_sensor_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_hil_sensor_get_abs_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_hil_sensor_get_diff_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_hil_sensor_get_pressure_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_hil_sensor_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 56);
}






static inline uint32_t mavlink_msg_hil_sensor_get_fields_updated(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 60);
}







static inline void mavlink_msg_hil_sensor_decode(const mavlink_message_t* msg, mavlink_hil_sensor_t* hil_sensor)
{
# 559 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_sensor.h"
        uint8_t len = msg->len < 64? msg->len : 64;
        memset(hil_sensor, 0, 64);
    memcpy(hil_sensor, ((const char *)(&((msg)->payload64[0]))), len);

}
# 979 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h" 1
       




typedef struct __mavlink_sim_state_t { float q1; float q2; float q3; float q4; float roll; float pitch; float yaw; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; float lat; float lon; float alt; float std_dev_horz; float std_dev_vert; float vn; float ve; float vd; } __attribute__((packed))
# 29 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
   mavlink_sim_state_t;
# 127 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd)
{
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
    mavlink_sim_state_t packet;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.std_dev_horz = std_dev_horz;
    packet.std_dev_vert = std_dev_vert;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


    msg->msgid = 108;
    return mavlink_finalize_message(msg, system_id, component_id, 84, 84, 32);
}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float q1,float q2,float q3,float q4,float roll,float pitch,float yaw,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float lat,float lon,float alt,float std_dev_horz,float std_dev_vert,float vn,float ve,float vd)
{
# 245 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
    mavlink_sim_state_t packet;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.std_dev_horz = std_dev_horz;
    packet.std_dev_vert = std_dev_vert;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


    msg->msgid = 108;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 84, 84, 32);
}
# 283 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
    return mavlink_msg_sim_state_pack(system_id, component_id, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
    return mavlink_msg_sim_state_pack_chan(system_id, component_id, chan, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 330 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline void mavlink_msg_sim_state_send(mavlink_channel_t chan, float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd)
{
# 358 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
    mavlink_sim_state_t packet;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.std_dev_horz = std_dev_horz;
    packet.std_dev_vert = std_dev_vert;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;

    _mav_finalize_message_chan_send(chan, 108, (const char *)&packet, 84, 84, 32);

}






static inline void mavlink_msg_sim_state_send_struct(mavlink_channel_t chan, const mavlink_sim_state_t* sim_state)
{



    _mav_finalize_message_chan_send(chan, 108, (const char *)sim_state, 84, 84, 32);

}
# 407 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline void mavlink_msg_sim_state_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd)
{
# 435 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
    mavlink_sim_state_t *packet = (mavlink_sim_state_t *)msgbuf;
    packet->q1 = q1;
    packet->q2 = q2;
    packet->q3 = q3;
    packet->q4 = q4;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->std_dev_horz = std_dev_horz;
    packet->std_dev_vert = std_dev_vert;
    packet->vn = vn;
    packet->ve = ve;
    packet->vd = vd;

    _mav_finalize_message_chan_send(chan, 108, (const char *)packet, 84, 84, 32);

}
# 473 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
static inline float mavlink_msg_sim_state_get_q1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_sim_state_get_q2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_sim_state_get_q3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_sim_state_get_q4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_sim_state_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_sim_state_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_sim_state_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_sim_state_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_sim_state_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_sim_state_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_sim_state_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_sim_state_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_sim_state_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_sim_state_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_sim_state_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 56);
}






static inline float mavlink_msg_sim_state_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 60);
}






static inline float mavlink_msg_sim_state_get_std_dev_horz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 64);
}






static inline float mavlink_msg_sim_state_get_std_dev_vert(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 68);
}






static inline float mavlink_msg_sim_state_get_vn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 72);
}






static inline float mavlink_msg_sim_state_get_ve(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 76);
}






static inline float mavlink_msg_sim_state_get_vd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 80);
}







static inline void mavlink_msg_sim_state_decode(const mavlink_message_t* msg, mavlink_sim_state_t* sim_state)
{
# 709 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_sim_state.h"
        uint8_t len = msg->len < 84? msg->len : 84;
        memset(sim_state, 0, 84);
    memcpy(sim_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 980 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h" 1
       




typedef struct __mavlink_radio_status_t { uint16_t rxerrors; uint16_t fixed; uint8_t rssi; uint8_t remrssi; uint8_t txbuf; uint8_t noise; uint8_t remnoise; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
   mavlink_radio_status_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
    mavlink_radio_status_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 109;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 185);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t rssi,uint8_t remrssi,uint8_t txbuf,uint8_t noise,uint8_t remnoise,uint16_t rxerrors,uint16_t fixed)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
    mavlink_radio_status_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 109;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 185);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
    return mavlink_msg_radio_status_pack(system_id, component_id, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
    return mavlink_msg_radio_status_pack_chan(system_id, component_id, chan, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline void mavlink_msg_radio_status_send(mavlink_channel_t chan, uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
    mavlink_radio_status_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

    _mav_finalize_message_chan_send(chan, 109, (const char *)&packet, 9, 9, 185);

}






static inline void mavlink_msg_radio_status_send_struct(mavlink_channel_t chan, const mavlink_radio_status_t* radio_status)
{



    _mav_finalize_message_chan_send(chan, 109, (const char *)radio_status, 9, 9, 185);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline void mavlink_msg_radio_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
    mavlink_radio_status_t *packet = (mavlink_radio_status_t *)msgbuf;
    packet->rxerrors = rxerrors;
    packet->fixed = fixed;
    packet->rssi = rssi;
    packet->remrssi = remrssi;
    packet->txbuf = txbuf;
    packet->noise = noise;
    packet->remnoise = remnoise;

    _mav_finalize_message_chan_send(chan, 109, (const char *)packet, 9, 9, 185);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
static inline uint8_t mavlink_msg_radio_status_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_radio_status_get_remrssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_radio_status_get_txbuf(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_radio_status_get_noise(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_radio_status_get_remnoise(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_radio_status_get_rxerrors(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_radio_status_get_fixed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_radio_status_decode(const mavlink_message_t* msg, mavlink_radio_status_t* radio_status)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_radio_status.h"
        uint8_t len = msg->len < 9? msg->len : 9;
        memset(radio_status, 0, 9);
    memcpy(radio_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 981 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h" 1
       




typedef struct __mavlink_file_transfer_protocol_t { uint8_t target_network; uint8_t target_system; uint8_t target_component; uint8_t payload[251]; } __attribute__((packed))





   mavlink_file_transfer_protocol_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 110;
    return mavlink_finalize_message(msg, system_id, component_id, 254, 254, 84);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_network,uint8_t target_system,uint8_t target_component,const uint8_t *payload)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 110;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 254, 84);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
    return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
    return mavlink_msg_file_transfer_protocol_pack_chan(system_id, component_id, chan, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline void mavlink_msg_file_transfer_protocol_send(mavlink_channel_t chan, uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
    _mav_finalize_message_chan_send(chan, 110, (const char *)&packet, 254, 254, 84);

}






static inline void mavlink_msg_file_transfer_protocol_send_struct(mavlink_channel_t chan, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{



    _mav_finalize_message_chan_send(chan, 110, (const char *)file_transfer_protocol, 254, 254, 84);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline void mavlink_msg_file_transfer_protocol_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
    mavlink_file_transfer_protocol_t *packet = (mavlink_file_transfer_protocol_t *)msgbuf;
    packet->target_network = target_network;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->payload, payload, sizeof(uint8_t)*251);
    _mav_finalize_message_chan_send(chan, 110, (const char *)packet, 254, 254, 84);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_file_transfer_protocol.h"
static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_network(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_file_transfer_protocol_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
    return _MAV_RETURN_uint8_t_array(msg, payload, 251, 3);
}







static inline void mavlink_msg_file_transfer_protocol_decode(const mavlink_message_t* msg, mavlink_file_transfer_protocol_t* file_transfer_protocol)
{






        uint8_t len = msg->len < 254? msg->len : 254;
        memset(file_transfer_protocol, 0, 254);
    memcpy(file_transfer_protocol, ((const char *)(&((msg)->payload64[0]))), len);

}
# 982 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h" 1
       




typedef struct __mavlink_timesync_t { int64_t tc1; int64_t ts1; } __attribute__((packed))



   mavlink_timesync_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int64_t tc1, int64_t ts1)
{







    mavlink_timesync_t packet;
    packet.tc1 = tc1;
    packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 111;
    return mavlink_finalize_message(msg, system_id, component_id, 16, 16, 34);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int64_t tc1,int64_t ts1)
{







    mavlink_timesync_t packet;
    packet.tc1 = tc1;
    packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 111;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 16, 34);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
    return mavlink_msg_timesync_pack(system_id, component_id, msg, timesync->tc1, timesync->ts1);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
    return mavlink_msg_timesync_pack_chan(system_id, component_id, chan, msg, timesync->tc1, timesync->ts1);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline void mavlink_msg_timesync_send(mavlink_channel_t chan, int64_t tc1, int64_t ts1)
{







    mavlink_timesync_t packet;
    packet.tc1 = tc1;
    packet.ts1 = ts1;

    _mav_finalize_message_chan_send(chan, 111, (const char *)&packet, 16, 16, 34);

}






static inline void mavlink_msg_timesync_send_struct(mavlink_channel_t chan, const mavlink_timesync_t* timesync)
{



    _mav_finalize_message_chan_send(chan, 111, (const char *)timesync, 16, 16, 34);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline void mavlink_msg_timesync_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int64_t tc1, int64_t ts1)
{







    mavlink_timesync_t *packet = (mavlink_timesync_t *)msgbuf;
    packet->tc1 = tc1;
    packet->ts1 = ts1;

    _mav_finalize_message_chan_send(chan, 111, (const char *)packet, 16, 16, 34);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_timesync.h"
static inline int64_t mavlink_msg_timesync_get_tc1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int64_t(msg, 0);
}






static inline int64_t mavlink_msg_timesync_get_ts1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int64_t(msg, 8);
}







static inline void mavlink_msg_timesync_decode(const mavlink_message_t* msg, mavlink_timesync_t* timesync)
{




        uint8_t len = msg->len < 16? msg->len : 16;
        memset(timesync, 0, 16);
    memcpy(timesync, ((const char *)(&((msg)->payload64[0]))), len);

}
# 983 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h" 1
       




typedef struct __mavlink_camera_trigger_t { uint64_t time_usec; uint32_t seq; } __attribute__((packed))



   mavlink_camera_trigger_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint32_t seq)
{







    mavlink_camera_trigger_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 112;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 174);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint32_t seq)
{







    mavlink_camera_trigger_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 112;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 174);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
    return mavlink_msg_camera_trigger_pack(system_id, component_id, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
    return mavlink_msg_camera_trigger_pack_chan(system_id, component_id, chan, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline void mavlink_msg_camera_trigger_send(mavlink_channel_t chan, uint64_t time_usec, uint32_t seq)
{







    mavlink_camera_trigger_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;

    _mav_finalize_message_chan_send(chan, 112, (const char *)&packet, 12, 12, 174);

}






static inline void mavlink_msg_camera_trigger_send_struct(mavlink_channel_t chan, const mavlink_camera_trigger_t* camera_trigger)
{



    _mav_finalize_message_chan_send(chan, 112, (const char *)camera_trigger, 12, 12, 174);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline void mavlink_msg_camera_trigger_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint32_t seq)
{







    mavlink_camera_trigger_t *packet = (mavlink_camera_trigger_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->seq = seq;

    _mav_finalize_message_chan_send(chan, 112, (const char *)packet, 12, 12, 174);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_trigger.h"
static inline uint64_t mavlink_msg_camera_trigger_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_camera_trigger_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_camera_trigger_decode(const mavlink_message_t* msg, mavlink_camera_trigger_t* camera_trigger)
{




        uint8_t len = msg->len < 12? msg->len : 12;
        memset(camera_trigger, 0, 12);
    memcpy(camera_trigger, ((const char *)(&((msg)->payload64[0]))), len);

}
# 984 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h" 1
       




typedef struct __mavlink_hil_gps_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; uint16_t eph; uint16_t epv; uint16_t vel; int16_t vn; int16_t ve; int16_t vd; uint16_t cog; uint8_t fix_type; uint8_t satellites_visible; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
   mavlink_hil_gps_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, int16_t vn, int16_t ve, int16_t vd, uint16_t cog, uint8_t satellites_visible)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
    mavlink_hil_gps_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 113;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 124);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,int16_t vn,int16_t ve,int16_t vd,uint16_t cog,uint8_t satellites_visible)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
    mavlink_hil_gps_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 113;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 124);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
    return mavlink_msg_hil_gps_pack(system_id, component_id, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
    return mavlink_msg_hil_gps_pack_chan(system_id, component_id, chan, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline void mavlink_msg_hil_gps_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, int16_t vn, int16_t ve, int16_t vd, uint16_t cog, uint8_t satellites_visible)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
    mavlink_hil_gps_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

    _mav_finalize_message_chan_send(chan, 113, (const char *)&packet, 36, 36, 124);

}






static inline void mavlink_msg_hil_gps_send_struct(mavlink_channel_t chan, const mavlink_hil_gps_t* hil_gps)
{



    _mav_finalize_message_chan_send(chan, 113, (const char *)hil_gps, 36, 36, 124);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline void mavlink_msg_hil_gps_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, int16_t vn, int16_t ve, int16_t vd, uint16_t cog, uint8_t satellites_visible)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
    mavlink_hil_gps_t *packet = (mavlink_hil_gps_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->eph = eph;
    packet->epv = epv;
    packet->vel = vel;
    packet->vn = vn;
    packet->ve = ve;
    packet->vd = vd;
    packet->cog = cog;
    packet->fix_type = fix_type;
    packet->satellites_visible = satellites_visible;

    _mav_finalize_message_chan_send(chan, 113, (const char *)packet, 36, 36, 124);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
static inline uint64_t mavlink_msg_hil_gps_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_gps_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_hil_gps_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_hil_gps_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_hil_gps_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_gps_get_eph(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_gps_get_epv(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_gps_get_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline int16_t mavlink_msg_hil_gps_get_vn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 26);
}






static inline int16_t mavlink_msg_hil_gps_get_ve(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 28);
}






static inline int16_t mavlink_msg_hil_gps_get_vd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 30);
}






static inline uint16_t mavlink_msg_hil_gps_get_cog(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint8_t mavlink_msg_hil_gps_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_hil_gps_decode(const mavlink_message_t* msg, mavlink_hil_gps_t* hil_gps)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_gps.h"
        uint8_t len = msg->len < 36? msg->len : 36;
        memset(hil_gps, 0, 36);
    memcpy(hil_gps, ((const char *)(&((msg)->payload64[0]))), len);

}
# 985 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h" 1
       




typedef struct __mavlink_hil_optical_flow_t { uint64_t time_usec; uint32_t integration_time_us; float integrated_x; float integrated_y; float integrated_xgyro; float integrated_ygyro; float integrated_zgyro; uint32_t time_delta_distance_us; float distance; int16_t temperature; uint8_t sensor_id; uint8_t quality; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
   mavlink_hil_optical_flow_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
    mavlink_hil_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 114;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 237);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
    mavlink_hil_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 114;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 237);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
    return mavlink_msg_hil_optical_flow_pack(system_id, component_id, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
    return mavlink_msg_hil_optical_flow_pack_chan(system_id, component_id, chan, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline void mavlink_msg_hil_optical_flow_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
    mavlink_hil_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

    _mav_finalize_message_chan_send(chan, 114, (const char *)&packet, 44, 44, 237);

}






static inline void mavlink_msg_hil_optical_flow_send_struct(mavlink_channel_t chan, const mavlink_hil_optical_flow_t* hil_optical_flow)
{



    _mav_finalize_message_chan_send(chan, 114, (const char *)hil_optical_flow, 44, 44, 237);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline void mavlink_msg_hil_optical_flow_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
    mavlink_hil_optical_flow_t *packet = (mavlink_hil_optical_flow_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->integration_time_us = integration_time_us;
    packet->integrated_x = integrated_x;
    packet->integrated_y = integrated_y;
    packet->integrated_xgyro = integrated_xgyro;
    packet->integrated_ygyro = integrated_ygyro;
    packet->integrated_zgyro = integrated_zgyro;
    packet->time_delta_distance_us = time_delta_distance_us;
    packet->distance = distance;
    packet->temperature = temperature;
    packet->sensor_id = sensor_id;
    packet->quality = quality;

    _mav_finalize_message_chan_send(chan, 114, (const char *)packet, 44, 44, 237);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
static inline uint64_t mavlink_msg_hil_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_integration_time_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_hil_optical_flow_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_time_delta_distance_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_hil_optical_flow_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_hil_optical_flow_decode(const mavlink_message_t* msg, mavlink_hil_optical_flow_t* hil_optical_flow)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_optical_flow.h"
        uint8_t len = msg->len < 44? msg->len : 44;
        memset(hil_optical_flow, 0, 44);
    memcpy(hil_optical_flow, ((const char *)(&((msg)->payload64[0]))), len);

}
# 986 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h" 1
       




typedef struct __mavlink_hil_state_quaternion_t { uint64_t time_usec; float attitude_quaternion[4]; float rollspeed; float pitchspeed; float yawspeed; int32_t lat; int32_t lon; int32_t alt; int16_t vx; int16_t vy; int16_t vz; uint16_t ind_airspeed; uint16_t true_airspeed; int16_t xacc; int16_t yacc; int16_t zacc; } __attribute__((packed))
# 24 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
   mavlink_hil_state_quaternion_t;
# 107 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *attitude_quaternion, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, uint16_t ind_airspeed, uint16_t true_airspeed, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
    mavlink_hil_state_quaternion_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ind_airspeed = ind_airspeed;
    packet.true_airspeed = true_airspeed;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 115;
    return mavlink_finalize_message(msg, system_id, component_id, 64, 64, 4);
}
# 178 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *attitude_quaternion,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,uint16_t ind_airspeed,uint16_t true_airspeed,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
    mavlink_hil_state_quaternion_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ind_airspeed = ind_airspeed;
    packet.true_airspeed = true_airspeed;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 115;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 64, 4);
}
# 234 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
    return mavlink_msg_hil_state_quaternion_pack(system_id, component_id, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 248 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
    return mavlink_msg_hil_state_quaternion_pack_chan(system_id, component_id, chan, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 276 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline void mavlink_msg_hil_state_quaternion_send(mavlink_channel_t chan, uint64_t time_usec, const float *attitude_quaternion, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, uint16_t ind_airspeed, uint16_t true_airspeed, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 298 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
    mavlink_hil_state_quaternion_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ind_airspeed = ind_airspeed;
    packet.true_airspeed = true_airspeed;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 115, (const char *)&packet, 64, 64, 4);

}






static inline void mavlink_msg_hil_state_quaternion_send_struct(mavlink_channel_t chan, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{



    _mav_finalize_message_chan_send(chan, 115, (const char *)hil_state_quaternion, 64, 64, 4);

}
# 341 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline void mavlink_msg_hil_state_quaternion_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, const float *attitude_quaternion, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, uint16_t ind_airspeed, uint16_t true_airspeed, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 363 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
    mavlink_hil_state_quaternion_t *packet = (mavlink_hil_state_quaternion_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->rollspeed = rollspeed;
    packet->pitchspeed = pitchspeed;
    packet->yawspeed = yawspeed;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->vx = vx;
    packet->vy = vy;
    packet->vz = vz;
    packet->ind_airspeed = ind_airspeed;
    packet->true_airspeed = true_airspeed;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    mav_array_memcpy(packet->attitude_quaternion, attitude_quaternion, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 115, (const char *)packet, 64, 64, 4);

}
# 395 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
static inline uint64_t mavlink_msg_hil_state_quaternion_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_attitude_quaternion(const mavlink_message_t* msg, float *attitude_quaternion)
{
    return _MAV_RETURN_float_array(msg, attitude_quaternion, 4, 8);
}






static inline float mavlink_msg_hil_state_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_state_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 40);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 52);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_ind_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 54);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_true_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 56);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 58);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 60);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 62);
}







static inline void mavlink_msg_hil_state_quaternion_decode(const mavlink_message_t* msg, mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
# 576 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_hil_state_quaternion.h"
        uint8_t len = msg->len < 64? msg->len : 64;
        memset(hil_state_quaternion, 0, 64);
    memcpy(hil_state_quaternion, ((const char *)(&((msg)->payload64[0]))), len);

}
# 987 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h" 1
       




typedef struct __mavlink_scaled_imu2_t { uint32_t time_boot_ms; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
   mavlink_scaled_imu2_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
    mavlink_scaled_imu2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 116;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 76);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
    mavlink_scaled_imu2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 116;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 76);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
    return mavlink_msg_scaled_imu2_pack(system_id, component_id, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
    return mavlink_msg_scaled_imu2_pack_chan(system_id, component_id, chan, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline void mavlink_msg_scaled_imu2_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
    mavlink_scaled_imu2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

    _mav_finalize_message_chan_send(chan, 116, (const char *)&packet, 22, 22, 76);

}






static inline void mavlink_msg_scaled_imu2_send_struct(mavlink_channel_t chan, const mavlink_scaled_imu2_t* scaled_imu2)
{



    _mav_finalize_message_chan_send(chan, 116, (const char *)scaled_imu2, 22, 22, 76);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline void mavlink_msg_scaled_imu2_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
    mavlink_scaled_imu2_t *packet = (mavlink_scaled_imu2_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->xmag = xmag;
    packet->ymag = ymag;
    packet->zmag = zmag;

    _mav_finalize_message_chan_send(chan, 116, (const char *)packet, 22, 22, 76);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
static inline uint32_t mavlink_msg_scaled_imu2_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu2_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu2_decode(const mavlink_message_t* msg, mavlink_scaled_imu2_t* scaled_imu2)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu2.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(scaled_imu2, 0, 22);
    memcpy(scaled_imu2, ((const char *)(&((msg)->payload64[0]))), len);

}
# 988 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h" 1
       




typedef struct __mavlink_log_request_list_t { uint16_t start; uint16_t end; uint8_t target_system; uint8_t target_component; } __attribute__((packed))





   mavlink_log_request_list_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t start, uint16_t end)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
    mavlink_log_request_list_t packet;
    packet.start = start;
    packet.end = end;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 117;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 128);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t start,uint16_t end)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
    mavlink_log_request_list_t packet;
    packet.start = start;
    packet.end = end;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 117;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 128);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
    return mavlink_msg_log_request_list_pack(system_id, component_id, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
    return mavlink_msg_log_request_list_pack_chan(system_id, component_id, chan, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline void mavlink_msg_log_request_list_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t start, uint16_t end)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
    mavlink_log_request_list_t packet;
    packet.start = start;
    packet.end = end;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 117, (const char *)&packet, 6, 6, 128);

}






static inline void mavlink_msg_log_request_list_send_struct(mavlink_channel_t chan, const mavlink_log_request_list_t* log_request_list)
{



    _mav_finalize_message_chan_send(chan, 117, (const char *)log_request_list, 6, 6, 128);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline void mavlink_msg_log_request_list_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t start, uint16_t end)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
    mavlink_log_request_list_t *packet = (mavlink_log_request_list_t *)msgbuf;
    packet->start = start;
    packet->end = end;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 117, (const char *)packet, 6, 6, 128);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_list.h"
static inline uint8_t mavlink_msg_log_request_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_log_request_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_log_request_list_get_start(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_log_request_list_get_end(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_log_request_list_decode(const mavlink_message_t* msg, mavlink_log_request_list_t* log_request_list)
{






        uint8_t len = msg->len < 6? msg->len : 6;
        memset(log_request_list, 0, 6);
    memcpy(log_request_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 989 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h" 1
       




typedef struct __mavlink_log_entry_t { uint32_t time_utc; uint32_t size; uint16_t id; uint16_t num_logs; uint16_t last_log_num; } __attribute__((packed))






   mavlink_log_entry_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t id, uint16_t num_logs, uint16_t last_log_num, uint32_t time_utc, uint32_t size)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
    mavlink_log_entry_t packet;
    packet.time_utc = time_utc;
    packet.size = size;
    packet.id = id;
    packet.num_logs = num_logs;
    packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 118;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 56);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t id,uint16_t num_logs,uint16_t last_log_num,uint32_t time_utc,uint32_t size)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
    mavlink_log_entry_t packet;
    packet.time_utc = time_utc;
    packet.size = size;
    packet.id = id;
    packet.num_logs = num_logs;
    packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 118;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 56);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
    return mavlink_msg_log_entry_pack(system_id, component_id, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
    return mavlink_msg_log_entry_pack_chan(system_id, component_id, chan, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline void mavlink_msg_log_entry_send(mavlink_channel_t chan, uint16_t id, uint16_t num_logs, uint16_t last_log_num, uint32_t time_utc, uint32_t size)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
    mavlink_log_entry_t packet;
    packet.time_utc = time_utc;
    packet.size = size;
    packet.id = id;
    packet.num_logs = num_logs;
    packet.last_log_num = last_log_num;

    _mav_finalize_message_chan_send(chan, 118, (const char *)&packet, 14, 14, 56);

}






static inline void mavlink_msg_log_entry_send_struct(mavlink_channel_t chan, const mavlink_log_entry_t* log_entry)
{



    _mav_finalize_message_chan_send(chan, 118, (const char *)log_entry, 14, 14, 56);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline void mavlink_msg_log_entry_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t id, uint16_t num_logs, uint16_t last_log_num, uint32_t time_utc, uint32_t size)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
    mavlink_log_entry_t *packet = (mavlink_log_entry_t *)msgbuf;
    packet->time_utc = time_utc;
    packet->size = size;
    packet->id = id;
    packet->num_logs = num_logs;
    packet->last_log_num = last_log_num;

    _mav_finalize_message_chan_send(chan, 118, (const char *)packet, 14, 14, 56);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_log_entry_get_num_logs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_log_entry_get_last_log_num(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint32_t mavlink_msg_log_entry_get_time_utc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_entry_get_size(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_entry_decode(const mavlink_message_t* msg, mavlink_log_entry_t* log_entry)
{







        uint8_t len = msg->len < 14? msg->len : 14;
        memset(log_entry, 0, 14);
    memcpy(log_entry, ((const char *)(&((msg)->payload64[0]))), len);

}
# 990 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h" 1
       




typedef struct __mavlink_log_request_data_t { uint32_t ofs; uint32_t count; uint16_t id; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_log_request_data_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t id, uint32_t ofs, uint32_t count)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
    mavlink_log_request_data_t packet;
    packet.ofs = ofs;
    packet.count = count;
    packet.id = id;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 119;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 116);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t id,uint32_t ofs,uint32_t count)
{
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
    mavlink_log_request_data_t packet;
    packet.ofs = ofs;
    packet.count = count;
    packet.id = id;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 119;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 116);
}
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
    return mavlink_msg_log_request_data_pack(system_id, component_id, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 153 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
    return mavlink_msg_log_request_data_pack_chan(system_id, component_id, chan, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 170 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline void mavlink_msg_log_request_data_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t id, uint32_t ofs, uint32_t count)
{
# 182 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
    mavlink_log_request_data_t packet;
    packet.ofs = ofs;
    packet.count = count;
    packet.id = id;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 119, (const char *)&packet, 12, 12, 116);

}






static inline void mavlink_msg_log_request_data_send_struct(mavlink_channel_t chan, const mavlink_log_request_data_t* log_request_data)
{



    _mav_finalize_message_chan_send(chan, 119, (const char *)log_request_data, 12, 12, 116);

}
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline void mavlink_msg_log_request_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t id, uint32_t ofs, uint32_t count)
{
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
    mavlink_log_request_data_t *packet = (mavlink_log_request_data_t *)msgbuf;
    packet->ofs = ofs;
    packet->count = count;
    packet->id = id;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 119, (const char *)packet, 12, 12, 116);

}
# 249 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_data.h"
static inline uint8_t mavlink_msg_log_request_data_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_log_request_data_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint16_t mavlink_msg_log_request_data_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint32_t mavlink_msg_log_request_data_get_ofs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_request_data_get_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_request_data_decode(const mavlink_message_t* msg, mavlink_log_request_data_t* log_request_data)
{







        uint8_t len = msg->len < 12? msg->len : 12;
        memset(log_request_data, 0, 12);
    memcpy(log_request_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 991 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h" 1
       




typedef struct __mavlink_log_data_t { uint32_t ofs; uint16_t id; uint8_t count; uint8_t data[90]; } __attribute__((packed))





   mavlink_log_data_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t id, uint32_t ofs, uint8_t count, const uint8_t *data)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
    mavlink_log_data_t packet;
    packet.ofs = ofs;
    packet.id = id;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


    msg->msgid = 120;
    return mavlink_finalize_message(msg, system_id, component_id, 97, 97, 134);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t id,uint32_t ofs,uint8_t count,const uint8_t *data)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
    mavlink_log_data_t packet;
    packet.ofs = ofs;
    packet.id = id;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


    msg->msgid = 120;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 97, 97, 134);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
    return mavlink_msg_log_data_pack(system_id, component_id, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
    return mavlink_msg_log_data_pack_chan(system_id, component_id, chan, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline void mavlink_msg_log_data_send(mavlink_channel_t chan, uint16_t id, uint32_t ofs, uint8_t count, const uint8_t *data)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
    mavlink_log_data_t packet;
    packet.ofs = ofs;
    packet.id = id;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
    _mav_finalize_message_chan_send(chan, 120, (const char *)&packet, 97, 97, 134);

}






static inline void mavlink_msg_log_data_send_struct(mavlink_channel_t chan, const mavlink_log_data_t* log_data)
{



    _mav_finalize_message_chan_send(chan, 120, (const char *)log_data, 97, 97, 134);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline void mavlink_msg_log_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t id, uint32_t ofs, uint8_t count, const uint8_t *data)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
    mavlink_log_data_t *packet = (mavlink_log_data_t *)msgbuf;
    packet->ofs = ofs;
    packet->id = id;
    packet->count = count;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*90);
    _mav_finalize_message_chan_send(chan, 120, (const char *)packet, 97, 97, 134);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_log_data_get_ofs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_log_data_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint16_t mavlink_msg_log_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 90, 7);
}







static inline void mavlink_msg_log_data_decode(const mavlink_message_t* msg, mavlink_log_data_t* log_data)
{






        uint8_t len = msg->len < 97? msg->len : 97;
        memset(log_data, 0, 97);
    memcpy(log_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 992 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h" 1
       




typedef struct __mavlink_log_erase_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_log_erase_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_log_erase_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 121;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 237);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_log_erase_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 121;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 237);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
    return mavlink_msg_log_erase_pack(system_id, component_id, msg, log_erase->target_system, log_erase->target_component);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
    return mavlink_msg_log_erase_pack_chan(system_id, component_id, chan, msg, log_erase->target_system, log_erase->target_component);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline void mavlink_msg_log_erase_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_log_erase_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 121, (const char *)&packet, 2, 2, 237);

}






static inline void mavlink_msg_log_erase_send_struct(mavlink_channel_t chan, const mavlink_log_erase_t* log_erase)
{



    _mav_finalize_message_chan_send(chan, 121, (const char *)log_erase, 2, 2, 237);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline void mavlink_msg_log_erase_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_log_erase_t *packet = (mavlink_log_erase_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 121, (const char *)packet, 2, 2, 237);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_erase.h"
static inline uint8_t mavlink_msg_log_erase_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_erase_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_erase_decode(const mavlink_message_t* msg, mavlink_log_erase_t* log_erase)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(log_erase, 0, 2);
    memcpy(log_erase, ((const char *)(&((msg)->payload64[0]))), len);

}
# 993 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h" 1
       




typedef struct __mavlink_log_request_end_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_log_request_end_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_log_request_end_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 122;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 203);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_log_request_end_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 122;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 203);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
    return mavlink_msg_log_request_end_pack(system_id, component_id, msg, log_request_end->target_system, log_request_end->target_component);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
    return mavlink_msg_log_request_end_pack_chan(system_id, component_id, chan, msg, log_request_end->target_system, log_request_end->target_component);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline void mavlink_msg_log_request_end_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_log_request_end_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 122, (const char *)&packet, 2, 2, 203);

}






static inline void mavlink_msg_log_request_end_send_struct(mavlink_channel_t chan, const mavlink_log_request_end_t* log_request_end)
{



    _mav_finalize_message_chan_send(chan, 122, (const char *)log_request_end, 2, 2, 203);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline void mavlink_msg_log_request_end_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component)
{







    mavlink_log_request_end_t *packet = (mavlink_log_request_end_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 122, (const char *)packet, 2, 2, 203);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_log_request_end.h"
static inline uint8_t mavlink_msg_log_request_end_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_request_end_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_request_end_decode(const mavlink_message_t* msg, mavlink_log_request_end_t* log_request_end)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(log_request_end, 0, 2);
    memcpy(log_request_end, ((const char *)(&((msg)->payload64[0]))), len);

}
# 994 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h" 1
       




typedef struct __mavlink_gps_inject_data_t { uint8_t target_system; uint8_t target_component; uint8_t len; uint8_t data[110]; } __attribute__((packed))





   mavlink_gps_inject_data_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t len, const uint8_t *data)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
    mavlink_gps_inject_data_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


    msg->msgid = 123;
    return mavlink_finalize_message(msg, system_id, component_id, 113, 113, 250);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t len,const uint8_t *data)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
    mavlink_gps_inject_data_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


    msg->msgid = 123;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 113, 113, 250);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
    return mavlink_msg_gps_inject_data_pack(system_id, component_id, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
    return mavlink_msg_gps_inject_data_pack_chan(system_id, component_id, chan, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline void mavlink_msg_gps_inject_data_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t len, const uint8_t *data)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
    mavlink_gps_inject_data_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
    _mav_finalize_message_chan_send(chan, 123, (const char *)&packet, 113, 113, 250);

}






static inline void mavlink_msg_gps_inject_data_send_struct(mavlink_channel_t chan, const mavlink_gps_inject_data_t* gps_inject_data)
{



    _mav_finalize_message_chan_send(chan, 123, (const char *)gps_inject_data, 113, 113, 250);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline void mavlink_msg_gps_inject_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t len, const uint8_t *data)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
    mavlink_gps_inject_data_t *packet = (mavlink_gps_inject_data_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->len = len;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*110);
    _mav_finalize_message_chan_send(chan, 123, (const char *)packet, 113, 113, 250);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_inject_data.h"
static inline uint8_t mavlink_msg_gps_inject_data_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_gps_inject_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 110, 3);
}







static inline void mavlink_msg_gps_inject_data_decode(const mavlink_message_t* msg, mavlink_gps_inject_data_t* gps_inject_data)
{






        uint8_t len = msg->len < 113? msg->len : 113;
        memset(gps_inject_data, 0, 113);
    memcpy(gps_inject_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 995 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h" 1
       




typedef struct __mavlink_gps2_raw_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; uint32_t dgps_age; uint16_t eph; uint16_t epv; uint16_t vel; uint16_t cog; uint8_t fix_type; uint8_t satellites_visible; uint8_t dgps_numch; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
   mavlink_gps2_raw_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, uint8_t dgps_numch, uint32_t dgps_age)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
    mavlink_gps2_raw_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.dgps_age = dgps_age;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;
    packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 124;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 87);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible,uint8_t dgps_numch,uint32_t dgps_age)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
    mavlink_gps2_raw_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.dgps_age = dgps_age;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;
    packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 124;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 87);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
    return mavlink_msg_gps2_raw_pack(system_id, component_id, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
    return mavlink_msg_gps2_raw_pack_chan(system_id, component_id, chan, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline void mavlink_msg_gps2_raw_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, uint8_t dgps_numch, uint32_t dgps_age)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
    mavlink_gps2_raw_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.dgps_age = dgps_age;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;
    packet.dgps_numch = dgps_numch;

    _mav_finalize_message_chan_send(chan, 124, (const char *)&packet, 35, 35, 87);

}






static inline void mavlink_msg_gps2_raw_send_struct(mavlink_channel_t chan, const mavlink_gps2_raw_t* gps2_raw)
{



    _mav_finalize_message_chan_send(chan, 124, (const char *)gps2_raw, 35, 35, 87);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline void mavlink_msg_gps2_raw_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, uint8_t dgps_numch, uint32_t dgps_age)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
    mavlink_gps2_raw_t *packet = (mavlink_gps2_raw_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->dgps_age = dgps_age;
    packet->eph = eph;
    packet->epv = epv;
    packet->vel = vel;
    packet->cog = cog;
    packet->fix_type = fix_type;
    packet->satellites_visible = satellites_visible;
    packet->dgps_numch = dgps_numch;

    _mav_finalize_message_chan_send(chan, 124, (const char *)packet, 35, 35, 87);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
static inline uint64_t mavlink_msg_gps2_raw_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_raw_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline int32_t mavlink_msg_gps2_raw_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_raw_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_raw_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps2_raw_get_eph(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps2_raw_get_epv(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_gps2_raw_get_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_gps2_raw_get_cog(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_gps2_raw_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_raw_get_dgps_numch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint32_t mavlink_msg_gps2_raw_get_dgps_age(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}







static inline void mavlink_msg_gps2_raw_decode(const mavlink_message_t* msg, mavlink_gps2_raw_t* gps2_raw)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_raw.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(gps2_raw, 0, 35);
    memcpy(gps2_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 996 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h" 1
       




typedef struct __mavlink_power_status_t { uint16_t Vcc; uint16_t Vservo; uint16_t flags; } __attribute__((packed))




   mavlink_power_status_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t Vcc, uint16_t Vservo, uint16_t flags)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
    mavlink_power_status_t packet;
    packet.Vcc = Vcc;
    packet.Vservo = Vservo;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 125;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 203);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t Vcc,uint16_t Vservo,uint16_t flags)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
    mavlink_power_status_t packet;
    packet.Vcc = Vcc;
    packet.Vservo = Vservo;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 125;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 203);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
    return mavlink_msg_power_status_pack(system_id, component_id, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
    return mavlink_msg_power_status_pack_chan(system_id, component_id, chan, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline void mavlink_msg_power_status_send(mavlink_channel_t chan, uint16_t Vcc, uint16_t Vservo, uint16_t flags)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
    mavlink_power_status_t packet;
    packet.Vcc = Vcc;
    packet.Vservo = Vservo;
    packet.flags = flags;

    _mav_finalize_message_chan_send(chan, 125, (const char *)&packet, 6, 6, 203);

}






static inline void mavlink_msg_power_status_send_struct(mavlink_channel_t chan, const mavlink_power_status_t* power_status)
{



    _mav_finalize_message_chan_send(chan, 125, (const char *)power_status, 6, 6, 203);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline void mavlink_msg_power_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t Vcc, uint16_t Vservo, uint16_t flags)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
    mavlink_power_status_t *packet = (mavlink_power_status_t *)msgbuf;
    packet->Vcc = Vcc;
    packet->Vservo = Vservo;
    packet->flags = flags;

    _mav_finalize_message_chan_send(chan, 125, (const char *)packet, 6, 6, 203);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_get_Vcc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_power_status_get_Vservo(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_power_status_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}







static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{





        uint8_t len = msg->len < 6? msg->len : 6;
        memset(power_status, 0, 6);
    memcpy(power_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 997 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h" 1
       




typedef struct __mavlink_serial_control_t { uint32_t baudrate; uint16_t timeout; uint8_t device; uint8_t flags; uint8_t count; uint8_t data[70]; } __attribute__((packed))







   mavlink_serial_control_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t device, uint8_t flags, uint16_t timeout, uint32_t baudrate, uint8_t count, const uint8_t *data)
{
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
    mavlink_serial_control_t packet;
    packet.baudrate = baudrate;
    packet.timeout = timeout;
    packet.device = device;
    packet.flags = flags;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


    msg->msgid = 126;
    return mavlink_finalize_message(msg, system_id, component_id, 79, 79, 220);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t device,uint8_t flags,uint16_t timeout,uint32_t baudrate,uint8_t count,const uint8_t *data)
{
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
    mavlink_serial_control_t packet;
    packet.baudrate = baudrate;
    packet.timeout = timeout;
    packet.device = device;
    packet.flags = flags;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


    msg->msgid = 126;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 79, 79, 220);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
    return mavlink_msg_serial_control_pack(system_id, component_id, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 158 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
    return mavlink_msg_serial_control_pack_chan(system_id, component_id, chan, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 176 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline void mavlink_msg_serial_control_send(mavlink_channel_t chan, uint8_t device, uint8_t flags, uint16_t timeout, uint32_t baudrate, uint8_t count, const uint8_t *data)
{
# 188 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
    mavlink_serial_control_t packet;
    packet.baudrate = baudrate;
    packet.timeout = timeout;
    packet.device = device;
    packet.flags = flags;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
    _mav_finalize_message_chan_send(chan, 126, (const char *)&packet, 79, 79, 220);

}






static inline void mavlink_msg_serial_control_send_struct(mavlink_channel_t chan, const mavlink_serial_control_t* serial_control)
{



    _mav_finalize_message_chan_send(chan, 126, (const char *)serial_control, 79, 79, 220);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline void mavlink_msg_serial_control_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t device, uint8_t flags, uint16_t timeout, uint32_t baudrate, uint8_t count, const uint8_t *data)
{
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
    mavlink_serial_control_t *packet = (mavlink_serial_control_t *)msgbuf;
    packet->baudrate = baudrate;
    packet->timeout = timeout;
    packet->device = device;
    packet->flags = flags;
    packet->count = count;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*70);
    _mav_finalize_message_chan_send(chan, 126, (const char *)packet, 79, 79, 220);

}
# 255 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
static inline uint8_t mavlink_msg_serial_control_get_device(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_serial_control_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint16_t mavlink_msg_serial_control_get_timeout(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_serial_control_get_baudrate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_serial_control_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_serial_control_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 70, 9);
}







static inline void mavlink_msg_serial_control_decode(const mavlink_message_t* msg, mavlink_serial_control_t* serial_control)
{
# 326 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_serial_control.h"
        uint8_t len = msg->len < 79? msg->len : 79;
        memset(serial_control, 0, 79);
    memcpy(serial_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 998 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h" 1
       




typedef struct __mavlink_gps_rtk_t { uint32_t time_last_baseline_ms; uint32_t tow; int32_t baseline_a_mm; int32_t baseline_b_mm; int32_t baseline_c_mm; uint32_t accuracy; int32_t iar_num_hypotheses; uint16_t wn; uint8_t rtk_receiver_id; uint8_t rtk_health; uint8_t rtk_rate; uint8_t nsats; uint8_t baseline_coords_type; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
   mavlink_gps_rtk_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
    mavlink_gps_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 127;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 25);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
    mavlink_gps_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 127;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 25);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
    return mavlink_msg_gps_rtk_pack(system_id, component_id, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
    return mavlink_msg_gps_rtk_pack_chan(system_id, component_id, chan, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline void mavlink_msg_gps_rtk_send(mavlink_channel_t chan, uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
    mavlink_gps_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

    _mav_finalize_message_chan_send(chan, 127, (const char *)&packet, 35, 35, 25);

}






static inline void mavlink_msg_gps_rtk_send_struct(mavlink_channel_t chan, const mavlink_gps_rtk_t* gps_rtk)
{



    _mav_finalize_message_chan_send(chan, 127, (const char *)gps_rtk, 35, 35, 25);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline void mavlink_msg_gps_rtk_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
    mavlink_gps_rtk_t *packet = (mavlink_gps_rtk_t *)msgbuf;
    packet->time_last_baseline_ms = time_last_baseline_ms;
    packet->tow = tow;
    packet->baseline_a_mm = baseline_a_mm;
    packet->baseline_b_mm = baseline_b_mm;
    packet->baseline_c_mm = baseline_c_mm;
    packet->accuracy = accuracy;
    packet->iar_num_hypotheses = iar_num_hypotheses;
    packet->wn = wn;
    packet->rtk_receiver_id = rtk_receiver_id;
    packet->rtk_health = rtk_health;
    packet->rtk_rate = rtk_rate;
    packet->nsats = nsats;
    packet->baseline_coords_type = baseline_coords_type;

    _mav_finalize_message_chan_send(chan, 127, (const char *)packet, 35, 35, 25);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
static inline uint32_t mavlink_msg_gps_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps_rtk_get_wn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps_rtk_get_tow(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_health(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps_rtk_get_nsats(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps_rtk_get_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps_rtk_decode(const mavlink_message_t* msg, mavlink_gps_rtk_t* gps_rtk)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtk.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(gps_rtk, 0, 35);
    memcpy(gps_rtk, ((const char *)(&((msg)->payload64[0]))), len);

}
# 999 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h" 1
       




typedef struct __mavlink_gps2_rtk_t { uint32_t time_last_baseline_ms; uint32_t tow; int32_t baseline_a_mm; int32_t baseline_b_mm; int32_t baseline_c_mm; uint32_t accuracy; int32_t iar_num_hypotheses; uint16_t wn; uint8_t rtk_receiver_id; uint8_t rtk_health; uint8_t rtk_rate; uint8_t nsats; uint8_t baseline_coords_type; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
   mavlink_gps2_rtk_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
    mavlink_gps2_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 128;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 226);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
    mavlink_gps2_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 128;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 226);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
    return mavlink_msg_gps2_rtk_pack(system_id, component_id, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
    return mavlink_msg_gps2_rtk_pack_chan(system_id, component_id, chan, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline void mavlink_msg_gps2_rtk_send(mavlink_channel_t chan, uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
    mavlink_gps2_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

    _mav_finalize_message_chan_send(chan, 128, (const char *)&packet, 35, 35, 226);

}






static inline void mavlink_msg_gps2_rtk_send_struct(mavlink_channel_t chan, const mavlink_gps2_rtk_t* gps2_rtk)
{



    _mav_finalize_message_chan_send(chan, 128, (const char *)gps2_rtk, 35, 35, 226);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline void mavlink_msg_gps2_rtk_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
    mavlink_gps2_rtk_t *packet = (mavlink_gps2_rtk_t *)msgbuf;
    packet->time_last_baseline_ms = time_last_baseline_ms;
    packet->tow = tow;
    packet->baseline_a_mm = baseline_a_mm;
    packet->baseline_b_mm = baseline_b_mm;
    packet->baseline_c_mm = baseline_c_mm;
    packet->accuracy = accuracy;
    packet->iar_num_hypotheses = iar_num_hypotheses;
    packet->wn = wn;
    packet->rtk_receiver_id = rtk_receiver_id;
    packet->rtk_health = rtk_health;
    packet->rtk_rate = rtk_rate;
    packet->nsats = nsats;
    packet->baseline_coords_type = baseline_coords_type;

    _mav_finalize_message_chan_send(chan, 128, (const char *)packet, 35, 35, 226);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
static inline uint32_t mavlink_msg_gps2_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps2_rtk_get_wn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_tow(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_health(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_nsats(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps2_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps2_rtk_decode(const mavlink_message_t* msg, mavlink_gps2_rtk_t* gps2_rtk)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps2_rtk.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(gps2_rtk, 0, 35);
    memcpy(gps2_rtk, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1000 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h" 1
       




typedef struct __mavlink_scaled_imu3_t { uint32_t time_boot_ms; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
   mavlink_scaled_imu3_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
    mavlink_scaled_imu3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 129;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 46);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
    mavlink_scaled_imu3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 129;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 46);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
    return mavlink_msg_scaled_imu3_pack(system_id, component_id, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
    return mavlink_msg_scaled_imu3_pack_chan(system_id, component_id, chan, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline void mavlink_msg_scaled_imu3_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
    mavlink_scaled_imu3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

    _mav_finalize_message_chan_send(chan, 129, (const char *)&packet, 22, 22, 46);

}






static inline void mavlink_msg_scaled_imu3_send_struct(mavlink_channel_t chan, const mavlink_scaled_imu3_t* scaled_imu3)
{



    _mav_finalize_message_chan_send(chan, 129, (const char *)scaled_imu3, 22, 22, 46);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline void mavlink_msg_scaled_imu3_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
    mavlink_scaled_imu3_t *packet = (mavlink_scaled_imu3_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->xacc = xacc;
    packet->yacc = yacc;
    packet->zacc = zacc;
    packet->xgyro = xgyro;
    packet->ygyro = ygyro;
    packet->zgyro = zgyro;
    packet->xmag = xmag;
    packet->ymag = ymag;
    packet->zmag = zmag;

    _mav_finalize_message_chan_send(chan, 129, (const char *)packet, 22, 22, 46);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
static inline uint32_t mavlink_msg_scaled_imu3_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu3_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu3_decode(const mavlink_message_t* msg, mavlink_scaled_imu3_t* scaled_imu3)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_imu3.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(scaled_imu3, 0, 22);
    memcpy(scaled_imu3, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1001 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h" 1
       




typedef struct __mavlink_data_transmission_handshake_t { uint32_t size; uint16_t width; uint16_t height; uint16_t packets; uint8_t type; uint8_t payload; uint8_t jpg_quality; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
   mavlink_data_transmission_handshake_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint32_t size, uint16_t width, uint16_t height, uint16_t packets, uint8_t payload, uint8_t jpg_quality)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
    mavlink_data_transmission_handshake_t packet;
    packet.size = size;
    packet.width = width;
    packet.height = height;
    packet.packets = packets;
    packet.type = type;
    packet.payload = payload;
    packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 130;
    return mavlink_finalize_message(msg, system_id, component_id, 13, 13, 29);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint32_t size,uint16_t width,uint16_t height,uint16_t packets,uint8_t payload,uint8_t jpg_quality)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
    mavlink_data_transmission_handshake_t packet;
    packet.size = size;
    packet.width = width;
    packet.height = height;
    packet.packets = packets;
    packet.type = type;
    packet.payload = payload;
    packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 130;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 13, 29);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
    return mavlink_msg_data_transmission_handshake_pack(system_id, component_id, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
    return mavlink_msg_data_transmission_handshake_pack_chan(system_id, component_id, chan, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline void mavlink_msg_data_transmission_handshake_send(mavlink_channel_t chan, uint8_t type, uint32_t size, uint16_t width, uint16_t height, uint16_t packets, uint8_t payload, uint8_t jpg_quality)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
    mavlink_data_transmission_handshake_t packet;
    packet.size = size;
    packet.width = width;
    packet.height = height;
    packet.packets = packets;
    packet.type = type;
    packet.payload = payload;
    packet.jpg_quality = jpg_quality;

    _mav_finalize_message_chan_send(chan, 130, (const char *)&packet, 13, 13, 29);

}






static inline void mavlink_msg_data_transmission_handshake_send_struct(mavlink_channel_t chan, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{



    _mav_finalize_message_chan_send(chan, 130, (const char *)data_transmission_handshake, 13, 13, 29);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline void mavlink_msg_data_transmission_handshake_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t type, uint32_t size, uint16_t width, uint16_t height, uint16_t packets, uint8_t payload, uint8_t jpg_quality)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
    mavlink_data_transmission_handshake_t *packet = (mavlink_data_transmission_handshake_t *)msgbuf;
    packet->size = size;
    packet->width = width;
    packet->height = height;
    packet->packets = packets;
    packet->type = type;
    packet->payload = payload;
    packet->jpg_quality = jpg_quality;

    _mav_finalize_message_chan_send(chan, 130, (const char *)packet, 13, 13, 29);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
static inline uint8_t mavlink_msg_data_transmission_handshake_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint32_t mavlink_msg_data_transmission_handshake_get_size(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_width(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_height(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_packets(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_payload(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_jpg_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}







static inline void mavlink_msg_data_transmission_handshake_decode(const mavlink_message_t* msg, mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_data_transmission_handshake.h"
        uint8_t len = msg->len < 13? msg->len : 13;
        memset(data_transmission_handshake, 0, 13);
    memcpy(data_transmission_handshake, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1002 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h" 1
       




typedef struct __mavlink_encapsulated_data_t { uint16_t seqnr; uint8_t data[253]; } __attribute__((packed))



   mavlink_encapsulated_data_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t seqnr, const uint8_t *data)
{






    mavlink_encapsulated_data_t packet;
    packet.seqnr = seqnr;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 131;
    return mavlink_finalize_message(msg, system_id, component_id, 255, 255, 223);
}
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t seqnr,const uint8_t *data)
{






    mavlink_encapsulated_data_t packet;
    packet.seqnr = seqnr;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 131;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 255, 223);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
    return mavlink_msg_encapsulated_data_pack(system_id, component_id, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
    return mavlink_msg_encapsulated_data_pack_chan(system_id, component_id, chan, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 136 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline void mavlink_msg_encapsulated_data_send(mavlink_channel_t chan, uint16_t seqnr, const uint8_t *data)
{






    mavlink_encapsulated_data_t packet;
    packet.seqnr = seqnr;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
    _mav_finalize_message_chan_send(chan, 131, (const char *)&packet, 255, 255, 223);

}






static inline void mavlink_msg_encapsulated_data_send_struct(mavlink_channel_t chan, const mavlink_encapsulated_data_t* encapsulated_data)
{



    _mav_finalize_message_chan_send(chan, 131, (const char *)encapsulated_data, 255, 255, 223);

}
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline void mavlink_msg_encapsulated_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t seqnr, const uint8_t *data)
{






    mavlink_encapsulated_data_t *packet = (mavlink_encapsulated_data_t *)msgbuf;
    packet->seqnr = seqnr;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*253);
    _mav_finalize_message_chan_send(chan, 131, (const char *)packet, 255, 255, 223);

}
# 199 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_get_seqnr(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_encapsulated_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 253, 2);
}







static inline void mavlink_msg_encapsulated_data_decode(const mavlink_message_t* msg, mavlink_encapsulated_data_t* encapsulated_data)
{




        uint8_t len = msg->len < 255? msg->len : 255;
        memset(encapsulated_data, 0, 255);
    memcpy(encapsulated_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1003 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h" 1
       




typedef struct __mavlink_distance_sensor_t { uint32_t time_boot_ms; uint16_t min_distance; uint16_t max_distance; uint16_t current_distance; uint8_t type; uint8_t id; uint8_t orientation; uint8_t covariance; } __attribute__((packed))
# 16 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
   mavlink_distance_sensor_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint16_t min_distance, uint16_t max_distance, uint16_t current_distance, uint8_t type, uint8_t id, uint8_t orientation, uint8_t covariance)
{
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
    mavlink_distance_sensor_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.min_distance = min_distance;
    packet.max_distance = max_distance;
    packet.current_distance = current_distance;
    packet.type = type;
    packet.id = id;
    packet.orientation = orientation;
    packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 132;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 85);
}
# 124 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint16_t min_distance,uint16_t max_distance,uint16_t current_distance,uint8_t type,uint8_t id,uint8_t orientation,uint8_t covariance)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
    mavlink_distance_sensor_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.min_distance = min_distance;
    packet.max_distance = max_distance;
    packet.current_distance = current_distance;
    packet.type = type;
    packet.id = id;
    packet.orientation = orientation;
    packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 132;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 85);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
    return mavlink_msg_distance_sensor_pack(system_id, component_id, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
    return mavlink_msg_distance_sensor_pack_chan(system_id, component_id, chan, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 200 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline void mavlink_msg_distance_sensor_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint16_t min_distance, uint16_t max_distance, uint16_t current_distance, uint8_t type, uint8_t id, uint8_t orientation, uint8_t covariance)
{
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
    mavlink_distance_sensor_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.min_distance = min_distance;
    packet.max_distance = max_distance;
    packet.current_distance = current_distance;
    packet.type = type;
    packet.id = id;
    packet.orientation = orientation;
    packet.covariance = covariance;

    _mav_finalize_message_chan_send(chan, 132, (const char *)&packet, 14, 14, 85);

}






static inline void mavlink_msg_distance_sensor_send_struct(mavlink_channel_t chan, const mavlink_distance_sensor_t* distance_sensor)
{



    _mav_finalize_message_chan_send(chan, 132, (const char *)distance_sensor, 14, 14, 85);

}
# 251 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline void mavlink_msg_distance_sensor_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint16_t min_distance, uint16_t max_distance, uint16_t current_distance, uint8_t type, uint8_t id, uint8_t orientation, uint8_t covariance)
{
# 266 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
    mavlink_distance_sensor_t *packet = (mavlink_distance_sensor_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->min_distance = min_distance;
    packet->max_distance = max_distance;
    packet->current_distance = current_distance;
    packet->type = type;
    packet->id = id;
    packet->orientation = orientation;
    packet->covariance = covariance;

    _mav_finalize_message_chan_send(chan, 132, (const char *)packet, 14, 14, 85);

}
# 291 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
static inline uint32_t mavlink_msg_distance_sensor_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_distance_sensor_get_min_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_distance_sensor_get_max_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_distance_sensor_get_current_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_distance_sensor_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_distance_sensor_get_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_distance_sensor_get_orientation(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_distance_sensor_get_covariance(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_distance_sensor_decode(const mavlink_message_t* msg, mavlink_distance_sensor_t* distance_sensor)
{
# 384 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_distance_sensor.h"
        uint8_t len = msg->len < 14? msg->len : 14;
        memset(distance_sensor, 0, 14);
    memcpy(distance_sensor, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1004 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h" 1
       




typedef struct __mavlink_terrain_request_t { uint64_t mask; int32_t lat; int32_t lon; uint16_t grid_spacing; } __attribute__((packed))





   mavlink_terrain_request_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon, uint16_t grid_spacing, uint64_t mask)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
    mavlink_terrain_request_t packet;
    packet.mask = mask;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 133;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 6);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon,uint16_t grid_spacing,uint64_t mask)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
    mavlink_terrain_request_t packet;
    packet.mask = mask;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 133;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 6);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
    return mavlink_msg_terrain_request_pack(system_id, component_id, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
    return mavlink_msg_terrain_request_pack_chan(system_id, component_id, chan, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline void mavlink_msg_terrain_request_send(mavlink_channel_t chan, int32_t lat, int32_t lon, uint16_t grid_spacing, uint64_t mask)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
    mavlink_terrain_request_t packet;
    packet.mask = mask;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;

    _mav_finalize_message_chan_send(chan, 133, (const char *)&packet, 18, 18, 6);

}






static inline void mavlink_msg_terrain_request_send_struct(mavlink_channel_t chan, const mavlink_terrain_request_t* terrain_request)
{



    _mav_finalize_message_chan_send(chan, 133, (const char *)terrain_request, 18, 18, 6);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline void mavlink_msg_terrain_request_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t lat, int32_t lon, uint16_t grid_spacing, uint64_t mask)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
    mavlink_terrain_request_t *packet = (mavlink_terrain_request_t *)msgbuf;
    packet->mask = mask;
    packet->lat = lat;
    packet->lon = lon;
    packet->grid_spacing = grid_spacing;

    _mav_finalize_message_chan_send(chan, 133, (const char *)packet, 18, 18, 6);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_request.h"
static inline int32_t mavlink_msg_terrain_request_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_terrain_request_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_request_get_grid_spacing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint64_t mavlink_msg_terrain_request_get_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}







static inline void mavlink_msg_terrain_request_decode(const mavlink_message_t* msg, mavlink_terrain_request_t* terrain_request)
{






        uint8_t len = msg->len < 18? msg->len : 18;
        memset(terrain_request, 0, 18);
    memcpy(terrain_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1005 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h" 1
       




typedef struct __mavlink_terrain_data_t { int32_t lat; int32_t lon; uint16_t grid_spacing; int16_t data[16]; uint8_t gridbit; } __attribute__((packed))






   mavlink_terrain_data_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon, uint16_t grid_spacing, uint8_t gridbit, const int16_t *data)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
    mavlink_terrain_data_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;
    packet.gridbit = gridbit;
    mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 134;
    return mavlink_finalize_message(msg, system_id, component_id, 43, 43, 229);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon,uint16_t grid_spacing,uint8_t gridbit,const int16_t *data)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
    mavlink_terrain_data_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;
    packet.gridbit = gridbit;
    mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 134;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 43, 229);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
    return mavlink_msg_terrain_data_pack(system_id, component_id, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
    return mavlink_msg_terrain_data_pack_chan(system_id, component_id, chan, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline void mavlink_msg_terrain_data_send(mavlink_channel_t chan, int32_t lat, int32_t lon, uint16_t grid_spacing, uint8_t gridbit, const int16_t *data)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
    mavlink_terrain_data_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;
    packet.gridbit = gridbit;
    mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
    _mav_finalize_message_chan_send(chan, 134, (const char *)&packet, 43, 43, 229);

}






static inline void mavlink_msg_terrain_data_send_struct(mavlink_channel_t chan, const mavlink_terrain_data_t* terrain_data)
{



    _mav_finalize_message_chan_send(chan, 134, (const char *)terrain_data, 43, 43, 229);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline void mavlink_msg_terrain_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t lat, int32_t lon, uint16_t grid_spacing, uint8_t gridbit, const int16_t *data)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
    mavlink_terrain_data_t *packet = (mavlink_terrain_data_t *)msgbuf;
    packet->lat = lat;
    packet->lon = lon;
    packet->grid_spacing = grid_spacing;
    packet->gridbit = gridbit;
    mav_array_memcpy(packet->data, data, sizeof(int16_t)*16);
    _mav_finalize_message_chan_send(chan, 134, (const char *)packet, 43, 43, 229);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_data.h"
static inline int32_t mavlink_msg_terrain_data_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_data_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_data_get_grid_spacing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_terrain_data_get_gridbit(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_terrain_data_get_data(const mavlink_message_t* msg, int16_t *data)
{
    return _MAV_RETURN_int16_t_array(msg, data, 16, 10);
}







static inline void mavlink_msg_terrain_data_decode(const mavlink_message_t* msg, mavlink_terrain_data_t* terrain_data)
{







        uint8_t len = msg->len < 43? msg->len : 43;
        memset(terrain_data, 0, 43);
    memcpy(terrain_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1006 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h" 1
       




typedef struct __mavlink_terrain_check_t { int32_t lat; int32_t lon; } __attribute__((packed))



   mavlink_terrain_check_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon)
{







    mavlink_terrain_check_t packet;
    packet.lat = lat;
    packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 135;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 203);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon)
{







    mavlink_terrain_check_t packet;
    packet.lat = lat;
    packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 135;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 203);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
    return mavlink_msg_terrain_check_pack(system_id, component_id, msg, terrain_check->lat, terrain_check->lon);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
    return mavlink_msg_terrain_check_pack_chan(system_id, component_id, chan, msg, terrain_check->lat, terrain_check->lon);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline void mavlink_msg_terrain_check_send(mavlink_channel_t chan, int32_t lat, int32_t lon)
{







    mavlink_terrain_check_t packet;
    packet.lat = lat;
    packet.lon = lon;

    _mav_finalize_message_chan_send(chan, 135, (const char *)&packet, 8, 8, 203);

}






static inline void mavlink_msg_terrain_check_send_struct(mavlink_channel_t chan, const mavlink_terrain_check_t* terrain_check)
{



    _mav_finalize_message_chan_send(chan, 135, (const char *)terrain_check, 8, 8, 203);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline void mavlink_msg_terrain_check_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t lat, int32_t lon)
{







    mavlink_terrain_check_t *packet = (mavlink_terrain_check_t *)msgbuf;
    packet->lat = lat;
    packet->lon = lon;

    _mav_finalize_message_chan_send(chan, 135, (const char *)packet, 8, 8, 203);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_check.h"
static inline int32_t mavlink_msg_terrain_check_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_check_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_terrain_check_decode(const mavlink_message_t* msg, mavlink_terrain_check_t* terrain_check)
{




        uint8_t len = msg->len < 8? msg->len : 8;
        memset(terrain_check, 0, 8);
    memcpy(terrain_check, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1007 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h" 1
       




typedef struct __mavlink_terrain_report_t { int32_t lat; int32_t lon; float terrain_height; float current_height; uint16_t spacing; uint16_t pending; uint16_t loaded; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
   mavlink_terrain_report_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon, uint16_t spacing, float terrain_height, float current_height, uint16_t pending, uint16_t loaded)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
    mavlink_terrain_report_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.terrain_height = terrain_height;
    packet.current_height = current_height;
    packet.spacing = spacing;
    packet.pending = pending;
    packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 136;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 1);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon,uint16_t spacing,float terrain_height,float current_height,uint16_t pending,uint16_t loaded)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
    mavlink_terrain_report_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.terrain_height = terrain_height;
    packet.current_height = current_height;
    packet.spacing = spacing;
    packet.pending = pending;
    packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 136;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 1);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
    return mavlink_msg_terrain_report_pack(system_id, component_id, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
    return mavlink_msg_terrain_report_pack_chan(system_id, component_id, chan, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline void mavlink_msg_terrain_report_send(mavlink_channel_t chan, int32_t lat, int32_t lon, uint16_t spacing, float terrain_height, float current_height, uint16_t pending, uint16_t loaded)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
    mavlink_terrain_report_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.terrain_height = terrain_height;
    packet.current_height = current_height;
    packet.spacing = spacing;
    packet.pending = pending;
    packet.loaded = loaded;

    _mav_finalize_message_chan_send(chan, 136, (const char *)&packet, 22, 22, 1);

}






static inline void mavlink_msg_terrain_report_send_struct(mavlink_channel_t chan, const mavlink_terrain_report_t* terrain_report)
{



    _mav_finalize_message_chan_send(chan, 136, (const char *)terrain_report, 22, 22, 1);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline void mavlink_msg_terrain_report_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t lat, int32_t lon, uint16_t spacing, float terrain_height, float current_height, uint16_t pending, uint16_t loaded)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
    mavlink_terrain_report_t *packet = (mavlink_terrain_report_t *)msgbuf;
    packet->lat = lat;
    packet->lon = lon;
    packet->terrain_height = terrain_height;
    packet->current_height = current_height;
    packet->spacing = spacing;
    packet->pending = pending;
    packet->loaded = loaded;

    _mav_finalize_message_chan_send(chan, 136, (const char *)packet, 22, 22, 1);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
static inline int32_t mavlink_msg_terrain_report_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_report_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_report_get_spacing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline float mavlink_msg_terrain_report_get_terrain_height(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_terrain_report_get_current_height(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_report_get_pending(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_terrain_report_get_loaded(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}







static inline void mavlink_msg_terrain_report_decode(const mavlink_message_t* msg, mavlink_terrain_report_t* terrain_report)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_terrain_report.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(terrain_report, 0, 22);
    memcpy(terrain_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1008 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h" 1
       




typedef struct __mavlink_scaled_pressure2_t { uint32_t time_boot_ms; float press_abs; float press_diff; int16_t temperature; } __attribute__((packed))





   mavlink_scaled_pressure2_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
    mavlink_scaled_pressure2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 137;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 195);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
    mavlink_scaled_pressure2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 137;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 195);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
    return mavlink_msg_scaled_pressure2_pack(system_id, component_id, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
    return mavlink_msg_scaled_pressure2_pack_chan(system_id, component_id, chan, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline void mavlink_msg_scaled_pressure2_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
    mavlink_scaled_pressure2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

    _mav_finalize_message_chan_send(chan, 137, (const char *)&packet, 14, 14, 195);

}






static inline void mavlink_msg_scaled_pressure2_send_struct(mavlink_channel_t chan, const mavlink_scaled_pressure2_t* scaled_pressure2)
{



    _mav_finalize_message_chan_send(chan, 137, (const char *)scaled_pressure2, 14, 14, 195);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline void mavlink_msg_scaled_pressure2_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
    mavlink_scaled_pressure2_t *packet = (mavlink_scaled_pressure2_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->press_abs = press_abs;
    packet->press_diff = press_diff;
    packet->temperature = temperature;

    _mav_finalize_message_chan_send(chan, 137, (const char *)packet, 14, 14, 195);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure2.h"
static inline uint32_t mavlink_msg_scaled_pressure2_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure2_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure2_get_press_diff(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure2_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure2_decode(const mavlink_message_t* msg, mavlink_scaled_pressure2_t* scaled_pressure2)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(scaled_pressure2, 0, 14);
    memcpy(scaled_pressure2, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1009 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h" 1
       




typedef struct __mavlink_att_pos_mocap_t { uint64_t time_usec; float q[4]; float x; float y; float z; } __attribute__((packed))






   mavlink_att_pos_mocap_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *q, float x, float y, float z)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
    mavlink_att_pos_mocap_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 138;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 109);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *q,float x,float y,float z)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
    mavlink_att_pos_mocap_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 138;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 109);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
    return mavlink_msg_att_pos_mocap_pack(system_id, component_id, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
    return mavlink_msg_att_pos_mocap_pack_chan(system_id, component_id, chan, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline void mavlink_msg_att_pos_mocap_send(mavlink_channel_t chan, uint64_t time_usec, const float *q, float x, float y, float z)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
    mavlink_att_pos_mocap_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 138, (const char *)&packet, 36, 36, 109);

}






static inline void mavlink_msg_att_pos_mocap_send_struct(mavlink_channel_t chan, const mavlink_att_pos_mocap_t* att_pos_mocap)
{



    _mav_finalize_message_chan_send(chan, 138, (const char *)att_pos_mocap, 36, 36, 109);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline void mavlink_msg_att_pos_mocap_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, const float *q, float x, float y, float z)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
    mavlink_att_pos_mocap_t *packet = (mavlink_att_pos_mocap_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 138, (const char *)packet, 36, 36, 109);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_att_pos_mocap.h"
static inline uint64_t mavlink_msg_att_pos_mocap_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_att_pos_mocap_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 8);
}






static inline float mavlink_msg_att_pos_mocap_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_att_pos_mocap_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_att_pos_mocap_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_att_pos_mocap_decode(const mavlink_message_t* msg, mavlink_att_pos_mocap_t* att_pos_mocap)
{







        uint8_t len = msg->len < 36? msg->len : 36;
        memset(att_pos_mocap, 0, 36);
    memcpy(att_pos_mocap, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1010 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h" 1
       




typedef struct __mavlink_set_actuator_control_target_t { uint64_t time_usec; float controls[8]; uint8_t group_mlx; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_set_actuator_control_target_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t group_mlx, uint8_t target_system, uint8_t target_component, const float *controls)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
    mavlink_set_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 139;
    return mavlink_finalize_message(msg, system_id, component_id, 43, 43, 168);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t group_mlx,uint8_t target_system,uint8_t target_component,const float *controls)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
    mavlink_set_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 139;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 43, 168);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
    return mavlink_msg_set_actuator_control_target_pack(system_id, component_id, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
    return mavlink_msg_set_actuator_control_target_pack_chan(system_id, component_id, chan, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline void mavlink_msg_set_actuator_control_target_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t group_mlx, uint8_t target_system, uint8_t target_component, const float *controls)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
    mavlink_set_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
    _mav_finalize_message_chan_send(chan, 139, (const char *)&packet, 43, 43, 168);

}






static inline void mavlink_msg_set_actuator_control_target_send_struct(mavlink_channel_t chan, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{



    _mav_finalize_message_chan_send(chan, 139, (const char *)set_actuator_control_target, 43, 43, 168);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline void mavlink_msg_set_actuator_control_target_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t group_mlx, uint8_t target_system, uint8_t target_component, const float *controls)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
    mavlink_set_actuator_control_target_t *packet = (mavlink_set_actuator_control_target_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->group_mlx = group_mlx;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->controls, controls, sizeof(float)*8);
    _mav_finalize_message_chan_send(chan, 139, (const char *)packet, 43, 43, 168);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_actuator_control_target.h"
static inline uint64_t mavlink_msg_set_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_set_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
    return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_set_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_set_actuator_control_target_t* set_actuator_control_target)
{







        uint8_t len = msg->len < 43? msg->len : 43;
        memset(set_actuator_control_target, 0, 43);
    memcpy(set_actuator_control_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1011 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h" 1
       




typedef struct __mavlink_actuator_control_target_t { uint64_t time_usec; float controls[8]; uint8_t group_mlx; } __attribute__((packed))




   mavlink_actuator_control_target_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t group_mlx, const float *controls)
{







    mavlink_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


    msg->msgid = 140;
    return mavlink_finalize_message(msg, system_id, component_id, 41, 41, 181);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t group_mlx,const float *controls)
{







    mavlink_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


    msg->msgid = 140;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 41, 41, 181);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
    return mavlink_msg_actuator_control_target_pack(system_id, component_id, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
    return mavlink_msg_actuator_control_target_pack_chan(system_id, component_id, chan, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline void mavlink_msg_actuator_control_target_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t group_mlx, const float *controls)
{







    mavlink_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
    _mav_finalize_message_chan_send(chan, 140, (const char *)&packet, 41, 41, 181);

}






static inline void mavlink_msg_actuator_control_target_send_struct(mavlink_channel_t chan, const mavlink_actuator_control_target_t* actuator_control_target)
{



    _mav_finalize_message_chan_send(chan, 140, (const char *)actuator_control_target, 41, 41, 181);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline void mavlink_msg_actuator_control_target_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t group_mlx, const float *controls)
{







    mavlink_actuator_control_target_t *packet = (mavlink_actuator_control_target_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->group_mlx = group_mlx;
    mav_array_memcpy(packet->controls, controls, sizeof(float)*8);
    _mav_finalize_message_chan_send(chan, 140, (const char *)packet, 41, 41, 181);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_actuator_control_target.h"
static inline uint64_t mavlink_msg_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
    return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_actuator_control_target_t* actuator_control_target)
{





        uint8_t len = msg->len < 41? msg->len : 41;
        memset(actuator_control_target, 0, 41);
    memcpy(actuator_control_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1012 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h" 1
       




typedef struct __mavlink_altitude_t { uint64_t time_usec; float altitude_monotonic; float altitude_amsl; float altitude_local; float altitude_relative; float altitude_terrain; float bottom_clearance; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
   mavlink_altitude_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float altitude_monotonic, float altitude_amsl, float altitude_local, float altitude_relative, float altitude_terrain, float bottom_clearance)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
    mavlink_altitude_t packet;
    packet.time_usec = time_usec;
    packet.altitude_monotonic = altitude_monotonic;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_local = altitude_local;
    packet.altitude_relative = altitude_relative;
    packet.altitude_terrain = altitude_terrain;
    packet.bottom_clearance = bottom_clearance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 141;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 47);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float altitude_monotonic,float altitude_amsl,float altitude_local,float altitude_relative,float altitude_terrain,float bottom_clearance)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
    mavlink_altitude_t packet;
    packet.time_usec = time_usec;
    packet.altitude_monotonic = altitude_monotonic;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_local = altitude_local;
    packet.altitude_relative = altitude_relative;
    packet.altitude_terrain = altitude_terrain;
    packet.bottom_clearance = bottom_clearance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 141;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 47);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_altitude_t* altitude)
{
    return mavlink_msg_altitude_pack(system_id, component_id, msg, altitude->time_usec, altitude->altitude_monotonic, altitude->altitude_amsl, altitude->altitude_local, altitude->altitude_relative, altitude->altitude_terrain, altitude->bottom_clearance);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_altitude_t* altitude)
{
    return mavlink_msg_altitude_pack_chan(system_id, component_id, chan, msg, altitude->time_usec, altitude->altitude_monotonic, altitude->altitude_amsl, altitude->altitude_local, altitude->altitude_relative, altitude->altitude_terrain, altitude->bottom_clearance);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline void mavlink_msg_altitude_send(mavlink_channel_t chan, uint64_t time_usec, float altitude_monotonic, float altitude_amsl, float altitude_local, float altitude_relative, float altitude_terrain, float bottom_clearance)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
    mavlink_altitude_t packet;
    packet.time_usec = time_usec;
    packet.altitude_monotonic = altitude_monotonic;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_local = altitude_local;
    packet.altitude_relative = altitude_relative;
    packet.altitude_terrain = altitude_terrain;
    packet.bottom_clearance = bottom_clearance;

    _mav_finalize_message_chan_send(chan, 141, (const char *)&packet, 32, 32, 47);

}






static inline void mavlink_msg_altitude_send_struct(mavlink_channel_t chan, const mavlink_altitude_t* altitude)
{



    _mav_finalize_message_chan_send(chan, 141, (const char *)altitude, 32, 32, 47);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline void mavlink_msg_altitude_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float altitude_monotonic, float altitude_amsl, float altitude_local, float altitude_relative, float altitude_terrain, float bottom_clearance)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
    mavlink_altitude_t *packet = (mavlink_altitude_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->altitude_monotonic = altitude_monotonic;
    packet->altitude_amsl = altitude_amsl;
    packet->altitude_local = altitude_local;
    packet->altitude_relative = altitude_relative;
    packet->altitude_terrain = altitude_terrain;
    packet->bottom_clearance = bottom_clearance;

    _mav_finalize_message_chan_send(chan, 141, (const char *)packet, 32, 32, 47);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
static inline uint64_t mavlink_msg_altitude_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_altitude_get_altitude_monotonic(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_altitude_get_altitude_amsl(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_altitude_get_altitude_local(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_altitude_get_altitude_relative(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_altitude_get_altitude_terrain(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_altitude_get_bottom_clearance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_altitude_decode(const mavlink_message_t* msg, mavlink_altitude_t* altitude)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_altitude.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(altitude, 0, 32);
    memcpy(altitude, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1013 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h" 1
       




typedef struct __mavlink_resource_request_t { uint8_t request_id; uint8_t uri_type; uint8_t uri[120]; uint8_t transfer_type; uint8_t storage[120]; } __attribute__((packed))






   mavlink_resource_request_t;
# 64 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t request_id, uint8_t uri_type, const uint8_t *uri, uint8_t transfer_type, const uint8_t *storage)
{
# 76 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
    mavlink_resource_request_t packet;
    packet.request_id = request_id;
    packet.uri_type = uri_type;
    packet.transfer_type = transfer_type;
    mav_array_memcpy(packet.uri, uri, sizeof(uint8_t)*120);
    mav_array_memcpy(packet.storage, storage, sizeof(uint8_t)*120);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 243);


    msg->msgid = 142;
    return mavlink_finalize_message(msg, system_id, component_id, 243, 243, 72);
}
# 102 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t request_id,uint8_t uri_type,const uint8_t *uri,uint8_t transfer_type,const uint8_t *storage)
{
# 115 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
    mavlink_resource_request_t packet;
    packet.request_id = request_id;
    packet.uri_type = uri_type;
    packet.transfer_type = transfer_type;
    mav_array_memcpy(packet.uri, uri, sizeof(uint8_t)*120);
    mav_array_memcpy(packet.storage, storage, sizeof(uint8_t)*120);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 243);


    msg->msgid = 142;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 243, 243, 72);
}
# 136 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_resource_request_t* resource_request)
{
    return mavlink_msg_resource_request_pack(system_id, component_id, msg, resource_request->request_id, resource_request->uri_type, resource_request->uri, resource_request->transfer_type, resource_request->storage);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_resource_request_t* resource_request)
{
    return mavlink_msg_resource_request_pack_chan(system_id, component_id, chan, msg, resource_request->request_id, resource_request->uri_type, resource_request->uri, resource_request->transfer_type, resource_request->storage);
}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline void mavlink_msg_resource_request_send(mavlink_channel_t chan, uint8_t request_id, uint8_t uri_type, const uint8_t *uri, uint8_t transfer_type, const uint8_t *storage)
{
# 178 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
    mavlink_resource_request_t packet;
    packet.request_id = request_id;
    packet.uri_type = uri_type;
    packet.transfer_type = transfer_type;
    mav_array_memcpy(packet.uri, uri, sizeof(uint8_t)*120);
    mav_array_memcpy(packet.storage, storage, sizeof(uint8_t)*120);
    _mav_finalize_message_chan_send(chan, 142, (const char *)&packet, 243, 243, 72);

}






static inline void mavlink_msg_resource_request_send_struct(mavlink_channel_t chan, const mavlink_resource_request_t* resource_request)
{



    _mav_finalize_message_chan_send(chan, 142, (const char *)resource_request, 243, 243, 72);

}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline void mavlink_msg_resource_request_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t request_id, uint8_t uri_type, const uint8_t *uri, uint8_t transfer_type, const uint8_t *storage)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
    mavlink_resource_request_t *packet = (mavlink_resource_request_t *)msgbuf;
    packet->request_id = request_id;
    packet->uri_type = uri_type;
    packet->transfer_type = transfer_type;
    mav_array_memcpy(packet->uri, uri, sizeof(uint8_t)*120);
    mav_array_memcpy(packet->storage, storage, sizeof(uint8_t)*120);
    _mav_finalize_message_chan_send(chan, 142, (const char *)packet, 243, 243, 72);

}
# 242 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_resource_request.h"
static inline uint8_t mavlink_msg_resource_request_get_request_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_resource_request_get_uri_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_resource_request_get_uri(const mavlink_message_t* msg, uint8_t *uri)
{
    return _MAV_RETURN_uint8_t_array(msg, uri, 120, 2);
}






static inline uint8_t mavlink_msg_resource_request_get_transfer_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[122];
}






static inline uint16_t mavlink_msg_resource_request_get_storage(const mavlink_message_t* msg, uint8_t *storage)
{
    return _MAV_RETURN_uint8_t_array(msg, storage, 120, 123);
}







static inline void mavlink_msg_resource_request_decode(const mavlink_message_t* msg, mavlink_resource_request_t* resource_request)
{







        uint8_t len = msg->len < 243? msg->len : 243;
        memset(resource_request, 0, 243);
    memcpy(resource_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1014 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h" 1
       




typedef struct __mavlink_scaled_pressure3_t { uint32_t time_boot_ms; float press_abs; float press_diff; int16_t temperature; } __attribute__((packed))





   mavlink_scaled_pressure3_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
    mavlink_scaled_pressure3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 143;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 131);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
    mavlink_scaled_pressure3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 143;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 131);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure3_t* scaled_pressure3)
{
    return mavlink_msg_scaled_pressure3_pack(system_id, component_id, msg, scaled_pressure3->time_boot_ms, scaled_pressure3->press_abs, scaled_pressure3->press_diff, scaled_pressure3->temperature);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure3_t* scaled_pressure3)
{
    return mavlink_msg_scaled_pressure3_pack_chan(system_id, component_id, chan, msg, scaled_pressure3->time_boot_ms, scaled_pressure3->press_abs, scaled_pressure3->press_diff, scaled_pressure3->temperature);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline void mavlink_msg_scaled_pressure3_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
    mavlink_scaled_pressure3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

    _mav_finalize_message_chan_send(chan, 143, (const char *)&packet, 14, 14, 131);

}






static inline void mavlink_msg_scaled_pressure3_send_struct(mavlink_channel_t chan, const mavlink_scaled_pressure3_t* scaled_pressure3)
{



    _mav_finalize_message_chan_send(chan, 143, (const char *)scaled_pressure3, 14, 14, 131);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline void mavlink_msg_scaled_pressure3_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
    mavlink_scaled_pressure3_t *packet = (mavlink_scaled_pressure3_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->press_abs = press_abs;
    packet->press_diff = press_diff;
    packet->temperature = temperature;

    _mav_finalize_message_chan_send(chan, 143, (const char *)packet, 14, 14, 131);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_scaled_pressure3.h"
static inline uint32_t mavlink_msg_scaled_pressure3_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure3_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure3_get_press_diff(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure3_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure3_decode(const mavlink_message_t* msg, mavlink_scaled_pressure3_t* scaled_pressure3)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(scaled_pressure3, 0, 14);
    memcpy(scaled_pressure3, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1015 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h" 1
       




typedef struct __mavlink_follow_target_t { uint64_t timestamp; uint64_t custom_state; int32_t lat; int32_t lon; float alt; float vel[3]; float acc[3]; float attitude_q[4]; float rates[3]; float position_cov[3]; uint8_t est_capabilities; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
   mavlink_follow_target_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t timestamp, uint8_t est_capabilities, int32_t lat, int32_t lon, float alt, const float *vel, const float *acc, const float *attitude_q, const float *rates, const float *position_cov, uint64_t custom_state)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
    mavlink_follow_target_t packet;
    packet.timestamp = timestamp;
    packet.custom_state = custom_state;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.est_capabilities = est_capabilities;
    mav_array_memcpy(packet.vel, vel, sizeof(float)*3);
    mav_array_memcpy(packet.acc, acc, sizeof(float)*3);
    mav_array_memcpy(packet.attitude_q, attitude_q, sizeof(float)*4);
    mav_array_memcpy(packet.rates, rates, sizeof(float)*3);
    mav_array_memcpy(packet.position_cov, position_cov, sizeof(float)*3);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 93);


    msg->msgid = 144;
    return mavlink_finalize_message(msg, system_id, component_id, 93, 93, 127);
}
# 147 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t timestamp,uint8_t est_capabilities,int32_t lat,int32_t lon,float alt,const float *vel,const float *acc,const float *attitude_q,const float *rates,const float *position_cov,uint64_t custom_state)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
    mavlink_follow_target_t packet;
    packet.timestamp = timestamp;
    packet.custom_state = custom_state;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.est_capabilities = est_capabilities;
    mav_array_memcpy(packet.vel, vel, sizeof(float)*3);
    mav_array_memcpy(packet.acc, acc, sizeof(float)*3);
    mav_array_memcpy(packet.attitude_q, attitude_q, sizeof(float)*4);
    mav_array_memcpy(packet.rates, rates, sizeof(float)*3);
    mav_array_memcpy(packet.position_cov, position_cov, sizeof(float)*3);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 93);


    msg->msgid = 144;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 93, 93, 127);
}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_follow_target_t* follow_target)
{
    return mavlink_msg_follow_target_pack(system_id, component_id, msg, follow_target->timestamp, follow_target->est_capabilities, follow_target->lat, follow_target->lon, follow_target->alt, follow_target->vel, follow_target->acc, follow_target->attitude_q, follow_target->rates, follow_target->position_cov, follow_target->custom_state);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_follow_target_t* follow_target)
{
    return mavlink_msg_follow_target_pack_chan(system_id, component_id, chan, msg, follow_target->timestamp, follow_target->est_capabilities, follow_target->lat, follow_target->lon, follow_target->alt, follow_target->vel, follow_target->acc, follow_target->attitude_q, follow_target->rates, follow_target->position_cov, follow_target->custom_state);
}
# 230 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline void mavlink_msg_follow_target_send(mavlink_channel_t chan, uint64_t timestamp, uint8_t est_capabilities, int32_t lat, int32_t lon, float alt, const float *vel, const float *acc, const float *attitude_q, const float *rates, const float *position_cov, uint64_t custom_state)
{
# 247 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
    mavlink_follow_target_t packet;
    packet.timestamp = timestamp;
    packet.custom_state = custom_state;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.est_capabilities = est_capabilities;
    mav_array_memcpy(packet.vel, vel, sizeof(float)*3);
    mav_array_memcpy(packet.acc, acc, sizeof(float)*3);
    mav_array_memcpy(packet.attitude_q, attitude_q, sizeof(float)*4);
    mav_array_memcpy(packet.rates, rates, sizeof(float)*3);
    mav_array_memcpy(packet.position_cov, position_cov, sizeof(float)*3);
    _mav_finalize_message_chan_send(chan, 144, (const char *)&packet, 93, 93, 127);

}






static inline void mavlink_msg_follow_target_send_struct(mavlink_channel_t chan, const mavlink_follow_target_t* follow_target)
{



    _mav_finalize_message_chan_send(chan, 144, (const char *)follow_target, 93, 93, 127);

}
# 285 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline void mavlink_msg_follow_target_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t timestamp, uint8_t est_capabilities, int32_t lat, int32_t lon, float alt, const float *vel, const float *acc, const float *attitude_q, const float *rates, const float *position_cov, uint64_t custom_state)
{
# 302 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
    mavlink_follow_target_t *packet = (mavlink_follow_target_t *)msgbuf;
    packet->timestamp = timestamp;
    packet->custom_state = custom_state;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->est_capabilities = est_capabilities;
    mav_array_memcpy(packet->vel, vel, sizeof(float)*3);
    mav_array_memcpy(packet->acc, acc, sizeof(float)*3);
    mav_array_memcpy(packet->attitude_q, attitude_q, sizeof(float)*4);
    mav_array_memcpy(packet->rates, rates, sizeof(float)*3);
    mav_array_memcpy(packet->position_cov, position_cov, sizeof(float)*3);
    _mav_finalize_message_chan_send(chan, 144, (const char *)packet, 93, 93, 127);

}
# 329 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
static inline uint64_t mavlink_msg_follow_target_get_timestamp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_follow_target_get_est_capabilities(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[92];
}






static inline int32_t mavlink_msg_follow_target_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_follow_target_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_follow_target_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline uint16_t mavlink_msg_follow_target_get_vel(const mavlink_message_t* msg, float *vel)
{
    return _MAV_RETURN_float_array(msg, vel, 3, 28);
}






static inline uint16_t mavlink_msg_follow_target_get_acc(const mavlink_message_t* msg, float *acc)
{
    return _MAV_RETURN_float_array(msg, acc, 3, 40);
}






static inline uint16_t mavlink_msg_follow_target_get_attitude_q(const mavlink_message_t* msg, float *attitude_q)
{
    return _MAV_RETURN_float_array(msg, attitude_q, 4, 52);
}






static inline uint16_t mavlink_msg_follow_target_get_rates(const mavlink_message_t* msg, float *rates)
{
    return _MAV_RETURN_float_array(msg, rates, 3, 68);
}






static inline uint16_t mavlink_msg_follow_target_get_position_cov(const mavlink_message_t* msg, float *position_cov)
{
    return _MAV_RETURN_float_array(msg, position_cov, 3, 80);
}






static inline uint64_t mavlink_msg_follow_target_get_custom_state(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_follow_target_decode(const mavlink_message_t* msg, mavlink_follow_target_t* follow_target)
{
# 455 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_follow_target.h"
        uint8_t len = msg->len < 93? msg->len : 93;
        memset(follow_target, 0, 93);
    memcpy(follow_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1016 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h" 1
       




typedef struct __mavlink_control_system_state_t { uint64_t time_usec; float x_acc; float y_acc; float z_acc; float x_vel; float y_vel; float z_vel; float x_pos; float y_pos; float z_pos; float airspeed; float vel_variance[3]; float pos_variance[3]; float q[4]; float roll_rate; float pitch_rate; float yaw_rate; } __attribute__((packed))
# 25 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
   mavlink_control_system_state_t;
# 113 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float x_acc, float y_acc, float z_acc, float x_vel, float y_vel, float z_vel, float x_pos, float y_pos, float z_pos, float airspeed, const float *vel_variance, const float *pos_variance, const float *q, float roll_rate, float pitch_rate, float yaw_rate)
{
# 137 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
    mavlink_control_system_state_t packet;
    packet.time_usec = time_usec;
    packet.x_acc = x_acc;
    packet.y_acc = y_acc;
    packet.z_acc = z_acc;
    packet.x_vel = x_vel;
    packet.y_vel = y_vel;
    packet.z_vel = z_vel;
    packet.x_pos = x_pos;
    packet.y_pos = y_pos;
    packet.z_pos = z_pos;
    packet.airspeed = airspeed;
    packet.roll_rate = roll_rate;
    packet.pitch_rate = pitch_rate;
    packet.yaw_rate = yaw_rate;
    mav_array_memcpy(packet.vel_variance, vel_variance, sizeof(float)*3);
    mav_array_memcpy(packet.pos_variance, pos_variance, sizeof(float)*3);
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 100);


    msg->msgid = 146;
    return mavlink_finalize_message(msg, system_id, component_id, 100, 100, 103);
}
# 187 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float x_acc,float y_acc,float z_acc,float x_vel,float y_vel,float z_vel,float x_pos,float y_pos,float z_pos,float airspeed,const float *vel_variance,const float *pos_variance,const float *q,float roll_rate,float pitch_rate,float yaw_rate)
{
# 212 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
    mavlink_control_system_state_t packet;
    packet.time_usec = time_usec;
    packet.x_acc = x_acc;
    packet.y_acc = y_acc;
    packet.z_acc = z_acc;
    packet.x_vel = x_vel;
    packet.y_vel = y_vel;
    packet.z_vel = z_vel;
    packet.x_pos = x_pos;
    packet.y_pos = y_pos;
    packet.z_pos = z_pos;
    packet.airspeed = airspeed;
    packet.roll_rate = roll_rate;
    packet.pitch_rate = pitch_rate;
    packet.yaw_rate = yaw_rate;
    mav_array_memcpy(packet.vel_variance, vel_variance, sizeof(float)*3);
    mav_array_memcpy(packet.pos_variance, pos_variance, sizeof(float)*3);
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 100);


    msg->msgid = 146;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 100, 100, 103);
}
# 245 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_control_system_state_t* control_system_state)
{
    return mavlink_msg_control_system_state_pack(system_id, component_id, msg, control_system_state->time_usec, control_system_state->x_acc, control_system_state->y_acc, control_system_state->z_acc, control_system_state->x_vel, control_system_state->y_vel, control_system_state->z_vel, control_system_state->x_pos, control_system_state->y_pos, control_system_state->z_pos, control_system_state->airspeed, control_system_state->vel_variance, control_system_state->pos_variance, control_system_state->q, control_system_state->roll_rate, control_system_state->pitch_rate, control_system_state->yaw_rate);
}
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_control_system_state_t* control_system_state)
{
    return mavlink_msg_control_system_state_pack_chan(system_id, component_id, chan, msg, control_system_state->time_usec, control_system_state->x_acc, control_system_state->y_acc, control_system_state->z_acc, control_system_state->x_vel, control_system_state->y_vel, control_system_state->z_vel, control_system_state->x_pos, control_system_state->y_pos, control_system_state->z_pos, control_system_state->airspeed, control_system_state->vel_variance, control_system_state->pos_variance, control_system_state->q, control_system_state->roll_rate, control_system_state->pitch_rate, control_system_state->yaw_rate);
}
# 288 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline void mavlink_msg_control_system_state_send(mavlink_channel_t chan, uint64_t time_usec, float x_acc, float y_acc, float z_acc, float x_vel, float y_vel, float z_vel, float x_pos, float y_pos, float z_pos, float airspeed, const float *vel_variance, const float *pos_variance, const float *q, float roll_rate, float pitch_rate, float yaw_rate)
{
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
    mavlink_control_system_state_t packet;
    packet.time_usec = time_usec;
    packet.x_acc = x_acc;
    packet.y_acc = y_acc;
    packet.z_acc = z_acc;
    packet.x_vel = x_vel;
    packet.y_vel = y_vel;
    packet.z_vel = z_vel;
    packet.x_pos = x_pos;
    packet.y_pos = y_pos;
    packet.z_pos = z_pos;
    packet.airspeed = airspeed;
    packet.roll_rate = roll_rate;
    packet.pitch_rate = pitch_rate;
    packet.yaw_rate = yaw_rate;
    mav_array_memcpy(packet.vel_variance, vel_variance, sizeof(float)*3);
    mav_array_memcpy(packet.pos_variance, pos_variance, sizeof(float)*3);
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 146, (const char *)&packet, 100, 100, 103);

}






static inline void mavlink_msg_control_system_state_send_struct(mavlink_channel_t chan, const mavlink_control_system_state_t* control_system_state)
{



    _mav_finalize_message_chan_send(chan, 146, (const char *)control_system_state, 100, 100, 103);

}
# 355 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline void mavlink_msg_control_system_state_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float x_acc, float y_acc, float z_acc, float x_vel, float y_vel, float z_vel, float x_pos, float y_pos, float z_pos, float airspeed, const float *vel_variance, const float *pos_variance, const float *q, float roll_rate, float pitch_rate, float yaw_rate)
{
# 378 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
    mavlink_control_system_state_t *packet = (mavlink_control_system_state_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->x_acc = x_acc;
    packet->y_acc = y_acc;
    packet->z_acc = z_acc;
    packet->x_vel = x_vel;
    packet->y_vel = y_vel;
    packet->z_vel = z_vel;
    packet->x_pos = x_pos;
    packet->y_pos = y_pos;
    packet->z_pos = z_pos;
    packet->airspeed = airspeed;
    packet->roll_rate = roll_rate;
    packet->pitch_rate = pitch_rate;
    packet->yaw_rate = yaw_rate;
    mav_array_memcpy(packet->vel_variance, vel_variance, sizeof(float)*3);
    mav_array_memcpy(packet->pos_variance, pos_variance, sizeof(float)*3);
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 146, (const char *)packet, 100, 100, 103);

}
# 411 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
static inline uint64_t mavlink_msg_control_system_state_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_control_system_state_get_x_acc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_control_system_state_get_y_acc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_control_system_state_get_z_acc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_control_system_state_get_x_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_control_system_state_get_y_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_control_system_state_get_z_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_control_system_state_get_x_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_control_system_state_get_y_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_control_system_state_get_z_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_control_system_state_get_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline uint16_t mavlink_msg_control_system_state_get_vel_variance(const mavlink_message_t* msg, float *vel_variance)
{
    return _MAV_RETURN_float_array(msg, vel_variance, 3, 48);
}






static inline uint16_t mavlink_msg_control_system_state_get_pos_variance(const mavlink_message_t* msg, float *pos_variance)
{
    return _MAV_RETURN_float_array(msg, pos_variance, 3, 60);
}






static inline uint16_t mavlink_msg_control_system_state_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 72);
}






static inline float mavlink_msg_control_system_state_get_roll_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 88);
}






static inline float mavlink_msg_control_system_state_get_pitch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 92);
}






static inline float mavlink_msg_control_system_state_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 96);
}







static inline void mavlink_msg_control_system_state_decode(const mavlink_message_t* msg, mavlink_control_system_state_t* control_system_state)
{
# 603 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_control_system_state.h"
        uint8_t len = msg->len < 100? msg->len : 100;
        memset(control_system_state, 0, 100);
    memcpy(control_system_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1017 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h" 1
       




typedef struct __mavlink_battery_status_t { int32_t current_consumed; int32_t energy_consumed; int16_t temperature; uint16_t voltages[10]; int16_t current_battery; uint8_t id; uint8_t battery_function; uint8_t type; int8_t battery_remaining; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
   mavlink_battery_status_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t id, uint8_t battery_function, uint8_t type, int16_t temperature, const uint16_t *voltages, int16_t current_battery, int32_t current_consumed, int32_t energy_consumed, int8_t battery_remaining)
{
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
    mavlink_battery_status_t packet;
    packet.current_consumed = current_consumed;
    packet.energy_consumed = energy_consumed;
    packet.temperature = temperature;
    packet.current_battery = current_battery;
    packet.id = id;
    packet.battery_function = battery_function;
    packet.type = type;
    packet.battery_remaining = battery_remaining;
    mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 147;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 154);
}
# 129 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t id,uint8_t battery_function,uint8_t type,int16_t temperature,const uint16_t *voltages,int16_t current_battery,int32_t current_consumed,int32_t energy_consumed,int8_t battery_remaining)
{
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
    mavlink_battery_status_t packet;
    packet.current_consumed = current_consumed;
    packet.energy_consumed = energy_consumed;
    packet.temperature = temperature;
    packet.current_battery = current_battery;
    packet.id = id;
    packet.battery_function = battery_function;
    packet.type = type;
    packet.battery_remaining = battery_remaining;
    mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 147;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 154);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
    return mavlink_msg_battery_status_pack(system_id, component_id, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
    return mavlink_msg_battery_status_pack_chan(system_id, component_id, chan, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 206 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline void mavlink_msg_battery_status_send(mavlink_channel_t chan, uint8_t id, uint8_t battery_function, uint8_t type, int16_t temperature, const uint16_t *voltages, int16_t current_battery, int32_t current_consumed, int32_t energy_consumed, int8_t battery_remaining)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
    mavlink_battery_status_t packet;
    packet.current_consumed = current_consumed;
    packet.energy_consumed = energy_consumed;
    packet.temperature = temperature;
    packet.current_battery = current_battery;
    packet.id = id;
    packet.battery_function = battery_function;
    packet.type = type;
    packet.battery_remaining = battery_remaining;
    mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
    _mav_finalize_message_chan_send(chan, 147, (const char *)&packet, 36, 36, 154);

}






static inline void mavlink_msg_battery_status_send_struct(mavlink_channel_t chan, const mavlink_battery_status_t* battery_status)
{



    _mav_finalize_message_chan_send(chan, 147, (const char *)battery_status, 36, 36, 154);

}
# 257 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline void mavlink_msg_battery_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t id, uint8_t battery_function, uint8_t type, int16_t temperature, const uint16_t *voltages, int16_t current_battery, int32_t current_consumed, int32_t energy_consumed, int8_t battery_remaining)
{
# 272 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
    mavlink_battery_status_t *packet = (mavlink_battery_status_t *)msgbuf;
    packet->current_consumed = current_consumed;
    packet->energy_consumed = energy_consumed;
    packet->temperature = temperature;
    packet->current_battery = current_battery;
    packet->id = id;
    packet->battery_function = battery_function;
    packet->type = type;
    packet->battery_remaining = battery_remaining;
    mav_array_memcpy(packet->voltages, voltages, sizeof(uint16_t)*10);
    _mav_finalize_message_chan_send(chan, 147, (const char *)packet, 36, 36, 154);

}
# 297 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
static inline uint8_t mavlink_msg_battery_status_get_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_battery_status_get_battery_function(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_battery_status_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int16_t mavlink_msg_battery_status_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline uint16_t mavlink_msg_battery_status_get_voltages(const mavlink_message_t* msg, uint16_t *voltages)
{
    return _MAV_RETURN_uint16_t_array(msg, voltages, 10, 10);
}






static inline int16_t mavlink_msg_battery_status_get_current_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 30);
}






static inline int32_t mavlink_msg_battery_status_get_current_consumed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_battery_status_get_energy_consumed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int8_t mavlink_msg_battery_status_get_battery_remaining(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
# 401 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_battery_status.h"
        uint8_t len = msg->len < 36? msg->len : 36;
        memset(battery_status, 0, 36);
    memcpy(battery_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1018 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h" 1
       




typedef struct __mavlink_autopilot_version_t { uint64_t capabilities; uint64_t uid; uint32_t flight_sw_version; uint32_t middleware_sw_version; uint32_t os_sw_version; uint32_t board_version; uint16_t vendor_id; uint16_t product_id; uint8_t flight_custom_version[8]; uint8_t middleware_custom_version[8]; uint8_t os_custom_version[8]; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
   mavlink_autopilot_version_t;
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t capabilities, uint32_t flight_sw_version, uint32_t middleware_sw_version, uint32_t os_sw_version, uint32_t board_version, const uint8_t *flight_custom_version, const uint8_t *middleware_custom_version, const uint8_t *os_custom_version, uint16_t vendor_id, uint16_t product_id, uint64_t uid)
{
# 107 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
    mavlink_autopilot_version_t packet;
    packet.capabilities = capabilities;
    packet.uid = uid;
    packet.flight_sw_version = flight_sw_version;
    packet.middleware_sw_version = middleware_sw_version;
    packet.os_sw_version = os_sw_version;
    packet.board_version = board_version;
    packet.vendor_id = vendor_id;
    packet.product_id = product_id;
    mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


    msg->msgid = 148;
    return mavlink_finalize_message(msg, system_id, component_id, 60, 60, 178);
}
# 145 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t capabilities,uint32_t flight_sw_version,uint32_t middleware_sw_version,uint32_t os_sw_version,uint32_t board_version,const uint8_t *flight_custom_version,const uint8_t *middleware_custom_version,const uint8_t *os_custom_version,uint16_t vendor_id,uint16_t product_id,uint64_t uid)
{
# 164 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
    mavlink_autopilot_version_t packet;
    packet.capabilities = capabilities;
    packet.uid = uid;
    packet.flight_sw_version = flight_sw_version;
    packet.middleware_sw_version = middleware_sw_version;
    packet.os_sw_version = os_sw_version;
    packet.board_version = board_version;
    packet.vendor_id = vendor_id;
    packet.product_id = product_id;
    mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


    msg->msgid = 148;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 60, 60, 178);
}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
    return mavlink_msg_autopilot_version_pack(system_id, component_id, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 205 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
    return mavlink_msg_autopilot_version_pack_chan(system_id, component_id, chan, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 228 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline void mavlink_msg_autopilot_version_send(mavlink_channel_t chan, uint64_t capabilities, uint32_t flight_sw_version, uint32_t middleware_sw_version, uint32_t os_sw_version, uint32_t board_version, const uint8_t *flight_custom_version, const uint8_t *middleware_custom_version, const uint8_t *os_custom_version, uint16_t vendor_id, uint16_t product_id, uint64_t uid)
{
# 245 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
    mavlink_autopilot_version_t packet;
    packet.capabilities = capabilities;
    packet.uid = uid;
    packet.flight_sw_version = flight_sw_version;
    packet.middleware_sw_version = middleware_sw_version;
    packet.os_sw_version = os_sw_version;
    packet.board_version = board_version;
    packet.vendor_id = vendor_id;
    packet.product_id = product_id;
    mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
    _mav_finalize_message_chan_send(chan, 148, (const char *)&packet, 60, 60, 178);

}






static inline void mavlink_msg_autopilot_version_send_struct(mavlink_channel_t chan, const mavlink_autopilot_version_t* autopilot_version)
{



    _mav_finalize_message_chan_send(chan, 148, (const char *)autopilot_version, 60, 60, 178);

}
# 283 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline void mavlink_msg_autopilot_version_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t capabilities, uint32_t flight_sw_version, uint32_t middleware_sw_version, uint32_t os_sw_version, uint32_t board_version, const uint8_t *flight_custom_version, const uint8_t *middleware_custom_version, const uint8_t *os_custom_version, uint16_t vendor_id, uint16_t product_id, uint64_t uid)
{
# 300 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
    mavlink_autopilot_version_t *packet = (mavlink_autopilot_version_t *)msgbuf;
    packet->capabilities = capabilities;
    packet->uid = uid;
    packet->flight_sw_version = flight_sw_version;
    packet->middleware_sw_version = middleware_sw_version;
    packet->os_sw_version = os_sw_version;
    packet->board_version = board_version;
    packet->vendor_id = vendor_id;
    packet->product_id = product_id;
    mav_array_memcpy(packet->flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet->middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet->os_custom_version, os_custom_version, sizeof(uint8_t)*8);
    _mav_finalize_message_chan_send(chan, 148, (const char *)packet, 60, 60, 178);

}
# 327 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
static inline uint64_t mavlink_msg_autopilot_version_get_capabilities(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_autopilot_version_get_flight_sw_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 16);
}






static inline uint32_t mavlink_msg_autopilot_version_get_middleware_sw_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint32_t mavlink_msg_autopilot_version_get_os_sw_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint32_t mavlink_msg_autopilot_version_get_board_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 28);
}






static inline uint16_t mavlink_msg_autopilot_version_get_flight_custom_version(const mavlink_message_t* msg, uint8_t *flight_custom_version)
{
    return _MAV_RETURN_uint8_t_array(msg, flight_custom_version, 8, 36);
}






static inline uint16_t mavlink_msg_autopilot_version_get_middleware_custom_version(const mavlink_message_t* msg, uint8_t *middleware_custom_version)
{
    return _MAV_RETURN_uint8_t_array(msg, middleware_custom_version, 8, 44);
}






static inline uint16_t mavlink_msg_autopilot_version_get_os_custom_version(const mavlink_message_t* msg, uint8_t *os_custom_version)
{
    return _MAV_RETURN_uint8_t_array(msg, os_custom_version, 8, 52);
}






static inline uint16_t mavlink_msg_autopilot_version_get_vendor_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_autopilot_version_get_product_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint64_t mavlink_msg_autopilot_version_get_uid(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_autopilot_version_decode(const mavlink_message_t* msg, mavlink_autopilot_version_t* autopilot_version)
{
# 453 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_autopilot_version.h"
        uint8_t len = msg->len < 60? msg->len : 60;
        memset(autopilot_version, 0, 60);
    memcpy(autopilot_version, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1019 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h" 1
       




typedef struct __mavlink_landing_target_t { uint64_t time_usec; float angle_x; float angle_y; float distance; float size_x; float size_y; uint8_t target_num; uint8_t frame; } __attribute__((packed))
# 16 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
   mavlink_landing_target_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t target_num, uint8_t frame, float angle_x, float angle_y, float distance, float size_x, float size_y)
{
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
    mavlink_landing_target_t packet;
    packet.time_usec = time_usec;
    packet.angle_x = angle_x;
    packet.angle_y = angle_y;
    packet.distance = distance;
    packet.size_x = size_x;
    packet.size_y = size_y;
    packet.target_num = target_num;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 149;
    return mavlink_finalize_message(msg, system_id, component_id, 30, 30, 200);
}
# 124 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t target_num,uint8_t frame,float angle_x,float angle_y,float distance,float size_x,float size_y)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
    mavlink_landing_target_t packet;
    packet.time_usec = time_usec;
    packet.angle_x = angle_x;
    packet.angle_y = angle_y;
    packet.distance = distance;
    packet.size_x = size_x;
    packet.size_y = size_y;
    packet.target_num = target_num;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 149;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 30, 200);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_landing_target_t* landing_target)
{
    return mavlink_msg_landing_target_pack(system_id, component_id, msg, landing_target->time_usec, landing_target->target_num, landing_target->frame, landing_target->angle_x, landing_target->angle_y, landing_target->distance, landing_target->size_x, landing_target->size_y);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_landing_target_t* landing_target)
{
    return mavlink_msg_landing_target_pack_chan(system_id, component_id, chan, msg, landing_target->time_usec, landing_target->target_num, landing_target->frame, landing_target->angle_x, landing_target->angle_y, landing_target->distance, landing_target->size_x, landing_target->size_y);
}
# 200 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline void mavlink_msg_landing_target_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t target_num, uint8_t frame, float angle_x, float angle_y, float distance, float size_x, float size_y)
{
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
    mavlink_landing_target_t packet;
    packet.time_usec = time_usec;
    packet.angle_x = angle_x;
    packet.angle_y = angle_y;
    packet.distance = distance;
    packet.size_x = size_x;
    packet.size_y = size_y;
    packet.target_num = target_num;
    packet.frame = frame;

    _mav_finalize_message_chan_send(chan, 149, (const char *)&packet, 30, 30, 200);

}






static inline void mavlink_msg_landing_target_send_struct(mavlink_channel_t chan, const mavlink_landing_target_t* landing_target)
{



    _mav_finalize_message_chan_send(chan, 149, (const char *)landing_target, 30, 30, 200);

}
# 251 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline void mavlink_msg_landing_target_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t target_num, uint8_t frame, float angle_x, float angle_y, float distance, float size_x, float size_y)
{
# 266 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
    mavlink_landing_target_t *packet = (mavlink_landing_target_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->angle_x = angle_x;
    packet->angle_y = angle_y;
    packet->distance = distance;
    packet->size_x = size_x;
    packet->size_y = size_y;
    packet->target_num = target_num;
    packet->frame = frame;

    _mav_finalize_message_chan_send(chan, 149, (const char *)packet, 30, 30, 200);

}
# 291 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
static inline uint64_t mavlink_msg_landing_target_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_landing_target_get_target_num(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline uint8_t mavlink_msg_landing_target_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}






static inline float mavlink_msg_landing_target_get_angle_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_landing_target_get_angle_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_landing_target_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_landing_target_get_size_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_landing_target_get_size_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_landing_target_decode(const mavlink_message_t* msg, mavlink_landing_target_t* landing_target)
{
# 384 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_landing_target.h"
        uint8_t len = msg->len < 30? msg->len : 30;
        memset(landing_target, 0, 30);
    memcpy(landing_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1020 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h" 1
       




typedef struct __mavlink_estimator_status_t { uint64_t time_usec; float vel_ratio; float pos_horiz_ratio; float pos_vert_ratio; float mag_ratio; float hagl_ratio; float tas_ratio; float pos_horiz_accuracy; float pos_vert_accuracy; uint16_t flags; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
   mavlink_estimator_status_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint16_t flags, float vel_ratio, float pos_horiz_ratio, float pos_vert_ratio, float mag_ratio, float hagl_ratio, float tas_ratio, float pos_horiz_accuracy, float pos_vert_accuracy)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
    mavlink_estimator_status_t packet;
    packet.time_usec = time_usec;
    packet.vel_ratio = vel_ratio;
    packet.pos_horiz_ratio = pos_horiz_ratio;
    packet.pos_vert_ratio = pos_vert_ratio;
    packet.mag_ratio = mag_ratio;
    packet.hagl_ratio = hagl_ratio;
    packet.tas_ratio = tas_ratio;
    packet.pos_horiz_accuracy = pos_horiz_accuracy;
    packet.pos_vert_accuracy = pos_vert_accuracy;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 230;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 163);
}
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint16_t flags,float vel_ratio,float pos_horiz_ratio,float pos_vert_ratio,float mag_ratio,float hagl_ratio,float tas_ratio,float pos_horiz_accuracy,float pos_vert_accuracy)
{
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
    mavlink_estimator_status_t packet;
    packet.time_usec = time_usec;
    packet.vel_ratio = vel_ratio;
    packet.pos_horiz_ratio = pos_horiz_ratio;
    packet.pos_vert_ratio = pos_vert_ratio;
    packet.mag_ratio = mag_ratio;
    packet.hagl_ratio = hagl_ratio;
    packet.tas_ratio = tas_ratio;
    packet.pos_horiz_accuracy = pos_horiz_accuracy;
    packet.pos_vert_accuracy = pos_vert_accuracy;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 230;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 163);
}
# 184 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_estimator_status_t* estimator_status)
{
    return mavlink_msg_estimator_status_pack(system_id, component_id, msg, estimator_status->time_usec, estimator_status->flags, estimator_status->vel_ratio, estimator_status->pos_horiz_ratio, estimator_status->pos_vert_ratio, estimator_status->mag_ratio, estimator_status->hagl_ratio, estimator_status->tas_ratio, estimator_status->pos_horiz_accuracy, estimator_status->pos_vert_accuracy);
}
# 198 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_estimator_status_t* estimator_status)
{
    return mavlink_msg_estimator_status_pack_chan(system_id, component_id, chan, msg, estimator_status->time_usec, estimator_status->flags, estimator_status->vel_ratio, estimator_status->pos_horiz_ratio, estimator_status->pos_vert_ratio, estimator_status->mag_ratio, estimator_status->hagl_ratio, estimator_status->tas_ratio, estimator_status->pos_horiz_accuracy, estimator_status->pos_vert_accuracy);
}
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline void mavlink_msg_estimator_status_send(mavlink_channel_t chan, uint64_t time_usec, uint16_t flags, float vel_ratio, float pos_horiz_ratio, float pos_vert_ratio, float mag_ratio, float hagl_ratio, float tas_ratio, float pos_horiz_accuracy, float pos_vert_accuracy)
{
# 237 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
    mavlink_estimator_status_t packet;
    packet.time_usec = time_usec;
    packet.vel_ratio = vel_ratio;
    packet.pos_horiz_ratio = pos_horiz_ratio;
    packet.pos_vert_ratio = pos_vert_ratio;
    packet.mag_ratio = mag_ratio;
    packet.hagl_ratio = hagl_ratio;
    packet.tas_ratio = tas_ratio;
    packet.pos_horiz_accuracy = pos_horiz_accuracy;
    packet.pos_vert_accuracy = pos_vert_accuracy;
    packet.flags = flags;

    _mav_finalize_message_chan_send(chan, 230, (const char *)&packet, 42, 42, 163);

}






static inline void mavlink_msg_estimator_status_send_struct(mavlink_channel_t chan, const mavlink_estimator_status_t* estimator_status)
{



    _mav_finalize_message_chan_send(chan, 230, (const char *)estimator_status, 42, 42, 163);

}
# 275 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline void mavlink_msg_estimator_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint16_t flags, float vel_ratio, float pos_horiz_ratio, float pos_vert_ratio, float mag_ratio, float hagl_ratio, float tas_ratio, float pos_horiz_accuracy, float pos_vert_accuracy)
{
# 292 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
    mavlink_estimator_status_t *packet = (mavlink_estimator_status_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->vel_ratio = vel_ratio;
    packet->pos_horiz_ratio = pos_horiz_ratio;
    packet->pos_vert_ratio = pos_vert_ratio;
    packet->mag_ratio = mag_ratio;
    packet->hagl_ratio = hagl_ratio;
    packet->tas_ratio = tas_ratio;
    packet->pos_horiz_accuracy = pos_horiz_accuracy;
    packet->pos_vert_accuracy = pos_vert_accuracy;
    packet->flags = flags;

    _mav_finalize_message_chan_send(chan, 230, (const char *)packet, 42, 42, 163);

}
# 319 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
static inline uint64_t mavlink_msg_estimator_status_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_estimator_status_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 40);
}






static inline float mavlink_msg_estimator_status_get_vel_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_estimator_status_get_pos_horiz_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_estimator_status_get_pos_vert_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_estimator_status_get_mag_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_estimator_status_get_hagl_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_estimator_status_get_tas_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_estimator_status_get_pos_horiz_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_estimator_status_get_pos_vert_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_estimator_status_decode(const mavlink_message_t* msg, mavlink_estimator_status_t* estimator_status)
{
# 434 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_estimator_status.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(estimator_status, 0, 42);
    memcpy(estimator_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1021 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h" 1
       




typedef struct __mavlink_wind_cov_t { uint64_t time_usec; float wind_x; float wind_y; float wind_z; float var_horiz; float var_vert; float wind_alt; float horiz_accuracy; float vert_accuracy; } __attribute__((packed))
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
   mavlink_wind_cov_t;
# 79 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float wind_x, float wind_y, float wind_z, float var_horiz, float var_vert, float wind_alt, float horiz_accuracy, float vert_accuracy)
{
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
    mavlink_wind_cov_t packet;
    packet.time_usec = time_usec;
    packet.wind_x = wind_x;
    packet.wind_y = wind_y;
    packet.wind_z = wind_z;
    packet.var_horiz = var_horiz;
    packet.var_vert = var_vert;
    packet.wind_alt = wind_alt;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 231;
    return mavlink_finalize_message(msg, system_id, component_id, 40, 40, 105);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float wind_x,float wind_y,float wind_z,float var_horiz,float var_vert,float wind_alt,float horiz_accuracy,float vert_accuracy)
{
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
    mavlink_wind_cov_t packet;
    packet.time_usec = time_usec;
    packet.wind_x = wind_x;
    packet.wind_y = wind_y;
    packet.wind_z = wind_z;
    packet.var_horiz = var_horiz;
    packet.var_vert = var_vert;
    packet.wind_alt = wind_alt;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 231;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 40, 40, 105);
}
# 175 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_wind_cov_t* wind_cov)
{
    return mavlink_msg_wind_cov_pack(system_id, component_id, msg, wind_cov->time_usec, wind_cov->wind_x, wind_cov->wind_y, wind_cov->wind_z, wind_cov->var_horiz, wind_cov->var_vert, wind_cov->wind_alt, wind_cov->horiz_accuracy, wind_cov->vert_accuracy);
}
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_wind_cov_t* wind_cov)
{
    return mavlink_msg_wind_cov_pack_chan(system_id, component_id, chan, msg, wind_cov->time_usec, wind_cov->wind_x, wind_cov->wind_y, wind_cov->wind_z, wind_cov->var_horiz, wind_cov->var_vert, wind_cov->wind_alt, wind_cov->horiz_accuracy, wind_cov->vert_accuracy);
}
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline void mavlink_msg_wind_cov_send(mavlink_channel_t chan, uint64_t time_usec, float wind_x, float wind_y, float wind_z, float var_horiz, float var_vert, float wind_alt, float horiz_accuracy, float vert_accuracy)
{
# 226 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
    mavlink_wind_cov_t packet;
    packet.time_usec = time_usec;
    packet.wind_x = wind_x;
    packet.wind_y = wind_y;
    packet.wind_z = wind_z;
    packet.var_horiz = var_horiz;
    packet.var_vert = var_vert;
    packet.wind_alt = wind_alt;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;

    _mav_finalize_message_chan_send(chan, 231, (const char *)&packet, 40, 40, 105);

}






static inline void mavlink_msg_wind_cov_send_struct(mavlink_channel_t chan, const mavlink_wind_cov_t* wind_cov)
{



    _mav_finalize_message_chan_send(chan, 231, (const char *)wind_cov, 40, 40, 105);

}
# 263 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline void mavlink_msg_wind_cov_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float wind_x, float wind_y, float wind_z, float var_horiz, float var_vert, float wind_alt, float horiz_accuracy, float vert_accuracy)
{
# 279 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
    mavlink_wind_cov_t *packet = (mavlink_wind_cov_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->wind_x = wind_x;
    packet->wind_y = wind_y;
    packet->wind_z = wind_z;
    packet->var_horiz = var_horiz;
    packet->var_vert = var_vert;
    packet->wind_alt = wind_alt;
    packet->horiz_accuracy = horiz_accuracy;
    packet->vert_accuracy = vert_accuracy;

    _mav_finalize_message_chan_send(chan, 231, (const char *)packet, 40, 40, 105);

}
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
static inline uint64_t mavlink_msg_wind_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_wind_cov_get_wind_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_wind_cov_get_wind_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_wind_cov_get_wind_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_wind_cov_get_var_horiz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_wind_cov_get_var_vert(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_wind_cov_get_wind_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_wind_cov_get_horiz_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_wind_cov_get_vert_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_wind_cov_decode(const mavlink_message_t* msg, mavlink_wind_cov_t* wind_cov)
{
# 409 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_wind_cov.h"
        uint8_t len = msg->len < 40? msg->len : 40;
        memset(wind_cov, 0, 40);
    memcpy(wind_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1022 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h" 1
       




typedef struct __mavlink_gps_input_t { uint64_t time_usec; uint32_t time_week_ms; int32_t lat; int32_t lon; float alt; float hdop; float vdop; float vn; float ve; float vd; float speed_accuracy; float horiz_accuracy; float vert_accuracy; uint16_t ignore_flags; uint16_t time_week; uint8_t gps_id; uint8_t fix_type; uint8_t satellites_visible; } __attribute__((packed))
# 26 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
   mavlink_gps_input_t;
# 115 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t gps_id, uint16_t ignore_flags, uint32_t time_week_ms, uint16_t time_week, uint8_t fix_type, int32_t lat, int32_t lon, float alt, float hdop, float vdop, float vn, float ve, float vd, float speed_accuracy, float horiz_accuracy, float vert_accuracy, uint8_t satellites_visible)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
    mavlink_gps_input_t packet;
    packet.time_usec = time_usec;
    packet.time_week_ms = time_week_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.hdop = hdop;
    packet.vdop = vdop;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.speed_accuracy = speed_accuracy;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;
    packet.ignore_flags = ignore_flags;
    packet.time_week = time_week;
    packet.gps_id = gps_id;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 63);


    msg->msgid = 232;
    return mavlink_finalize_message(msg, system_id, component_id, 63, 63, 151);
}
# 194 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t gps_id,uint16_t ignore_flags,uint32_t time_week_ms,uint16_t time_week,uint8_t fix_type,int32_t lat,int32_t lon,float alt,float hdop,float vdop,float vn,float ve,float vd,float speed_accuracy,float horiz_accuracy,float vert_accuracy,uint8_t satellites_visible)
{
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
    mavlink_gps_input_t packet;
    packet.time_usec = time_usec;
    packet.time_week_ms = time_week_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.hdop = hdop;
    packet.vdop = vdop;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.speed_accuracy = speed_accuracy;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;
    packet.ignore_flags = ignore_flags;
    packet.time_week = time_week;
    packet.gps_id = gps_id;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 63);


    msg->msgid = 232;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 63, 63, 151);
}
# 256 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_input_t* gps_input)
{
    return mavlink_msg_gps_input_pack(system_id, component_id, msg, gps_input->time_usec, gps_input->gps_id, gps_input->ignore_flags, gps_input->time_week_ms, gps_input->time_week, gps_input->fix_type, gps_input->lat, gps_input->lon, gps_input->alt, gps_input->hdop, gps_input->vdop, gps_input->vn, gps_input->ve, gps_input->vd, gps_input->speed_accuracy, gps_input->horiz_accuracy, gps_input->vert_accuracy, gps_input->satellites_visible);
}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_input_t* gps_input)
{
    return mavlink_msg_gps_input_pack_chan(system_id, component_id, chan, msg, gps_input->time_usec, gps_input->gps_id, gps_input->ignore_flags, gps_input->time_week_ms, gps_input->time_week, gps_input->fix_type, gps_input->lat, gps_input->lon, gps_input->alt, gps_input->hdop, gps_input->vdop, gps_input->vn, gps_input->ve, gps_input->vd, gps_input->speed_accuracy, gps_input->horiz_accuracy, gps_input->vert_accuracy, gps_input->satellites_visible);
}
# 300 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline void mavlink_msg_gps_input_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t gps_id, uint16_t ignore_flags, uint32_t time_week_ms, uint16_t time_week, uint8_t fix_type, int32_t lat, int32_t lon, float alt, float hdop, float vdop, float vn, float ve, float vd, float speed_accuracy, float horiz_accuracy, float vert_accuracy, uint8_t satellites_visible)
{
# 325 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
    mavlink_gps_input_t packet;
    packet.time_usec = time_usec;
    packet.time_week_ms = time_week_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.hdop = hdop;
    packet.vdop = vdop;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.speed_accuracy = speed_accuracy;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;
    packet.ignore_flags = ignore_flags;
    packet.time_week = time_week;
    packet.gps_id = gps_id;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

    _mav_finalize_message_chan_send(chan, 232, (const char *)&packet, 63, 63, 151);

}






static inline void mavlink_msg_gps_input_send_struct(mavlink_channel_t chan, const mavlink_gps_input_t* gps_input)
{



    _mav_finalize_message_chan_send(chan, 232, (const char *)gps_input, 63, 63, 151);

}
# 371 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline void mavlink_msg_gps_input_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, uint8_t gps_id, uint16_t ignore_flags, uint32_t time_week_ms, uint16_t time_week, uint8_t fix_type, int32_t lat, int32_t lon, float alt, float hdop, float vdop, float vn, float ve, float vd, float speed_accuracy, float horiz_accuracy, float vert_accuracy, uint8_t satellites_visible)
{
# 396 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
    mavlink_gps_input_t *packet = (mavlink_gps_input_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->time_week_ms = time_week_ms;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->hdop = hdop;
    packet->vdop = vdop;
    packet->vn = vn;
    packet->ve = ve;
    packet->vd = vd;
    packet->speed_accuracy = speed_accuracy;
    packet->horiz_accuracy = horiz_accuracy;
    packet->vert_accuracy = vert_accuracy;
    packet->ignore_flags = ignore_flags;
    packet->time_week = time_week;
    packet->gps_id = gps_id;
    packet->fix_type = fix_type;
    packet->satellites_visible = satellites_visible;

    _mav_finalize_message_chan_send(chan, 232, (const char *)packet, 63, 63, 151);

}
# 431 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
static inline uint64_t mavlink_msg_gps_input_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_input_get_gps_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[60];
}






static inline uint16_t mavlink_msg_gps_input_get_ignore_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 56);
}






static inline uint32_t mavlink_msg_gps_input_get_time_week_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint16_t mavlink_msg_gps_input_get_time_week(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 58);
}






static inline uint8_t mavlink_msg_gps_input_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[61];
}






static inline int32_t mavlink_msg_gps_input_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_input_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline float mavlink_msg_gps_input_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_gps_input_get_hdop(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_gps_input_get_vdop(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_gps_input_get_vn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_gps_input_get_ve(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_gps_input_get_vd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_gps_input_get_speed_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_gps_input_get_horiz_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_gps_input_get_vert_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline uint8_t mavlink_msg_gps_input_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[62];
}







static inline void mavlink_msg_gps_input_decode(const mavlink_message_t* msg, mavlink_gps_input_t* gps_input)
{
# 634 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_input.h"
        uint8_t len = msg->len < 63? msg->len : 63;
        memset(gps_input, 0, 63);
    memcpy(gps_input, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1023 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h" 1
       




typedef struct __mavlink_gps_rtcm_data_t { uint8_t flags; uint8_t len; uint8_t data[180]; } __attribute__((packed))




   mavlink_gps_rtcm_data_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t flags, uint8_t len, const uint8_t *data)
{







    mavlink_gps_rtcm_data_t packet;
    packet.flags = flags;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*180);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 182);


    msg->msgid = 233;
    return mavlink_finalize_message(msg, system_id, component_id, 182, 182, 35);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t flags,uint8_t len,const uint8_t *data)
{







    mavlink_gps_rtcm_data_t packet;
    packet.flags = flags;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*180);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 182);


    msg->msgid = 233;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 182, 182, 35);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_rtcm_data_t* gps_rtcm_data)
{
    return mavlink_msg_gps_rtcm_data_pack(system_id, component_id, msg, gps_rtcm_data->flags, gps_rtcm_data->len, gps_rtcm_data->data);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_rtcm_data_t* gps_rtcm_data)
{
    return mavlink_msg_gps_rtcm_data_pack_chan(system_id, component_id, chan, msg, gps_rtcm_data->flags, gps_rtcm_data->len, gps_rtcm_data->data);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline void mavlink_msg_gps_rtcm_data_send(mavlink_channel_t chan, uint8_t flags, uint8_t len, const uint8_t *data)
{







    mavlink_gps_rtcm_data_t packet;
    packet.flags = flags;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*180);
    _mav_finalize_message_chan_send(chan, 233, (const char *)&packet, 182, 182, 35);

}






static inline void mavlink_msg_gps_rtcm_data_send_struct(mavlink_channel_t chan, const mavlink_gps_rtcm_data_t* gps_rtcm_data)
{



    _mav_finalize_message_chan_send(chan, 233, (const char *)gps_rtcm_data, 182, 182, 35);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline void mavlink_msg_gps_rtcm_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t flags, uint8_t len, const uint8_t *data)
{







    mavlink_gps_rtcm_data_t *packet = (mavlink_gps_rtcm_data_t *)msgbuf;
    packet->flags = flags;
    packet->len = len;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*180);
    _mav_finalize_message_chan_send(chan, 233, (const char *)packet, 182, 182, 35);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_gps_rtcm_data.h"
static inline uint8_t mavlink_msg_gps_rtcm_data_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gps_rtcm_data_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_gps_rtcm_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 180, 2);
}







static inline void mavlink_msg_gps_rtcm_data_decode(const mavlink_message_t* msg, mavlink_gps_rtcm_data_t* gps_rtcm_data)
{





        uint8_t len = msg->len < 182? msg->len : 182;
        memset(gps_rtcm_data, 0, 182);
    memcpy(gps_rtcm_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1024 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h" 1
       




typedef struct __mavlink_high_latency_t { uint32_t custom_mode; int32_t latitude; int32_t longitude; int16_t roll; int16_t pitch; uint16_t heading; int16_t heading_sp; int16_t altitude_amsl; int16_t altitude_sp; uint16_t wp_distance; uint8_t base_mode; uint8_t landed_state; int8_t throttle; uint8_t airspeed; uint8_t airspeed_sp; uint8_t groundspeed; int8_t climb_rate; uint8_t gps_nsat; uint8_t gps_fix_type; uint8_t battery_remaining; int8_t temperature; int8_t temperature_air; uint8_t failsafe; uint8_t wp_num; } __attribute__((packed))
# 32 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
   mavlink_high_latency_t;
# 139 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t base_mode, uint32_t custom_mode, uint8_t landed_state, int16_t roll, int16_t pitch, uint16_t heading, int8_t throttle, int16_t heading_sp, int32_t latitude, int32_t longitude, int16_t altitude_amsl, int16_t altitude_sp, uint8_t airspeed, uint8_t airspeed_sp, uint8_t groundspeed, int8_t climb_rate, uint8_t gps_nsat, uint8_t gps_fix_type, uint8_t battery_remaining, int8_t temperature, int8_t temperature_air, uint8_t failsafe, uint8_t wp_num, uint16_t wp_distance)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
    mavlink_high_latency_t packet;
    packet.custom_mode = custom_mode;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.heading = heading;
    packet.heading_sp = heading_sp;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_sp = altitude_sp;
    packet.wp_distance = wp_distance;
    packet.base_mode = base_mode;
    packet.landed_state = landed_state;
    packet.throttle = throttle;
    packet.airspeed = airspeed;
    packet.airspeed_sp = airspeed_sp;
    packet.groundspeed = groundspeed;
    packet.climb_rate = climb_rate;
    packet.gps_nsat = gps_nsat;
    packet.gps_fix_type = gps_fix_type;
    packet.battery_remaining = battery_remaining;
    packet.temperature = temperature;
    packet.temperature_air = temperature_air;
    packet.failsafe = failsafe;
    packet.wp_num = wp_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 234;
    return mavlink_finalize_message(msg, system_id, component_id, 40, 40, 150);
}
# 236 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t base_mode,uint32_t custom_mode,uint8_t landed_state,int16_t roll,int16_t pitch,uint16_t heading,int8_t throttle,int16_t heading_sp,int32_t latitude,int32_t longitude,int16_t altitude_amsl,int16_t altitude_sp,uint8_t airspeed,uint8_t airspeed_sp,uint8_t groundspeed,int8_t climb_rate,uint8_t gps_nsat,uint8_t gps_fix_type,uint8_t battery_remaining,int8_t temperature,int8_t temperature_air,uint8_t failsafe,uint8_t wp_num,uint16_t wp_distance)
{
# 269 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
    mavlink_high_latency_t packet;
    packet.custom_mode = custom_mode;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.heading = heading;
    packet.heading_sp = heading_sp;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_sp = altitude_sp;
    packet.wp_distance = wp_distance;
    packet.base_mode = base_mode;
    packet.landed_state = landed_state;
    packet.throttle = throttle;
    packet.airspeed = airspeed;
    packet.airspeed_sp = airspeed_sp;
    packet.groundspeed = groundspeed;
    packet.climb_rate = climb_rate;
    packet.gps_nsat = gps_nsat;
    packet.gps_fix_type = gps_fix_type;
    packet.battery_remaining = battery_remaining;
    packet.temperature = temperature;
    packet.temperature_air = temperature_air;
    packet.failsafe = failsafe;
    packet.wp_num = wp_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 234;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 40, 40, 150);
}
# 310 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_high_latency_t* high_latency)
{
    return mavlink_msg_high_latency_pack(system_id, component_id, msg, high_latency->base_mode, high_latency->custom_mode, high_latency->landed_state, high_latency->roll, high_latency->pitch, high_latency->heading, high_latency->throttle, high_latency->heading_sp, high_latency->latitude, high_latency->longitude, high_latency->altitude_amsl, high_latency->altitude_sp, high_latency->airspeed, high_latency->airspeed_sp, high_latency->groundspeed, high_latency->climb_rate, high_latency->gps_nsat, high_latency->gps_fix_type, high_latency->battery_remaining, high_latency->temperature, high_latency->temperature_air, high_latency->failsafe, high_latency->wp_num, high_latency->wp_distance);
}
# 324 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_high_latency_t* high_latency)
{
    return mavlink_msg_high_latency_pack_chan(system_id, component_id, chan, msg, high_latency->base_mode, high_latency->custom_mode, high_latency->landed_state, high_latency->roll, high_latency->pitch, high_latency->heading, high_latency->throttle, high_latency->heading_sp, high_latency->latitude, high_latency->longitude, high_latency->altitude_amsl, high_latency->altitude_sp, high_latency->airspeed, high_latency->airspeed_sp, high_latency->groundspeed, high_latency->climb_rate, high_latency->gps_nsat, high_latency->gps_fix_type, high_latency->battery_remaining, high_latency->temperature, high_latency->temperature_air, high_latency->failsafe, high_latency->wp_num, high_latency->wp_distance);
}
# 360 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline void mavlink_msg_high_latency_send(mavlink_channel_t chan, uint8_t base_mode, uint32_t custom_mode, uint8_t landed_state, int16_t roll, int16_t pitch, uint16_t heading, int8_t throttle, int16_t heading_sp, int32_t latitude, int32_t longitude, int16_t altitude_amsl, int16_t altitude_sp, uint8_t airspeed, uint8_t airspeed_sp, uint8_t groundspeed, int8_t climb_rate, uint8_t gps_nsat, uint8_t gps_fix_type, uint8_t battery_remaining, int8_t temperature, int8_t temperature_air, uint8_t failsafe, uint8_t wp_num, uint16_t wp_distance)
{
# 391 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
    mavlink_high_latency_t packet;
    packet.custom_mode = custom_mode;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.heading = heading;
    packet.heading_sp = heading_sp;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_sp = altitude_sp;
    packet.wp_distance = wp_distance;
    packet.base_mode = base_mode;
    packet.landed_state = landed_state;
    packet.throttle = throttle;
    packet.airspeed = airspeed;
    packet.airspeed_sp = airspeed_sp;
    packet.groundspeed = groundspeed;
    packet.climb_rate = climb_rate;
    packet.gps_nsat = gps_nsat;
    packet.gps_fix_type = gps_fix_type;
    packet.battery_remaining = battery_remaining;
    packet.temperature = temperature;
    packet.temperature_air = temperature_air;
    packet.failsafe = failsafe;
    packet.wp_num = wp_num;

    _mav_finalize_message_chan_send(chan, 234, (const char *)&packet, 40, 40, 150);

}






static inline void mavlink_msg_high_latency_send_struct(mavlink_channel_t chan, const mavlink_high_latency_t* high_latency)
{



    _mav_finalize_message_chan_send(chan, 234, (const char *)high_latency, 40, 40, 150);

}
# 443 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline void mavlink_msg_high_latency_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t base_mode, uint32_t custom_mode, uint8_t landed_state, int16_t roll, int16_t pitch, uint16_t heading, int8_t throttle, int16_t heading_sp, int32_t latitude, int32_t longitude, int16_t altitude_amsl, int16_t altitude_sp, uint8_t airspeed, uint8_t airspeed_sp, uint8_t groundspeed, int8_t climb_rate, uint8_t gps_nsat, uint8_t gps_fix_type, uint8_t battery_remaining, int8_t temperature, int8_t temperature_air, uint8_t failsafe, uint8_t wp_num, uint16_t wp_distance)
{
# 474 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
    mavlink_high_latency_t *packet = (mavlink_high_latency_t *)msgbuf;
    packet->custom_mode = custom_mode;
    packet->latitude = latitude;
    packet->longitude = longitude;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->heading = heading;
    packet->heading_sp = heading_sp;
    packet->altitude_amsl = altitude_amsl;
    packet->altitude_sp = altitude_sp;
    packet->wp_distance = wp_distance;
    packet->base_mode = base_mode;
    packet->landed_state = landed_state;
    packet->throttle = throttle;
    packet->airspeed = airspeed;
    packet->airspeed_sp = airspeed_sp;
    packet->groundspeed = groundspeed;
    packet->climb_rate = climb_rate;
    packet->gps_nsat = gps_nsat;
    packet->gps_fix_type = gps_fix_type;
    packet->battery_remaining = battery_remaining;
    packet->temperature = temperature;
    packet->temperature_air = temperature_air;
    packet->failsafe = failsafe;
    packet->wp_num = wp_num;

    _mav_finalize_message_chan_send(chan, 234, (const char *)packet, 40, 40, 150);

}
# 515 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
static inline uint8_t mavlink_msg_high_latency_get_base_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline uint32_t mavlink_msg_high_latency_get_custom_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_high_latency_get_landed_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[27];
}






static inline int16_t mavlink_msg_high_latency_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_high_latency_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline uint16_t mavlink_msg_high_latency_get_heading(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline int8_t mavlink_msg_high_latency_get_throttle(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline int16_t mavlink_msg_high_latency_get_heading_sp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int32_t mavlink_msg_high_latency_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_high_latency_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int16_t mavlink_msg_high_latency_get_altitude_amsl(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_high_latency_get_altitude_sp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline uint8_t mavlink_msg_high_latency_get_airspeed(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}






static inline uint8_t mavlink_msg_high_latency_get_airspeed_sp(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_high_latency_get_groundspeed(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline int8_t mavlink_msg_high_latency_get_climb_rate(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_high_latency_get_gps_nsat(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_high_latency_get_gps_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint8_t mavlink_msg_high_latency_get_battery_remaining(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline int8_t mavlink_msg_high_latency_get_temperature(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline int8_t mavlink_msg_high_latency_get_temperature_air(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint8_t mavlink_msg_high_latency_get_failsafe(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint8_t mavlink_msg_high_latency_get_wp_num(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[39];
}






static inline uint16_t mavlink_msg_high_latency_get_wp_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}







static inline void mavlink_msg_high_latency_decode(const mavlink_message_t* msg, mavlink_high_latency_t* high_latency)
{
# 784 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_high_latency.h"
        uint8_t len = msg->len < 40? msg->len : 40;
        memset(high_latency, 0, 40);
    memcpy(high_latency, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1025 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h" 1
       




typedef struct __mavlink_vibration_t { uint64_t time_usec; float vibration_x; float vibration_y; float vibration_z; uint32_t clipping_0; uint32_t clipping_1; uint32_t clipping_2; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
   mavlink_vibration_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float vibration_x, float vibration_y, float vibration_z, uint32_t clipping_0, uint32_t clipping_1, uint32_t clipping_2)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
    mavlink_vibration_t packet;
    packet.time_usec = time_usec;
    packet.vibration_x = vibration_x;
    packet.vibration_y = vibration_y;
    packet.vibration_z = vibration_z;
    packet.clipping_0 = clipping_0;
    packet.clipping_1 = clipping_1;
    packet.clipping_2 = clipping_2;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 241;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 90);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float vibration_x,float vibration_y,float vibration_z,uint32_t clipping_0,uint32_t clipping_1,uint32_t clipping_2)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
    mavlink_vibration_t packet;
    packet.time_usec = time_usec;
    packet.vibration_x = vibration_x;
    packet.vibration_y = vibration_y;
    packet.vibration_z = vibration_z;
    packet.clipping_0 = clipping_0;
    packet.clipping_1 = clipping_1;
    packet.clipping_2 = clipping_2;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 241;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 90);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vibration_t* vibration)
{
    return mavlink_msg_vibration_pack(system_id, component_id, msg, vibration->time_usec, vibration->vibration_x, vibration->vibration_y, vibration->vibration_z, vibration->clipping_0, vibration->clipping_1, vibration->clipping_2);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vibration_t* vibration)
{
    return mavlink_msg_vibration_pack_chan(system_id, component_id, chan, msg, vibration->time_usec, vibration->vibration_x, vibration->vibration_y, vibration->vibration_z, vibration->clipping_0, vibration->clipping_1, vibration->clipping_2);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline void mavlink_msg_vibration_send(mavlink_channel_t chan, uint64_t time_usec, float vibration_x, float vibration_y, float vibration_z, uint32_t clipping_0, uint32_t clipping_1, uint32_t clipping_2)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
    mavlink_vibration_t packet;
    packet.time_usec = time_usec;
    packet.vibration_x = vibration_x;
    packet.vibration_y = vibration_y;
    packet.vibration_z = vibration_z;
    packet.clipping_0 = clipping_0;
    packet.clipping_1 = clipping_1;
    packet.clipping_2 = clipping_2;

    _mav_finalize_message_chan_send(chan, 241, (const char *)&packet, 32, 32, 90);

}






static inline void mavlink_msg_vibration_send_struct(mavlink_channel_t chan, const mavlink_vibration_t* vibration)
{



    _mav_finalize_message_chan_send(chan, 241, (const char *)vibration, 32, 32, 90);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline void mavlink_msg_vibration_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint64_t time_usec, float vibration_x, float vibration_y, float vibration_z, uint32_t clipping_0, uint32_t clipping_1, uint32_t clipping_2)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
    mavlink_vibration_t *packet = (mavlink_vibration_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->vibration_x = vibration_x;
    packet->vibration_y = vibration_y;
    packet->vibration_z = vibration_z;
    packet->clipping_0 = clipping_0;
    packet->clipping_1 = clipping_1;
    packet->clipping_2 = clipping_2;

    _mav_finalize_message_chan_send(chan, 241, (const char *)packet, 32, 32, 90);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
static inline uint64_t mavlink_msg_vibration_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vibration_get_vibration_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vibration_get_vibration_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vibration_get_vibration_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline uint32_t mavlink_msg_vibration_get_clipping_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint32_t mavlink_msg_vibration_get_clipping_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint32_t mavlink_msg_vibration_get_clipping_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 28);
}







static inline void mavlink_msg_vibration_decode(const mavlink_message_t* msg, mavlink_vibration_t* vibration)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_vibration.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(vibration, 0, 32);
    memcpy(vibration, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1026 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h" 1
       




typedef struct __mavlink_home_position_t { int32_t latitude; int32_t longitude; int32_t altitude; float x; float y; float z; float q[4]; float approach_x; float approach_y; float approach_z; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
   mavlink_home_position_t;
# 83 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 100 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
    mavlink_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 52);


    msg->msgid = 242;
    return mavlink_finalize_message(msg, system_id, component_id, 52, 52, 104);
}
# 136 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t latitude,int32_t longitude,int32_t altitude,float x,float y,float z,const float *q,float approach_x,float approach_y,float approach_z)
{
# 154 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
    mavlink_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 52);


    msg->msgid = 242;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 52, 52, 104);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_home_position_t* home_position)
{
    return mavlink_msg_home_position_pack(system_id, component_id, msg, home_position->latitude, home_position->longitude, home_position->altitude, home_position->x, home_position->y, home_position->z, home_position->q, home_position->approach_x, home_position->approach_y, home_position->approach_z);
}
# 194 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_home_position_t* home_position)
{
    return mavlink_msg_home_position_pack_chan(system_id, component_id, chan, msg, home_position->latitude, home_position->longitude, home_position->altitude, home_position->x, home_position->y, home_position->z, home_position->q, home_position->approach_x, home_position->approach_y, home_position->approach_z);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline void mavlink_msg_home_position_send(mavlink_channel_t chan, int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 232 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
    mavlink_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 242, (const char *)&packet, 52, 52, 104);

}






static inline void mavlink_msg_home_position_send_struct(mavlink_channel_t chan, const mavlink_home_position_t* home_position)
{



    _mav_finalize_message_chan_send(chan, 242, (const char *)home_position, 52, 52, 104);

}
# 269 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline void mavlink_msg_home_position_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 285 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
    mavlink_home_position_t *packet = (mavlink_home_position_t *)msgbuf;
    packet->latitude = latitude;
    packet->longitude = longitude;
    packet->altitude = altitude;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->approach_x = approach_x;
    packet->approach_y = approach_y;
    packet->approach_z = approach_z;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 242, (const char *)packet, 52, 52, 104);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
static inline int32_t mavlink_msg_home_position_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_home_position_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_home_position_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_home_position_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_home_position_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_home_position_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline uint16_t mavlink_msg_home_position_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 24);
}






static inline float mavlink_msg_home_position_get_approach_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_home_position_get_approach_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_home_position_get_approach_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}







static inline void mavlink_msg_home_position_decode(const mavlink_message_t* msg, mavlink_home_position_t* home_position)
{
# 426 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_home_position.h"
        uint8_t len = msg->len < 52? msg->len : 52;
        memset(home_position, 0, 52);
    memcpy(home_position, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1027 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h" 1
       




typedef struct __mavlink_set_home_position_t { int32_t latitude; int32_t longitude; int32_t altitude; float x; float y; float z; float q[4]; float approach_x; float approach_y; float approach_z; uint8_t target_system; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
   mavlink_set_home_position_t;
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 105 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
    mavlink_set_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    packet.target_system = target_system;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 243;
    return mavlink_finalize_message(msg, system_id, component_id, 53, 53, 85);
}
# 143 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,int32_t latitude,int32_t longitude,int32_t altitude,float x,float y,float z,const float *q,float approach_x,float approach_y,float approach_z)
{
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
    mavlink_set_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    packet.target_system = target_system;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 243;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 53, 85);
}
# 189 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_home_position_t* set_home_position)
{
    return mavlink_msg_set_home_position_pack(system_id, component_id, msg, set_home_position->target_system, set_home_position->latitude, set_home_position->longitude, set_home_position->altitude, set_home_position->x, set_home_position->y, set_home_position->z, set_home_position->q, set_home_position->approach_x, set_home_position->approach_y, set_home_position->approach_z);
}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_home_position_t* set_home_position)
{
    return mavlink_msg_set_home_position_pack_chan(system_id, component_id, chan, msg, set_home_position->target_system, set_home_position->latitude, set_home_position->longitude, set_home_position->altitude, set_home_position->x, set_home_position->y, set_home_position->z, set_home_position->q, set_home_position->approach_x, set_home_position->approach_y, set_home_position->approach_z);
}
# 226 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline void mavlink_msg_set_home_position_send(mavlink_channel_t chan, uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 243 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
    mavlink_set_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    packet.target_system = target_system;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 243, (const char *)&packet, 53, 53, 85);

}






static inline void mavlink_msg_set_home_position_send_struct(mavlink_channel_t chan, const mavlink_set_home_position_t* set_home_position)
{



    _mav_finalize_message_chan_send(chan, 243, (const char *)set_home_position, 53, 53, 85);

}
# 281 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline void mavlink_msg_set_home_position_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 298 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
    mavlink_set_home_position_t *packet = (mavlink_set_home_position_t *)msgbuf;
    packet->latitude = latitude;
    packet->longitude = longitude;
    packet->altitude = altitude;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    packet->approach_x = approach_x;
    packet->approach_y = approach_y;
    packet->approach_z = approach_z;
    packet->target_system = target_system;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    _mav_finalize_message_chan_send(chan, 243, (const char *)packet, 53, 53, 85);

}
# 325 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
static inline uint8_t mavlink_msg_set_home_position_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline int32_t mavlink_msg_set_home_position_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_set_home_position_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_home_position_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_set_home_position_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_home_position_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_home_position_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline uint16_t mavlink_msg_set_home_position_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 24);
}






static inline float mavlink_msg_set_home_position_get_approach_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_home_position_get_approach_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_set_home_position_get_approach_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}







static inline void mavlink_msg_set_home_position_decode(const mavlink_message_t* msg, mavlink_set_home_position_t* set_home_position)
{
# 451 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_set_home_position.h"
        uint8_t len = msg->len < 53? msg->len : 53;
        memset(set_home_position, 0, 53);
    memcpy(set_home_position, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1028 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h" 1
       




typedef struct __mavlink_message_interval_t { int32_t interval_us; uint16_t message_id; } __attribute__((packed))



   mavlink_message_interval_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t message_id, int32_t interval_us)
{







    mavlink_message_interval_t packet;
    packet.interval_us = interval_us;
    packet.message_id = message_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 244;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 95);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t message_id,int32_t interval_us)
{







    mavlink_message_interval_t packet;
    packet.interval_us = interval_us;
    packet.message_id = message_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 244;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 95);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_message_interval_t* message_interval)
{
    return mavlink_msg_message_interval_pack(system_id, component_id, msg, message_interval->message_id, message_interval->interval_us);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_message_interval_t* message_interval)
{
    return mavlink_msg_message_interval_pack_chan(system_id, component_id, chan, msg, message_interval->message_id, message_interval->interval_us);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline void mavlink_msg_message_interval_send(mavlink_channel_t chan, uint16_t message_id, int32_t interval_us)
{







    mavlink_message_interval_t packet;
    packet.interval_us = interval_us;
    packet.message_id = message_id;

    _mav_finalize_message_chan_send(chan, 244, (const char *)&packet, 6, 6, 95);

}






static inline void mavlink_msg_message_interval_send_struct(mavlink_channel_t chan, const mavlink_message_interval_t* message_interval)
{



    _mav_finalize_message_chan_send(chan, 244, (const char *)message_interval, 6, 6, 95);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline void mavlink_msg_message_interval_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t message_id, int32_t interval_us)
{







    mavlink_message_interval_t *packet = (mavlink_message_interval_t *)msgbuf;
    packet->interval_us = interval_us;
    packet->message_id = message_id;

    _mav_finalize_message_chan_send(chan, 244, (const char *)packet, 6, 6, 95);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_get_message_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline int32_t mavlink_msg_message_interval_get_interval_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}







static inline void mavlink_msg_message_interval_decode(const mavlink_message_t* msg, mavlink_message_interval_t* message_interval)
{




        uint8_t len = msg->len < 6? msg->len : 6;
        memset(message_interval, 0, 6);
    memcpy(message_interval, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1029 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h" 1
       




typedef struct __mavlink_extended_sys_state_t { uint8_t vtol_state; uint8_t landed_state; } __attribute__((packed))



   mavlink_extended_sys_state_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t vtol_state, uint8_t landed_state)
{







    mavlink_extended_sys_state_t packet;
    packet.vtol_state = vtol_state;
    packet.landed_state = landed_state;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 245;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 130);
}
# 82 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t vtol_state,uint8_t landed_state)
{







    mavlink_extended_sys_state_t packet;
    packet.vtol_state = vtol_state;
    packet.landed_state = landed_state;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 245;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 130);
}
# 112 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_extended_sys_state_t* extended_sys_state)
{
    return mavlink_msg_extended_sys_state_pack(system_id, component_id, msg, extended_sys_state->vtol_state, extended_sys_state->landed_state);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_extended_sys_state_t* extended_sys_state)
{
    return mavlink_msg_extended_sys_state_pack_chan(system_id, component_id, chan, msg, extended_sys_state->vtol_state, extended_sys_state->landed_state);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline void mavlink_msg_extended_sys_state_send(mavlink_channel_t chan, uint8_t vtol_state, uint8_t landed_state)
{







    mavlink_extended_sys_state_t packet;
    packet.vtol_state = vtol_state;
    packet.landed_state = landed_state;

    _mav_finalize_message_chan_send(chan, 245, (const char *)&packet, 2, 2, 130);

}






static inline void mavlink_msg_extended_sys_state_send_struct(mavlink_channel_t chan, const mavlink_extended_sys_state_t* extended_sys_state)
{



    _mav_finalize_message_chan_send(chan, 245, (const char *)extended_sys_state, 2, 2, 130);

}
# 179 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline void mavlink_msg_extended_sys_state_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t vtol_state, uint8_t landed_state)
{







    mavlink_extended_sys_state_t *packet = (mavlink_extended_sys_state_t *)msgbuf;
    packet->vtol_state = vtol_state;
    packet->landed_state = landed_state;

    _mav_finalize_message_chan_send(chan, 245, (const char *)packet, 2, 2, 130);

}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_extended_sys_state.h"
static inline uint8_t mavlink_msg_extended_sys_state_get_vtol_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_extended_sys_state_get_landed_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_extended_sys_state_decode(const mavlink_message_t* msg, mavlink_extended_sys_state_t* extended_sys_state)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(extended_sys_state, 0, 2);
    memcpy(extended_sys_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1030 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h" 1
       




typedef struct __mavlink_adsb_vehicle_t { uint32_t ICAO_address; int32_t lat; int32_t lon; int32_t altitude; uint16_t heading; uint16_t hor_velocity; int16_t ver_velocity; uint16_t flags; uint16_t squawk; uint8_t altitude_type; char callsign[9]; uint8_t emitter_type; uint8_t tslc; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
   mavlink_adsb_vehicle_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t ICAO_address, int32_t lat, int32_t lon, uint8_t altitude_type, int32_t altitude, uint16_t heading, uint16_t hor_velocity, int16_t ver_velocity, const char *callsign, uint8_t emitter_type, uint8_t tslc, uint16_t flags, uint16_t squawk)
{
# 115 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
    mavlink_adsb_vehicle_t packet;
    packet.ICAO_address = ICAO_address;
    packet.lat = lat;
    packet.lon = lon;
    packet.altitude = altitude;
    packet.heading = heading;
    packet.hor_velocity = hor_velocity;
    packet.ver_velocity = ver_velocity;
    packet.flags = flags;
    packet.squawk = squawk;
    packet.altitude_type = altitude_type;
    packet.emitter_type = emitter_type;
    packet.tslc = tslc;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 246;
    return mavlink_finalize_message(msg, system_id, component_id, 38, 38, 184);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t ICAO_address,int32_t lat,int32_t lon,uint8_t altitude_type,int32_t altitude,uint16_t heading,uint16_t hor_velocity,int16_t ver_velocity,const char *callsign,uint8_t emitter_type,uint8_t tslc,uint16_t flags,uint16_t squawk)
{
# 178 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
    mavlink_adsb_vehicle_t packet;
    packet.ICAO_address = ICAO_address;
    packet.lat = lat;
    packet.lon = lon;
    packet.altitude = altitude;
    packet.heading = heading;
    packet.hor_velocity = hor_velocity;
    packet.ver_velocity = ver_velocity;
    packet.flags = flags;
    packet.squawk = squawk;
    packet.altitude_type = altitude_type;
    packet.emitter_type = emitter_type;
    packet.tslc = tslc;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 246;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 38, 38, 184);
}
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_adsb_vehicle_t* adsb_vehicle)
{
    return mavlink_msg_adsb_vehicle_pack(system_id, component_id, msg, adsb_vehicle->ICAO_address, adsb_vehicle->lat, adsb_vehicle->lon, adsb_vehicle->altitude_type, adsb_vehicle->altitude, adsb_vehicle->heading, adsb_vehicle->hor_velocity, adsb_vehicle->ver_velocity, adsb_vehicle->callsign, adsb_vehicle->emitter_type, adsb_vehicle->tslc, adsb_vehicle->flags, adsb_vehicle->squawk);
}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_adsb_vehicle_t* adsb_vehicle)
{
    return mavlink_msg_adsb_vehicle_pack_chan(system_id, component_id, chan, msg, adsb_vehicle->ICAO_address, adsb_vehicle->lat, adsb_vehicle->lon, adsb_vehicle->altitude_type, adsb_vehicle->altitude, adsb_vehicle->heading, adsb_vehicle->hor_velocity, adsb_vehicle->ver_velocity, adsb_vehicle->callsign, adsb_vehicle->emitter_type, adsb_vehicle->tslc, adsb_vehicle->flags, adsb_vehicle->squawk);
}
# 246 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline void mavlink_msg_adsb_vehicle_send(mavlink_channel_t chan, uint32_t ICAO_address, int32_t lat, int32_t lon, uint8_t altitude_type, int32_t altitude, uint16_t heading, uint16_t hor_velocity, int16_t ver_velocity, const char *callsign, uint8_t emitter_type, uint8_t tslc, uint16_t flags, uint16_t squawk)
{
# 265 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
    mavlink_adsb_vehicle_t packet;
    packet.ICAO_address = ICAO_address;
    packet.lat = lat;
    packet.lon = lon;
    packet.altitude = altitude;
    packet.heading = heading;
    packet.hor_velocity = hor_velocity;
    packet.ver_velocity = ver_velocity;
    packet.flags = flags;
    packet.squawk = squawk;
    packet.altitude_type = altitude_type;
    packet.emitter_type = emitter_type;
    packet.tslc = tslc;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
    _mav_finalize_message_chan_send(chan, 246, (const char *)&packet, 38, 38, 184);

}






static inline void mavlink_msg_adsb_vehicle_send_struct(mavlink_channel_t chan, const mavlink_adsb_vehicle_t* adsb_vehicle)
{



    _mav_finalize_message_chan_send(chan, 246, (const char *)adsb_vehicle, 38, 38, 184);

}
# 305 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline void mavlink_msg_adsb_vehicle_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t ICAO_address, int32_t lat, int32_t lon, uint8_t altitude_type, int32_t altitude, uint16_t heading, uint16_t hor_velocity, int16_t ver_velocity, const char *callsign, uint8_t emitter_type, uint8_t tslc, uint16_t flags, uint16_t squawk)
{
# 324 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
    mavlink_adsb_vehicle_t *packet = (mavlink_adsb_vehicle_t *)msgbuf;
    packet->ICAO_address = ICAO_address;
    packet->lat = lat;
    packet->lon = lon;
    packet->altitude = altitude;
    packet->heading = heading;
    packet->hor_velocity = hor_velocity;
    packet->ver_velocity = ver_velocity;
    packet->flags = flags;
    packet->squawk = squawk;
    packet->altitude_type = altitude_type;
    packet->emitter_type = emitter_type;
    packet->tslc = tslc;
    mav_array_memcpy(packet->callsign, callsign, sizeof(char)*9);
    _mav_finalize_message_chan_send(chan, 246, (const char *)packet, 38, 38, 184);

}
# 353 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
static inline uint32_t mavlink_msg_adsb_vehicle_get_ICAO_address(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_adsb_vehicle_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_adsb_vehicle_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline uint8_t mavlink_msg_adsb_vehicle_get_altitude_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline int32_t mavlink_msg_adsb_vehicle_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_heading(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_hor_velocity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline int16_t mavlink_msg_adsb_vehicle_get_ver_velocity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_callsign(const mavlink_message_t* msg, char *callsign)
{
    return _MAV_RETURN_char_array(msg, callsign, 9, 27);
}






static inline uint8_t mavlink_msg_adsb_vehicle_get_emitter_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint8_t mavlink_msg_adsb_vehicle_get_tslc(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_squawk(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}







static inline void mavlink_msg_adsb_vehicle_decode(const mavlink_message_t* msg, mavlink_adsb_vehicle_t* adsb_vehicle)
{
# 501 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_adsb_vehicle.h"
        uint8_t len = msg->len < 38? msg->len : 38;
        memset(adsb_vehicle, 0, 38);
    memcpy(adsb_vehicle, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1031 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h" 1
       




typedef struct __mavlink_collision_t { uint32_t id; float time_to_minimum_delta; float altitude_minimum_delta; float horizontal_minimum_delta; uint8_t src; uint8_t action; uint8_t threat_level; } __attribute__((packed))
# 15 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
   mavlink_collision_t;
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t src, uint32_t id, uint8_t action, uint8_t threat_level, float time_to_minimum_delta, float altitude_minimum_delta, float horizontal_minimum_delta)
{
# 86 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
    mavlink_collision_t packet;
    packet.id = id;
    packet.time_to_minimum_delta = time_to_minimum_delta;
    packet.altitude_minimum_delta = altitude_minimum_delta;
    packet.horizontal_minimum_delta = horizontal_minimum_delta;
    packet.src = src;
    packet.action = action;
    packet.threat_level = threat_level;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 19);


    msg->msgid = 247;
    return mavlink_finalize_message(msg, system_id, component_id, 19, 19, 81);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t src,uint32_t id,uint8_t action,uint8_t threat_level,float time_to_minimum_delta,float altitude_minimum_delta,float horizontal_minimum_delta)
{
# 133 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
    mavlink_collision_t packet;
    packet.id = id;
    packet.time_to_minimum_delta = time_to_minimum_delta;
    packet.altitude_minimum_delta = altitude_minimum_delta;
    packet.horizontal_minimum_delta = horizontal_minimum_delta;
    packet.src = src;
    packet.action = action;
    packet.threat_level = threat_level;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 19);


    msg->msgid = 247;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 19, 19, 81);
}
# 157 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_collision_t* collision)
{
    return mavlink_msg_collision_pack(system_id, component_id, msg, collision->src, collision->id, collision->action, collision->threat_level, collision->time_to_minimum_delta, collision->altitude_minimum_delta, collision->horizontal_minimum_delta);
}
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_collision_t* collision)
{
    return mavlink_msg_collision_pack_chan(system_id, component_id, chan, msg, collision->src, collision->id, collision->action, collision->threat_level, collision->time_to_minimum_delta, collision->altitude_minimum_delta, collision->horizontal_minimum_delta);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline void mavlink_msg_collision_send(mavlink_channel_t chan, uint8_t src, uint32_t id, uint8_t action, uint8_t threat_level, float time_to_minimum_delta, float altitude_minimum_delta, float horizontal_minimum_delta)
{
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
    mavlink_collision_t packet;
    packet.id = id;
    packet.time_to_minimum_delta = time_to_minimum_delta;
    packet.altitude_minimum_delta = altitude_minimum_delta;
    packet.horizontal_minimum_delta = horizontal_minimum_delta;
    packet.src = src;
    packet.action = action;
    packet.threat_level = threat_level;

    _mav_finalize_message_chan_send(chan, 247, (const char *)&packet, 19, 19, 81);

}






static inline void mavlink_msg_collision_send_struct(mavlink_channel_t chan, const mavlink_collision_t* collision)
{



    _mav_finalize_message_chan_send(chan, 247, (const char *)collision, 19, 19, 81);

}
# 239 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline void mavlink_msg_collision_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t src, uint32_t id, uint8_t action, uint8_t threat_level, float time_to_minimum_delta, float altitude_minimum_delta, float horizontal_minimum_delta)
{
# 253 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
    mavlink_collision_t *packet = (mavlink_collision_t *)msgbuf;
    packet->id = id;
    packet->time_to_minimum_delta = time_to_minimum_delta;
    packet->altitude_minimum_delta = altitude_minimum_delta;
    packet->horizontal_minimum_delta = horizontal_minimum_delta;
    packet->src = src;
    packet->action = action;
    packet->threat_level = threat_level;

    _mav_finalize_message_chan_send(chan, 247, (const char *)packet, 19, 19, 81);

}
# 277 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
static inline uint8_t mavlink_msg_collision_get_src(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint32_t mavlink_msg_collision_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_collision_get_action(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint8_t mavlink_msg_collision_get_threat_level(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline float mavlink_msg_collision_get_time_to_minimum_delta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_collision_get_altitude_minimum_delta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_collision_get_horizontal_minimum_delta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_collision_decode(const mavlink_message_t* msg, mavlink_collision_t* collision)
{
# 359 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_collision.h"
        uint8_t len = msg->len < 19? msg->len : 19;
        memset(collision, 0, 19);
    memcpy(collision, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1032 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h" 1
       




typedef struct __mavlink_v2_extension_t { uint16_t message_type; uint8_t target_network; uint8_t target_system; uint8_t target_component; uint8_t payload[249]; } __attribute__((packed))






   mavlink_v2_extension_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, uint16_t message_type, const uint8_t *payload)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
    mavlink_v2_extension_t packet;
    packet.message_type = message_type;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 248;
    return mavlink_finalize_message(msg, system_id, component_id, 254, 254, 8);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_network,uint8_t target_system,uint8_t target_component,uint16_t message_type,const uint8_t *payload)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
    mavlink_v2_extension_t packet;
    packet.message_type = message_type;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 248;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 254, 8);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
    return mavlink_msg_v2_extension_pack(system_id, component_id, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
    return mavlink_msg_v2_extension_pack_chan(system_id, component_id, chan, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline void mavlink_msg_v2_extension_send(mavlink_channel_t chan, uint8_t target_network, uint8_t target_system, uint8_t target_component, uint16_t message_type, const uint8_t *payload)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
    mavlink_v2_extension_t packet;
    packet.message_type = message_type;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
    _mav_finalize_message_chan_send(chan, 248, (const char *)&packet, 254, 254, 8);

}






static inline void mavlink_msg_v2_extension_send_struct(mavlink_channel_t chan, const mavlink_v2_extension_t* v2_extension)
{



    _mav_finalize_message_chan_send(chan, 248, (const char *)v2_extension, 254, 254, 8);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline void mavlink_msg_v2_extension_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_network, uint8_t target_system, uint8_t target_component, uint16_t message_type, const uint8_t *payload)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
    mavlink_v2_extension_t *packet = (mavlink_v2_extension_t *)msgbuf;
    packet->message_type = message_type;
    packet->target_network = target_network;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->payload, payload, sizeof(uint8_t)*249);
    _mav_finalize_message_chan_send(chan, 248, (const char *)packet, 254, 254, 8);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_v2_extension.h"
static inline uint8_t mavlink_msg_v2_extension_get_target_network(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_v2_extension_get_message_type(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_v2_extension_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
    return _MAV_RETURN_uint8_t_array(msg, payload, 249, 5);
}







static inline void mavlink_msg_v2_extension_decode(const mavlink_message_t* msg, mavlink_v2_extension_t* v2_extension)
{







        uint8_t len = msg->len < 254? msg->len : 254;
        memset(v2_extension, 0, 254);
    memcpy(v2_extension, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1033 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h" 1
       




typedef struct __mavlink_memory_vect_t { uint16_t address; uint8_t ver; uint8_t type; int8_t value[32]; } __attribute__((packed))





   mavlink_memory_vect_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t address, uint8_t ver, uint8_t type, const int8_t *value)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
    mavlink_memory_vect_t packet;
    packet.address = address;
    packet.ver = ver;
    packet.type = type;
    mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 249;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 204);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t address,uint8_t ver,uint8_t type,const int8_t *value)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
    mavlink_memory_vect_t packet;
    packet.address = address;
    packet.ver = ver;
    packet.type = type;
    mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 249;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 204);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
    return mavlink_msg_memory_vect_pack(system_id, component_id, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
    return mavlink_msg_memory_vect_pack_chan(system_id, component_id, chan, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline void mavlink_msg_memory_vect_send(mavlink_channel_t chan, uint16_t address, uint8_t ver, uint8_t type, const int8_t *value)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
    mavlink_memory_vect_t packet;
    packet.address = address;
    packet.ver = ver;
    packet.type = type;
    mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
    _mav_finalize_message_chan_send(chan, 249, (const char *)&packet, 36, 36, 204);

}






static inline void mavlink_msg_memory_vect_send_struct(mavlink_channel_t chan, const mavlink_memory_vect_t* memory_vect)
{



    _mav_finalize_message_chan_send(chan, 249, (const char *)memory_vect, 36, 36, 204);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline void mavlink_msg_memory_vect_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint16_t address, uint8_t ver, uint8_t type, const int8_t *value)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
    mavlink_memory_vect_t *packet = (mavlink_memory_vect_t *)msgbuf;
    packet->address = address;
    packet->ver = ver;
    packet->type = type;
    mav_array_memcpy(packet->value, value, sizeof(int8_t)*32);
    _mav_finalize_message_chan_send(chan, 249, (const char *)packet, 36, 36, 204);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_get_address(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_memory_vect_get_ver(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_memory_vect_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_memory_vect_get_value(const mavlink_message_t* msg, int8_t *value)
{
    return _MAV_RETURN_int8_t_array(msg, value, 32, 4);
}







static inline void mavlink_msg_memory_vect_decode(const mavlink_message_t* msg, mavlink_memory_vect_t* memory_vect)
{






        uint8_t len = msg->len < 36? msg->len : 36;
        memset(memory_vect, 0, 36);
    memcpy(memory_vect, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1034 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h" 1
       




typedef struct __mavlink_debug_vect_t { uint64_t time_usec; float x; float y; float z; char name[10]; } __attribute__((packed))






   mavlink_debug_vect_t;
# 63 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const char *name, uint64_t time_usec, float x, float y, float z)
{
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
    mavlink_debug_vect_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 250;
    return mavlink_finalize_message(msg, system_id, component_id, 30, 30, 49);
}
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   const char *name,uint64_t time_usec,float x,float y,float z)
{
# 114 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
    mavlink_debug_vect_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 250;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 30, 49);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
    return mavlink_msg_debug_vect_pack(system_id, component_id, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 149 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
    return mavlink_msg_debug_vect_pack_chan(system_id, component_id, chan, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline void mavlink_msg_debug_vect_send(mavlink_channel_t chan, const char *name, uint64_t time_usec, float x, float y, float z)
{
# 177 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
    mavlink_debug_vect_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
    _mav_finalize_message_chan_send(chan, 250, (const char *)&packet, 30, 30, 49);

}






static inline void mavlink_msg_debug_vect_send_struct(mavlink_channel_t chan, const mavlink_debug_vect_t* debug_vect)
{



    _mav_finalize_message_chan_send(chan, 250, (const char *)debug_vect, 30, 30, 49);

}
# 209 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline void mavlink_msg_debug_vect_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, const char *name, uint64_t time_usec, float x, float y, float z)
{
# 220 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
    mavlink_debug_vect_t *packet = (mavlink_debug_vect_t *)msgbuf;
    packet->time_usec = time_usec;
    packet->x = x;
    packet->y = y;
    packet->z = z;
    mav_array_memcpy(packet->name, name, sizeof(char)*10);
    _mav_finalize_message_chan_send(chan, 250, (const char *)packet, 30, 30, 49);

}
# 241 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_get_name(const mavlink_message_t* msg, char *name)
{
    return _MAV_RETURN_char_array(msg, name, 10, 20);
}






static inline uint64_t mavlink_msg_debug_vect_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_debug_vect_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_debug_vect_decode(const mavlink_message_t* msg, mavlink_debug_vect_t* debug_vect)
{







        uint8_t len = msg->len < 30? msg->len : 30;
        memset(debug_vect, 0, 30);
    memcpy(debug_vect, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1035 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h" 1
       




typedef struct __mavlink_named_value_float_t { uint32_t time_boot_ms; float value; char name[10]; } __attribute__((packed))




   mavlink_named_value_float_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, float value)
{







    mavlink_named_value_float_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 251;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 170);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,const char *name,float value)
{







    mavlink_named_value_float_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 251;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 170);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
    return mavlink_msg_named_value_float_pack(system_id, component_id, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
    return mavlink_msg_named_value_float_pack_chan(system_id, component_id, chan, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{







    mavlink_named_value_float_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
    _mav_finalize_message_chan_send(chan, 251, (const char *)&packet, 18, 18, 170);

}






static inline void mavlink_msg_named_value_float_send_struct(mavlink_channel_t chan, const mavlink_named_value_float_t* named_value_float)
{



    _mav_finalize_message_chan_send(chan, 251, (const char *)named_value_float, 18, 18, 170);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline void mavlink_msg_named_value_float_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{







    mavlink_named_value_float_t *packet = (mavlink_named_value_float_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->value = value;
    mav_array_memcpy(packet->name, name, sizeof(char)*10);
    _mav_finalize_message_chan_send(chan, 251, (const char *)packet, 18, 18, 170);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_float.h"
static inline uint32_t mavlink_msg_named_value_float_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_float_get_name(const mavlink_message_t* msg, char *name)
{
    return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline float mavlink_msg_named_value_float_get_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_named_value_float_decode(const mavlink_message_t* msg, mavlink_named_value_float_t* named_value_float)
{





        uint8_t len = msg->len < 18? msg->len : 18;
        memset(named_value_float, 0, 18);
    memcpy(named_value_float, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1036 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h" 1
       




typedef struct __mavlink_named_value_int_t { uint32_t time_boot_ms; int32_t value; char name[10]; } __attribute__((packed))




   mavlink_named_value_int_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, int32_t value)
{







    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 252;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 44);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,const char *name,int32_t value)
{







    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 252;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 44);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
    return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
    return mavlink_msg_named_value_int_pack_chan(system_id, component_id, chan, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{







    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
    _mav_finalize_message_chan_send(chan, 252, (const char *)&packet, 18, 18, 44);

}






static inline void mavlink_msg_named_value_int_send_struct(mavlink_channel_t chan, const mavlink_named_value_int_t* named_value_int)
{



    _mav_finalize_message_chan_send(chan, 252, (const char *)named_value_int, 18, 18, 44);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline void mavlink_msg_named_value_int_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{







    mavlink_named_value_int_t *packet = (mavlink_named_value_int_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->value = value;
    mav_array_memcpy(packet->name, name, sizeof(char)*10);
    _mav_finalize_message_chan_send(chan, 252, (const char *)packet, 18, 18, 44);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_named_value_int.h"
static inline uint32_t mavlink_msg_named_value_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_int_get_name(const mavlink_message_t* msg, char *name)
{
    return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline int32_t mavlink_msg_named_value_int_get_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_named_value_int_decode(const mavlink_message_t* msg, mavlink_named_value_int_t* named_value_int)
{





        uint8_t len = msg->len < 18? msg->len : 18;
        memset(named_value_int, 0, 18);
    memcpy(named_value_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1037 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h" 1
       




typedef struct __mavlink_statustext_t { uint8_t severity; char text[50]; } __attribute__((packed))



   mavlink_statustext_t;
# 51 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t severity, const char *text)
{






    mavlink_statustext_t packet;
    packet.severity = severity;
    mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 253;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 83);
}
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t severity,const char *text)
{






    mavlink_statustext_t packet;
    packet.severity = severity;
    mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 253;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 83);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
    return mavlink_msg_statustext_pack(system_id, component_id, msg, statustext->severity, statustext->text);
}
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
    return mavlink_msg_statustext_pack_chan(system_id, component_id, chan, msg, statustext->severity, statustext->text);
}
# 136 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline void mavlink_msg_statustext_send(mavlink_channel_t chan, uint8_t severity, const char *text)
{






    mavlink_statustext_t packet;
    packet.severity = severity;
    mav_array_memcpy(packet.text, text, sizeof(char)*50);
    _mav_finalize_message_chan_send(chan, 253, (const char *)&packet, 51, 51, 83);

}






static inline void mavlink_msg_statustext_send_struct(mavlink_channel_t chan, const mavlink_statustext_t* statustext)
{



    _mav_finalize_message_chan_send(chan, 253, (const char *)statustext, 51, 51, 83);

}
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline void mavlink_msg_statustext_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t severity, const char *text)
{






    mavlink_statustext_t *packet = (mavlink_statustext_t *)msgbuf;
    packet->severity = severity;
    mav_array_memcpy(packet->text, text, sizeof(char)*50);
    _mav_finalize_message_chan_send(chan, 253, (const char *)packet, 51, 51, 83);

}
# 199 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_statustext.h"
static inline uint8_t mavlink_msg_statustext_get_severity(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_statustext_get_text(const mavlink_message_t* msg, char *text)
{
    return _MAV_RETURN_char_array(msg, text, 50, 1);
}







static inline void mavlink_msg_statustext_decode(const mavlink_message_t* msg, mavlink_statustext_t* statustext)
{




        uint8_t len = msg->len < 51? msg->len : 51;
        memset(statustext, 0, 51);
    memcpy(statustext, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1038 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h" 1
       




typedef struct __mavlink_debug_t { uint32_t time_boot_ms; float value; uint8_t ind; } __attribute__((packed))




   mavlink_debug_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t ind, float value)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
    mavlink_debug_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 254;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 46);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t ind,float value)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
    mavlink_debug_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 254;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 46);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
    return mavlink_msg_debug_pack(system_id, component_id, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
    return mavlink_msg_debug_pack_chan(system_id, component_id, chan, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline void mavlink_msg_debug_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t ind, float value)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
    mavlink_debug_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    packet.ind = ind;

    _mav_finalize_message_chan_send(chan, 254, (const char *)&packet, 9, 9, 46);

}






static inline void mavlink_msg_debug_send_struct(mavlink_channel_t chan, const mavlink_debug_t* debug)
{



    _mav_finalize_message_chan_send(chan, 254, (const char *)debug, 9, 9, 46);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline void mavlink_msg_debug_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t ind, float value)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
    mavlink_debug_t *packet = (mavlink_debug_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->value = value;
    packet->ind = ind;

    _mav_finalize_message_chan_send(chan, 254, (const char *)packet, 9, 9, 46);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_debug.h"
static inline uint32_t mavlink_msg_debug_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_debug_get_ind(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline float mavlink_msg_debug_get_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_debug_decode(const mavlink_message_t* msg, mavlink_debug_t* debug)
{





        uint8_t len = msg->len < 9? msg->len : 9;
        memset(debug, 0, 9);
    memcpy(debug, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1039 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h" 1
       




typedef struct __mavlink_setup_signing_t { uint64_t initial_timestamp; uint8_t target_system; uint8_t target_component; uint8_t secret_key[32]; } __attribute__((packed))





   mavlink_setup_signing_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline uint16_t mavlink_msg_setup_signing_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const uint8_t *secret_key, uint64_t initial_timestamp)
{
# 70 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
    mavlink_setup_signing_t packet;
    packet.initial_timestamp = initial_timestamp;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.secret_key, secret_key, sizeof(uint8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 256;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 71);
}
# 94 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline uint16_t mavlink_msg_setup_signing_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const uint8_t *secret_key,uint64_t initial_timestamp)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
    mavlink_setup_signing_t packet;
    packet.initial_timestamp = initial_timestamp;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.secret_key, secret_key, sizeof(uint8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 256;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 71);
}
# 126 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline uint16_t mavlink_msg_setup_signing_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_setup_signing_t* setup_signing)
{
    return mavlink_msg_setup_signing_pack(system_id, component_id, msg, setup_signing->target_system, setup_signing->target_component, setup_signing->secret_key, setup_signing->initial_timestamp);
}
# 140 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline uint16_t mavlink_msg_setup_signing_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_setup_signing_t* setup_signing)
{
    return mavlink_msg_setup_signing_pack_chan(system_id, component_id, chan, msg, setup_signing->target_system, setup_signing->target_component, setup_signing->secret_key, setup_signing->initial_timestamp);
}
# 156 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline void mavlink_msg_setup_signing_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const uint8_t *secret_key, uint64_t initial_timestamp)
{
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
    mavlink_setup_signing_t packet;
    packet.initial_timestamp = initial_timestamp;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.secret_key, secret_key, sizeof(uint8_t)*32);
    _mav_finalize_message_chan_send(chan, 256, (const char *)&packet, 42, 42, 71);

}






static inline void mavlink_msg_setup_signing_send_struct(mavlink_channel_t chan, const mavlink_setup_signing_t* setup_signing)
{



    _mav_finalize_message_chan_send(chan, 256, (const char *)setup_signing, 42, 42, 71);

}
# 197 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline void mavlink_msg_setup_signing_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const uint8_t *secret_key, uint64_t initial_timestamp)
{
# 207 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
    mavlink_setup_signing_t *packet = (mavlink_setup_signing_t *)msgbuf;
    packet->initial_timestamp = initial_timestamp;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->secret_key, secret_key, sizeof(uint8_t)*32);
    _mav_finalize_message_chan_send(chan, 256, (const char *)packet, 42, 42, 71);

}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_setup_signing.h"
static inline uint8_t mavlink_msg_setup_signing_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint8_t mavlink_msg_setup_signing_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[9];
}






static inline uint16_t mavlink_msg_setup_signing_get_secret_key(const mavlink_message_t* msg, uint8_t *secret_key)
{
    return _MAV_RETURN_uint8_t_array(msg, secret_key, 32, 10);
}






static inline uint64_t mavlink_msg_setup_signing_get_initial_timestamp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}







static inline void mavlink_msg_setup_signing_decode(const mavlink_message_t* msg, mavlink_setup_signing_t* setup_signing)
{






        uint8_t len = msg->len < 42? msg->len : 42;
        memset(setup_signing, 0, 42);
    memcpy(setup_signing, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1040 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h" 1
       




typedef struct __mavlink_button_change_t { uint32_t time_boot_ms; uint32_t last_change_ms; uint8_t state; } __attribute__((packed))




   mavlink_button_change_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline uint16_t mavlink_msg_button_change_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint32_t last_change_ms, uint8_t state)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
    mavlink_button_change_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.last_change_ms = last_change_ms;
    packet.state = state;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 257;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 131);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline uint16_t mavlink_msg_button_change_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint32_t last_change_ms,uint8_t state)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
    mavlink_button_change_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.last_change_ms = last_change_ms;
    packet.state = state;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 257;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 131);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline uint16_t mavlink_msg_button_change_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_button_change_t* button_change)
{
    return mavlink_msg_button_change_pack(system_id, component_id, msg, button_change->time_boot_ms, button_change->last_change_ms, button_change->state);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline uint16_t mavlink_msg_button_change_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_button_change_t* button_change)
{
    return mavlink_msg_button_change_pack_chan(system_id, component_id, chan, msg, button_change->time_boot_ms, button_change->last_change_ms, button_change->state);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline void mavlink_msg_button_change_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint32_t last_change_ms, uint8_t state)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
    mavlink_button_change_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.last_change_ms = last_change_ms;
    packet.state = state;

    _mav_finalize_message_chan_send(chan, 257, (const char *)&packet, 9, 9, 131);

}






static inline void mavlink_msg_button_change_send_struct(mavlink_channel_t chan, const mavlink_button_change_t* button_change)
{



    _mav_finalize_message_chan_send(chan, 257, (const char *)button_change, 9, 9, 131);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline void mavlink_msg_button_change_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint32_t last_change_ms, uint8_t state)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
    mavlink_button_change_t *packet = (mavlink_button_change_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->last_change_ms = last_change_ms;
    packet->state = state;

    _mav_finalize_message_chan_send(chan, 257, (const char *)packet, 9, 9, 131);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_button_change.h"
static inline uint32_t mavlink_msg_button_change_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_button_change_get_last_change_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_button_change_get_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}







static inline void mavlink_msg_button_change_decode(const mavlink_message_t* msg, mavlink_button_change_t* button_change)
{





        uint8_t len = msg->len < 9? msg->len : 9;
        memset(button_change, 0, 9);
    memcpy(button_change, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1041 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h" 1
       




typedef struct __mavlink_play_tune_t { uint8_t target_system; uint8_t target_component; char tune[30]; } __attribute__((packed))




   mavlink_play_tune_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline uint16_t mavlink_msg_play_tune_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *tune)
{







    mavlink_play_tune_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.tune, tune, sizeof(char)*30);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 258;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 187);
}
# 87 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline uint16_t mavlink_msg_play_tune_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *tune)
{







    mavlink_play_tune_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.tune, tune, sizeof(char)*30);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 258;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 187);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline uint16_t mavlink_msg_play_tune_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_play_tune_t* play_tune)
{
    return mavlink_msg_play_tune_pack(system_id, component_id, msg, play_tune->target_system, play_tune->target_component, play_tune->tune);
}
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline uint16_t mavlink_msg_play_tune_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_play_tune_t* play_tune)
{
    return mavlink_msg_play_tune_pack_chan(system_id, component_id, chan, msg, play_tune->target_system, play_tune->target_component, play_tune->tune);
}
# 146 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline void mavlink_msg_play_tune_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *tune)
{







    mavlink_play_tune_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.tune, tune, sizeof(char)*30);
    _mav_finalize_message_chan_send(chan, 258, (const char *)&packet, 32, 32, 187);

}






static inline void mavlink_msg_play_tune_send_struct(mavlink_channel_t chan, const mavlink_play_tune_t* play_tune)
{



    _mav_finalize_message_chan_send(chan, 258, (const char *)play_tune, 32, 32, 187);

}
# 185 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline void mavlink_msg_play_tune_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, const char *tune)
{







    mavlink_play_tune_t *packet = (mavlink_play_tune_t *)msgbuf;
    packet->target_system = target_system;
    packet->target_component = target_component;
    mav_array_memcpy(packet->tune, tune, sizeof(char)*30);
    _mav_finalize_message_chan_send(chan, 258, (const char *)packet, 32, 32, 187);

}
# 213 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_play_tune.h"
static inline uint8_t mavlink_msg_play_tune_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_play_tune_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_play_tune_get_tune(const mavlink_message_t* msg, char *tune)
{
    return _MAV_RETURN_char_array(msg, tune, 30, 2);
}







static inline void mavlink_msg_play_tune_decode(const mavlink_message_t* msg, mavlink_play_tune_t* play_tune)
{





        uint8_t len = msg->len < 32? msg->len : 32;
        memset(play_tune, 0, 32);
    memcpy(play_tune, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1042 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h" 1
       




typedef struct __mavlink_camera_information_t { uint32_t time_boot_ms; float focal_length; float sensor_size_h; float sensor_size_v; uint16_t resolution_h; uint16_t resolution_v; uint8_t camera_id; uint8_t vendor_name[32]; uint8_t model_name[32]; uint8_t lense_id; } __attribute__((packed))
# 18 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
   mavlink_camera_information_t;
# 84 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline uint16_t mavlink_msg_camera_information_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t camera_id, const uint8_t *vendor_name, const uint8_t *model_name, float focal_length, float sensor_size_h, float sensor_size_v, uint16_t resolution_h, uint16_t resolution_v, uint8_t lense_id)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
    mavlink_camera_information_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.focal_length = focal_length;
    packet.sensor_size_h = sensor_size_h;
    packet.sensor_size_v = sensor_size_v;
    packet.resolution_h = resolution_h;
    packet.resolution_v = resolution_v;
    packet.camera_id = camera_id;
    packet.lense_id = lense_id;
    mav_array_memcpy(packet.vendor_name, vendor_name, sizeof(uint8_t)*32);
    mav_array_memcpy(packet.model_name, model_name, sizeof(uint8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 86);


    msg->msgid = 259;
    return mavlink_finalize_message(msg, system_id, component_id, 86, 86, 122);
}
# 137 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline uint16_t mavlink_msg_camera_information_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t camera_id,const uint8_t *vendor_name,const uint8_t *model_name,float focal_length,float sensor_size_h,float sensor_size_v,uint16_t resolution_h,uint16_t resolution_v,uint8_t lense_id)
{
# 155 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
    mavlink_camera_information_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.focal_length = focal_length;
    packet.sensor_size_h = sensor_size_h;
    packet.sensor_size_v = sensor_size_v;
    packet.resolution_h = resolution_h;
    packet.resolution_v = resolution_v;
    packet.camera_id = camera_id;
    packet.lense_id = lense_id;
    mav_array_memcpy(packet.vendor_name, vendor_name, sizeof(uint8_t)*32);
    mav_array_memcpy(packet.model_name, model_name, sizeof(uint8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 86);


    msg->msgid = 259;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 86, 86, 122);
}
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline uint16_t mavlink_msg_camera_information_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_information_t* camera_information)
{
    return mavlink_msg_camera_information_pack(system_id, component_id, msg, camera_information->time_boot_ms, camera_information->camera_id, camera_information->vendor_name, camera_information->model_name, camera_information->focal_length, camera_information->sensor_size_h, camera_information->sensor_size_v, camera_information->resolution_h, camera_information->resolution_v, camera_information->lense_id);
}
# 195 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline uint16_t mavlink_msg_camera_information_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_information_t* camera_information)
{
    return mavlink_msg_camera_information_pack_chan(system_id, component_id, chan, msg, camera_information->time_boot_ms, camera_information->camera_id, camera_information->vendor_name, camera_information->model_name, camera_information->focal_length, camera_information->sensor_size_h, camera_information->sensor_size_v, camera_information->resolution_h, camera_information->resolution_v, camera_information->lense_id);
}
# 217 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline void mavlink_msg_camera_information_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t camera_id, const uint8_t *vendor_name, const uint8_t *model_name, float focal_length, float sensor_size_h, float sensor_size_v, uint16_t resolution_h, uint16_t resolution_v, uint8_t lense_id)
{
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
    mavlink_camera_information_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.focal_length = focal_length;
    packet.sensor_size_h = sensor_size_h;
    packet.sensor_size_v = sensor_size_v;
    packet.resolution_h = resolution_h;
    packet.resolution_v = resolution_v;
    packet.camera_id = camera_id;
    packet.lense_id = lense_id;
    mav_array_memcpy(packet.vendor_name, vendor_name, sizeof(uint8_t)*32);
    mav_array_memcpy(packet.model_name, model_name, sizeof(uint8_t)*32);
    _mav_finalize_message_chan_send(chan, 259, (const char *)&packet, 86, 86, 122);

}






static inline void mavlink_msg_camera_information_send_struct(mavlink_channel_t chan, const mavlink_camera_information_t* camera_information)
{



    _mav_finalize_message_chan_send(chan, 259, (const char *)camera_information, 86, 86, 122);

}
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline void mavlink_msg_camera_information_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t camera_id, const uint8_t *vendor_name, const uint8_t *model_name, float focal_length, float sensor_size_h, float sensor_size_v, uint16_t resolution_h, uint16_t resolution_v, uint8_t lense_id)
{
# 286 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
    mavlink_camera_information_t *packet = (mavlink_camera_information_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->focal_length = focal_length;
    packet->sensor_size_h = sensor_size_h;
    packet->sensor_size_v = sensor_size_v;
    packet->resolution_h = resolution_h;
    packet->resolution_v = resolution_v;
    packet->camera_id = camera_id;
    packet->lense_id = lense_id;
    mav_array_memcpy(packet->vendor_name, vendor_name, sizeof(uint8_t)*32);
    mav_array_memcpy(packet->model_name, model_name, sizeof(uint8_t)*32);
    _mav_finalize_message_chan_send(chan, 259, (const char *)packet, 86, 86, 122);

}
# 312 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
static inline uint32_t mavlink_msg_camera_information_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_camera_information_get_camera_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_camera_information_get_vendor_name(const mavlink_message_t* msg, uint8_t *vendor_name)
{
    return _MAV_RETURN_uint8_t_array(msg, vendor_name, 32, 21);
}






static inline uint16_t mavlink_msg_camera_information_get_model_name(const mavlink_message_t* msg, uint8_t *model_name)
{
    return _MAV_RETURN_uint8_t_array(msg, model_name, 32, 53);
}






static inline float mavlink_msg_camera_information_get_focal_length(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_camera_information_get_sensor_size_h(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_camera_information_get_sensor_size_v(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline uint16_t mavlink_msg_camera_information_get_resolution_h(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_camera_information_get_resolution_v(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint8_t mavlink_msg_camera_information_get_lense_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[85];
}







static inline void mavlink_msg_camera_information_decode(const mavlink_message_t* msg, mavlink_camera_information_t* camera_information)
{
# 427 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_information.h"
        uint8_t len = msg->len < 86? msg->len : 86;
        memset(camera_information, 0, 86);
    memcpy(camera_information, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1043 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h" 1
       




typedef struct __mavlink_camera_settings_t { uint32_t time_boot_ms; float aperture; float shutter_speed; float iso_sensitivity; float white_balance; uint8_t camera_id; uint8_t aperture_locked; uint8_t shutter_speed_locked; uint8_t iso_sensitivity_locked; uint8_t white_balance_locked; uint8_t mode_id; uint8_t color_mode_id; uint8_t image_format_id; } __attribute__((packed))
# 21 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
   mavlink_camera_settings_t;
# 95 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline uint16_t mavlink_msg_camera_settings_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t camera_id, float aperture, uint8_t aperture_locked, float shutter_speed, uint8_t shutter_speed_locked, float iso_sensitivity, uint8_t iso_sensitivity_locked, float white_balance, uint8_t white_balance_locked, uint8_t mode_id, uint8_t color_mode_id, uint8_t image_format_id)
{
# 116 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
    mavlink_camera_settings_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.aperture = aperture;
    packet.shutter_speed = shutter_speed;
    packet.iso_sensitivity = iso_sensitivity;
    packet.white_balance = white_balance;
    packet.camera_id = camera_id;
    packet.aperture_locked = aperture_locked;
    packet.shutter_speed_locked = shutter_speed_locked;
    packet.iso_sensitivity_locked = iso_sensitivity_locked;
    packet.white_balance_locked = white_balance_locked;
    packet.mode_id = mode_id;
    packet.color_mode_id = color_mode_id;
    packet.image_format_id = image_format_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 260;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 8);
}
# 159 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline uint16_t mavlink_msg_camera_settings_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t camera_id,float aperture,uint8_t aperture_locked,float shutter_speed,uint8_t shutter_speed_locked,float iso_sensitivity,uint8_t iso_sensitivity_locked,float white_balance,uint8_t white_balance_locked,uint8_t mode_id,uint8_t color_mode_id,uint8_t image_format_id)
{
# 181 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
    mavlink_camera_settings_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.aperture = aperture;
    packet.shutter_speed = shutter_speed;
    packet.iso_sensitivity = iso_sensitivity;
    packet.white_balance = white_balance;
    packet.camera_id = camera_id;
    packet.aperture_locked = aperture_locked;
    packet.shutter_speed_locked = shutter_speed_locked;
    packet.iso_sensitivity_locked = iso_sensitivity_locked;
    packet.white_balance_locked = white_balance_locked;
    packet.mode_id = mode_id;
    packet.color_mode_id = color_mode_id;
    packet.image_format_id = image_format_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 260;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 8);
}
# 211 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline uint16_t mavlink_msg_camera_settings_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_settings_t* camera_settings)
{
    return mavlink_msg_camera_settings_pack(system_id, component_id, msg, camera_settings->time_boot_ms, camera_settings->camera_id, camera_settings->aperture, camera_settings->aperture_locked, camera_settings->shutter_speed, camera_settings->shutter_speed_locked, camera_settings->iso_sensitivity, camera_settings->iso_sensitivity_locked, camera_settings->white_balance, camera_settings->white_balance_locked, camera_settings->mode_id, camera_settings->color_mode_id, camera_settings->image_format_id);
}
# 225 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline uint16_t mavlink_msg_camera_settings_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_settings_t* camera_settings)
{
    return mavlink_msg_camera_settings_pack_chan(system_id, component_id, chan, msg, camera_settings->time_boot_ms, camera_settings->camera_id, camera_settings->aperture, camera_settings->aperture_locked, camera_settings->shutter_speed, camera_settings->shutter_speed_locked, camera_settings->iso_sensitivity, camera_settings->iso_sensitivity_locked, camera_settings->white_balance, camera_settings->white_balance_locked, camera_settings->mode_id, camera_settings->color_mode_id, camera_settings->image_format_id);
}
# 250 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline void mavlink_msg_camera_settings_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t camera_id, float aperture, uint8_t aperture_locked, float shutter_speed, uint8_t shutter_speed_locked, float iso_sensitivity, uint8_t iso_sensitivity_locked, float white_balance, uint8_t white_balance_locked, uint8_t mode_id, uint8_t color_mode_id, uint8_t image_format_id)
{
# 270 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
    mavlink_camera_settings_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.aperture = aperture;
    packet.shutter_speed = shutter_speed;
    packet.iso_sensitivity = iso_sensitivity;
    packet.white_balance = white_balance;
    packet.camera_id = camera_id;
    packet.aperture_locked = aperture_locked;
    packet.shutter_speed_locked = shutter_speed_locked;
    packet.iso_sensitivity_locked = iso_sensitivity_locked;
    packet.white_balance_locked = white_balance_locked;
    packet.mode_id = mode_id;
    packet.color_mode_id = color_mode_id;
    packet.image_format_id = image_format_id;

    _mav_finalize_message_chan_send(chan, 260, (const char *)&packet, 28, 28, 8);

}






static inline void mavlink_msg_camera_settings_send_struct(mavlink_channel_t chan, const mavlink_camera_settings_t* camera_settings)
{



    _mav_finalize_message_chan_send(chan, 260, (const char *)camera_settings, 28, 28, 8);

}
# 311 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline void mavlink_msg_camera_settings_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t camera_id, float aperture, uint8_t aperture_locked, float shutter_speed, uint8_t shutter_speed_locked, float iso_sensitivity, uint8_t iso_sensitivity_locked, float white_balance, uint8_t white_balance_locked, uint8_t mode_id, uint8_t color_mode_id, uint8_t image_format_id)
{
# 331 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
    mavlink_camera_settings_t *packet = (mavlink_camera_settings_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->aperture = aperture;
    packet->shutter_speed = shutter_speed;
    packet->iso_sensitivity = iso_sensitivity;
    packet->white_balance = white_balance;
    packet->camera_id = camera_id;
    packet->aperture_locked = aperture_locked;
    packet->shutter_speed_locked = shutter_speed_locked;
    packet->iso_sensitivity_locked = iso_sensitivity_locked;
    packet->white_balance_locked = white_balance_locked;
    packet->mode_id = mode_id;
    packet->color_mode_id = color_mode_id;
    packet->image_format_id = image_format_id;

    _mav_finalize_message_chan_send(chan, 260, (const char *)packet, 28, 28, 8);

}
# 361 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
static inline uint32_t mavlink_msg_camera_settings_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_camera_settings_get_camera_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline float mavlink_msg_camera_settings_get_aperture(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline uint8_t mavlink_msg_camera_settings_get_aperture_locked(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}






static inline float mavlink_msg_camera_settings_get_shutter_speed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline uint8_t mavlink_msg_camera_settings_get_shutter_speed_locked(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[22];
}






static inline float mavlink_msg_camera_settings_get_iso_sensitivity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline uint8_t mavlink_msg_camera_settings_get_iso_sensitivity_locked(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[23];
}






static inline float mavlink_msg_camera_settings_get_white_balance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline uint8_t mavlink_msg_camera_settings_get_white_balance_locked(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint8_t mavlink_msg_camera_settings_get_mode_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline uint8_t mavlink_msg_camera_settings_get_color_mode_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline uint8_t mavlink_msg_camera_settings_get_image_format_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[27];
}







static inline void mavlink_msg_camera_settings_decode(const mavlink_message_t* msg, mavlink_camera_settings_t* camera_settings)
{
# 509 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_settings.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(camera_settings, 0, 28);
    memcpy(camera_settings, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1044 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h" 1
       




typedef struct __mavlink_storage_information_t { uint32_t time_boot_ms; float total_capacity; float used_capacity; float available_capacity; float read_speed; float write_speed; uint8_t storage_id; uint8_t status; } __attribute__((packed))
# 16 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
   mavlink_storage_information_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline uint16_t mavlink_msg_storage_information_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t storage_id, uint8_t status, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed)
{
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
    mavlink_storage_information_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.total_capacity = total_capacity;
    packet.used_capacity = used_capacity;
    packet.available_capacity = available_capacity;
    packet.read_speed = read_speed;
    packet.write_speed = write_speed;
    packet.storage_id = storage_id;
    packet.status = status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 261;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 26, 244);
}
# 124 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline uint16_t mavlink_msg_storage_information_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t storage_id,uint8_t status,float total_capacity,float used_capacity,float available_capacity,float read_speed,float write_speed)
{
# 141 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
    mavlink_storage_information_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.total_capacity = total_capacity;
    packet.used_capacity = used_capacity;
    packet.available_capacity = available_capacity;
    packet.read_speed = read_speed;
    packet.write_speed = write_speed;
    packet.storage_id = storage_id;
    packet.status = status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 261;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 26, 244);
}
# 166 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline uint16_t mavlink_msg_storage_information_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_storage_information_t* storage_information)
{
    return mavlink_msg_storage_information_pack(system_id, component_id, msg, storage_information->time_boot_ms, storage_information->storage_id, storage_information->status, storage_information->total_capacity, storage_information->used_capacity, storage_information->available_capacity, storage_information->read_speed, storage_information->write_speed);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline uint16_t mavlink_msg_storage_information_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_storage_information_t* storage_information)
{
    return mavlink_msg_storage_information_pack_chan(system_id, component_id, chan, msg, storage_information->time_boot_ms, storage_information->storage_id, storage_information->status, storage_information->total_capacity, storage_information->used_capacity, storage_information->available_capacity, storage_information->read_speed, storage_information->write_speed);
}
# 200 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline void mavlink_msg_storage_information_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t storage_id, uint8_t status, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed)
{
# 215 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
    mavlink_storage_information_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.total_capacity = total_capacity;
    packet.used_capacity = used_capacity;
    packet.available_capacity = available_capacity;
    packet.read_speed = read_speed;
    packet.write_speed = write_speed;
    packet.storage_id = storage_id;
    packet.status = status;

    _mav_finalize_message_chan_send(chan, 261, (const char *)&packet, 26, 26, 244);

}






static inline void mavlink_msg_storage_information_send_struct(mavlink_channel_t chan, const mavlink_storage_information_t* storage_information)
{



    _mav_finalize_message_chan_send(chan, 261, (const char *)storage_information, 26, 26, 244);

}
# 251 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline void mavlink_msg_storage_information_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t storage_id, uint8_t status, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed)
{
# 266 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
    mavlink_storage_information_t *packet = (mavlink_storage_information_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->total_capacity = total_capacity;
    packet->used_capacity = used_capacity;
    packet->available_capacity = available_capacity;
    packet->read_speed = read_speed;
    packet->write_speed = write_speed;
    packet->storage_id = storage_id;
    packet->status = status;

    _mav_finalize_message_chan_send(chan, 261, (const char *)packet, 26, 26, 244);

}
# 291 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
static inline uint32_t mavlink_msg_storage_information_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_storage_information_get_storage_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint8_t mavlink_msg_storage_information_get_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline float mavlink_msg_storage_information_get_total_capacity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_storage_information_get_used_capacity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_storage_information_get_available_capacity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_storage_information_get_read_speed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_storage_information_get_write_speed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_storage_information_decode(const mavlink_message_t* msg, mavlink_storage_information_t* storage_information)
{
# 384 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_storage_information.h"
        uint8_t len = msg->len < 26? msg->len : 26;
        memset(storage_information, 0, 26);
    memcpy(storage_information, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1045 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h" 1
       




typedef struct __mavlink_camera_capture_status_t { uint32_t time_boot_ms; float image_interval; float video_framerate; uint32_t recording_time_ms; float available_capacity; uint16_t image_resolution_h; uint16_t image_resolution_v; uint16_t video_resolution_h; uint16_t video_resolution_v; uint8_t camera_id; uint8_t image_status; uint8_t video_status; } __attribute__((packed))
# 20 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
   mavlink_camera_capture_status_t;
# 91 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline uint16_t mavlink_msg_camera_capture_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t camera_id, uint8_t image_status, uint8_t video_status, float image_interval, float video_framerate, uint16_t image_resolution_h, uint16_t image_resolution_v, uint16_t video_resolution_h, uint16_t video_resolution_v, uint32_t recording_time_ms, float available_capacity)
{
# 111 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
    mavlink_camera_capture_status_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.image_interval = image_interval;
    packet.video_framerate = video_framerate;
    packet.recording_time_ms = recording_time_ms;
    packet.available_capacity = available_capacity;
    packet.image_resolution_h = image_resolution_h;
    packet.image_resolution_v = image_resolution_v;
    packet.video_resolution_h = video_resolution_h;
    packet.video_resolution_v = video_resolution_v;
    packet.camera_id = camera_id;
    packet.image_status = image_status;
    packet.video_status = video_status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


    msg->msgid = 262;
    return mavlink_finalize_message(msg, system_id, component_id, 31, 31, 69);
}
# 152 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline uint16_t mavlink_msg_camera_capture_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t camera_id,uint8_t image_status,uint8_t video_status,float image_interval,float video_framerate,uint16_t image_resolution_h,uint16_t image_resolution_v,uint16_t video_resolution_h,uint16_t video_resolution_v,uint32_t recording_time_ms,float available_capacity)
{
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
    mavlink_camera_capture_status_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.image_interval = image_interval;
    packet.video_framerate = video_framerate;
    packet.recording_time_ms = recording_time_ms;
    packet.available_capacity = available_capacity;
    packet.image_resolution_h = image_resolution_h;
    packet.image_resolution_v = image_resolution_v;
    packet.video_resolution_h = video_resolution_h;
    packet.video_resolution_v = video_resolution_v;
    packet.camera_id = camera_id;
    packet.image_status = image_status;
    packet.video_status = video_status;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


    msg->msgid = 262;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 31, 31, 69);
}
# 202 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline uint16_t mavlink_msg_camera_capture_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_capture_status_t* camera_capture_status)
{
    return mavlink_msg_camera_capture_status_pack(system_id, component_id, msg, camera_capture_status->time_boot_ms, camera_capture_status->camera_id, camera_capture_status->image_status, camera_capture_status->video_status, camera_capture_status->image_interval, camera_capture_status->video_framerate, camera_capture_status->image_resolution_h, camera_capture_status->image_resolution_v, camera_capture_status->video_resolution_h, camera_capture_status->video_resolution_v, camera_capture_status->recording_time_ms, camera_capture_status->available_capacity);
}
# 216 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline uint16_t mavlink_msg_camera_capture_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_capture_status_t* camera_capture_status)
{
    return mavlink_msg_camera_capture_status_pack_chan(system_id, component_id, chan, msg, camera_capture_status->time_boot_ms, camera_capture_status->camera_id, camera_capture_status->image_status, camera_capture_status->video_status, camera_capture_status->image_interval, camera_capture_status->video_framerate, camera_capture_status->image_resolution_h, camera_capture_status->image_resolution_v, camera_capture_status->video_resolution_h, camera_capture_status->video_resolution_v, camera_capture_status->recording_time_ms, camera_capture_status->available_capacity);
}
# 240 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline void mavlink_msg_camera_capture_status_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t camera_id, uint8_t image_status, uint8_t video_status, float image_interval, float video_framerate, uint16_t image_resolution_h, uint16_t image_resolution_v, uint16_t video_resolution_h, uint16_t video_resolution_v, uint32_t recording_time_ms, float available_capacity)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
    mavlink_camera_capture_status_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.image_interval = image_interval;
    packet.video_framerate = video_framerate;
    packet.recording_time_ms = recording_time_ms;
    packet.available_capacity = available_capacity;
    packet.image_resolution_h = image_resolution_h;
    packet.image_resolution_v = image_resolution_v;
    packet.video_resolution_h = video_resolution_h;
    packet.video_resolution_v = video_resolution_v;
    packet.camera_id = camera_id;
    packet.image_status = image_status;
    packet.video_status = video_status;

    _mav_finalize_message_chan_send(chan, 262, (const char *)&packet, 31, 31, 69);

}






static inline void mavlink_msg_camera_capture_status_send_struct(mavlink_channel_t chan, const mavlink_camera_capture_status_t* camera_capture_status)
{



    _mav_finalize_message_chan_send(chan, 262, (const char *)camera_capture_status, 31, 31, 69);

}
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline void mavlink_msg_camera_capture_status_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t camera_id, uint8_t image_status, uint8_t video_status, float image_interval, float video_framerate, uint16_t image_resolution_h, uint16_t image_resolution_v, uint16_t video_resolution_h, uint16_t video_resolution_v, uint32_t recording_time_ms, float available_capacity)
{
# 318 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
    mavlink_camera_capture_status_t *packet = (mavlink_camera_capture_status_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->image_interval = image_interval;
    packet->video_framerate = video_framerate;
    packet->recording_time_ms = recording_time_ms;
    packet->available_capacity = available_capacity;
    packet->image_resolution_h = image_resolution_h;
    packet->image_resolution_v = image_resolution_v;
    packet->video_resolution_h = video_resolution_h;
    packet->video_resolution_v = video_resolution_v;
    packet->camera_id = camera_id;
    packet->image_status = image_status;
    packet->video_status = video_status;

    _mav_finalize_message_chan_send(chan, 262, (const char *)packet, 31, 31, 69);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
static inline uint32_t mavlink_msg_camera_capture_status_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_camera_capture_status_get_camera_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline uint8_t mavlink_msg_camera_capture_status_get_image_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}






static inline uint8_t mavlink_msg_camera_capture_status_get_video_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline float mavlink_msg_camera_capture_status_get_image_interval(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_camera_capture_status_get_video_framerate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline uint16_t mavlink_msg_camera_capture_status_get_image_resolution_h(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_camera_capture_status_get_image_resolution_v(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_camera_capture_status_get_video_resolution_h(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_camera_capture_status_get_video_resolution_v(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint32_t mavlink_msg_camera_capture_status_get_recording_time_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 12);
}






static inline float mavlink_msg_camera_capture_status_get_available_capacity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_camera_capture_status_decode(const mavlink_message_t* msg, mavlink_camera_capture_status_t* camera_capture_status)
{
# 484 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_capture_status.h"
        uint8_t len = msg->len < 31? msg->len : 31;
        memset(camera_capture_status, 0, 31);
    memcpy(camera_capture_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1046 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h" 1
       




typedef struct __mavlink_camera_image_captured_t { uint64_t time_utc; uint32_t time_boot_ms; int32_t lat; int32_t lon; int32_t alt; int32_t relative_alt; float q[4]; int32_t image_index; uint8_t camera_id; int8_t capture_result; char file_url[205]; } __attribute__((packed))
# 19 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
   mavlink_camera_image_captured_t;
# 88 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline uint16_t mavlink_msg_camera_image_captured_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint64_t time_utc, uint8_t camera_id, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, const float *q, int32_t image_index, int8_t capture_result, const char *file_url)
{
# 106 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
    mavlink_camera_image_captured_t packet;
    packet.time_utc = time_utc;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.image_index = image_index;
    packet.camera_id = camera_id;
    packet.capture_result = capture_result;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.file_url, file_url, sizeof(char)*205);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 263;
    return mavlink_finalize_message(msg, system_id, component_id, 255, 255, 133);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline uint16_t mavlink_msg_camera_image_captured_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint64_t time_utc,uint8_t camera_id,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,const float *q,int32_t image_index,int8_t capture_result,const char *file_url)
{
# 163 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
    mavlink_camera_image_captured_t packet;
    packet.time_utc = time_utc;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.image_index = image_index;
    packet.camera_id = camera_id;
    packet.capture_result = capture_result;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.file_url, file_url, sizeof(char)*205);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 263;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 255, 133);
}
# 190 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline uint16_t mavlink_msg_camera_image_captured_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_image_captured_t* camera_image_captured)
{
    return mavlink_msg_camera_image_captured_pack(system_id, component_id, msg, camera_image_captured->time_boot_ms, camera_image_captured->time_utc, camera_image_captured->camera_id, camera_image_captured->lat, camera_image_captured->lon, camera_image_captured->alt, camera_image_captured->relative_alt, camera_image_captured->q, camera_image_captured->image_index, camera_image_captured->capture_result, camera_image_captured->file_url);
}
# 204 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline uint16_t mavlink_msg_camera_image_captured_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_image_captured_t* camera_image_captured)
{
    return mavlink_msg_camera_image_captured_pack_chan(system_id, component_id, chan, msg, camera_image_captured->time_boot_ms, camera_image_captured->time_utc, camera_image_captured->camera_id, camera_image_captured->lat, camera_image_captured->lon, camera_image_captured->alt, camera_image_captured->relative_alt, camera_image_captured->q, camera_image_captured->image_index, camera_image_captured->capture_result, camera_image_captured->file_url);
}
# 227 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline void mavlink_msg_camera_image_captured_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint64_t time_utc, uint8_t camera_id, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, const float *q, int32_t image_index, int8_t capture_result, const char *file_url)
{
# 244 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
    mavlink_camera_image_captured_t packet;
    packet.time_utc = time_utc;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.image_index = image_index;
    packet.camera_id = camera_id;
    packet.capture_result = capture_result;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.file_url, file_url, sizeof(char)*205);
    _mav_finalize_message_chan_send(chan, 263, (const char *)&packet, 255, 255, 133);

}






static inline void mavlink_msg_camera_image_captured_send_struct(mavlink_channel_t chan, const mavlink_camera_image_captured_t* camera_image_captured)
{



    _mav_finalize_message_chan_send(chan, 263, (const char *)camera_image_captured, 255, 255, 133);

}
# 282 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline void mavlink_msg_camera_image_captured_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint64_t time_utc, uint8_t camera_id, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, const float *q, int32_t image_index, int8_t capture_result, const char *file_url)
{
# 299 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
    mavlink_camera_image_captured_t *packet = (mavlink_camera_image_captured_t *)msgbuf;
    packet->time_utc = time_utc;
    packet->time_boot_ms = time_boot_ms;
    packet->lat = lat;
    packet->lon = lon;
    packet->alt = alt;
    packet->relative_alt = relative_alt;
    packet->image_index = image_index;
    packet->camera_id = camera_id;
    packet->capture_result = capture_result;
    mav_array_memcpy(packet->q, q, sizeof(float)*4);
    mav_array_memcpy(packet->file_url, file_url, sizeof(char)*205);
    _mav_finalize_message_chan_send(chan, 263, (const char *)packet, 255, 255, 133);

}
# 326 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
static inline uint32_t mavlink_msg_camera_image_captured_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint64_t mavlink_msg_camera_image_captured_get_time_utc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_camera_image_captured_get_camera_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[48];
}






static inline int32_t mavlink_msg_camera_image_captured_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_camera_image_captured_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_camera_image_captured_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline int32_t mavlink_msg_camera_image_captured_get_relative_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 24);
}






static inline uint16_t mavlink_msg_camera_image_captured_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 28);
}






static inline int32_t mavlink_msg_camera_image_captured_get_image_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 44);
}






static inline int8_t mavlink_msg_camera_image_captured_get_capture_result(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[49];
}






static inline uint16_t mavlink_msg_camera_image_captured_get_file_url(const mavlink_message_t* msg, char *file_url)
{
    return _MAV_RETURN_char_array(msg, file_url, 205, 50);
}







static inline void mavlink_msg_camera_image_captured_decode(const mavlink_message_t* msg, mavlink_camera_image_captured_t* camera_image_captured)
{
# 452 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_camera_image_captured.h"
        uint8_t len = msg->len < 255? msg->len : 255;
        memset(camera_image_captured, 0, 255);
    memcpy(camera_image_captured, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1047 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h" 1
       




typedef struct __mavlink_flight_information_t { uint64_t arming_time_utc; uint64_t takeoff_time_utc; uint64_t flight_uuid; uint32_t time_boot_ms; } __attribute__((packed))





   mavlink_flight_information_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline uint16_t mavlink_msg_flight_information_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint64_t arming_time_utc, uint64_t takeoff_time_utc, uint64_t flight_uuid)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
    mavlink_flight_information_t packet;
    packet.arming_time_utc = arming_time_utc;
    packet.takeoff_time_utc = takeoff_time_utc;
    packet.flight_uuid = flight_uuid;
    packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 264;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 49);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline uint16_t mavlink_msg_flight_information_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint64_t arming_time_utc,uint64_t takeoff_time_utc,uint64_t flight_uuid)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
    mavlink_flight_information_t packet;
    packet.arming_time_utc = arming_time_utc;
    packet.takeoff_time_utc = takeoff_time_utc;
    packet.flight_uuid = flight_uuid;
    packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 264;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 49);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline uint16_t mavlink_msg_flight_information_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_flight_information_t* flight_information)
{
    return mavlink_msg_flight_information_pack(system_id, component_id, msg, flight_information->time_boot_ms, flight_information->arming_time_utc, flight_information->takeoff_time_utc, flight_information->flight_uuid);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline uint16_t mavlink_msg_flight_information_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_flight_information_t* flight_information)
{
    return mavlink_msg_flight_information_pack_chan(system_id, component_id, chan, msg, flight_information->time_boot_ms, flight_information->arming_time_utc, flight_information->takeoff_time_utc, flight_information->flight_uuid);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline void mavlink_msg_flight_information_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint64_t arming_time_utc, uint64_t takeoff_time_utc, uint64_t flight_uuid)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
    mavlink_flight_information_t packet;
    packet.arming_time_utc = arming_time_utc;
    packet.takeoff_time_utc = takeoff_time_utc;
    packet.flight_uuid = flight_uuid;
    packet.time_boot_ms = time_boot_ms;

    _mav_finalize_message_chan_send(chan, 264, (const char *)&packet, 28, 28, 49);

}






static inline void mavlink_msg_flight_information_send_struct(mavlink_channel_t chan, const mavlink_flight_information_t* flight_information)
{



    _mav_finalize_message_chan_send(chan, 264, (const char *)flight_information, 28, 28, 49);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline void mavlink_msg_flight_information_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, uint64_t arming_time_utc, uint64_t takeoff_time_utc, uint64_t flight_uuid)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
    mavlink_flight_information_t *packet = (mavlink_flight_information_t *)msgbuf;
    packet->arming_time_utc = arming_time_utc;
    packet->takeoff_time_utc = takeoff_time_utc;
    packet->flight_uuid = flight_uuid;
    packet->time_boot_ms = time_boot_ms;

    _mav_finalize_message_chan_send(chan, 264, (const char *)packet, 28, 28, 49);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_flight_information.h"
static inline uint32_t mavlink_msg_flight_information_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint64_t mavlink_msg_flight_information_get_arming_time_utc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint64_t mavlink_msg_flight_information_get_takeoff_time_utc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}






static inline uint64_t mavlink_msg_flight_information_get_flight_uuid(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 16);
}







static inline void mavlink_msg_flight_information_decode(const mavlink_message_t* msg, mavlink_flight_information_t* flight_information)
{






        uint8_t len = msg->len < 28? msg->len : 28;
        memset(flight_information, 0, 28);
    memcpy(flight_information, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1048 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h" 1
       




typedef struct __mavlink_mount_orientation_t { uint32_t time_boot_ms; float roll; float pitch; float yaw; } __attribute__((packed))





   mavlink_mount_orientation_t;
# 59 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline uint16_t mavlink_msg_mount_orientation_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float roll, float pitch, float yaw)
{
# 71 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
    mavlink_mount_orientation_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 265;
    return mavlink_finalize_message(msg, system_id, component_id, 16, 16, 26);
}
# 96 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline uint16_t mavlink_msg_mount_orientation_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float roll,float pitch,float yaw)
{
# 109 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
    mavlink_mount_orientation_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 265;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 16, 26);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline uint16_t mavlink_msg_mount_orientation_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mount_orientation_t* mount_orientation)
{
    return mavlink_msg_mount_orientation_pack(system_id, component_id, msg, mount_orientation->time_boot_ms, mount_orientation->roll, mount_orientation->pitch, mount_orientation->yaw);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline uint16_t mavlink_msg_mount_orientation_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mount_orientation_t* mount_orientation)
{
    return mavlink_msg_mount_orientation_pack_chan(system_id, component_id, chan, msg, mount_orientation->time_boot_ms, mount_orientation->roll, mount_orientation->pitch, mount_orientation->yaw);
}
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline void mavlink_msg_mount_orientation_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw)
{
# 171 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
    mavlink_mount_orientation_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

    _mav_finalize_message_chan_send(chan, 265, (const char *)&packet, 16, 16, 26);

}






static inline void mavlink_msg_mount_orientation_send_struct(mavlink_channel_t chan, const mavlink_mount_orientation_t* mount_orientation)
{



    _mav_finalize_message_chan_send(chan, 265, (const char *)mount_orientation, 16, 16, 26);

}
# 203 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline void mavlink_msg_mount_orientation_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw)
{
# 214 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
    mavlink_mount_orientation_t *packet = (mavlink_mount_orientation_t *)msgbuf;
    packet->time_boot_ms = time_boot_ms;
    packet->roll = roll;
    packet->pitch = pitch;
    packet->yaw = yaw;

    _mav_finalize_message_chan_send(chan, 265, (const char *)packet, 16, 16, 26);

}
# 235 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_mount_orientation.h"
static inline uint32_t mavlink_msg_mount_orientation_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_mount_orientation_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mount_orientation_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mount_orientation_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_mount_orientation_decode(const mavlink_message_t* msg, mavlink_mount_orientation_t* mount_orientation)
{






        uint8_t len = msg->len < 16? msg->len : 16;
        memset(mount_orientation, 0, 16);
    memcpy(mount_orientation, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1049 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h" 1
       




typedef struct __mavlink_logging_data_t { uint16_t sequence; uint8_t target_system; uint8_t target_component; uint8_t length; uint8_t first_message_offset; uint8_t data[249]; } __attribute__((packed))







   mavlink_logging_data_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline uint16_t mavlink_msg_logging_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t sequence, uint8_t length, uint8_t first_message_offset, const uint8_t *data)
{
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
    mavlink_logging_data_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.length = length;
    packet.first_message_offset = first_message_offset;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 266;
    return mavlink_finalize_message(msg, system_id, component_id, 255, 255, 193);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline uint16_t mavlink_msg_logging_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t sequence,uint8_t length,uint8_t first_message_offset,const uint8_t *data)
{
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
    mavlink_logging_data_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.length = length;
    packet.first_message_offset = first_message_offset;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 266;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 255, 193);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline uint16_t mavlink_msg_logging_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_logging_data_t* logging_data)
{
    return mavlink_msg_logging_data_pack(system_id, component_id, msg, logging_data->target_system, logging_data->target_component, logging_data->sequence, logging_data->length, logging_data->first_message_offset, logging_data->data);
}
# 158 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline uint16_t mavlink_msg_logging_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_logging_data_t* logging_data)
{
    return mavlink_msg_logging_data_pack_chan(system_id, component_id, chan, msg, logging_data->target_system, logging_data->target_component, logging_data->sequence, logging_data->length, logging_data->first_message_offset, logging_data->data);
}
# 176 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline void mavlink_msg_logging_data_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t sequence, uint8_t length, uint8_t first_message_offset, const uint8_t *data)
{
# 188 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
    mavlink_logging_data_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.length = length;
    packet.first_message_offset = first_message_offset;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*249);
    _mav_finalize_message_chan_send(chan, 266, (const char *)&packet, 255, 255, 193);

}






static inline void mavlink_msg_logging_data_send_struct(mavlink_channel_t chan, const mavlink_logging_data_t* logging_data)
{



    _mav_finalize_message_chan_send(chan, 266, (const char *)logging_data, 255, 255, 193);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline void mavlink_msg_logging_data_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t sequence, uint8_t length, uint8_t first_message_offset, const uint8_t *data)
{
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
    mavlink_logging_data_t *packet = (mavlink_logging_data_t *)msgbuf;
    packet->sequence = sequence;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->length = length;
    packet->first_message_offset = first_message_offset;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*249);
    _mav_finalize_message_chan_send(chan, 266, (const char *)packet, 255, 255, 193);

}
# 255 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
static inline uint8_t mavlink_msg_logging_data_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_logging_data_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_logging_data_get_sequence(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_logging_data_get_length(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_logging_data_get_first_message_offset(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_logging_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 249, 6);
}







static inline void mavlink_msg_logging_data_decode(const mavlink_message_t* msg, mavlink_logging_data_t* logging_data)
{
# 326 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data.h"
        uint8_t len = msg->len < 255? msg->len : 255;
        memset(logging_data, 0, 255);
    memcpy(logging_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1050 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h" 1
       




typedef struct __mavlink_logging_data_acked_t { uint16_t sequence; uint8_t target_system; uint8_t target_component; uint8_t length; uint8_t first_message_offset; uint8_t data[249]; } __attribute__((packed))







   mavlink_logging_data_acked_t;
# 67 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline uint16_t mavlink_msg_logging_data_acked_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t sequence, uint8_t length, uint8_t first_message_offset, const uint8_t *data)
{
# 80 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
    mavlink_logging_data_acked_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.length = length;
    packet.first_message_offset = first_message_offset;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 267;
    return mavlink_finalize_message(msg, system_id, component_id, 255, 255, 35);
}
# 108 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline uint16_t mavlink_msg_logging_data_acked_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t sequence,uint8_t length,uint8_t first_message_offset,const uint8_t *data)
{
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
    mavlink_logging_data_acked_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.length = length;
    packet.first_message_offset = first_message_offset;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 267;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 255, 35);
}
# 144 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline uint16_t mavlink_msg_logging_data_acked_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_logging_data_acked_t* logging_data_acked)
{
    return mavlink_msg_logging_data_acked_pack(system_id, component_id, msg, logging_data_acked->target_system, logging_data_acked->target_component, logging_data_acked->sequence, logging_data_acked->length, logging_data_acked->first_message_offset, logging_data_acked->data);
}
# 158 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline uint16_t mavlink_msg_logging_data_acked_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_logging_data_acked_t* logging_data_acked)
{
    return mavlink_msg_logging_data_acked_pack_chan(system_id, component_id, chan, msg, logging_data_acked->target_system, logging_data_acked->target_component, logging_data_acked->sequence, logging_data_acked->length, logging_data_acked->first_message_offset, logging_data_acked->data);
}
# 176 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline void mavlink_msg_logging_data_acked_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t sequence, uint8_t length, uint8_t first_message_offset, const uint8_t *data)
{
# 188 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
    mavlink_logging_data_acked_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.length = length;
    packet.first_message_offset = first_message_offset;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*249);
    _mav_finalize_message_chan_send(chan, 267, (const char *)&packet, 255, 255, 35);

}






static inline void mavlink_msg_logging_data_acked_send_struct(mavlink_channel_t chan, const mavlink_logging_data_acked_t* logging_data_acked)
{



    _mav_finalize_message_chan_send(chan, 267, (const char *)logging_data_acked, 255, 255, 35);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline void mavlink_msg_logging_data_acked_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t sequence, uint8_t length, uint8_t first_message_offset, const uint8_t *data)
{
# 233 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
    mavlink_logging_data_acked_t *packet = (mavlink_logging_data_acked_t *)msgbuf;
    packet->sequence = sequence;
    packet->target_system = target_system;
    packet->target_component = target_component;
    packet->length = length;
    packet->first_message_offset = first_message_offset;
    mav_array_memcpy(packet->data, data, sizeof(uint8_t)*249);
    _mav_finalize_message_chan_send(chan, 267, (const char *)packet, 255, 255, 35);

}
# 255 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
static inline uint8_t mavlink_msg_logging_data_acked_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_logging_data_acked_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_logging_data_acked_get_sequence(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_logging_data_acked_get_length(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_logging_data_acked_get_first_message_offset(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_logging_data_acked_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 249, 6);
}







static inline void mavlink_msg_logging_data_acked_decode(const mavlink_message_t* msg, mavlink_logging_data_acked_t* logging_data_acked)
{
# 326 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_data_acked.h"
        uint8_t len = msg->len < 255? msg->len : 255;
        memset(logging_data_acked, 0, 255);
    memcpy(logging_data_acked, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1051 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h" 1
       




typedef struct __mavlink_logging_ack_t { uint16_t sequence; uint8_t target_system; uint8_t target_component; } __attribute__((packed))




   mavlink_logging_ack_t;
# 55 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline uint16_t mavlink_msg_logging_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t sequence)
{
# 66 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
    mavlink_logging_ack_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 268;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 14);
}
# 89 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline uint16_t mavlink_msg_logging_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t sequence)
{
# 101 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
    mavlink_logging_ack_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 268;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 14);
}
# 121 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline uint16_t mavlink_msg_logging_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_logging_ack_t* logging_ack)
{
    return mavlink_msg_logging_ack_pack(system_id, component_id, msg, logging_ack->target_system, logging_ack->target_component, logging_ack->sequence);
}
# 135 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline uint16_t mavlink_msg_logging_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_logging_ack_t* logging_ack)
{
    return mavlink_msg_logging_ack_pack_chan(system_id, component_id, chan, msg, logging_ack->target_system, logging_ack->target_component, logging_ack->sequence);
}
# 150 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline void mavlink_msg_logging_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t sequence)
{
# 160 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
    mavlink_logging_ack_t packet;
    packet.sequence = sequence;
    packet.target_system = target_system;
    packet.target_component = target_component;

    _mav_finalize_message_chan_send(chan, 268, (const char *)&packet, 4, 4, 14);

}






static inline void mavlink_msg_logging_ack_send_struct(mavlink_channel_t chan, const mavlink_logging_ack_t* logging_ack)
{



    _mav_finalize_message_chan_send(chan, 268, (const char *)logging_ack, 4, 4, 14);

}
# 191 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline void mavlink_msg_logging_ack_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t sequence)
{
# 201 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
    mavlink_logging_ack_t *packet = (mavlink_logging_ack_t *)msgbuf;
    packet->sequence = sequence;
    packet->target_system = target_system;
    packet->target_component = target_component;

    _mav_finalize_message_chan_send(chan, 268, (const char *)packet, 4, 4, 14);

}
# 221 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/./mavlink_msg_logging_ack.h"
static inline uint8_t mavlink_msg_logging_ack_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_logging_ack_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_logging_ack_get_sequence(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_logging_ack_decode(const mavlink_message_t* msg, mavlink_logging_ack_t* logging_ack)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(logging_ack, 0, 4);
    memcpy(logging_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1052 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h" 2
# 1068 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../common/common.h"
}
# 826 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h" 1




       
# 17 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h"
extern "C" {
# 40 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h"
typedef enum UAVIONIX_ADSB_OUT_DYNAMIC_STATE
{
   UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE=1,
   UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED=2,
   UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED=4,
   UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND=8,
   UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT=16,
   UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ENUM_END=17,
} UAVIONIX_ADSB_OUT_DYNAMIC_STATE;





typedef enum UAVIONIX_ADSB_OUT_RF_SELECT
{
   UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY=0,
   UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED=1,
   UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED=2,
   UAVIONIX_ADSB_OUT_RF_SELECT_ENUM_END=3,
} UAVIONIX_ADSB_OUT_RF_SELECT;





typedef enum UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX
{
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0=0,
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1=1,
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D=2,
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D=3,
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS=4,
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK=5,
   UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_ENUM_END=6,
} UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX;





typedef enum UAVIONIX_ADSB_RF_HEALTH
{
   UAVIONIX_ADSB_RF_HEALTH_INITIALIZING=0,
   UAVIONIX_ADSB_RF_HEALTH_OK=1,
   UAVIONIX_ADSB_RF_HEALTH_FAIL_TX=2,
   UAVIONIX_ADSB_RF_HEALTH_FAIL_RX=16,
   UAVIONIX_ADSB_RF_HEALTH_ENUM_END=17,
} UAVIONIX_ADSB_RF_HEALTH;





typedef enum UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE
{
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA=0,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M=1,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M=2,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M=3,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M=4,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M=5,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M=6,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M=7,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M=8,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M=9,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M=10,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M=11,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M=12,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M=13,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M=14,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M=15,
   UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_ENUM_END=16,
} UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE;





typedef enum UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT
{
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA=0,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M=1,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M=2,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M=3,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M=4,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M=5,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M=6,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M=7,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_ENUM_END=8,
} UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT;





typedef enum UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON
{
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA=0,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR=1,
   UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_ENUM_END=2,
} UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON;





typedef enum UAVIONIX_ADSB_EMERGENCY_STATUS
{
   UAVIONIX_ADSB_OUT_NO_EMERGENCY=0,
   UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY=1,
   UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY=2,
   UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY=3,
   UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY=4,
   UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY=5,
   UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY=6,
   UAVIONIX_ADSB_OUT_RESERVED=7,
   UAVIONIX_ADSB_EMERGENCY_STATUS_ENUM_END=8,
} UAVIONIX_ADSB_EMERGENCY_STATUS;
# 173 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h"
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h" 1
       




typedef struct __mavlink_uavionix_adsb_out_cfg_t { uint32_t ICAO; uint16_t stallSpeed; char callsign[9]; uint8_t emitterType; uint8_t aircraftSize; uint8_t gpsOffsetLat; uint8_t gpsOffsetLon; uint8_t rfSelect; } __attribute__((packed))
# 16 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
   mavlink_uavionix_adsb_out_cfg_t;
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_cfg_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t ICAO, const char *callsign, uint8_t emitterType, uint8_t aircraftSize, uint8_t gpsOffsetLat, uint8_t gpsOffsetLon, uint16_t stallSpeed, uint8_t rfSelect)
{
# 90 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
    mavlink_uavionix_adsb_out_cfg_t packet;
    packet.ICAO = ICAO;
    packet.stallSpeed = stallSpeed;
    packet.emitterType = emitterType;
    packet.aircraftSize = aircraftSize;
    packet.gpsOffsetLat = gpsOffsetLat;
    packet.gpsOffsetLon = gpsOffsetLon;
    packet.rfSelect = rfSelect;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 10001;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 209);
}
# 122 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_cfg_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t ICAO,const char *callsign,uint8_t emitterType,uint8_t aircraftSize,uint8_t gpsOffsetLat,uint8_t gpsOffsetLon,uint16_t stallSpeed,uint8_t rfSelect)
{
# 138 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
    mavlink_uavionix_adsb_out_cfg_t packet;
    packet.ICAO = ICAO;
    packet.stallSpeed = stallSpeed;
    packet.emitterType = emitterType;
    packet.aircraftSize = aircraftSize;
    packet.gpsOffsetLat = gpsOffsetLat;
    packet.gpsOffsetLon = gpsOffsetLon;
    packet.rfSelect = rfSelect;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 10001;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 209);
}
# 162 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_cfg_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_uavionix_adsb_out_cfg_t* uavionix_adsb_out_cfg)
{
    return mavlink_msg_uavionix_adsb_out_cfg_pack(system_id, component_id, msg, uavionix_adsb_out_cfg->ICAO, uavionix_adsb_out_cfg->callsign, uavionix_adsb_out_cfg->emitterType, uavionix_adsb_out_cfg->aircraftSize, uavionix_adsb_out_cfg->gpsOffsetLat, uavionix_adsb_out_cfg->gpsOffsetLon, uavionix_adsb_out_cfg->stallSpeed, uavionix_adsb_out_cfg->rfSelect);
}
# 176 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_cfg_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_uavionix_adsb_out_cfg_t* uavionix_adsb_out_cfg)
{
    return mavlink_msg_uavionix_adsb_out_cfg_pack_chan(system_id, component_id, chan, msg, uavionix_adsb_out_cfg->ICAO, uavionix_adsb_out_cfg->callsign, uavionix_adsb_out_cfg->emitterType, uavionix_adsb_out_cfg->aircraftSize, uavionix_adsb_out_cfg->gpsOffsetLat, uavionix_adsb_out_cfg->gpsOffsetLon, uavionix_adsb_out_cfg->stallSpeed, uavionix_adsb_out_cfg->rfSelect);
}
# 196 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline void mavlink_msg_uavionix_adsb_out_cfg_send(mavlink_channel_t chan, uint32_t ICAO, const char *callsign, uint8_t emitterType, uint8_t aircraftSize, uint8_t gpsOffsetLat, uint8_t gpsOffsetLon, uint16_t stallSpeed, uint8_t rfSelect)
{
# 210 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
    mavlink_uavionix_adsb_out_cfg_t packet;
    packet.ICAO = ICAO;
    packet.stallSpeed = stallSpeed;
    packet.emitterType = emitterType;
    packet.aircraftSize = aircraftSize;
    packet.gpsOffsetLat = gpsOffsetLat;
    packet.gpsOffsetLon = gpsOffsetLon;
    packet.rfSelect = rfSelect;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
    _mav_finalize_message_chan_send(chan, 10001, (const char *)&packet, 20, 20, 209);

}






static inline void mavlink_msg_uavionix_adsb_out_cfg_send_struct(mavlink_channel_t chan, const mavlink_uavionix_adsb_out_cfg_t* uavionix_adsb_out_cfg)
{



    _mav_finalize_message_chan_send(chan, 10001, (const char *)uavionix_adsb_out_cfg, 20, 20, 209);

}
# 245 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline void mavlink_msg_uavionix_adsb_out_cfg_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t ICAO, const char *callsign, uint8_t emitterType, uint8_t aircraftSize, uint8_t gpsOffsetLat, uint8_t gpsOffsetLon, uint16_t stallSpeed, uint8_t rfSelect)
{
# 259 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
    mavlink_uavionix_adsb_out_cfg_t *packet = (mavlink_uavionix_adsb_out_cfg_t *)msgbuf;
    packet->ICAO = ICAO;
    packet->stallSpeed = stallSpeed;
    packet->emitterType = emitterType;
    packet->aircraftSize = aircraftSize;
    packet->gpsOffsetLat = gpsOffsetLat;
    packet->gpsOffsetLon = gpsOffsetLon;
    packet->rfSelect = rfSelect;
    mav_array_memcpy(packet->callsign, callsign, sizeof(char)*9);
    _mav_finalize_message_chan_send(chan, 10001, (const char *)packet, 20, 20, 209);

}
# 283 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
static inline uint32_t mavlink_msg_uavionix_adsb_out_cfg_get_ICAO(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_uavionix_adsb_out_cfg_get_callsign(const mavlink_message_t* msg, char *callsign)
{
    return _MAV_RETURN_char_array(msg, callsign, 9, 6);
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_cfg_get_emitterType(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[15];
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_cfg_get_aircraftSize(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_cfg_get_gpsOffsetLat(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_cfg_get_gpsOffsetLon(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline uint16_t mavlink_msg_uavionix_adsb_out_cfg_get_stallSpeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_cfg_get_rfSelect(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[19];
}







static inline void mavlink_msg_uavionix_adsb_out_cfg_decode(const mavlink_message_t* msg, mavlink_uavionix_adsb_out_cfg_t* uavionix_adsb_out_cfg)
{
# 376 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_cfg.h"
        uint8_t len = msg->len < 20? msg->len : 20;
        memset(uavionix_adsb_out_cfg, 0, 20);
    memcpy(uavionix_adsb_out_cfg, ((const char *)(&((msg)->payload64[0]))), len);

}
# 174 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h" 1
       




typedef struct __mavlink_uavionix_adsb_out_dynamic_t { uint32_t utcTime; int32_t gpsLat; int32_t gpsLon; int32_t gpsAlt; int32_t baroAltMSL; uint32_t accuracyHor; uint16_t accuracyVert; uint16_t accuracyVel; int16_t velVert; int16_t velNS; int16_t VelEW; uint16_t state; uint16_t squawk; uint8_t gpsFix; uint8_t numSats; uint8_t emergencyStatus; } __attribute__((packed))
# 24 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
   mavlink_uavionix_adsb_out_dynamic_t;
# 107 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t utcTime, int32_t gpsLat, int32_t gpsLon, int32_t gpsAlt, uint8_t gpsFix, uint8_t numSats, int32_t baroAltMSL, uint32_t accuracyHor, uint16_t accuracyVert, uint16_t accuracyVel, int16_t velVert, int16_t velNS, int16_t VelEW, uint8_t emergencyStatus, uint16_t state, uint16_t squawk)
{
# 131 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
    mavlink_uavionix_adsb_out_dynamic_t packet;
    packet.utcTime = utcTime;
    packet.gpsLat = gpsLat;
    packet.gpsLon = gpsLon;
    packet.gpsAlt = gpsAlt;
    packet.baroAltMSL = baroAltMSL;
    packet.accuracyHor = accuracyHor;
    packet.accuracyVert = accuracyVert;
    packet.accuracyVel = accuracyVel;
    packet.velVert = velVert;
    packet.velNS = velNS;
    packet.VelEW = VelEW;
    packet.state = state;
    packet.squawk = squawk;
    packet.gpsFix = gpsFix;
    packet.numSats = numSats;
    packet.emergencyStatus = emergencyStatus;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


    msg->msgid = 10002;
    return mavlink_finalize_message(msg, system_id, component_id, 41, 41, 186);
}
# 180 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t utcTime,int32_t gpsLat,int32_t gpsLon,int32_t gpsAlt,uint8_t gpsFix,uint8_t numSats,int32_t baroAltMSL,uint32_t accuracyHor,uint16_t accuracyVert,uint16_t accuracyVel,int16_t velVert,int16_t velNS,int16_t VelEW,uint8_t emergencyStatus,uint16_t state,uint16_t squawk)
{
# 205 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
    mavlink_uavionix_adsb_out_dynamic_t packet;
    packet.utcTime = utcTime;
    packet.gpsLat = gpsLat;
    packet.gpsLon = gpsLon;
    packet.gpsAlt = gpsAlt;
    packet.baroAltMSL = baroAltMSL;
    packet.accuracyHor = accuracyHor;
    packet.accuracyVert = accuracyVert;
    packet.accuracyVel = accuracyVel;
    packet.velVert = velVert;
    packet.velNS = velNS;
    packet.VelEW = VelEW;
    packet.state = state;
    packet.squawk = squawk;
    packet.gpsFix = gpsFix;
    packet.numSats = numSats;
    packet.emergencyStatus = emergencyStatus;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


    msg->msgid = 10002;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 41, 41, 186);
}
# 238 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_uavionix_adsb_out_dynamic_t* uavionix_adsb_out_dynamic)
{
    return mavlink_msg_uavionix_adsb_out_dynamic_pack(system_id, component_id, msg, uavionix_adsb_out_dynamic->utcTime, uavionix_adsb_out_dynamic->gpsLat, uavionix_adsb_out_dynamic->gpsLon, uavionix_adsb_out_dynamic->gpsAlt, uavionix_adsb_out_dynamic->gpsFix, uavionix_adsb_out_dynamic->numSats, uavionix_adsb_out_dynamic->baroAltMSL, uavionix_adsb_out_dynamic->accuracyHor, uavionix_adsb_out_dynamic->accuracyVert, uavionix_adsb_out_dynamic->accuracyVel, uavionix_adsb_out_dynamic->velVert, uavionix_adsb_out_dynamic->velNS, uavionix_adsb_out_dynamic->VelEW, uavionix_adsb_out_dynamic->emergencyStatus, uavionix_adsb_out_dynamic->state, uavionix_adsb_out_dynamic->squawk);
}
# 252 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_uavionix_adsb_out_dynamic_t* uavionix_adsb_out_dynamic)
{
    return mavlink_msg_uavionix_adsb_out_dynamic_pack_chan(system_id, component_id, chan, msg, uavionix_adsb_out_dynamic->utcTime, uavionix_adsb_out_dynamic->gpsLat, uavionix_adsb_out_dynamic->gpsLon, uavionix_adsb_out_dynamic->gpsAlt, uavionix_adsb_out_dynamic->gpsFix, uavionix_adsb_out_dynamic->numSats, uavionix_adsb_out_dynamic->baroAltMSL, uavionix_adsb_out_dynamic->accuracyHor, uavionix_adsb_out_dynamic->accuracyVert, uavionix_adsb_out_dynamic->accuracyVel, uavionix_adsb_out_dynamic->velVert, uavionix_adsb_out_dynamic->velNS, uavionix_adsb_out_dynamic->VelEW, uavionix_adsb_out_dynamic->emergencyStatus, uavionix_adsb_out_dynamic->state, uavionix_adsb_out_dynamic->squawk);
}
# 280 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline void mavlink_msg_uavionix_adsb_out_dynamic_send(mavlink_channel_t chan, uint32_t utcTime, int32_t gpsLat, int32_t gpsLon, int32_t gpsAlt, uint8_t gpsFix, uint8_t numSats, int32_t baroAltMSL, uint32_t accuracyHor, uint16_t accuracyVert, uint16_t accuracyVel, int16_t velVert, int16_t velNS, int16_t VelEW, uint8_t emergencyStatus, uint16_t state, uint16_t squawk)
{
# 303 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
    mavlink_uavionix_adsb_out_dynamic_t packet;
    packet.utcTime = utcTime;
    packet.gpsLat = gpsLat;
    packet.gpsLon = gpsLon;
    packet.gpsAlt = gpsAlt;
    packet.baroAltMSL = baroAltMSL;
    packet.accuracyHor = accuracyHor;
    packet.accuracyVert = accuracyVert;
    packet.accuracyVel = accuracyVel;
    packet.velVert = velVert;
    packet.velNS = velNS;
    packet.VelEW = VelEW;
    packet.state = state;
    packet.squawk = squawk;
    packet.gpsFix = gpsFix;
    packet.numSats = numSats;
    packet.emergencyStatus = emergencyStatus;

    _mav_finalize_message_chan_send(chan, 10002, (const char *)&packet, 41, 41, 186);

}






static inline void mavlink_msg_uavionix_adsb_out_dynamic_send_struct(mavlink_channel_t chan, const mavlink_uavionix_adsb_out_dynamic_t* uavionix_adsb_out_dynamic)
{



    _mav_finalize_message_chan_send(chan, 10002, (const char *)uavionix_adsb_out_dynamic, 41, 41, 186);

}
# 347 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline void mavlink_msg_uavionix_adsb_out_dynamic_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint32_t utcTime, int32_t gpsLat, int32_t gpsLon, int32_t gpsAlt, uint8_t gpsFix, uint8_t numSats, int32_t baroAltMSL, uint32_t accuracyHor, uint16_t accuracyVert, uint16_t accuracyVel, int16_t velVert, int16_t velNS, int16_t VelEW, uint8_t emergencyStatus, uint16_t state, uint16_t squawk)
{
# 370 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
    mavlink_uavionix_adsb_out_dynamic_t *packet = (mavlink_uavionix_adsb_out_dynamic_t *)msgbuf;
    packet->utcTime = utcTime;
    packet->gpsLat = gpsLat;
    packet->gpsLon = gpsLon;
    packet->gpsAlt = gpsAlt;
    packet->baroAltMSL = baroAltMSL;
    packet->accuracyHor = accuracyHor;
    packet->accuracyVert = accuracyVert;
    packet->accuracyVel = accuracyVel;
    packet->velVert = velVert;
    packet->velNS = velNS;
    packet->VelEW = VelEW;
    packet->state = state;
    packet->squawk = squawk;
    packet->gpsFix = gpsFix;
    packet->numSats = numSats;
    packet->emergencyStatus = emergencyStatus;

    _mav_finalize_message_chan_send(chan, 10002, (const char *)packet, 41, 41, 186);

}
# 403 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
static inline uint32_t mavlink_msg_uavionix_adsb_out_dynamic_get_utcTime(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_uavionix_adsb_out_dynamic_get_gpsLat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_uavionix_adsb_out_dynamic_get_gpsLon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_uavionix_adsb_out_dynamic_get_gpsAlt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_dynamic_get_gpsFix(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_dynamic_get_numSats(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[39];
}






static inline int32_t mavlink_msg_uavionix_adsb_out_dynamic_get_baroAltMSL(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_uavionix_adsb_out_dynamic_get_accuracyHor(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_get_accuracyVert(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_get_accuracyVel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline int16_t mavlink_msg_uavionix_adsb_out_dynamic_get_velVert(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 28);
}






static inline int16_t mavlink_msg_uavionix_adsb_out_dynamic_get_velNS(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 30);
}






static inline int16_t mavlink_msg_uavionix_adsb_out_dynamic_get_VelEW(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 32);
}






static inline uint8_t mavlink_msg_uavionix_adsb_out_dynamic_get_emergencyStatus(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_get_state(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint16_t mavlink_msg_uavionix_adsb_out_dynamic_get_squawk(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 36);
}







static inline void mavlink_msg_uavionix_adsb_out_dynamic_decode(const mavlink_message_t* msg, mavlink_uavionix_adsb_out_dynamic_t* uavionix_adsb_out_dynamic)
{
# 584 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_out_dynamic.h"
        uint8_t len = msg->len < 41? msg->len : 41;
        memset(uavionix_adsb_out_dynamic, 0, 41);
    memcpy(uavionix_adsb_out_dynamic, ((const char *)(&((msg)->payload64[0]))), len);

}
# 175 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h" 2
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h" 1
       




typedef struct __mavlink_uavionix_adsb_transceiver_health_report_t { uint8_t rfHealth; } __attribute__((packed))


   mavlink_uavionix_adsb_transceiver_health_report_t;
# 47 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline uint16_t mavlink_msg_uavionix_adsb_transceiver_health_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t rfHealth)
{






    mavlink_uavionix_adsb_transceiver_health_report_t packet;
    packet.rfHealth = rfHealth;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 1);


    msg->msgid = 10003;
    return mavlink_finalize_message(msg, system_id, component_id, 1, 1, 4);
}
# 75 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline uint16_t mavlink_msg_uavionix_adsb_transceiver_health_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t rfHealth)
{






    mavlink_uavionix_adsb_transceiver_health_report_t packet;
    packet.rfHealth = rfHealth;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 1);


    msg->msgid = 10003;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 1, 1, 4);
}
# 103 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline uint16_t mavlink_msg_uavionix_adsb_transceiver_health_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_uavionix_adsb_transceiver_health_report_t* uavionix_adsb_transceiver_health_report)
{
    return mavlink_msg_uavionix_adsb_transceiver_health_report_pack(system_id, component_id, msg, uavionix_adsb_transceiver_health_report->rfHealth);
}
# 117 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline uint16_t mavlink_msg_uavionix_adsb_transceiver_health_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_uavionix_adsb_transceiver_health_report_t* uavionix_adsb_transceiver_health_report)
{
    return mavlink_msg_uavionix_adsb_transceiver_health_report_pack_chan(system_id, component_id, chan, msg, uavionix_adsb_transceiver_health_report->rfHealth);
}
# 130 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline void mavlink_msg_uavionix_adsb_transceiver_health_report_send(mavlink_channel_t chan, uint8_t rfHealth)
{






    mavlink_uavionix_adsb_transceiver_health_report_t packet;
    packet.rfHealth = rfHealth;

    _mav_finalize_message_chan_send(chan, 10003, (const char *)&packet, 1, 1, 4);

}






static inline void mavlink_msg_uavionix_adsb_transceiver_health_report_send_struct(mavlink_channel_t chan, const mavlink_uavionix_adsb_transceiver_health_report_t* uavionix_adsb_transceiver_health_report)
{



    _mav_finalize_message_chan_send(chan, 10003, (const char *)uavionix_adsb_transceiver_health_report, 1, 1, 4);

}
# 167 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline void mavlink_msg_uavionix_adsb_transceiver_health_report_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, uint8_t rfHealth)
{






    mavlink_uavionix_adsb_transceiver_health_report_t *packet = (mavlink_uavionix_adsb_transceiver_health_report_t *)msgbuf;
    packet->rfHealth = rfHealth;

    _mav_finalize_message_chan_send(chan, 10003, (const char *)packet, 1, 1, 4);

}
# 193 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/./mavlink_msg_uavionix_adsb_transceiver_health_report.h"
static inline uint8_t mavlink_msg_uavionix_adsb_transceiver_health_report_get_rfHealth(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}







static inline void mavlink_msg_uavionix_adsb_transceiver_health_report_decode(const mavlink_message_t* msg, mavlink_uavionix_adsb_transceiver_health_report_t* uavionix_adsb_transceiver_health_report)
{



        uint8_t len = msg->len < 1? msg->len : 1;
        memset(uavionix_adsb_transceiver_health_report, 0, 1);
    memcpy(uavionix_adsb_transceiver_health_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 176 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h" 2
# 192 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../uAvionix/uAvionix.h"
}
# 827 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2
# 864 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h"
# 1 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/../mavlink_get_info.h" 1
       
# 864 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/ardupilotmega.h" 2




}
# 33 "/Users/yu/repos/ardupilot/build/sitl/libraries/GCS_MAVLink/include/mavlink/v2.0/ardupilotmega/mavlink.h" 2
# 91 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS_MAVLink.h" 2


uint8_t mav_var_type(enum ap_var_type t);

#pragma GCC diagnostic pop
# 9 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 1



       




# 1 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h"
       






# 1 "/Users/yu/repos/ardupilot/libraries/AP_Vehicle/AP_Vehicle.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Vehicle/AP_Vehicle.h"
       
# 24 "/Users/yu/repos/ardupilot/libraries/AP_Vehicle/AP_Vehicle.h"
class AP_Vehicle {

public:



    struct FixedWing {
        AP_Int8 throttle_min;
        AP_Int8 throttle_max;
        AP_Int8 throttle_slewrate;
        AP_Int8 throttle_cruise;
        AP_Int8 takeoff_throttle_max;
        AP_Int16 airspeed_min;
        AP_Int16 airspeed_max;
        AP_Int32 airspeed_cruise_cm;
        AP_Int32 min_gndspeed_cm;
        AP_Int8 crash_detection_enable;
        AP_Int16 roll_limit_cd;
        AP_Int16 pitch_limit_max_cd;
        AP_Int16 pitch_limit_min_cd;
        AP_Int8 autotune_level;
        AP_Int8 stall_prevention;
        AP_Int16 loiter_radius;

        struct Rangefinder_State {
            bool in_range:1;
            bool have_initial_reading:1;
            bool in_use:1;
            float initial_range;
            float correction;
            float initial_correction;
            float last_stable_correction;
            uint32_t last_correction_time_ms;
            uint8_t in_range_count;
            float height_estimate;
            float last_distance;
        };



        enum FlightStage {
            FLIGHT_TAKEOFF = 1,
            FLIGHT_VTOL = 2,
            FLIGHT_NORMAL = 3,
            FLIGHT_LAND = 4,
            FLIGHT_ABORT_LAND = 7
        };
    };




    struct MultiCopter {
        AP_Int16 angle_max;
    };
};


# 1 "/Users/yu/repos/ardupilot/libraries/AP_Vehicle/AP_Vehicle_Type.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Vehicle/AP_Vehicle_Type.h"
       
# 82 "/Users/yu/repos/ardupilot/libraries/AP_Vehicle/AP_Vehicle.h" 2
# 23 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_GPS/GPS_detect_state.h" 1
# 28 "/Users/yu/repos/ardupilot/libraries/AP_GPS/GPS_detect_state.h"
struct MTK19_detect_state {
    uint8_t payload_counter;
    uint8_t step;
    uint8_t ck_a, ck_b;
};

struct MTK_detect_state {
    uint8_t payload_counter;
    uint8_t step;
    uint8_t ck_a, ck_b;
};

struct NMEA_detect_state {
    uint8_t step;
    uint8_t ck;
};

struct SIRF_detect_state {
    uint16_t checksum;
    uint8_t step, payload_length, payload_counter;
};

struct UBLOX_detect_state {
    uint8_t payload_length, payload_counter;
    uint8_t step;
    uint8_t ck_a, ck_b;
};

struct ERB_detect_state {
    uint8_t payload_length, payload_counter;
    uint8_t step;
    uint8_t ck_a, ck_b;
};

struct SBP_detect_state {
    enum {
        WAITING = 0,
        GET_TYPE = 1,
        GET_SENDER = 2,
        GET_LEN = 3,
        GET_MSG = 4,
        GET_CRC = 5
    } state:8;
    uint16_t msg_type;
    uint8_t n_read;
    uint8_t msg_len;
    uint16_t crc_so_far;
    uint16_t crc;
    uint8_t heartbeat_buff[4];
};


struct SBP2_detect_state {
    enum {
        WAITING = 0,
        GET_TYPE = 1,
        GET_SENDER = 2,
        GET_LEN = 3,
        GET_MSG = 4,
        GET_CRC = 5
    } state:8;
    uint16_t msg_type;
    uint8_t n_read;
    uint8_t msg_len;
    uint16_t crc_so_far;
    uint16_t crc;
    uint8_t heartbeat_buff[4];
};
# 24 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_SerialManager/AP_SerialManager.h" 1
# 22 "/Users/yu/repos/ardupilot/libraries/AP_SerialManager/AP_SerialManager.h"
       
# 82 "/Users/yu/repos/ardupilot/libraries/AP_SerialManager/AP_SerialManager.h"
class AP_SerialManager {
public:
    enum SerialProtocol {
        SerialProtocol_None = -1,
        SerialProtocol_Console = 0,
        SerialProtocol_MAVLink = 1,
        SerialProtocol_MAVLink2 = 2,
        SerialProtocol_FrSky_D = 3,
        SerialProtocol_FrSky_SPort = 4,
        SerialProtocol_GPS = 5,
        SerialProtocol_GPS2 = 6,
        SerialProtocol_AlexMos = 7,
        SerialProtocol_SToRM32 = 8,
        SerialProtocol_Lidar = 9,
        SerialProtocol_FrSky_SPort_Passthrough = 10,
        SerialProtocol_Lidar360 = 11,
        SerialProtocol_Aerotenna_uLanding = 12,
        SerialProtocol_Beacon = 13,
        SerialProtocol_Volz = 14,
        SerialProtocol_Sbus1 = 15
    };


    static AP_SerialManager *get_instance(void) {
        return _instance;
    }

    static AP_SerialManager create() { return AP_SerialManager{}; }

    constexpr AP_SerialManager(AP_SerialManager &&other) = default;


    AP_SerialManager(const AP_SerialManager &other) = delete;
    AP_SerialManager &operator=(const AP_SerialManager&) = delete;


    void init_console();


    void init();




    AP_HAL::UARTDriver *find_serial(enum SerialProtocol protocol, uint8_t instance) const;




    uint32_t find_baudrate(enum SerialProtocol protocol, uint8_t instance) const;




    bool get_mavlink_channel(enum SerialProtocol protocol, uint8_t instance, mavlink_channel_t &mav_chan) const;



    SerialProtocol get_mavlink_protocol(mavlink_channel_t mav_chan) const;


    void set_blocking_writes_all(bool blocking);


    void set_console_baud(enum SerialProtocol protocol, uint8_t instance) const;


    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_SerialManager();

    static AP_SerialManager *_instance;


    struct {
        AP_Int8 protocol;
        AP_Int32 baud;
        AP_HAL::UARTDriver* uart;
    } state[6];

    uint32_t map_baudrate(int32_t rate) const;


    bool protocol_match(enum SerialProtocol protocol1, enum SerialProtocol protocol2) const;
};
# 25 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h" 2
# 44 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h"
class AP_GPS_Backend;



class AP_GPS
{
    friend class AP_GPS_ERB;
    friend class AP_GPS_GSOF;
    friend class AP_GPS_MAV;
    friend class AP_GPS_MTK;
    friend class AP_GPS_MTK19;
    friend class AP_GPS_NMEA;
    friend class AP_GPS_NOVA;
    friend class AP_GPS_PX4;
    friend class AP_GPS_QURT;
    friend class AP_GPS_SBF;
    friend class AP_GPS_SBP;
    friend class AP_GPS_SBP2;
    friend class AP_GPS_SIRF;
    friend class AP_GPS_UBLOX;
    friend class AP_GPS_Backend;

public:
    static AP_GPS create() { return AP_GPS{}; }

    constexpr AP_GPS(AP_GPS &&other) = default;


    AP_GPS(const AP_GPS &other) = delete;
    AP_GPS &operator=(const AP_GPS&) = delete;

    static AP_GPS &gps() {
        return *_singleton;
    }


    enum GPS_Type {
        GPS_TYPE_NONE = 0,
        GPS_TYPE_AUTO = 1,
        GPS_TYPE_UBLOX = 2,
        GPS_TYPE_MTK = 3,
        GPS_TYPE_MTK19 = 4,
        GPS_TYPE_NMEA = 5,
        GPS_TYPE_SIRF = 6,
        GPS_TYPE_HIL = 7,
        GPS_TYPE_SBP = 8,
        GPS_TYPE_UAVCAN = 9,
        GPS_TYPE_SBF = 10,
        GPS_TYPE_GSOF = 11,
        GPS_TYPE_QURT = 12,
        GPS_TYPE_ERB = 13,
        GPS_TYPE_MAV = 14,
        GPS_TYPE_NOVA = 15
    };


    enum GPS_Status {
        NO_GPS = GPS_FIX_TYPE_NO_GPS,
        NO_FIX = GPS_FIX_TYPE_NO_FIX,
        GPS_OK_FIX_2D = GPS_FIX_TYPE_2D_FIX,
        GPS_OK_FIX_3D = GPS_FIX_TYPE_3D_FIX,
        GPS_OK_FIX_3D_DGPS = GPS_FIX_TYPE_DGPS,
        GPS_OK_FIX_3D_RTK_FLOAT = GPS_FIX_TYPE_RTK_FLOAT,
        GPS_OK_FIX_3D_RTK_FIXED = GPS_FIX_TYPE_RTK_FIXED,
    };



    enum GPS_Engine_Setting {
        GPS_ENGINE_NONE = -1,
        GPS_ENGINE_PORTABLE = 0,
        GPS_ENGINE_STATIONARY = 2,
        GPS_ENGINE_PEDESTRIAN = 3,
        GPS_ENGINE_AUTOMOTIVE = 4,
        GPS_ENGINE_SEA = 5,
        GPS_ENGINE_AIRBORNE_1G = 6,
        GPS_ENGINE_AIRBORNE_2G = 7,
        GPS_ENGINE_AIRBORNE_4G = 8
    };

   enum GPS_Config {
       GPS_ALL_CONFIGURED = 255
   };





    struct GPS_State {
        uint8_t instance;


        GPS_Status status;
        uint32_t time_week_ms;
        uint16_t time_week;
        Location location;
        float ground_speed;
        float ground_course;
        uint16_t hdop;
        uint16_t vdop;
        uint8_t num_sats;
        Vector3f velocity;
        float speed_accuracy;
        float horizontal_accuracy;
        float vertical_accuracy;
        bool have_vertical_velocity:1;
        bool have_speed_accuracy:1;
        bool have_horizontal_accuracy:1;
        bool have_vertical_accuracy:1;
        uint32_t last_gps_time_ms;


        uint32_t rtk_time_week_ms;
        uint16_t rtk_week_number;
        uint32_t rtk_age_ms;
        uint8_t rtk_num_sats;
        uint8_t rtk_baseline_coords_type;
        int32_t rtk_baseline_x_mm;
        int32_t rtk_baseline_y_mm;
        int32_t rtk_baseline_z_mm;
        uint32_t rtk_accuracy;
        int32_t rtk_iar_num_hypotheses;
    };


    void init(const AP_SerialManager& serial_manager);




    void update(void);


    void handle_msg(const mavlink_message_t *msg);






    uint8_t num_sensors(void) const;



    uint8_t primary_sensor(void) const {
        return primary_instance;
    }


    GPS_Status status(uint8_t instance) const {
        return state[instance].status;
    }
    GPS_Status status(void) const {
        return status(primary_instance);
    }


    GPS_Status highest_supported_status(uint8_t instance) const;


    const Location &location(uint8_t instance) const {
        return state[instance].location;
    }
    const Location &location() const {
        return location(primary_instance);
    }


    bool speed_accuracy(uint8_t instance, float &sacc) const;
    bool speed_accuracy(float &sacc) const {
        return speed_accuracy(primary_instance, sacc);
    }

    bool horizontal_accuracy(uint8_t instance, float &hacc) const;
    bool horizontal_accuracy(float &hacc) const {
        return horizontal_accuracy(primary_instance, hacc);
    }

    bool vertical_accuracy(uint8_t instance, float &vacc) const;
    bool vertical_accuracy(float &vacc) const {
        return vertical_accuracy(primary_instance, vacc);
    }


    const Vector3f &velocity(uint8_t instance) const {
        return state[instance].velocity;
    }
    const Vector3f &velocity() const {
        return velocity(primary_instance);
    }


    float ground_speed(uint8_t instance) const {
        return state[instance].ground_speed;
    }
    float ground_speed() const {
        return ground_speed(primary_instance);
    }


    uint32_t ground_speed_cm(void) {
        return ground_speed() * 100;
    }


    float ground_course(uint8_t instance) const {
        return state[instance].ground_course;
    }
    float ground_course() const {
        return ground_course(primary_instance);
    }

    int32_t ground_course_cd(uint8_t instance) const {
        return ground_course(instance) * 100;
    }
    int32_t ground_course_cd() const {
        return ground_course_cd(primary_instance);
    }


    uint8_t num_sats(uint8_t instance) const {
        return state[instance].num_sats;
    }
    uint8_t num_sats() const {
        return num_sats(primary_instance);
    }


    uint32_t time_week_ms(uint8_t instance) const {
        return state[instance].time_week_ms;
    }
    uint32_t time_week_ms() const {
        return time_week_ms(primary_instance);
    }


    uint16_t time_week(uint8_t instance) const {
        return state[instance].time_week;
    }
    uint16_t time_week() const {
        return time_week(primary_instance);
    }


    uint16_t get_hdop(uint8_t instance) const {
        return state[instance].hdop;
    }
    uint16_t get_hdop() const {
        return get_hdop(primary_instance);
    }


    uint16_t get_vdop(uint8_t instance) const {
        return state[instance].vdop;
    }
    uint16_t get_vdop() const {
        return get_vdop(primary_instance);
    }



    uint32_t last_fix_time_ms(uint8_t instance) const {
        return timing[instance].last_fix_time_ms;
    }
    uint32_t last_fix_time_ms(void) const {
        return last_fix_time_ms(primary_instance);
    }



    uint32_t last_message_time_ms(uint8_t instance) const {
        return timing[instance].last_message_time_ms;
    }
    uint32_t last_message_time_ms(void) const {
        return last_message_time_ms(primary_instance);
    }


    uint16_t last_message_delta_time_ms(uint8_t instance) const {
        return timing[instance].delta_time_ms;
    }
    uint16_t last_message_delta_time_ms(void) const {
        return last_message_delta_time_ms(primary_instance);
    }


    bool have_vertical_velocity(uint8_t instance) const {
        return state[instance].have_vertical_velocity;
    }
    bool have_vertical_velocity(void) const {
        return have_vertical_velocity(primary_instance);
    }


    uint8_t rtk_num_sats(uint8_t instance) const {
        return state[instance].rtk_num_sats;
    }
    uint8_t rtk_num_sats(void) const {
        return rtk_num_sats(primary_instance);
    }


    uint32_t rtk_age_ms(uint8_t instance) const {
        return state[instance].rtk_age_ms;
    }
    uint32_t rtk_age_ms(void) const {
        return rtk_age_ms(primary_instance);
    }



    bool get_lag(uint8_t instance, float &lag_sec) const;
    bool get_lag(float &lag_sec) const {
        return get_lag(primary_instance, lag_sec);
    }


    const Vector3f &get_antenna_offset(uint8_t instance) const;


    void setHIL(uint8_t instance, GPS_Status status, uint64_t time_epoch_ms,
                const Location &location, const Vector3f &velocity, uint8_t num_sats,
                uint16_t hdop);


    void setHIL_Accuracy(uint8_t instance, float vdop, float hacc, float vacc, float sacc, bool _have_vertical_velocity, uint32_t sample_ms);


    void lock_port(uint8_t instance, bool locked);


    void send_mavlink_gps_raw(mavlink_channel_t chan);
    void send_mavlink_gps2_raw(mavlink_channel_t chan);

    void send_mavlink_gps_rtk(mavlink_channel_t chan, uint8_t inst);


    uint8_t first_unconfigured_gps(void) const;
    void broadcast_first_configuration_failure_reason(void) const;


    bool all_configured(void) const {
        return first_unconfigured_gps() == GPS_ALL_CONFIGURED;
    }


    bool all_consistent(float &distance) const;


    bool blend_health_check() const;


    void send_blob_start(uint8_t instance, const char *_blob, uint16_t size);
    void send_blob_update(uint8_t instance);


    uint64_t time_epoch_usec(uint8_t instance) const;
    uint64_t time_epoch_usec(void) const {
        return time_epoch_usec(primary_instance);
    }


    static uint64_t time_epoch_convert(uint16_t gps_week, uint32_t gps_ms);

    static const struct AP_Param::GroupInfo var_info[];

    void Write_DataFlash_Log_Startup_messages();


    void set_log_gps_bit(uint32_t bit) { _log_gps_bit = bit; }



    bool is_healthy(uint8_t instance) const;
    bool is_healthy(void) const { return is_healthy(primary_instance); }


    bool prepare_for_arming(void);

protected:


    AP_Int8 _type[2];
    AP_Int8 _navfilter;
    AP_Int8 _auto_switch;
    AP_Int8 _min_dgps;
    AP_Int16 _sbp_logmask;
    AP_Int8 _inject_to;
    uint32_t _last_instance_swap_ms;
    AP_Int8 _sbas_mode;
    AP_Int8 _min_elevation;
    AP_Int8 _raw_data;
    AP_Int8 _gnss_mode[2];
    AP_Int16 _rate_ms[2];
    AP_Int8 _save_config;
    AP_Int8 _auto_config;
    AP_Vector3f _antenna_offset[2];
    AP_Int16 _delay_ms[2];
    AP_Int8 _blend_mask;
    AP_Float _blend_tc;

    uint32_t _log_gps_bit = -1;

private:
    AP_GPS();

    static AP_GPS *_singleton;





    uint16_t get_rate_ms(uint8_t instance) const;

    struct GPS_timing {

        uint32_t last_fix_time_ms;


        uint32_t last_message_time_ms;


        uint16_t delta_time_ms;
    };

    GPS_timing timing[2 +1];
    GPS_State state[2 +1];
    AP_GPS_Backend *drivers[2];
    AP_HAL::UARTDriver *_port[2];


    uint8_t primary_instance:2;


    uint8_t num_instances:2;


    uint8_t locked_ports:2;


    struct detect_state {
        uint32_t last_baud_change_ms;
        uint8_t current_baud;
        bool auto_detected_baud;
        struct UBLOX_detect_state ublox_detect_state;

        struct MTK_detect_state mtk_detect_state;
        struct MTK19_detect_state mtk19_detect_state;
        struct SIRF_detect_state sirf_detect_state;

        struct NMEA_detect_state nmea_detect_state;
        struct SBP_detect_state sbp_detect_state;
        struct SBP2_detect_state sbp2_detect_state;
        struct ERB_detect_state erb_detect_state;
    } detect_state[2];

    struct {
        const char *blob;
        uint16_t remaining;
    } initblob_state[2];

    static const uint32_t _baudrates[];
    static const char _initialisation_blob[];
    static const char _initialisation_raw_blob[];

    void detect_instance(uint8_t instance);
    void update_instance(uint8_t instance);
# 524 "/Users/yu/repos/ardupilot/libraries/AP_GPS/AP_GPS.h"
    struct rtcm_buffer {
        uint8_t fragments_received:4;
        uint8_t sequence:5;
        uint8_t fragment_count;
        uint16_t total_length;
        uint8_t buffer[180*4];
    } *rtcm_buffer;


    void handle_gps_rtcm_data(const mavlink_message_t *msg);
    void handle_gps_inject(const mavlink_message_t *msg);


    void inject_data(uint8_t *data, uint16_t len);
    void inject_data(uint8_t instance, uint8_t *data, uint16_t len);



    Vector2f _NE_pos_offset_m[2];
    float _hgt_offset_cm[2];
    Vector3f _blended_antenna_offset;
    float _blended_lag_sec = 0.001f * 200;
    float _blend_weights[2];
    uint32_t _last_time_updated[2];
    float _omega_lpf;
    bool _output_is_blended;
    uint8_t _blend_health_counter;


    bool calc_blend_weights(void);


    void calc_blended_state(void);


    enum GPS_AUTO_CONFIG {
        GPS_AUTO_CONFIG_DISABLE = 0,
        GPS_AUTO_CONFIG_ENABLE = 1
    };

};

namespace AP {
    AP_GPS &gps();
};
# 10 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 1
       
# 23 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_AccelCal/AP_AccelCal.h" 1
       


# 1 "/Users/yu/repos/ardupilot/libraries/AP_AccelCal/AccelCalibrator.h" 1
# 13 "/Users/yu/repos/ardupilot/libraries/AP_AccelCal/AccelCalibrator.h"
       


# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/vectorN.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Math/vectorN.h"
       

# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 18 "/Users/yu/repos/ardupilot/libraries/AP_Math/vectorN.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Math/matrixN.h" 1




       

# 1 "/usr/local/include/c++/6.3.0/math.h" 1 3
# 36 "/usr/local/include/c++/6.3.0/math.h" 3
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 37 "/usr/local/include/c++/6.3.0/math.h" 2 3


# 38 "/usr/local/include/c++/6.3.0/math.h" 3
using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 8 "/Users/yu/repos/ardupilot/libraries/AP_Math/matrixN.h" 2




# 11 "/Users/yu/repos/ardupilot/libraries/AP_Math/matrixN.h"
template <typename T, uint8_t N>
class VectorN;


template <typename T, uint8_t N>
class MatrixN {

    friend class VectorN<T,N>;

public:

    MatrixN<T,N>(void) {
        memset(v, 0, sizeof(v));
    }


    MatrixN<T,N>(const float d[N]) {
        memset(v, 0, sizeof(v));
        for (uint8_t i = 0; i < N; i++) {
            v[i][i] = d[i];
        }
    }


    void mult(const VectorN<T,N> &A, const VectorN<T,N> &B);


    MatrixN<T,N> &operator -=(const MatrixN<T,N> &B);


    MatrixN<T,N> &operator +=(const MatrixN<T,N> &B);


    void force_symmetry(void);

private:
    T v[N][N];
};
# 20 "/Users/yu/repos/ardupilot/libraries/AP_Math/vectorN.h" 2
# 29 "/Users/yu/repos/ardupilot/libraries/AP_Math/vectorN.h"
template <typename T, uint8_t N>
class MatrixN;


template <typename T, uint8_t N>
class VectorN
{
public:

    inline VectorN<T,N>() {
        memset(_v, 0, sizeof(T)*N);
    }


    inline VectorN<T,N>(const T *v) {
        memcpy(_v, v, sizeof(T)*N);
    }

    inline T & operator[](uint8_t i) {



        return _v[i];
    }

    inline const T & operator[](uint8_t i) const {



        return _v[i];
    }


    bool operator ==(const VectorN<T,N> &v) const {
        for (uint8_t i=0; i<N; i++) {
            if (_v[i] != v[i]) return false;
        }
        return true;
    }


    inline void zero()
    {
        memset(_v, 0, sizeof(T)*N);
    }


    VectorN<T,N> operator -(void) const {
        VectorN<T,N> v2;
        for (uint8_t i=0; i<N; i++) {
            v2[i] = - _v[i];
        }
        return v2;
    }


    VectorN<T,N> operator +(const VectorN<T,N> &v) const {
        VectorN<T,N> v2;
        for (uint8_t i=0; i<N; i++) {
            v2[i] = _v[i] + v[i];
        }
        return v2;
    }


    VectorN<T,N> operator -(const VectorN<T,N> &v) const {
        VectorN<T,N> v2;
        for (uint8_t i=0; i<N; i++) {
            v2[i] = _v[i] - v[i];
        }
        return v2;
    }


    VectorN<T,N> operator *(const T num) const {
        VectorN<T,N> v2;
        for (uint8_t i=0; i<N; i++) {
            v2[i] = _v[i] * num;
        }
        return v2;
    }


    VectorN<T,N> operator /(const T num) const {
        VectorN<T,N> v2;
        for (uint8_t i=0; i<N; i++) {
            v2[i] = _v[i] / num;
        }
        return v2;
    }


    VectorN<T,N> &operator +=(const VectorN<T,N> &v) {
        for (uint8_t i=0; i<N; i++) {
            _v[i] += v[i];
        }
        return *this;
    }


    VectorN<T,N> &operator -=(const VectorN<T,N> &v) {
        for (uint8_t i=0; i<N; i++) {
            _v[i] -= v[i];
        }
        return *this;
    }


    VectorN<T,N> &operator *=(const T num) {
        for (uint8_t i=0; i<N; i++) {
            _v[i] *= num;
        }
        return *this;
    }


    VectorN<T,N> &operator /=(const T num) {
        for (uint8_t i=0; i<N; i++) {
            _v[i] /= num;
        }
        return *this;
    }


    T operator *(const VectorN<T,N> &v) const {
        float ret = 0;
        for (uint8_t i=0; i<N; i++) {
            ret += _v[i] * v._v[i];
        }
        return ret;
    }



    void mult(const MatrixN<T,N> &A, const VectorN<T,N> &B) {
        for (uint8_t i = 0; i < N; i++) {
            _v[i] = 0;
            for (uint8_t k = 0; k < N; k++) {
                _v[i] += A.v[i][k] * B[k];
            }
        }
    }

private:
    T _v[N];
};
# 17 "/Users/yu/repos/ardupilot/libraries/AP_AccelCal/AccelCalibrator.h" 2




enum accel_cal_status_t {
    ACCEL_CAL_NOT_STARTED=0,
    ACCEL_CAL_WAITING_FOR_ORIENTATION=1,
    ACCEL_CAL_COLLECTING_SAMPLE=2,
    ACCEL_CAL_SUCCESS=3,
    ACCEL_CAL_FAILED=4
};

enum accel_cal_fit_type_t {
    ACCEL_CAL_AXIS_ALIGNED_ELLIPSOID=0,
    ACCEL_CAL_ELLIPSOID=1
};

class AccelCalibrator {
public:
    AccelCalibrator();


    void start(enum accel_cal_fit_type_t fit_type = ACCEL_CAL_AXIS_ALIGNED_ELLIPSOID, uint8_t num_samples = 6, float sample_time = 0.5f);
    void start(enum accel_cal_fit_type_t fit_type, uint8_t num_samples, float sample_time, Vector3f offset, Vector3f diag, Vector3f offdiag);


    void clear();


    bool running();


    void collect_sample();


    void check_for_timeout();


    void get_calibration(Vector3f& offset) const;
    void get_calibration(Vector3f& offset, Vector3f& diag) const;
    void get_calibration(Vector3f& offset, Vector3f& diag, Vector3f& offdiag) const;



    void new_sample(const Vector3f& delta_velocity, float dt);



    bool get_sample(uint8_t i, Vector3f& s) const;



    bool get_sample_corrected(uint8_t i, Vector3f& s) const;


    void set_tolerance(float tolerance) { _conf_tolerance = tolerance; }


    enum accel_cal_status_t get_status() const { return _status; }


    uint8_t get_num_samples_collected() const { return _samples_collected; }


    float get_fitness() const { return _fitness; }

    struct param_t {
        Vector3f offset;
        Vector3f diag;
        Vector3f offdiag;
    };

private:
    struct AccelSample {
        Vector3f delta_velocity;
        float delta_time;
    };
    typedef VectorN<float, 9> VectorP;

    union param_u {
        struct param_t s;
        VectorN<float, 9> a;

        param_u() : a{}
        {
            static_assert(sizeof(*this) == sizeof(struct param_t),
                          "Invalid union members: sizes do not match");
        }
    };


    uint8_t _conf_num_samples;
    float _conf_sample_time;
    enum accel_cal_fit_type_t _conf_fit_type;
    float _conf_tolerance;


    accel_cal_status_t _status;
    struct AccelSample* _sample_buffer;
    uint8_t _samples_collected;
    union param_u _param;
    float _fitness;
    uint32_t _last_samp_frag_collected_ms;
    float _min_sample_dist;



    bool accept_sample(const Vector3f& sample);


    void reset_state();


    void set_status(enum accel_cal_status_t);


    bool accept_result() const;


    uint8_t get_num_params() const;


    float calc_residual(const Vector3f& sample, const struct param_t& params) const;
    float calc_mean_squared_residuals() const;
    float calc_mean_squared_residuals(const struct param_t& params) const;
    void calc_jacob(const Vector3f& sample, const struct param_t& params, VectorP& ret) const;
    void run_fit(uint8_t max_iterations, float& fitness);
};
# 5 "/Users/yu/repos/ardupilot/libraries/AP_AccelCal/AP_AccelCal.h" 2


class GCS_MAVLINK;
class AP_AccelCal_Client;

class AP_AccelCal {
public:
    AP_AccelCal():
    _use_gcs_snoop(true),
    _started(false),
    _saving(false)
    { update_status(); }


    void start(GCS_MAVLINK *gcs);


    void cancel();


    void update();


    accel_cal_status_t get_status() { return _status; }


    bool gcs_vehicle_position(float position);


    static void register_client(AP_AccelCal_Client* client);

private:
    GCS_MAVLINK *_gcs;
    bool _use_gcs_snoop;
    uint32_t _last_position_request_ms;
    uint8_t _step;
    accel_cal_status_t _status;
    accel_cal_status_t _last_result;

    static uint8_t _num_clients;
    static AP_AccelCal_Client* _clients[4];


    void success();


    void fail();


    void clear();


    void collect_sample();


    void update_status();


    bool check_for_timeout();


    bool client_active(uint8_t client_num);

    bool _started;
    bool _saving;

    uint8_t _num_active_calibrators;

    AccelCalibrator* get_calibrator(uint8_t i);
    void _printf(const char*, ...);
};

class AP_AccelCal_Client {
friend class AP_AccelCal;
private:

    virtual bool _acal_get_saving() { return false; }
    virtual bool _acal_get_ready_to_sample() { return true; }
    virtual bool _acal_get_fail() { return false; }
    virtual AccelCalibrator* _acal_get_calibrator(uint8_t instance) = 0;


    virtual void _acal_save_calibrations() = 0;
    virtual void _acal_event_success() {};
    virtual void _acal_event_cancellation() {};
    virtual void _acal_event_failure() {};
};
# 24 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 2


# 1 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter2p.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter2p.h"
       


# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 19 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter2p.h" 2






template <class T>
class DigitalBiquadFilter {
public:
    struct biquad_params {
        float cutoff_freq;
        float sample_freq;
        float a1;
        float a2;
        float b0;
        float b1;
        float b2;
    };

    DigitalBiquadFilter();

    T apply(const T &sample, const struct biquad_params &params);
    void reset();
    static void compute_params(float sample_freq, float cutoff_freq, biquad_params &ret);

private:
    T _delay_element_1;
    T _delay_element_2;
};

template <class T>
class LowPassFilter2p {
public:
    LowPassFilter2p();

    LowPassFilter2p(float sample_freq, float cutoff_freq);

    void set_cutoff_frequency(float sample_freq, float cutoff_freq);

    float get_cutoff_freq(void) const;
    float get_sample_freq(void) const;
    T apply(const T &sample);
    void reset(void);

protected:
    struct DigitalBiquadFilter<T>::biquad_params _params;

private:
    DigitalBiquadFilter<T> _filter;
};
# 85 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter2p.h"
typedef LowPassFilter2p<int> LowPassFilter2pInt;
typedef LowPassFilter2p<long> LowPassFilter2pLong;
typedef LowPassFilter2p<float> LowPassFilter2pFloat;
typedef LowPassFilter2p<Vector2f> LowPassFilter2pVector2f;
typedef LowPassFilter2p<Vector3f> LowPassFilter2pVector3f;
# 27 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter.h" 1
# 45 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter.h"
       


# 1 "/Users/yu/repos/ardupilot/libraries/Filter/FilterClass.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/Filter/FilterClass.h"
       



template <class T>
class Filter
{
public:

    virtual T apply(T sample) = 0;


    virtual void reset() = 0;

};


typedef Filter<int8_t> FilterInt8;
typedef Filter<uint8_t> FilterUInt8;
typedef Filter<int16_t> FilterInt16;
typedef Filter<uint16_t> FilterUInt16;
typedef Filter<int32_t> FilterInt32;
typedef Filter<uint32_t> FilterUInt32;
# 49 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter.h" 2


template <class T>
class DigitalLPF {
public:
    DigitalLPF();

    T apply(const T &sample, float cutoff_freq, float dt);
    T apply(const T &sample);

    void compute_alpha(float sample_freq, float cutoff_freq);


    const T &get() const;
    void reset(T value);

private:
    T _output;
    float alpha = 1.0f;
};


template <class T>
class LowPassFilter {
public:
    LowPassFilter();
    LowPassFilter(float cutoff_freq);
    LowPassFilter(float sample_freq, float cutoff_freq);


    void set_cutoff_frequency(float cutoff_freq);
    void set_cutoff_frequency(float sample_freq, float cutoff_freq);


    float get_cutoff_freq(void) const;
    T apply(T sample, float dt);
    T apply(T sample);
    const T &get() const;
    void reset(T value);
    void reset(void) { reset(T()); }

protected:
    float _cutoff_freq;

private:
    DigitalLPF<T> _filter;
};
# 111 "/Users/yu/repos/ardupilot/libraries/Filter/LowPassFilter.h"
typedef LowPassFilter<int> LowPassFilterInt;
typedef LowPassFilter<long> LowPassFilterLong;
typedef LowPassFilter<float> LowPassFilterFloat;
typedef LowPassFilter<Vector2f> LowPassFilterVector2f;
typedef LowPassFilter<Vector3f> LowPassFilterVector3f;
# 28 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/Filter/NotchFilter.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/Filter/NotchFilter.h"
       
# 24 "/Users/yu/repos/ardupilot/libraries/Filter/NotchFilter.h"
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 25 "/Users/yu/repos/ardupilot/libraries/Filter/NotchFilter.h" 2




template <class T>
class NotchFilter {
public:

    void init(float sample_freq_hz, float center_freq_hz, float bandwidth_hz, float attenuation_dB);
    T apply(const T &sample);

private:
    bool initialised;
    float b0, b1, b2, a1, a2, a0_inv;
    T ntchsig, ntchsig1, ntchsig2, signal2, signal1;
};




class NotchFilterVector3fParam {
public:
    NotchFilterVector3fParam(void);
    void init(float sample_freq_hz);
    Vector3f apply(const Vector3f &sample);

    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_Int8 enable;
    AP_Float center_freq_hz;
    AP_Float bandwidth_hz;
    AP_Float attenuation_dB;

    float sample_freq_hz;

    float last_center_freq;
    float last_bandwidth;
    float last_attenuation;

    NotchFilter<Vector3f> filter;
};

typedef NotchFilter<float> NotchFilterFloat;
typedef NotchFilter<Vector3f> NotchFilterVector3f;
# 29 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 2

class AP_InertialSensor_Backend;
class AuxiliaryBus;
class AP_AHRS;





class DataFlash_Class;
# 47 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h"
class AP_InertialSensor : AP_AccelCal_Client
{
    friend class AP_InertialSensor_Backend;

public:
    static AP_InertialSensor create() { return AP_InertialSensor{}; }

    constexpr AP_InertialSensor(AP_InertialSensor &&other) = default;


    AP_InertialSensor(const AP_InertialSensor &other) = delete;
    AP_InertialSensor &operator=(const AP_InertialSensor&) = delete;

    static AP_InertialSensor *get_instance();

    enum Gyro_Calibration_Timing {
        GYRO_CAL_NEVER = 0,
        GYRO_CAL_STARTUP_ONLY = 1
    };
# 75 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h"
    void init(uint16_t sample_rate_hz);



    uint8_t register_gyro(uint16_t raw_sample_rate_hz, uint32_t id);
    uint8_t register_accel(uint16_t raw_sample_rate_hz, uint32_t id);


    void periodic();

    bool calibrate_trim(float &trim_roll, float &trim_pitch);


    bool calibrating() const { return _calibrating; }






    void init_gyro(void);





    const Vector3f &get_gyro(uint8_t i) const { return _gyro[i]; }
    const Vector3f &get_gyro(void) const { return get_gyro(_primary_gyro); }


    const Vector3f &get_gyro_offsets(uint8_t i) const { return _gyro_offset[i]; }
    const Vector3f &get_gyro_offsets(void) const { return get_gyro_offsets(_primary_gyro); }


    bool get_delta_angle(uint8_t i, Vector3f &delta_angle) const;
    bool get_delta_angle(Vector3f &delta_angle) const { return get_delta_angle(_primary_gyro, delta_angle); }

    float get_delta_angle_dt(uint8_t i) const;
    float get_delta_angle_dt() const { return get_delta_angle_dt(_primary_accel); }


    bool get_delta_velocity(uint8_t i, Vector3f &delta_velocity) const;
    bool get_delta_velocity(Vector3f &delta_velocity) const { return get_delta_velocity(_primary_accel, delta_velocity); }

    float get_delta_velocity_dt(uint8_t i) const;
    float get_delta_velocity_dt() const { return get_delta_velocity_dt(_primary_accel); }





    const Vector3f &get_accel(uint8_t i) const { return _accel[i]; }
    const Vector3f &get_accel(void) const { return get_accel(_primary_accel); }

    uint32_t get_gyro_error_count(uint8_t i) const { return _gyro_error_count[i]; }
    uint32_t get_accel_error_count(uint8_t i) const { return _accel_error_count[i]; }


    bool get_gyro_health(uint8_t instance) const { return (instance<_gyro_count) ? _gyro_healthy[instance] : false; }
    bool get_gyro_health(void) const { return get_gyro_health(_primary_gyro); }
    bool get_gyro_health_all(void) const;
    uint8_t get_gyro_count(void) const { return _gyro_count; }
    bool gyro_calibrated_ok(uint8_t instance) const { return _gyro_cal_ok[instance]; }
    bool gyro_calibrated_ok_all() const;
    bool use_gyro(uint8_t instance) const;
    Gyro_Calibration_Timing gyro_calibration_timing() { return (Gyro_Calibration_Timing)_gyro_cal_timing.get(); }

    bool get_accel_health(uint8_t instance) const { return (instance<_accel_count) ? _accel_healthy[instance] : false; }
    bool get_accel_health(void) const { return get_accel_health(_primary_accel); }
    bool get_accel_health_all(void) const;
    uint8_t get_accel_count(void) const { return _accel_count; }
    bool accel_calibrated_ok_all() const;
    bool use_accel(uint8_t instance) const;


    uint16_t get_gyro_rate_hz(uint8_t instance) const { return uint16_t(_gyro_raw_sample_rates[instance] * _gyro_over_sampling[instance]); }
    uint16_t get_accel_rate_hz(uint8_t instance) const { return uint16_t(_accel_raw_sample_rates[instance] * _accel_over_sampling[instance]); }


    const Vector3f &get_accel_offsets(uint8_t i) const { return _accel_offset[i]; }
    const Vector3f &get_accel_offsets(void) const { return get_accel_offsets(_primary_accel); }


    const Vector3f &get_accel_scale(uint8_t i) const { return _accel_scale[i]; }
    const Vector3f &get_accel_scale(void) const { return get_accel_scale(_primary_accel); }


    const Vector3f &get_imu_pos_offset(uint8_t instance) const {
        return _accel_pos[instance];
    }
    const Vector3f &get_imu_pos_offset(void) const {
        return _accel_pos[_primary_accel];
    }



    float get_temperature(uint8_t instance) const { return _temperature[instance]; }




    float get_delta_time() const { return _delta_time; }



    float get_gyro_drift_rate(void) const { return radians(0.5f/60); }


    void update(void);


    void wait_for_sample(void);


    static const struct AP_Param::GroupInfo var_info[];


    void set_board_orientation(enum Rotation orientation) {
        _board_orientation = orientation;
    }


    uint16_t get_sample_rate(void) const { return _sample_rate; }


    float get_loop_delta_t(void) const { return _loop_delta_t; }

    uint16_t error_count(void) const { return 0; }
    bool healthy(void) const { return get_gyro_health() && get_accel_health(); }

    uint8_t get_primary_accel(void) const { return _primary_accel; }
    uint8_t get_primary_gyro(void) const { return _primary_gyro; }


    void set_hil_mode(void) { _hil_mode = true; }


    uint8_t get_gyro_filter_hz(void) const { return _gyro_filter_cutoff; }


    uint8_t get_accel_filter_hz(void) const { return _accel_filter_cutoff; }


    void set_log_raw_bit(uint32_t log_raw_bit) { _log_raw_bit = log_raw_bit; }


    void calc_vibration_and_clipping(uint8_t instance, const Vector3f &accel, float dt);


    Vector3f get_vibration_levels() const { return get_vibration_levels(_primary_accel); }
    Vector3f get_vibration_levels(uint8_t instance) const;


    uint32_t get_accel_clip_count(uint8_t instance) const;


    bool is_still();






    void set_accel(uint8_t instance, const Vector3f &accel);
    void set_gyro(uint8_t instance, const Vector3f &gyro);
    void set_delta_time(float delta_time);
    void set_delta_velocity(uint8_t instance, float deltavt, const Vector3f &deltav);
    void set_delta_angle(uint8_t instance, const Vector3f &deltaa, float deltaat);

    AuxiliaryBus *get_auxiliary_bus(int16_t backend_id) { return get_auxiliary_bus(backend_id, 0); }
    AuxiliaryBus *get_auxiliary_bus(int16_t backend_id, uint8_t instance);

    void detect_backends(void);


    void set_accel_peak_hold(uint8_t instance, const Vector3f &accel);
    float get_accel_peak_hold_neg_x() const { return _peak_hold_state.accel_peak_hold_neg_x; }


    AP_AccelCal* get_acal() const { return _acal; }


    bool get_fixed_mount_accel_cal_sample(uint8_t sample_num, Vector3f& ret) const;


    bool get_primary_accel_cal_sample_avg(uint8_t sample_num, Vector3f& ret) const;


    bool get_new_trim(float& trim_roll, float &trim_pitch);



    void acal_init();


    void acal_update();


    MAV_RESULT simple_accel_cal(AP_AHRS &ahrs);

    bool accel_cal_requires_reboot() const { return _accel_cal_requires_reboot; }


    uint32_t get_last_update_usec(void) const { return _last_update_usec; }

    enum IMU_SENSOR_TYPE {
        IMU_SENSOR_TYPE_ACCEL = 0,
        IMU_SENSOR_TYPE_GYRO = 1,
    };

    class BatchSampler {
    public:
        BatchSampler(const AP_InertialSensor &imu) :
            type(IMU_SENSOR_TYPE_ACCEL),
            _imu(imu) {
            AP_Param::setup_object_defaults(this, var_info);
        };

        void init();
        void sample(uint8_t instance, IMU_SENSOR_TYPE _type, uint64_t sample_us, const Vector3f &sample);


        void periodic();


        static const struct AP_Param::GroupInfo var_info[];


        AP_Int16 _required_count;
        AP_Int8 _sensor_mask;


    private:

        void rotate_to_next_sensor();

        bool should_log(uint8_t instance, IMU_SENSOR_TYPE type);
        void push_data_to_log();

        uint64_t measurement_started_us;

        bool initialised : 1;
        bool isbh_sent : 1;
        uint8_t instance : 3;
        AP_InertialSensor::IMU_SENSOR_TYPE type : 1;
        uint16_t isb_seqnum;
        int16_t *data_x;
        int16_t *data_y;
        int16_t *data_z;
        uint16_t data_write_offset;
        uint16_t data_read_offset;
        uint32_t last_sent_ms;


        static const uint16_t multiplier_accel = 
# 329 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 3 4
                                                32767
# 329 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h"
                                                         /radians(2000);
        static const uint16_t multiplier_gyro = 
# 330 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h" 3 4
                                               32767
# 330 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h"
                                                        /(16*9.80665f);
        uint16_t multiplier = multiplier_accel;
# 341 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor.h"
        const uint8_t push_interval_ms = 100;
        const uint16_t samples_per_msg = 32;

        const AP_InertialSensor &_imu;
    };
    BatchSampler batchsampler{*this};

private:
    AP_InertialSensor();


    bool _add_backend(AP_InertialSensor_Backend *backend);
    void _start_backends();
    AP_InertialSensor_Backend *_find_backend(int16_t backend_id, uint8_t instance);


    void _init_gyro();





    bool _calculate_trim(const Vector3f &accel_sample, float& trim_roll, float& trim_pitch);


    void _save_gyro_calibration();


    AP_InertialSensor_Backend *_backends[6];




    uint8_t _gyro_count;
    uint8_t _accel_count;
    uint8_t _backend_count;


    uint16_t _sample_rate;
    float _loop_delta_t;


    Vector3f _accel[3];
    Vector3f _delta_velocity[3];
    float _delta_velocity_dt[3];
    bool _delta_velocity_valid[3];

    Vector3f _delta_velocity_acc[3];

    float _delta_velocity_acc_dt[3];


    LowPassFilter2pVector3f _accel_filter[3];
    LowPassFilter2pVector3f _gyro_filter[3];
    Vector3f _accel_filtered[3];
    Vector3f _gyro_filtered[3];
    bool _new_accel_data[3];
    bool _new_gyro_data[3];


    NotchFilterVector3fParam _notch_filter;


    Vector3f _gyro[3];
    Vector3f _delta_angle[3];
    float _delta_angle_dt[3];
    bool _delta_angle_valid[3];

    float _delta_angle_acc_dt[3];
    Vector3f _delta_angle_acc[3];
    Vector3f _last_delta_angle[3];
    Vector3f _last_raw_gyro[3];


    AP_Int16 _old_product_id;



    AP_Int32 _accel_id[3];
    AP_Int32 _gyro_id[3];


    AP_Vector3f _accel_scale[3];
    AP_Vector3f _accel_offset[3];
    AP_Vector3f _gyro_offset[3];


    AP_Vector3f _accel_pos[3];


    float _accel_max_abs_offsets[3];


    float _accel_raw_sample_rates[3];
    float _gyro_raw_sample_rates[3];


    uint8_t _accel_over_sampling[3];
    uint8_t _gyro_over_sampling[3];



    uint64_t _accel_last_sample_us[3];
    uint64_t _gyro_last_sample_us[3];


    uint16_t _sample_accel_count[3];
    uint32_t _sample_accel_start_us[3];
    uint16_t _sample_gyro_count[3];
    uint32_t _sample_gyro_start_us[3];


    float _temperature[3];


    AP_Int8 _accel_filter_cutoff;
    AP_Int8 _gyro_filter_cutoff;
    AP_Int8 _gyro_cal_timing;


    AP_Int8 _use[3];


    AP_Int8 _fast_sampling_mask;


    enum Rotation _board_orientation;


    enum Rotation _gyro_orientation[3];
    enum Rotation _accel_orientation[3];


    bool _gyro_cal_ok[3];
    bool _accel_id_ok[3];


    uint8_t _primary_gyro;
    uint8_t _primary_accel;


    uint32_t _log_raw_bit;


    bool _have_sample:1;


    bool _hil_mode:1;


    bool _calibrating:1;

    bool _backends_detected:1;


    float _delta_time;


    uint32_t _last_sample_usec;


    uint32_t _next_sample_usec;


    uint32_t _sample_period_usec;


    uint32_t _last_update_usec;


    bool _gyro_healthy[3];
    bool _accel_healthy[3];

    uint32_t _accel_error_count[3];
    uint32_t _gyro_error_count[3];


    uint32_t _accel_clip_count[3];
    LowPassFilterVector3f _accel_vibe_floor_filter[2];
    LowPassFilterVector3f _accel_vibe_filter[2];


    struct PeakHoldState {
        float accel_peak_hold_neg_x;
        uint32_t accel_peak_hold_neg_x_age;
    } _peak_hold_state;


    AP_Float _still_threshold;




    struct {
        float delta_time;
    } _hil {};


    AP_Int8 _acc_body_aligned;
    AP_Int8 _trim_option;

    static AP_InertialSensor *_s_instance;
    AP_AccelCal* _acal;

    AccelCalibrator *_accel_calibrator;


    void _acal_save_calibrations();
    void _acal_event_failure();


    AccelCalibrator* _acal_get_calibrator(uint8_t i) { return i<get_accel_count()?&(_accel_calibrator[i]):nullptr; }

    float _trim_pitch;
    float _trim_roll;
    bool _new_trim;

    bool _accel_cal_requires_reboot;


    uint32_t _accel_startup_error_count[3];
    uint32_t _gyro_startup_error_count[3];
    bool _startup_error_counts_set;
    uint32_t _startup_ms;
};
# 11 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_RSSI/AP_RSSI.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_RSSI/AP_RSSI.h"
       





class AP_RSSI
{
public:
    enum RssiType {
        RSSI_DISABLED = 0,
        RSSI_ANALOG_PIN = 1,
        RSSI_RC_CHANNEL_VALUE = 2,
        RSSI_RECEIVER = 3
    };

    static AP_RSSI create() { return AP_RSSI{}; }

    constexpr AP_RSSI(AP_RSSI &&other) = default;


    AP_RSSI(const AP_RSSI &other) = delete;
    AP_RSSI &operator=(const AP_RSSI&) = delete;


    ~AP_RSSI(void);


    void init();


    bool enabled() const { return rssi_type != RSSI_DISABLED; }



    float read_receiver_rssi();



    uint8_t read_receiver_rssi_uint8();


    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_RSSI();


    AP_Int8 rssi_type;
    AP_Int8 rssi_analog_pin;
    AP_Float rssi_analog_pin_range_low;
    AP_Float rssi_analog_pin_range_high;
    AP_Int8 rssi_channel;
    AP_Int16 rssi_channel_low_pwm_value;
    AP_Int16 rssi_channel_high_pwm_value;



    AP_HAL::AnalogSource *rssi_analog_source;


    float read_pin_rssi();


    float read_channel_rssi();


    float scale_and_constrain_float_rssi(float current_rssi_value, float low_rssi_range, float high_rssi_range);
};
# 12 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Baro/AP_Baro.h" 1
       



# 1 "/Users/yu/repos/ardupilot/libraries/Filter/Filter.h" 1
       




# 1 "/Users/yu/repos/ardupilot/libraries/Filter/AverageFilter.h" 1
# 19 "/Users/yu/repos/ardupilot/libraries/Filter/AverageFilter.h"
       


# 1 "/Users/yu/repos/ardupilot/libraries/Filter/FilterWithBuffer.h" 1
# 22 "/Users/yu/repos/ardupilot/libraries/Filter/FilterWithBuffer.h"
       



template <class T, uint8_t FILTER_SIZE>
class FilterWithBuffer : public Filter<T>
{
public:

    FilterWithBuffer();


    virtual T apply(T sample);


    virtual void reset();


    uint8_t get_filter_size() const {
        return FILTER_SIZE;
    };

    T get_sample(uint8_t i) const {
        return samples[i];
    }

protected:
    T samples[FILTER_SIZE];
    uint8_t sample_index;
};


typedef FilterWithBuffer<int16_t,2> FilterWithBufferInt16_Size2;
typedef FilterWithBuffer<int16_t,3> FilterWithBufferInt16_Size3;
typedef FilterWithBuffer<int16_t,4> FilterWithBufferInt16_Size4;
typedef FilterWithBuffer<int16_t,5> FilterWithBufferInt16_Size5;
typedef FilterWithBuffer<int16_t,6> FilterWithBufferInt16_Size6;
typedef FilterWithBuffer<int16_t,7> FilterWithBufferInt16_Size7;
typedef FilterWithBuffer<uint16_t,2> FilterWithBufferUInt16_Size2;
typedef FilterWithBuffer<uint16_t,3> FilterWithBufferUInt16_Size3;
typedef FilterWithBuffer<uint16_t,4> FilterWithBufferUInt16_Size4;
typedef FilterWithBuffer<uint16_t,5> FilterWithBufferUInt16_Size5;
typedef FilterWithBuffer<uint16_t,6> FilterWithBufferUInt16_Size6;
typedef FilterWithBuffer<uint16_t,7> FilterWithBufferUInt16_Size7;

typedef FilterWithBuffer<int32_t,2> FilterWithBufferInt32_Size2;
typedef FilterWithBuffer<int32_t,3> FilterWithBufferInt32_Size3;
typedef FilterWithBuffer<int32_t,4> FilterWithBufferInt32_Size4;
typedef FilterWithBuffer<int32_t,5> FilterWithBufferInt32_Size5;
typedef FilterWithBuffer<int32_t,6> FilterWithBufferInt32_Size6;
typedef FilterWithBuffer<int32_t,7> FilterWithBufferInt32_Size7;
typedef FilterWithBuffer<uint32_t,2> FilterWithBufferUInt32_Size2;
typedef FilterWithBuffer<uint32_t,3> FilterWithBufferUInt32_Size3;
typedef FilterWithBuffer<uint32_t,4> FilterWithBufferUInt32_Size4;
typedef FilterWithBuffer<uint32_t,5> FilterWithBufferUInt32_Size5;
typedef FilterWithBuffer<uint32_t,6> FilterWithBufferUInt32_Size6;
typedef FilterWithBuffer<uint32_t,7> FilterWithBufferUInt32_Size7;


template <class T, uint8_t FILTER_SIZE>
FilterWithBuffer<T,FILTER_SIZE>::FilterWithBuffer() :
    sample_index(0)
{

    reset();
}


template <class T, uint8_t FILTER_SIZE>
void FilterWithBuffer<T,FILTER_SIZE>::reset()
{

    for( int8_t i=0; i<FILTER_SIZE; i++ ) {
        samples[i] = 0;
    }


    sample_index = 0;
}


template <class T, uint8_t FILTER_SIZE>
T FilterWithBuffer<T,FILTER_SIZE>:: apply(T sample)
{

    samples[sample_index++] = sample;


    if( sample_index >= FILTER_SIZE )
        sample_index = 0;


    return sample;
}
# 23 "/Users/yu/repos/ardupilot/libraries/Filter/AverageFilter.h" 2




template <class T, class U, uint8_t FILTER_SIZE>
class AverageFilter : public FilterWithBuffer<T,FILTER_SIZE>
{
public:

    AverageFilter() : FilterWithBuffer<T,FILTER_SIZE>(), _num_samples(0) {
    };


    virtual T apply(T sample);


    virtual void reset();

protected:

    uint8_t _num_samples;
};


typedef AverageFilter<int8_t,int16_t,2> AverageFilterInt8_Size2;
typedef AverageFilter<int8_t,int16_t,3> AverageFilterInt8_Size3;
typedef AverageFilter<int8_t,int16_t,4> AverageFilterInt8_Size4;
typedef AverageFilter<int8_t,int16_t,5> AverageFilterInt8_Size5;
typedef AverageFilter<uint8_t,uint16_t,2> AverageFilterUInt8_Size2;
typedef AverageFilter<uint8_t,uint16_t,3> AverageFilterUInt8_Size3;
typedef AverageFilter<uint8_t,uint16_t,4> AverageFilterUInt8_Size4;
typedef AverageFilter<uint8_t,uint16_t,5> AverageFilterUInt8_Size5;

typedef AverageFilter<int16_t,int32_t,2> AverageFilterInt16_Size2;
typedef AverageFilter<int16_t,int32_t,3> AverageFilterInt16_Size3;
typedef AverageFilter<int16_t,int32_t,4> AverageFilterInt16_Size4;
typedef AverageFilter<int16_t,int32_t,5> AverageFilterInt16_Size5;
typedef AverageFilter<uint16_t,uint32_t,2> AverageFilterUInt16_Size2;
typedef AverageFilter<uint16_t,uint32_t,3> AverageFilterUInt16_Size3;
typedef AverageFilter<uint16_t,uint32_t,4> AverageFilterUInt16_Size4;
typedef AverageFilter<uint16_t,uint32_t,5> AverageFilterUInt16_Size5;

typedef AverageFilter<int32_t,float,2> AverageFilterInt32_Size2;
typedef AverageFilter<int32_t,float,3> AverageFilterInt32_Size3;
typedef AverageFilter<int32_t,float,4> AverageFilterInt32_Size4;
typedef AverageFilter<int32_t,float,5> AverageFilterInt32_Size5;
typedef AverageFilter<uint32_t,float,2> AverageFilterUInt32_Size2;
typedef AverageFilter<uint32_t,float,3> AverageFilterUInt32_Size3;
typedef AverageFilter<uint32_t,float,4> AverageFilterUInt32_Size4;
typedef AverageFilter<uint32_t,float,5> AverageFilterUInt32_Size5;

typedef AverageFilter<float,float,5> AverageFilterFloat_Size5;



template <class T, class U, uint8_t FILTER_SIZE>
T AverageFilter<T,U,FILTER_SIZE>:: apply(T sample)
{
    U result = 0;


    FilterWithBuffer<T,FILTER_SIZE>::apply(sample);


    _num_samples++;
    if( _num_samples > FILTER_SIZE || _num_samples == 0 )
        _num_samples = FILTER_SIZE;


    for(uint8_t i=0; i<FILTER_SIZE; i++)
        result += FilterWithBuffer<T,FILTER_SIZE>::samples[i];

    return (T)(result / _num_samples);
}


template <class T, class U, uint8_t FILTER_SIZE>
void AverageFilter<T,U,FILTER_SIZE>:: reset()
{

    FilterWithBuffer<T,FILTER_SIZE>::reset();


    _num_samples = 0;
}
# 117 "/Users/yu/repos/ardupilot/libraries/Filter/AverageFilter.h"
template <class T, class U, uint8_t FILTER_SIZE>
class AverageIntegralFilter : public AverageFilter<T,U,FILTER_SIZE>
{
public:





    virtual T apply(T sample) override;


    virtual float getf();


    virtual double getd();
protected:

    U _sum = 0;
};

template <class T, class U, uint8_t FILTER_SIZE>
T AverageIntegralFilter<T,U,FILTER_SIZE>::apply(T sample)
{
    T curr = this->samples[this->sample_index];


    FilterWithBuffer<T,FILTER_SIZE>::apply(sample);


    this->_num_samples++;
    if (this->_num_samples > FILTER_SIZE || this->_num_samples == 0) {
        this->_num_samples = FILTER_SIZE;
    }

    _sum -= curr;
    _sum += sample;


    return 0;
}

template <class T, class U, uint8_t FILTER_SIZE>
float AverageIntegralFilter<T,U,FILTER_SIZE>::getf()
{
    if (this->_num_samples == 0) {
        return 0.f;
    }

    return (float)_sum / this->_num_samples;
}

template <class T, class U, uint8_t FILTER_SIZE>
double AverageIntegralFilter<T,U,FILTER_SIZE>::getd()
{
    if (this->_num_samples == 0) {
        return 0.f;
    }

    return (double)_sum / this->_num_samples;
}
# 7 "/Users/yu/repos/ardupilot/libraries/Filter/Filter.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/Filter/DerivativeFilter.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/Filter/DerivativeFilter.h"
       






template <class T, uint8_t FILTER_SIZE>
class DerivativeFilter : public FilterWithBuffer<T,FILTER_SIZE>
{
public:

    DerivativeFilter() : FilterWithBuffer<T,FILTER_SIZE>() {
    };


    void update(T sample, uint32_t timestamp);


    float slope(void);


    virtual void reset();

private:
    bool _new_data;
    float _last_slope;



    uint32_t _timestamps[FILTER_SIZE];
};

typedef DerivativeFilter<float,5> DerivativeFilterFloat_Size5;
typedef DerivativeFilter<float,7> DerivativeFilterFloat_Size7;
typedef DerivativeFilter<float,9> DerivativeFilterFloat_Size9;
# 8 "/Users/yu/repos/ardupilot/libraries/Filter/Filter.h" 2


# 1 "/Users/yu/repos/ardupilot/libraries/Filter/ModeFilter.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/Filter/ModeFilter.h"
       





template <class T, uint8_t FILTER_SIZE>
class ModeFilter : public FilterWithBuffer<T,FILTER_SIZE>
{
public:
    ModeFilter(uint8_t return_element);


    virtual T apply(T sample);


    virtual T get() const {
        return _output;
    }

private:

    uint8_t _return_element;
    T _output;
    void isort(T sample, bool drop_high_sample);
    bool drop_high_sample;
};


typedef ModeFilter<int8_t,3> ModeFilterInt8_Size3;
typedef ModeFilter<int8_t,4> ModeFilterInt8_Size4;
typedef ModeFilter<int8_t,5> ModeFilterInt8_Size5;
typedef ModeFilter<int8_t,6> ModeFilterInt8_Size6;
typedef ModeFilter<int8_t,7> ModeFilterInt8_Size7;
typedef ModeFilter<uint8_t,3> ModeFilterUInt8_Size3;
typedef ModeFilter<uint8_t,4> ModeFilterUInt8_Size4;
typedef ModeFilter<uint8_t,5> ModeFilterUInt8_Size5;
typedef ModeFilter<uint8_t,6> ModeFilterUInt8_Size6;
typedef ModeFilter<uint8_t,7> ModeFilterUInt8_Size7;
typedef ModeFilter<int16_t,3> ModeFilterInt16_Size3;
typedef ModeFilter<int16_t,4> ModeFilterInt16_Size4;
typedef ModeFilter<int16_t,5> ModeFilterInt16_Size5;
typedef ModeFilter<int16_t,6> ModeFilterInt16_Size6;
typedef ModeFilter<int16_t,7> ModeFilterInt16_Size7;
typedef ModeFilter<uint16_t,3> ModeFilterUInt16_Size3;
typedef ModeFilter<uint16_t,4> ModeFilterUInt16_Size4;
typedef ModeFilter<uint16_t,5> ModeFilterUInt16_Size5;
typedef ModeFilter<uint16_t,6> ModeFilterUInt16_Size6;
typedef ModeFilter<uint16_t,7> ModeFilterUInt16_Size7;
typedef ModeFilter<float,3> ModeFilterFloat_Size3;
typedef ModeFilter<float,4> ModeFilterFloat_Size4;
typedef ModeFilter<float,5> ModeFilterFloat_Size5;
typedef ModeFilter<float,6> ModeFilterFloat_Size6;
typedef ModeFilter<float,7> ModeFilterFloat_Size7;



template <class T, uint8_t FILTER_SIZE>
ModeFilter<T,FILTER_SIZE>::ModeFilter(uint8_t return_element) :
    FilterWithBuffer<T,FILTER_SIZE>(),
    _return_element(return_element),
    drop_high_sample(true)
{

    if( _return_element >= FILTER_SIZE )
        _return_element = FILTER_SIZE / 2;
};



template <class T, uint8_t FILTER_SIZE>
T ModeFilter<T,FILTER_SIZE>:: apply(T sample)
{

    isort(sample, drop_high_sample);


    drop_high_sample = !drop_high_sample;


    if( FilterWithBuffer<T,FILTER_SIZE>::sample_index < FILTER_SIZE ) {

        return _output = FilterWithBuffer<T,FILTER_SIZE>::samples[(FilterWithBuffer<T,FILTER_SIZE>::sample_index / 2)];
    }else{

        return _output = FilterWithBuffer<T,FILTER_SIZE>::samples[_return_element];
    }
}





template <class T, uint8_t FILTER_SIZE>
void ModeFilter<T,FILTER_SIZE>:: isort(T new_sample, bool drop_high)
{
    int8_t i;



    if( FilterWithBuffer<T,FILTER_SIZE>::sample_index < FILTER_SIZE ) {
        FilterWithBuffer<T,FILTER_SIZE>::sample_index++;
        drop_high = true;
    }

    if( drop_high ) {


        i = FilterWithBuffer<T,FILTER_SIZE>::sample_index-1;


        while(i > 0 && FilterWithBuffer<T,FILTER_SIZE>::samples[i-1] > new_sample) {
            FilterWithBuffer<T,FILTER_SIZE>::samples[i] = FilterWithBuffer<T,FILTER_SIZE>::samples[i-1];
            i--;
        }


        FilterWithBuffer<T,FILTER_SIZE>::samples[i] = new_sample;

    }else{


        i = 0;


        while( FilterWithBuffer<T,FILTER_SIZE>::samples[i+1] < new_sample && i < FilterWithBuffer<T,FILTER_SIZE>::sample_index-1 ) {
            FilterWithBuffer<T,FILTER_SIZE>::samples[i] = FilterWithBuffer<T,FILTER_SIZE>::samples[i+1];
            i++;
        }


        FilterWithBuffer<T,FILTER_SIZE>::samples[i] = new_sample;
    }
}
# 11 "/Users/yu/repos/ardupilot/libraries/Filter/Filter.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/Filter/Butter.h" 1
       



template <typename Coefficients>
class Butter2
{
public:
  float filter(float input)
  {
        float newhist = input + Coefficients::A1*hist[1] + Coefficients::A2*hist[0];
        float ret = (newhist + 2*hist[1] + hist[0])/Coefficients::GAIN;
        hist[0] = hist[1]; hist[1] = newhist;
        return ret;
  }
private:
    float hist[2];
};

struct butter100_025_coeffs
{
  static constexpr float A1 = 1.9777864838f;
  static constexpr float A2 = -0.9780305085f;
  static constexpr float GAIN = 1.639178228e+04f;
};
typedef Butter2<butter100_025_coeffs> butter100hz0_25;
typedef Butter2<butter100_025_coeffs> butter50hz0_125;
typedef Butter2<butter100_025_coeffs> butter10hz0_025;

struct butter100_05_coeffs
{
  static constexpr float A1 = 1.9555782403f;
  static constexpr float A2 = -0.9565436765f;
  static constexpr float GAIN = 4.143204922e+03f;
};
typedef Butter2<butter100_05_coeffs> butter100hz0_5;
typedef Butter2<butter100_05_coeffs> butter50hz0_25;
typedef Butter2<butter100_05_coeffs> butter10hz0_05;

struct butter100_1_coeffs
{
  static constexpr float A1 = 1.9111970674f;
  static constexpr float A2 = -0.9149758348f;
  static constexpr float GAIN = 1.058546241e+03f;
};
typedef Butter2<butter100_1_coeffs> butter100hz1_0;
typedef Butter2<butter100_1_coeffs> butter50hz0_5;
typedef Butter2<butter100_1_coeffs> butter10hz0_1;

struct butter100_1_5_coeffs
{
  static constexpr float A1 = 1.8668922797f;
  static constexpr float A2 = -0.8752145483f;
  static constexpr float GAIN = 4.806381793e+02f;
};
typedef Butter2<butter100_1_5_coeffs> butter100hz1_5;
typedef Butter2<butter100_1_5_coeffs> butter50hz0_75;
typedef Butter2<butter100_1_5_coeffs> butter10hz0_15;

struct butter100_2_coeffs
{
  static constexpr float A1 = 1.8226949252f;
  static constexpr float A2 = -0.8371816513f;
  static constexpr float GAIN = 2.761148367e+02f;
};
typedef Butter2<butter100_2_coeffs> butter100hz2_0;
typedef Butter2<butter100_2_coeffs> butter50hz1_0;
typedef Butter2<butter100_2_coeffs> butter10hz0_2;

struct butter100_3_coeffs
{
  static constexpr float A1 = 1.7347257688f;
  static constexpr float A2 = -0.7660066009f;
  static constexpr float GAIN = 1.278738361e+02f;
};
typedef Butter2<butter100_3_coeffs> butter100hz3_0;
typedef Butter2<butter100_3_coeffs> butter50hz1_5;
typedef Butter2<butter100_3_coeffs> butter10hz0_3;

struct butter100_4_coeffs
{
  static constexpr float A1 = 1.6474599811f;
  static constexpr float A2 = -0.7008967812f;
  static constexpr float GAIN = 7.485478157e+01f;
};
typedef Butter2<butter100_4_coeffs> butter100hz4_0;
typedef Butter2<butter100_4_coeffs> butter50hz2_0;
typedef Butter2<butter100_4_coeffs> butter10hz0_4;

struct butter100_8_coeffs
{
  static constexpr float A1 = 1.3072850288f;
  static constexpr float A2 = -0.4918122372f;
  static constexpr float GAIN = 2.167702007e+01f;
};
typedef Butter2<butter100_8_coeffs> butter100hz8_0;
typedef Butter2<butter100_8_coeffs> butter50hz4_0;
typedef Butter2<butter100_8_coeffs> butter10hz0_8;

struct butter50_8_coeffs
{
  static constexpr float A1 = 0.6710290908f;
  static constexpr float A2 = -0.2523246263f;
  static constexpr float GAIN = 6.881181354e+00f;
};
typedef Butter2<butter50_8_coeffs> butter50hz8_0;
typedef Butter2<butter50_8_coeffs> butter10hz1_6;
# 11 "/Users/yu/repos/ardupilot/libraries/Filter/Filter.h" 2
# 6 "/Users/yu/repos/ardupilot/libraries/AP_Baro/AP_Baro.h" 2
# 19 "/Users/yu/repos/ardupilot/libraries/AP_Baro/AP_Baro.h"
class AP_Baro_Backend;

class AP_Baro
{
    friend class AP_Baro_Backend;
    friend class AP_Baro_SITL;

public:
    static AP_Baro create() { return AP_Baro{}; }

    constexpr AP_Baro(AP_Baro &&other) = default;


    AP_Baro(const AP_Baro &other) = delete;
    AP_Baro &operator=(const AP_Baro&) = delete;


    typedef enum {
        BARO_TYPE_AIR,
        BARO_TYPE_WATER
    } baro_type_t;


    void init(void);



    void update(void);


    bool healthy(void) const { return healthy(_primary); }
    bool healthy(uint8_t instance) const { return sensors[instance].healthy && sensors[instance].alt_ok && sensors[instance].calibrated; }


    bool all_healthy(void) const;


    float get_pressure(void) const { return get_pressure(_primary); }
    float get_pressure(uint8_t instance) const { return sensors[instance].pressure; }


    float get_temperature(void) const { return get_temperature(_primary); }
    float get_temperature(uint8_t instance) const { return sensors[instance].temperature; }



    void accumulate(void);



    void calibrate(bool save=true);



    void update_calibration(void);



    float get_altitude(void) const { return get_altitude(_primary); }
    float get_altitude(uint8_t instance) const { return sensors[instance].altitude; }



    float get_altitude_difference(float base_pressure, float pressure) const;


    float get_EAS2TAS(void);


    float get_air_density_ratio(void);



    float get_climb_rate(void);



    float get_ground_temperature(void) const;



    float get_ground_pressure(void) const { return get_ground_pressure(_primary); }
    float get_ground_pressure(uint8_t i) const { return sensors[i].ground_pressure.get(); }




    void set_external_temperature(float temperature);


    uint32_t get_last_update(void) const { return get_last_update(_primary); }
    uint32_t get_last_update(uint8_t instance) const { return sensors[instance].last_update_ms; }


    static const struct AP_Param::GroupInfo var_info[];

    float get_external_temperature(void) const { return get_external_temperature(_primary); };
    float get_external_temperature(const uint8_t instance) const;


    void setHIL(float altitude_msl);



    void setHIL(uint8_t instance, float pressure, float temperature, float altitude, float climb_rate, uint32_t last_update_ms);


    void set_primary_baro(uint8_t primary) { _primary_baro.set_and_save(primary); };


    void set_type(uint8_t instance, baro_type_t type) { sensors[instance].type = type; };


    baro_type_t get_type(uint8_t instance) { return sensors[instance].type; };


    struct {
        float pressure;
        float temperature;
        float altitude;
        float climb_rate;
        uint32_t last_update_ms;
        bool updated:1;
        bool have_alt:1;
        bool have_last_update:1;
    } _hil;



    uint8_t register_sensor(void);


    uint8_t num_instances(void) const { return _num_sensors; }


    void set_hil_mode(void) { _hil_mode = true; }


    void set_baro_drift_altitude(float alt) { _alt_offset = alt; }


    float get_baro_drift_offset(void) { return _alt_offset_active; }


    static void SimpleAtmosphere(const float alt, float &sigma, float &delta, float &theta);


    void set_pressure_correction(uint8_t instance, float p_correction);

private:
    AP_Baro();


    uint8_t _num_drivers;
    AP_Baro_Backend *drivers[3];


    uint8_t _num_sensors;


    uint8_t _primary;

    struct sensor {
        baro_type_t type;
        uint32_t last_update_ms;
        uint32_t last_change_ms;
        bool healthy:1;
        bool alt_ok:1;
        bool calibrated:1;
        float pressure;
        float temperature;
        float altitude;
        AP_Float ground_pressure;
        float p_correction;
    } sensors[3];

    AP_Float _alt_offset;
    float _alt_offset_active;
    AP_Int8 _primary_baro;
    AP_Int8 _ext_bus;
    float _last_altitude_EAS2TAS;
    float _EAS2TAS;
    float _external_temperature;
    uint32_t _last_external_temperature_ms;
    DerivativeFilterFloat_Size7 _climb_rate_filter;
    AP_Float _specific_gravity;
    AP_Float _user_ground_temperature;
    bool _hil_mode:1;
    float _guessed_ground_temperature;


    uint32_t _last_notify_ms;

    bool _add_backend(AP_Baro_Backend *backend);
};
# 13 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h" 1
       
# 25 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h" 1
       




# 1 "/Users/yu/repos/ardupilot/libraries/AP_Declination/AP_Declination.h" 1
       
# 14 "/Users/yu/repos/ardupilot/libraries/AP_Declination/AP_Declination.h"
class AP_Declination
{
public:
    static float get_declination(float lat, float lon);
private:
    static int16_t get_lookup_value(uint8_t x, uint8_t y);
};
# 7 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h" 2





# 1 "/Users/yu/repos/ardupilot/libraries/AP_Compass/CompassCalibrator.h" 1
# 10 "/Users/yu/repos/ardupilot/libraries/AP_Compass/CompassCalibrator.h"
enum compass_cal_status_t {
    COMPASS_CAL_NOT_STARTED=0,
    COMPASS_CAL_WAITING_TO_START=1,
    COMPASS_CAL_RUNNING_STEP_ONE=2,
    COMPASS_CAL_RUNNING_STEP_TWO=3,
    COMPASS_CAL_SUCCESS=4,
    COMPASS_CAL_FAILED=5
};

class CompassCalibrator {
public:
    typedef uint8_t completion_mask_t[10];

    CompassCalibrator();

    void start(bool retry, float delay, uint16_t offset_max);
    void clear();

    void update(bool &failure);
    void new_sample(const Vector3f &sample);

    bool check_for_timeout();

    bool running() const;

    void set_tolerance(float tolerance) { _tolerance = tolerance; }

    void get_calibration(Vector3f &offsets, Vector3f &diagonals, Vector3f &offdiagonals);

    float get_completion_percent() const;
    completion_mask_t& get_completion_mask();
    enum compass_cal_status_t get_status() const { return _status; }
    float get_fitness() const { return sqrtf(_fitness); }
    uint8_t get_attempt() const { return _attempt; }

private:
    class param_t {
    public:
        float* get_sphere_params() {
            return &radius;
        }

        float* get_ellipsoid_params() {
            return &offset.x;
        }

        float radius;
        Vector3f offset;
        Vector3f diag;
        Vector3f offdiag;
    };

    class CompassSample {
    public:
        Vector3f get() const;
        void set(const Vector3f &in);
    private:
        int16_t x;
        int16_t y;
        int16_t z;
    };



    enum compass_cal_status_t _status;


    uint32_t _last_sample_ms;


    float _delay_start_sec;
    uint32_t _start_time_ms;
    bool _retry;
    float _tolerance;
    uint8_t _attempt;
    uint16_t _offset_max;

    completion_mask_t _completion_mask;


    class param_t _params;
    uint16_t _fit_step;
    CompassSample *_sample_buffer;
    float _fitness;
    float _initial_fitness;
    float _sphere_lambda;
    float _ellipsoid_lambda;
    uint16_t _samples_collected;
    uint16_t _samples_thinned;

    bool set_status(compass_cal_status_t status);


    bool accept_sample(const Vector3f &sample);
    bool accept_sample(const CompassSample &sample);


    bool fit_acceptable();

    void reset_state();
    void initialize_fit();

    bool fitting() const;


    void thin_samples();

    float calc_residual(const Vector3f& sample, const param_t& params) const;
    float calc_mean_squared_residuals(const param_t& params) const;
    float calc_mean_squared_residuals() const;

    void calc_initial_offset();
    void calc_sphere_jacob(const Vector3f& sample, const param_t& params, float* ret) const;
    void run_sphere_fit();

    void calc_ellipsoid_jacob(const Vector3f& sample, const param_t& params, float* ret) const;
    void run_ellipsoid_fit();







    void update_completion_mask(const Vector3f& v);



    void update_completion_mask();
};
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass_Backend.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass_Backend.h"
       



class Compass;
class AP_Compass_Backend
{
public:
    AP_Compass_Backend(Compass &compass);



    virtual ~AP_Compass_Backend(void) {}


    virtual void read(void) = 0;



    virtual void accumulate(void) {};


    virtual void handle_mag_msg(Vector3f &mag) {};
# 52 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass_Backend.h"
    enum DevTypes {
        DEVTYPE_HMC5883_OLD = 0x01,
        DEVTYPE_HMC5883 = 0x07,
        DEVTYPE_LSM303D = 0x02,
        DEVTYPE_AK8963 = 0x04,
        DEVTYPE_BMM150 = 0x05,
        DEVTYPE_LSM9DS1 = 0x06,
        DEVTYPE_LIS3MDL = 0x08,
        DEVTYPE_AK09916 = 0x09,
        DEVTYPE_IST8310 = 0x0A,
        DEVTYPE_ICM20948 = 0x0B,
        DEVTYPE_MMC3416 = 0x0C,
  DEVTYPE_QMC5883L = 0x0D,
    };


protected:
# 83 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass_Backend.h"
    void rotate_field(Vector3f &mag, uint8_t instance);
    void publish_raw_field(const Vector3f &mag, uint8_t instance);
    void correct_field(Vector3f &mag, uint8_t i);
    void publish_filtered_field(const Vector3f &mag, uint8_t instance);
    void set_last_update_usec(uint32_t last_update, uint8_t instance);


    uint8_t register_compass(void) const;


    void set_dev_id(uint8_t instance, uint32_t dev_id);


    void set_external(uint8_t instance, bool external);


    bool is_external(uint8_t instance);


    void set_rotation(uint8_t instance, enum Rotation rotation);


    Compass &_compass;


    AP_HAL::Semaphore *_sem;

private:
    void apply_corrections(Vector3f &mag, uint8_t i);
};
# 14 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h" 2
# 43 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h"
class Compass
{
friend class AP_Compass_Backend;
public:
    static Compass create() { return Compass{}; }

    constexpr Compass(Compass &&other) = default;


    Compass(const Compass &other) = delete;
    Compass &operator=(const Compass&) = delete;






    bool init();



    bool read();



    void accumulate();







    float calculate_heading(const Matrix3f &dcm_matrix) const {
        return calculate_heading(dcm_matrix, get_primary());
    }
    float calculate_heading(const Matrix3f &dcm_matrix, uint8_t i) const;






    void set_offsets(uint8_t i, const Vector3f &offsets);






    void set_and_save_offsets(uint8_t i, const Vector3f &offsets);
    void set_and_save_diagonals(uint8_t i, const Vector3f &diagonals);
    void set_and_save_offdiagonals(uint8_t i, const Vector3f &diagonals);
# 104 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h"
    void save_offsets(uint8_t i);
    void save_offsets(void);


    uint8_t get_count(void) const { return _compass_count; }


    const Vector3f &get_field(uint8_t i) const { return _state[i].field; }
    const Vector3f &get_field(void) const { return get_field(get_primary()); }


    void compass_cal_update();

    void start_calibration_all(bool retry=false, bool autosave=false, float delay_sec=0.0f, bool autoreboot = false);

    void cancel_calibration_all();

    bool compass_cal_requires_reboot() { return _cal_complete_requires_reboot; }
    bool is_calibrating() const;




    MAV_RESULT handle_mag_cal_command(const mavlink_command_long_t &packet);

    void send_mag_cal_progress(mavlink_channel_t chan);
    void send_mag_cal_report(mavlink_channel_t chan);


    bool consistent() const;


    bool healthy(uint8_t i) const { return _state[i].healthy; }
    bool healthy(void) const { return healthy(get_primary()); }
    uint8_t get_healthy_mask() const;





    const Vector3f &get_offsets(uint8_t i) const { return _state[i].offset; }
    const Vector3f &get_offsets(void) const { return get_offsets(get_primary()); }






    void set_initial_location(int32_t latitude, int32_t longitude);
# 161 "/Users/yu/repos/ardupilot/libraries/AP_Compass/AP_Compass.h"
    void set_and_save_offsets(uint8_t i, int x, int y, int z) {
        set_and_save_offsets(i, Vector3f(x, y, z));
    }


    bool learn_offsets_enabled() const { return _learn; }



    void learn_offsets(void);


    bool use_for_yaw(uint8_t i) const;
    bool use_for_yaw(void) const;






    void set_declination(float radians, bool save_to_eeprom = true);
    float get_declination() const;


    void set_board_orientation(enum Rotation orientation) {
        _board_orientation = orientation;
    }





    void motor_compensation_type(const uint8_t comp_type);


    uint8_t get_motor_compensation_type() const {
        return _motor_comp_type;
    }






    void set_motor_compensation(uint8_t i, const Vector3f &motor_comp_factor);


    const Vector3f& get_motor_compensation(uint8_t i) const { return _state[i].motor_compensation; }
    const Vector3f& get_motor_compensation(void) const { return get_motor_compensation(get_primary()); }





    void save_motor_compensation();





    const Vector3f &get_motor_offsets(uint8_t i) const { return _state[i].motor_offset; }
    const Vector3f &get_motor_offsets(void) const { return get_motor_offsets(get_primary()); }



    void set_throttle(float thr_pct) {
        if (_motor_comp_type == 0x01) {
            _thr_or_curr = thr_pct;
        }
    }



    void set_current(float amps) {
        if (_motor_comp_type == 0x02) {
            _thr_or_curr = amps;
        }
    }





    bool configured(uint8_t i);
    bool configured(void);





    uint8_t get_primary(void) const { return _primary; }


    void setHIL(uint8_t instance, float roll, float pitch, float yaw);
    void setHIL(uint8_t instance, const Vector3f &mag, uint32_t last_update_usec);
    const Vector3f& getHIL(uint8_t instance) const;
    void _setup_earth_field();


    void set_hil_mode(void) { _hil_mode = true; }


    uint32_t last_update_usec(void) const { return _state[get_primary()].last_update_usec; }
    uint32_t last_update_usec(uint8_t i) const { return _state[i].last_update_usec; }

    uint32_t last_update_ms(void) const { return _state[get_primary()].last_update_ms; }
    uint32_t last_update_ms(uint8_t i) const { return _state[i].last_update_ms; }

    static const struct AP_Param::GroupInfo var_info[];


    struct {
        Vector3f Bearth;
        float last_declination;
        bool healthy[3];
        Vector3f field[3];
    } _hil;

    enum LearnType {
        LEARN_NONE=0,
        LEARN_INTERNAL=1,
        LEARN_EKF=2
    };


    enum LearnType get_learn_type(void) const {
        return (enum LearnType)_learn.get();
    }


    uint16_t get_offsets_max(void) const {
        return (uint16_t)_offset_max.get();
    }

private:
    Compass();




    uint8_t register_compass(void);


    bool _add_backend(AP_Compass_Backend *backend, const char *name, bool external);
    void _detect_backends(void);


    bool _accept_calibration(uint8_t i);
    bool _accept_calibration_mask(uint8_t mask);
    void _cancel_calibration(uint8_t i);
    void _cancel_calibration_mask(uint8_t mask);
    uint8_t _get_cal_mask() const;
    bool _start_calibration(uint8_t i, bool retry=false, float delay_sec=0.0f);
    bool _start_calibration_mask(uint8_t mask, bool retry=false, bool autosave=false, float delay_sec=0.0f, bool autoreboot=false);
    bool _auto_reboot() { return _compass_cal_autoreboot; }


    bool _have_driver(AP_HAL::Device::BusType bus_type, uint8_t bus_num, uint8_t address, uint8_t devtype) const;



    bool _cal_saved[3];
    bool _cal_autosave;


    bool _compass_cal_autoreboot;
    bool _cal_complete_requires_reboot;
    bool _cal_has_run;


    enum DriverType {
        DRIVER_HMC5883 =0,
        DRIVER_LSM303D =1,
        DRIVER_AK8963 =2,
        DRIVER_BMM150 =3,
        DRIVER_LSM9DS1 =4,
        DRIVER_LIS3MDL =5,
        DRIVER_AK09916 =6,
        DRIVER_IST8310 =7,
        DRIVER_ICM20948 =8,
        DRIVER_MMC3416 =9,
        DRIVER_QFLIGHT =10,
        DRIVER_UAVCAN =11,
        DRIVER_QMC5883 =12,
        DRIVER_SITL =13,
    };

    bool _driver_enabled(enum DriverType driver_type);


    AP_Compass_Backend *_backends[3];
    uint8_t _backend_count;


    uint8_t _compass_count;


    AP_Int8 _learn;


    enum Rotation _board_orientation;


    AP_Int8 _primary;


    AP_Float _declination;


    AP_Int8 _auto_declination;


    bool _null_init_done;


    static const uint8_t _mag_history_size = 20;



    AP_Int8 _motor_comp_type;


    float _thr_or_curr;

    struct mag_state {
        AP_Int8 external;
        bool healthy;
        AP_Int8 orientation;
        AP_Vector3f offset;
        AP_Vector3f diagonals;
        AP_Vector3f offdiagonals;




        AP_Int32 dev_id;

        AP_Int8 use_for_yaw;

        uint8_t mag_history_index;
        Vector3i mag_history[_mag_history_size];


        AP_Vector3f motor_compensation;


        Vector3f motor_offset;


        Vector3f field;


        uint32_t last_update_ms;
        uint32_t last_update_usec;


        enum Rotation rotation;
    } _state[3];

    AP_Int16 _offset_max;

    CompassCalibrator _calibrator[3];


    bool _hil_mode:1;

    AP_Float _calibration_threshold;


    AP_Int32 _driver_type_mask;
};
# 26 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Airspeed/AP_Airspeed.h" 1
       






# 1 "/Users/yu/repos/ardupilot/libraries/AP_Airspeed/AP_Airspeed_Backend.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Airspeed/AP_Airspeed_Backend.h"
       
# 24 "/Users/yu/repos/ardupilot/libraries/AP_Airspeed/AP_Airspeed_Backend.h"
class AP_Airspeed;

class AP_Airspeed_Backend {
public:
    AP_Airspeed_Backend(AP_Airspeed &frontend);
    virtual ~AP_Airspeed_Backend();


    virtual bool init(void) = 0;


    virtual bool get_differential_pressure(float &pressure) = 0;


    virtual bool get_temperature(float &temperature) = 0;

protected:
    int8_t get_pin(void) const;
    float get_psi_range(void) const;
    uint8_t get_bus(void) const;


    AP_HAL::Semaphore *sem;

private:
    AP_Airspeed &frontend;
};
# 9 "/Users/yu/repos/ardupilot/libraries/AP_Airspeed/AP_Airspeed.h" 2

class Airspeed_Calibration {
public:
    friend class AP_Airspeed;

    Airspeed_Calibration();


    void init(float initial_ratio);



    float update(float airspeed, const Vector3f &vg, int16_t max_airspeed_allowed_during_cal);

private:

    Matrix3f P;
    const float Q0;
    const float Q1;
    Vector3f state;
    const float DT;
};

class AP_Airspeed
{
public:
    friend class AP_Airspeed_Backend;


    AP_Airspeed();

    void init(void);


    void read(void);



    void calibrate(bool in_startup);


    float get_airspeed(void) const {
        return _airspeed;
    }


    float get_raw_airspeed(void) const {
        return _raw_airspeed;
    }


    float get_airspeed_cm(void) const {
        return _airspeed*100;
    }


    float get_airspeed_ratio(void) const {
        return _ratio;
    }


    bool get_temperature(float &temperature);


    void set_airspeed_ratio(float ratio) {
        _ratio.set(ratio);
    }


    bool use(void) const;


    bool enabled(void) const {
        return _type.get() != TYPE_NONE;
    }


    void disable(void) {
        _type.set(TYPE_NONE);
    }


    void set_HIL(float airspeed) {
        _airspeed = airspeed;
    }



    float get_differential_pressure(void) const {
        return _last_pressure;
    }


    float get_offset(void) const {
        return _offset;
    }


    float get_corrected_pressure(void) const {
        return _corrected_pressure;
    }


    void set_EAS2TAS(float v) {
        _EAS2TAS = v;
    }


    float get_EAS2TAS(void) const {
        return _EAS2TAS;
    }


    void update_calibration(const Vector3f &vground, int16_t max_airspeed_allowed_during_cal);


 void log_mavlink_send(mavlink_channel_t chan, const Vector3f &vground);


    bool healthy(void) const { return _healthy && fabsf(_offset) > 0 && enabled(); }

    void setHIL(float pressure) { _healthy=_hil_set=true; _hil_pressure=pressure; }


    uint32_t last_update_ms(void) const { return _last_update_ms; }

    void setHIL(float airspeed, float diff_pressure, float temperature);

    static const struct AP_Param::GroupInfo var_info[];

    enum pitot_tube_order { PITOT_TUBE_ORDER_POSITIVE = 0,
                            PITOT_TUBE_ORDER_NEGATIVE = 1,
                            PITOT_TUBE_ORDER_AUTO = 2 };

    enum airspeed_type {
        TYPE_NONE=0,
        TYPE_I2C_MS4525=1,
        TYPE_ANALOG=2,
        TYPE_I2C_MS5525=3,
    };

private:
    AP_Float _offset;
    AP_Float _ratio;
    AP_Float _psi_range;
    AP_Int8 _use;
    AP_Int8 _type;
    AP_Int8 _pin;
    AP_Int8 _bus;
    AP_Int8 _autocal;
    AP_Int8 _tube_order;
    AP_Int8 _skip_cal;
    float _raw_airspeed;
    float _airspeed;
    float _last_pressure;
    float _filtered_pressure;
    float _corrected_pressure;
    float _EAS2TAS;
    bool _healthy:1;
    bool _hil_set:1;
    float _hil_pressure;
    uint32_t _last_update_ms;


    struct {
        uint32_t start_ms;
        uint16_t count;
        float sum;
        uint16_t read_count;
    } _cal;

    Airspeed_Calibration _calibration;
    float _last_saved_ratio;
    uint8_t _counter;

    float get_pressure(void);
    void update_calibration(float raw_pressure);

    AP_Airspeed_Backend *sensor;
};
# 27 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Beacon/AP_Beacon.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Beacon/AP_Beacon.h"
       







class AP_Beacon_Backend;





class AP_Beacon
{
public:
    friend class AP_Beacon_Backend;

    AP_Beacon(AP_SerialManager &_serial_manager);


    enum AP_BeaconType {
        AP_BeaconType_None = 0,
        AP_BeaconType_Pozyx = 1,
        AP_BeaconType_Marvelmind = 2,
        AP_BeaconType_SITL = 10
    };


    struct BeaconState {
        uint16_t id;
        bool healthy;
        float distance;
        uint32_t distance_update_ms;
        Vector3f position;
    };


    void init(void);


    bool enabled(void);


    bool healthy(void);


    void update(void);


    bool get_origin(Location &origin_loc) const;


    bool get_vehicle_position_ned(Vector3f& pos, float& accuracy_estimate) const;


    uint8_t count() const;




    bool get_beacon_data(uint8_t beacon_instance, struct BeaconState& state) const;


    uint8_t beacon_id(uint8_t beacon_instance) const;


    bool beacon_healthy(uint8_t beacon_instance) const;


    float beacon_distance(uint8_t beacon_instance) const;


    Vector3f beacon_position(uint8_t beacon_instance) const;


    uint32_t beacon_last_update_ms(uint8_t beacon_instance) const;


    void update_boundary_points();


    const Vector2f* get_boundary_points(uint16_t& num_points) const;

    static const struct AP_Param::GroupInfo var_info[];

private:


    bool device_ready(void) const;







    static bool get_next_boundary_point(const Vector2f* boundary, uint8_t num_points, uint8_t current_index, float start_angle, uint8_t& next_index, float& next_angle);


    AP_Int8 _type;
    AP_Float origin_lat;
    AP_Float origin_lon;
    AP_Float origin_alt;
    AP_Int16 orient_yaw;


    AP_Beacon_Backend *_driver;
    AP_SerialManager &serial_manager;


    Vector3f veh_pos_ned;
    float veh_pos_accuracy;
    uint32_t veh_pos_update_ms;


    uint8_t num_beacons = 0;
    BeaconState beacon_state[4];


    Vector2f boundary[4 +1];
    uint8_t boundary_num_points;
    uint8_t boundary_num_beacons;
};
# 28 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h" 2





class OpticalFlow;




enum AHRS_VehicleClass {
    AHRS_VEHICLE_UNKNOWN,
    AHRS_VEHICLE_GROUND,
    AHRS_VEHICLE_COPTER,
    AHRS_VEHICLE_FIXED_WING,
    AHRS_VEHICLE_SUBMARINE,
};



class AP_AHRS_View;

class AP_AHRS
{
public:
    friend class AP_AHRS_View;


    AP_AHRS(AP_InertialSensor &ins, AP_Baro &baro, AP_GPS &gps) :
        roll(0.0f),
        pitch(0.0f),
        yaw(0.0f),
        roll_sensor(0),
        pitch_sensor(0),
        yaw_sensor(0),
        _vehicle_class(AHRS_VEHICLE_UNKNOWN),
        _compass(nullptr),
        _optflow(nullptr),
        _airspeed(nullptr),
        _beacon(nullptr),
        _compass_last_update(0),
        _ins(ins),
        _baro(baro),
        _gps(gps),
        _cos_roll(1.0f),
        _cos_pitch(1.0f),
        _cos_yaw(1.0f),
        _sin_roll(0.0f),
        _sin_pitch(0.0f),
        _sin_yaw(0.0f),
        _active_accel_instance(0)
    {

        AP_Param::setup_object_defaults(this, var_info);



        _gyro_drift_limit = ins.get_gyro_drift_rate();


        _flags.correct_centrifugal = true;


        _home.options = 0;
        _home.alt = 0;
        _home.lng = 0;
        _home.lat = 0;

        _last_trim = _trim.get();
        _rotation_autopilot_body_to_vehicle_body.from_euler(_last_trim.x, _last_trim.y, 0.0f);
        _rotation_vehicle_body_to_autopilot_body = _rotation_autopilot_body_to_vehicle_body.transposed();
    }


    virtual ~AP_AHRS() {}


    virtual void init() {
        set_orientation();
    };


    void set_fly_forward(bool b) {
        _flags.fly_forward = b;
    }

    bool get_fly_forward(void) const {
        return _flags.fly_forward;
    }






    void set_likely_flying(bool b) {
        if (b && !_flags.likely_flying) {
            _last_flying_ms = AP_HAL::millis();
        }
        _flags.likely_flying = b;
    }






    bool get_likely_flying(void) const {
        return _flags.likely_flying;
    }





    uint32_t get_time_flying_ms(void) const {
        if (!_flags.likely_flying) {
            return 0;
        }
        return AP_HAL::millis() - _last_flying_ms;
    }

    AHRS_VehicleClass get_vehicle_class(void) const {
        return _vehicle_class;
    }

    void set_vehicle_class(AHRS_VehicleClass vclass) {
        _vehicle_class = vclass;
    }

    void set_wind_estimation(bool b) {
        _flags.wind_estimation = b;
    }

    void set_compass(Compass *compass) {
        _compass = compass;
        set_orientation();
    }

    const Compass* get_compass() const {
        return _compass;
    }

    void set_optflow(const OpticalFlow *optflow) {
        _optflow = optflow;
    }

    const OpticalFlow* get_optflow() const {
        return _optflow;
    }



    void set_orientation() {
        _ins.set_board_orientation((enum Rotation)_board_orientation.get());
        if (_compass != nullptr) {
            _compass->set_board_orientation((enum Rotation)_board_orientation.get());
        }
    }

    void set_airspeed(AP_Airspeed *airspeed) {
        _airspeed = airspeed;
    }

    void set_beacon(AP_Beacon *beacon) {
        _beacon = beacon;
    }

    const AP_Airspeed *get_airspeed(void) const {
        return _airspeed;
    }

    const AP_Beacon *get_beacon(void) const {
        return _beacon;
    }

    const AP_GPS &get_gps() const {
        return _gps;
    }

    const AP_InertialSensor &get_ins() const {
        return _ins;
    }

    const AP_Baro &get_baro() const {
        return _baro;
    }


    virtual uint8_t get_primary_accel_index(void) const {
        return _ins.get_primary_accel();
    }


    virtual uint8_t get_primary_gyro_index(void) const {
        return _ins.get_primary_gyro();
    }


    virtual const Vector3f &get_accel_ef(uint8_t i) const {
        return _accel_ef[i];
    }
    virtual const Vector3f &get_accel_ef(void) const {
        return get_accel_ef(_ins.get_primary_accel());
    }


    virtual const Vector3f &get_accel_ef_blended(void) const {
        return _accel_ef_blended;
    }


    float get_yaw_rate_earth(void) const {
        return get_gyro() * get_rotation_body_to_ned().c;
    }


    virtual void update(bool skip_ins_update=false) = 0;


    virtual const char *prearm_failure_reason(void) const {
        return nullptr;
    }


    virtual bool have_ekf_logging(void) const {
        return false;
    }


    float roll;
    float pitch;
    float yaw;


    int32_t roll_sensor;
    int32_t pitch_sensor;
    int32_t yaw_sensor;


    virtual const Vector3f &get_gyro(void) const = 0;


    Vector3f get_gyro_latest(void) const;


    virtual const Vector3f &get_gyro_drift(void) const = 0;



    virtual void reset_gyro_drift(void) = 0;


    virtual void reset(bool recover_eulers=false) = 0;


    virtual void reset_attitude(const float &roll, const float &pitch, const float &yaw) = 0;



    virtual float get_error_rp(void) const = 0;



    virtual float get_error_yaw(void) const = 0;



    virtual const Matrix3f &get_rotation_body_to_ned(void) const = 0;
    const Matrix3f& get_rotation_autopilot_body_to_vehicle_body(void) const { return _rotation_autopilot_body_to_vehicle_body; }
    const Matrix3f& get_rotation_vehicle_body_to_autopilot_body(void) const { return _rotation_vehicle_body_to_autopilot_body; }



    virtual bool get_position(struct Location &loc) const = 0;


    virtual Vector3f wind_estimate(void) = 0;



    virtual bool airspeed_estimate(float *airspeed_ret) const;



    bool airspeed_estimate_true(float *airspeed_ret) const {
        if (!airspeed_estimate(airspeed_ret)) {
            return false;
        }
        *airspeed_ret *= get_EAS2TAS();
        return true;
    }


    float get_EAS2TAS(void) const {
        if (_airspeed) {
            return _airspeed->get_EAS2TAS();
        }
        return 1.0f;
    }



    bool airspeed_sensor_enabled(void) const {
        return _airspeed != nullptr && _airspeed->use() && _airspeed->healthy();
    }


    virtual Vector2f groundspeed_vector(void);




    virtual bool get_velocity_NED(Vector3f &vec) const {
        return false;
    }


    virtual bool get_expected_mag_field_NED(Vector3f &ret) const {
        return false;
    }


    virtual bool get_mag_field_correction(Vector3f &ret) const {
        return false;
    }




    virtual bool get_relative_position_NED_home(Vector3f &vec) const {
        return false;
    }




    virtual bool get_relative_position_NED_origin(Vector3f &vec) const {
        return false;
    }


    virtual bool get_relative_position_NE_home(Vector2f &vecNE) const {
        return false;
    }



    virtual bool get_relative_position_NE_origin(Vector2f &vecNE) const {
        return false;
    }



    virtual void get_relative_position_D_home(float &posD) const = 0;



    virtual bool get_relative_position_D_origin(float &posD) const {
        return false;
    }


    float groundspeed(void) {
        return groundspeed_vector().length();
    }


    virtual bool use_compass(void) {
        return _compass && _compass->use_for_yaw();
    }


    bool yaw_initialised(void) const {
        return _flags.have_initial_yaw;
    }



    void set_correct_centrifugal(bool setting) {
        _flags.correct_centrifugal = setting;
    }


    bool get_correct_centrifugal(void) const {
        return _flags.correct_centrifugal;
    }


    const Vector3f &get_trim() const {
        return _trim.get();
    }


    virtual void set_trim(Vector3f new_trim);


    virtual void add_trim(float roll_in_radians, float pitch_in_radians, bool save_to_eeprom = true);


    float cos_roll() const {
        return _cos_roll;
    }
    float cos_pitch() const {
        return _cos_pitch;
    }
    float cos_yaw() const {
        return _cos_yaw;
    }
    float sin_roll() const {
        return _sin_roll;
    }
    float sin_pitch() const {
        return _sin_pitch;
    }
    float sin_yaw() const {
        return _sin_yaw;
    }


    static const struct AP_Param::GroupInfo var_info[];


    virtual bool get_secondary_attitude(Vector3f &eulers) {
        return false;
    }


    virtual bool get_secondary_quaternion(Quaternion &quat) {
        return false;
    }


    virtual bool get_secondary_position(struct Location &loc) {
        return false;
    }



    const struct Location &get_home(void) const {
        return _home;
    }




    virtual void set_home(const Location &loc) = 0;




    virtual bool set_origin(const Location &loc) { return false; }


    virtual bool get_origin(Location &ret) const { return false; }



    virtual bool have_inertial_nav(void) const {
        return false;
    }


    uint8_t get_active_accel_instance(void) const {
        return _active_accel_instance;
    }


    virtual bool healthy(void) const = 0;


    virtual bool initialised(void) const {
        return true;
    };



    virtual uint32_t getLastYawResetAngle(float &yawAng) const {
        return 0;
    };



    virtual uint32_t getLastPosNorthEastReset(Vector2f &pos) const {
        return 0;
    };



    virtual uint32_t getLastVelNorthEastReset(Vector2f &vel) const {
        return 0;
    };



    virtual uint32_t getLastPosDownReset(float &posDelta) const {
        return 0;
    };






    virtual bool resetHeightDatum(void) {
        return false;
    }





    virtual bool get_variances(float &velVar, float &posVar, float &hgtVar, Vector3f &magVar, float &tasVar, Vector2f &offset) const {
        return false;
    }


    virtual uint32_t uptime_ms(void) const = 0;


    int8_t get_ekf_type(void) const {
        return _ekf_type;
    }


    virtual void getCorrectedDeltaVelocityNED(Vector3f& ret, float& dt) const { ret.zero(); _ins.get_delta_velocity(ret); dt = _ins.get_delta_velocity_dt(); }


    AP_AHRS_View *create_view(enum Rotation rotation);


    float getAOA(void);


    float getSSA(void);

    virtual void update_AOA_SSA(void);

protected:
    AHRS_VehicleClass _vehicle_class;



    AP_Float _kp_yaw;
    AP_Float _kp;
    AP_Float gps_gain;

    AP_Float beta;
    AP_Int8 _gps_use;
    AP_Int8 _wind_max;
    AP_Int8 _board_orientation;
    AP_Int8 _gps_minsats;
    AP_Int8 _gps_delay;
    AP_Int8 _ekf_type;


    struct ahrs_flags {
        uint8_t have_initial_yaw : 1;
        uint8_t fly_forward : 1;
        uint8_t correct_centrifugal : 1;
        uint8_t wind_estimation : 1;
        uint8_t likely_flying : 1;
    } _flags;


    uint32_t _last_flying_ms;


    void calc_trig(const Matrix3f &rot,
                   float &cr, float &cp, float &cy,
                   float &sr, float &sp, float &sy) const;



    void update_trig(void);


    void update_cd_values(void);


    Compass * _compass;


    const OpticalFlow *_optflow;


    AP_Airspeed * _airspeed;


    AP_Beacon * _beacon;


    uint32_t _compass_last_update;



    AP_InertialSensor &_ins;
    AP_Baro &_baro;
    const AP_GPS &_gps;


    AP_Vector3f _trim;


    Vector3f _last_trim;
    Matrix3f _rotation_autopilot_body_to_vehicle_body;
    Matrix3f _rotation_vehicle_body_to_autopilot_body;



    float _gyro_drift_limit;


    Vector3f _accel_ef[3];
    Vector3f _accel_ef_blended;



    Vector2f _lp;
    Vector2f _hp;
    Vector2f _lastGndVelADS;


    struct Location _home;


    float _cos_roll, _cos_pitch, _cos_yaw;
    float _sin_roll, _sin_pitch, _sin_yaw;


    uint8_t _active_accel_instance;


    AP_AHRS_View *_view;


    float _AOA, _SSA;
    uint32_t _last_AOA_update_ms;
};

# 1 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_DCM.h" 1
       
# 24 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_DCM.h"
class AP_AHRS_DCM : public AP_AHRS {
public:
    static AP_AHRS_DCM create(AP_InertialSensor &ins, AP_Baro &baro, AP_GPS &gps) {
        return AP_AHRS_DCM{ins, baro, gps};
    }

    constexpr AP_AHRS_DCM(AP_AHRS_DCM &&other) = default;


    AP_AHRS_DCM(const AP_AHRS_DCM &other) = delete;
    AP_AHRS_DCM &operator=(const AP_AHRS_DCM&) = delete;



    const Vector3f &get_gyro() const override {
        return _omega;
    }


    const Matrix3f &get_rotation_body_to_ned() const override {
        return _body_dcm_matrix;
    }


    const Vector3f &get_gyro_drift() const override {
        return _omega_I;
    }



    void reset_gyro_drift() override;


    void update(bool skip_ins_update=false) override;
    void reset(bool recover_eulers = false) override;


    void reset_attitude(const float &roll, const float &pitch, const float &yaw) override;


    virtual bool get_position(struct Location &loc) const override;


    float get_error_rp() const override {
        return _error_rp;
    }
    float get_error_yaw() const override {
        return _error_yaw;
    }


    Vector3f wind_estimate() override {
        return _wind;
    }

    void get_relative_position_D_home(float &posD) const override;



    bool airspeed_estimate(float *airspeed_ret) const override;

    bool use_compass() override;

    void set_home(const Location &loc) override;
    void estimate_wind(void);


    bool healthy() const override;


    uint32_t uptime_ms() const override;

protected:
    AP_AHRS_DCM(AP_InertialSensor &ins, AP_Baro &baro, AP_GPS &gps)
        : AP_AHRS(ins, baro, gps)
        , _omega_I_sum_time(0.0f)
        , _renorm_val_sum(0.0f)
        , _renorm_val_count(0)
        , _error_rp(1.0f)
        , _error_yaw(1.0f)
        , _gps_last_update(0)
        , _ra_deltat(0.0f)
        , _ra_sum_start(0)
        , _last_declination(0.0f)
        , _mag_earth(1, 0)
        , _have_gps_lock(false)
        , _last_lat(0)
        , _last_lng(0)
        , _position_offset_north(0.0f)
        , _position_offset_east(0.0f)
        , _have_position(false)
        , _last_wind_time(0)
        , _last_airspeed(0.0f)
        , _last_consistent_heading(0)
        , _imu1_weight(0.5f)
        , _last_failure_ms(0)
        , _last_startup_ms(0)
    {
        _dcm_matrix.identity();



        _ki = 0.0087f;
        _ki_yaw = 0.01f;
    }

private:
    float _ki;
    float _ki_yaw;


    void matrix_update(float _G_Dt);
    void normalize(void);
    void check_matrix(void);
    bool renorm(Vector3f const &a, Vector3f &result);
    void drift_correction(float deltat);
    void drift_correction_yaw(void);
    float yaw_error_compass();
    void euler_angles(void);
    bool have_gps(void) const;
    bool use_fast_gains(void) const;


    Matrix3f _dcm_matrix;


    Matrix3f _body_dcm_matrix;

    Vector3f _omega_P;
    Vector3f _omega_yaw_P;
    Vector3f _omega_I;
    Vector3f _omega_I_sum;
    float _omega_I_sum_time;
    Vector3f _omega;


    Vector3f ra_delayed(uint8_t instance, const Vector3f &ra);
    Vector3f _ra_delay_buffer[3];


    float _P_gain(float spin_rate);


    float _yaw_gain(void) const;


    float _renorm_val_sum;
    uint16_t _renorm_val_count;
    float _error_rp;
    float _error_yaw;


    uint32_t _gps_last_update;


    Vector3f _ra_sum[3];
    Vector3f _last_velocity;
    float _ra_deltat;
    uint32_t _ra_sum_start;


    float _last_declination;
    Vector2f _mag_earth;


    bool _have_gps_lock;


    int32_t _last_lat;
    int32_t _last_lng;


    float _position_offset_north;
    float _position_offset_east;


    bool _have_position;


    Vector3f _last_fuse;
    Vector3f _last_vel;
    uint32_t _last_wind_time;
    float _last_airspeed;
    uint32_t _last_consistent_heading;


    Vector3f _wind;

    float _imu1_weight;


    uint32_t _last_failure_ms;


    uint32_t _last_startup_ms;
};
# 669 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_NavEKF.h" 1
       
# 28 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_NavEKF.h"
# 1 "/Users/yu/repos/ardupilot/libraries/SITL/SITL.h" 1
       



class DataFlash_Class;

namespace SITL {

struct sitl_fdm {

    uint64_t timestamp_us;
    Location home;
    double latitude, longitude;
    double altitude;
    double heading;
    double speedN, speedE, speedD;
    double xAccel, yAccel, zAccel;
    double rollRate, pitchRate, yawRate;
    double rollDeg, pitchDeg, yawDeg;
    Quaternion quaternion;
    double airspeed;
    double battery_voltage;
    double battery_current;
    double rpm1;
    double rpm2;
    uint8_t rcin_chan_count;
    float rcin[8];
    double range;
    Vector3f bodyMagField;
    Vector3f angAccel;
};




class SITL {
public:

    SITL() {

        mag_ofs.set(Vector3f(5, 13, -18));
        AP_Param::setup_object_defaults(this, var_info);
        AP_Param::setup_object_defaults(this, var_info2);
    }

    enum GPSType {
        GPS_TYPE_NONE = 0,
        GPS_TYPE_UBLOX = 1,
        GPS_TYPE_MTK = 2,
        GPS_TYPE_MTK16 = 3,
        GPS_TYPE_MTK19 = 4,
        GPS_TYPE_NMEA = 5,
        GPS_TYPE_SBP = 6,
        GPS_TYPE_FILE = 7,
        GPS_TYPE_NOVA = 8,
        GPS_TYPE_SBP2 = 9,
    };

    struct sitl_fdm state;


    uint16_t update_rate_hz;


    bool motors_on;


    float height_agl;

    static const struct AP_Param::GroupInfo var_info[];
    static const struct AP_Param::GroupInfo var_info2[];


    AP_Float baro_noise;
    AP_Float baro_drift;
    AP_Float baro_glitch;
    AP_Float gyro_noise;
    AP_Vector3f gyro_scale;
    AP_Float accel_noise;
    AP_Float accel2_noise;
    AP_Vector3f accel_bias;
    AP_Vector3f accel2_bias;
    AP_Float arspd_noise;
    AP_Float arspd_fail;
    AP_Float arspd_fail_pressure;
    AP_Float arspd_fail_pitot_pressure;
    AP_Float gps_noise;
    AP_Int16 gps_lock_time;
    AP_Int16 gps_alt_offset;

    AP_Float mag_noise;
    AP_Float mag_error;
    AP_Vector3f mag_mot;
    AP_Vector3f mag_ofs;
    AP_Float servo_speed;

    AP_Float sonar_glitch;
    AP_Float sonar_noise;
    AP_Float sonar_scale;

    AP_Float drift_speed;
    AP_Float drift_time;
    AP_Float engine_mul;
    AP_Int8 engine_fail;
    AP_Int8 gps_disable;
    AP_Int8 gps2_enable;
    AP_Int8 gps_delay;
    AP_Int8 gps_type;
    AP_Int8 gps2_type;
    AP_Float gps_byteloss;
    AP_Int8 gps_numsats;
    AP_Vector3f gps_glitch;
    AP_Vector3f gps2_glitch;
    AP_Int8 gps_hertz;
    AP_Float batt_voltage;
    AP_Float accel_fail;
    AP_Int8 rc_fail;
    AP_Int8 baro_disable;
    AP_Int8 float_exception;
    AP_Int8 flow_enable;
    AP_Int16 flow_rate;
    AP_Int8 flow_delay;
    AP_Int8 terrain_enable;
    AP_Int8 pin_mask;
    AP_Float speedup;
    AP_Int8 odom_enable;


    float wind_speed_active;
    float wind_direction_active;
    AP_Float wind_speed;
    AP_Float wind_direction;
    AP_Float wind_turbulance;
    AP_Float gps_drift_alt;

    AP_Int16 baro_delay;
    AP_Int16 mag_delay;
    AP_Int16 wind_delay;


    AP_Int16 adsb_plane_count;
    AP_Float adsb_radius_m;
    AP_Float adsb_altitude_m;
    AP_Int8 adsb_tx;


    AP_Vector3f mag_anomaly_ned;
    AP_Float mag_anomaly_hgt;


    AP_Vector3f imu_pos_offset;
    AP_Vector3f gps_pos_offset;
    AP_Vector3f rngfnd_pos_offset;
    AP_Vector3f optflow_pos_offset;


    AP_Float temp_start;
    AP_Float temp_flight;
    AP_Float temp_tconst;
    AP_Float temp_baro_factor;


    AP_Int8 arspd_signflip;

    uint16_t irlock_port;

    void simstate_send(mavlink_channel_t chan);

    void Log_Write_SIMSTATE(DataFlash_Class *dataflash);


    static void convert_body_frame(double rollDeg, double pitchDeg,
                                   double rollRate, double pitchRate, double yawRate,
                                   double *p, double *q, double *r);


    static Vector3f convert_earth_frame(const Matrix3f &dcm, const Vector3f &gyro);
};

}
# 29 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_NavEKF.h" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h" 1
# 23 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h"
       




# 1 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF/AP_Nav_Common.h" 1
# 17 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF/AP_Nav_Common.h"
       

union nav_filter_status {
    struct {
        uint16_t attitude : 1;
        uint16_t horiz_vel : 1;
        uint16_t vert_vel : 1;
        uint16_t horiz_pos_rel : 1;
        uint16_t horiz_pos_abs : 1;
        uint16_t vert_pos : 1;
        uint16_t terrain_alt : 1;
        uint16_t const_pos_mode : 1;
        uint16_t pred_horiz_pos_rel : 1;
        uint16_t pred_horiz_pos_abs : 1;
        uint16_t takeoff_detected : 1;
        uint16_t takeoff : 1;
        uint16_t touchdown : 1;
        uint16_t using_gps : 1;
        uint16_t gps_glitching : 1;
    } flags;
    uint16_t value;
};

union nav_gps_status {
    struct {
        uint16_t bad_sAcc : 1;
        uint16_t bad_hAcc : 1;
        uint16_t bad_yaw : 1;
        uint16_t bad_sats : 1;
        uint16_t bad_VZ : 1;
        uint16_t bad_horiz_drift : 1;
        uint16_t bad_hdop : 1;
        uint16_t bad_vert_vel : 1;
        uint16_t bad_fix : 1;
        uint16_t bad_horiz_vel : 1;
        uint16_t bad_vAcc : 1;
    } flags;
    uint16_t value;
};




struct ekf_timing {
    uint32_t count;
    float dtIMUavg_min;
    float dtIMUavg_max;
    float dtEKFavg_min;
    float dtEKFavg_max;
    float delAngDT_max;
    float delAngDT_min;
    float delVelDT_max;
    float delVelDT_min;
};
# 29 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 1



# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/RangeFinder.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/RangeFinder.h"
       
# 29 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/RangeFinder.h"
class AP_RangeFinder_Backend;

class RangeFinder
{
    friend class AP_RangeFinder_Backend;

public:
    static RangeFinder create(AP_SerialManager &_serial_manager,
                              enum Rotation orientation_default)
    {
        return RangeFinder(_serial_manager, orientation_default);
    }

    constexpr RangeFinder(RangeFinder &&other) = default;


    RangeFinder(const RangeFinder &other) = delete;
    RangeFinder &operator=(const RangeFinder&) = delete;


    enum RangeFinder_Type {
        RangeFinder_TYPE_NONE = 0,
        RangeFinder_TYPE_ANALOG = 1,
        RangeFinder_TYPE_MBI2C = 2,
        RangeFinder_TYPE_PLI2C = 3,
        RangeFinder_TYPE_PX4 = 4,
        RangeFinder_TYPE_PX4_PWM= 5,
        RangeFinder_TYPE_BBB_PRU= 6,
        RangeFinder_TYPE_LWI2C = 7,
        RangeFinder_TYPE_LWSER = 8,
        RangeFinder_TYPE_BEBOP = 9,
        RangeFinder_TYPE_MAVLink = 10,
        RangeFinder_TYPE_ULANDING= 11,
        RangeFinder_TYPE_LEDDARONE = 12,
        RangeFinder_TYPE_MBSER = 13,
        RangeFinder_TYPE_TRI2C = 14,
        RangeFinder_TYPE_PLI2CV3= 15,
        RangeFinder_TYPE_VL53L0X = 16
    };

    enum RangeFinder_Function {
        FUNCTION_LINEAR = 0,
        FUNCTION_INVERTED = 1,
        FUNCTION_HYPERBOLA = 2
    };

    enum RangeFinder_Status {
        RangeFinder_NotConnected = 0,
        RangeFinder_NoData,
        RangeFinder_OutOfRangeLow,
        RangeFinder_OutOfRangeHigh,
        RangeFinder_Good
    };


    struct RangeFinder_State {
        uint8_t instance;
        uint16_t distance_cm;
        uint16_t voltage_mv;

        enum RangeFinder_Status status;
        uint8_t range_valid_count;
        bool pre_arm_check;
        uint16_t pre_arm_distance_min;
        uint16_t pre_arm_distance_max;

        AP_Int8 type;
        AP_Int8 pin;
        AP_Int8 ratiometric;
        AP_Int8 stop_pin;
        AP_Int16 settle_time_ms;
        AP_Float scaling;
        AP_Float offset;
        AP_Int8 function;
        AP_Int16 min_distance_cm;
        AP_Int16 max_distance_cm;
        AP_Int8 ground_clearance_cm;
        AP_Int8 address;
        AP_Vector3f pos_offset;
        AP_Int8 orientation;
    };

    AP_Int16 _powersave_range;


    static const struct AP_Param::GroupInfo var_info[];


    uint8_t num_sensors(void) const {
        return num_instances;
    }


    void init(void);



    void update(void);


    void handle_msg(mavlink_message_t *msg);


    bool has_orientation(enum Rotation orientation) const;


    AP_RangeFinder_Backend *find_instance(enum Rotation orientation) const;

    AP_RangeFinder_Backend *get_backend(uint8_t id) const;



    uint16_t distance_cm_orient(enum Rotation orientation) const;
    uint16_t voltage_mv_orient(enum Rotation orientation) const;
    int16_t max_distance_cm_orient(enum Rotation orientation) const;
    int16_t min_distance_cm_orient(enum Rotation orientation) const;
    int16_t ground_clearance_cm_orient(enum Rotation orientation) const;
    MAV_DISTANCE_SENSOR get_mav_distance_sensor_type_orient(enum Rotation orientation) const;
    RangeFinder_Status status_orient(enum Rotation orientation) const;
    bool has_data_orient(enum Rotation orientation) const;
    uint8_t range_valid_count_orient(enum Rotation orientation) const;
    const Vector3f &get_pos_offset_orient(enum Rotation orientation) const;





    void set_estimated_terrain_height(float height) {
        estimated_terrain_height = height;
    }






    bool pre_arm_check() const;


private:
    RangeFinder(AP_SerialManager &_serial_manager, enum Rotation orientation_default);

    RangeFinder_State state[2];
    AP_RangeFinder_Backend *drivers[2];
    uint8_t num_instances:3;
    float estimated_terrain_height;
    AP_SerialManager &serial_manager;
    Vector3f pos_offset_zero;

    void detect_instance(uint8_t instance);
    void update_instance(uint8_t instance);

    bool _add_backend(AP_RangeFinder_Backend *driver);
};
# 4 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 2
# 33 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h" 2

class NavEKF2_core;
class AP_AHRS;

class NavEKF2 {
    friend class NavEKF2_core;

public:
    static NavEKF2 create(const AP_AHRS *ahrs,
                          AP_Baro &baro,
                          const RangeFinder &rng) {
        return NavEKF2{ahrs, baro, rng};
    }

    constexpr NavEKF2(NavEKF2 &&other) = default;


    NavEKF2(const NavEKF2 &other) = delete;
    NavEKF2 &operator=(const NavEKF2&) = delete;

    static const struct AP_Param::GroupInfo var_info[];


    uint8_t activeCores(void) const {
        return num_cores;
    }


    bool InitialiseFilter(void);


    void UpdateFilter(void);


    void check_log_write(void);


    bool healthy(void) const;



    int8_t getPrimaryCoreIndex(void) const;



    int8_t getPrimaryCoreIMUIndex(void) const;





    bool getPosNE(int8_t instance, Vector2f &posNE);





    bool getPosD(int8_t instance, float &posD);



    void getVelNED(int8_t instance, Vector3f &vel);





    float getPosDownDerivative(int8_t instance);


    void getAccelNED(Vector3f &accelNED) const;



    void getGyroBias(int8_t instance, Vector3f &gyroBias);



    void getGyroScaleErrorPercentage(int8_t instance, Vector3f &gyroScale);



    void getTiltError(int8_t instance, float &ang);


    void resetGyroBias(void);






    bool resetHeightDatum(void);







    uint8_t setInhibitGPS(void);



    void setInhibitGpsVertVelUse(const bool varIn) { inhibitGpsVertVelUse = varIn; };



    void getEkfControlLimits(float &ekfGndSpdLimit, float &ekfNavVelGainScaler) const;



    void getAccelZBias(int8_t instance, float &zbias);



    void getWind(int8_t instance, Vector3f &wind);



    void getMagNED(int8_t instance, Vector3f &magNED);



    void getMagXYZ(int8_t instance, Vector3f &magXYZ);



    uint8_t getActiveMag(int8_t instance);



    bool getMagOffsets(uint8_t mag_idx, Vector3f &magOffsets) const;





    bool getLLH(struct Location &loc) const;





    bool getOriginLLH(int8_t instance, struct Location &loc) const;





    bool setOriginLLH(const Location &loc);



    bool getHAGL(float &HAGL) const;



    void getEulerAngles(int8_t instance, Vector3f &eulers);


    void getRotationBodyToNED(Matrix3f &mat) const;


    void getQuaternion(int8_t instance, Quaternion &quat) const;



    void getInnovations(int8_t index, Vector3f &velInnov, Vector3f &posInnov, Vector3f &magInnov, float &tasInnov, float &yawInnov);


    void getOutputTrackingError(int8_t instance, Vector3f &error) const;



    void getVariances(int8_t instance, float &velVar, float &posVar, float &hgtVar, Vector3f &magVar, float &tasVar, Vector2f &offset);



    bool use_compass(void) const;
# 221 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h"
    void writeOptFlowMeas(uint8_t &rawFlowQuality, Vector2f &rawFlowRates, Vector2f &rawGyroRates, uint32_t &msecFlowMeas, const Vector3f &posOffset);



    void getFlowDebug(int8_t instance, float &varFlow, float &gndOffset, float &flowInnovX, float &flowInnovY, float &auxInnov, float &HAGL, float &rngInnov, float &range, float &gndOffsetErr);
# 238 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h"
    bool getRangeBeaconDebug(int8_t instance, uint8_t &ID, float &rng, float &innov, float &innovVar, float &testRatio, Vector3f &beaconPosNED, float &offsetHigh, float &offsetLow);



    void setTakeoffExpected(bool val);



    void setTouchdownExpected(bool val);




    void setTerrainHgtStable(bool val);
# 265 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h"
    void getFilterFaults(int8_t instance, uint16_t &faults);
# 279 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF2/AP_NavEKF2.h"
    void getFilterTimeouts(int8_t instance, uint8_t &timeouts);





    void getFilterGpsStatus(int8_t instance, nav_gps_status &faults);





    void getFilterStatus(int8_t instance, nav_filter_status &status);


    void send_status_report(mavlink_channel_t chan);




    bool getHeightControlLimit(float &height) const;



    uint32_t getLastYawResetAngle(float &yawAngDelta);



    uint32_t getLastPosNorthEastReset(Vector2f &posDelta);



    uint32_t getLastVelNorthEastReset(Vector2f &vel) const;



    uint32_t getLastPosDownReset(float &posDelta);


    const char *prearm_failure_reason(void) const;


    void set_baro_alt_noise(float noise) { _baroAltNoise.set_and_save(noise); };


    void set_enable(bool enable) { _enable.set(enable); }


    bool have_ekf_logging(void) const { return logging.enabled && _logging_mask != 0; }


    void getTimingStatistics(int8_t instance, struct ekf_timing &timing);

private:
    NavEKF2(const AP_AHRS *ahrs, AP_Baro &baro, const RangeFinder &rng);

    uint8_t num_cores;
    uint8_t primary;
    NavEKF2_core *core = nullptr;
    const AP_AHRS *_ahrs;
    AP_Baro &_baro;
    const RangeFinder &_rng;

    uint32_t _frameTimeUsec;
    uint8_t _framesPerPrediction;


    AP_Int8 _enable;
    AP_Float _gpsHorizVelNoise;
    AP_Float _gpsVertVelNoise;
    AP_Float _gpsHorizPosNoise;
    AP_Float _baroAltNoise;
    AP_Float _magNoise;
    AP_Float _easNoise;
    AP_Float _windVelProcessNoise;
    AP_Float _wndVarHgtRateScale;
    AP_Float _magEarthProcessNoise;
    AP_Float _magBodyProcessNoise;
    AP_Float _gyrNoise;
    AP_Float _accNoise;
    AP_Float _gyroBiasProcessNoise;
    AP_Float _accelBiasProcessNoise;
    AP_Int16 _gpsDelay_ms;
    AP_Int16 _hgtDelay_ms;
    AP_Int8 _fusionModeGPS;
    AP_Int16 _gpsVelInnovGate;
    AP_Int16 _gpsPosInnovGate;
    AP_Int16 _hgtInnovGate;
    AP_Int16 _magInnovGate;
    AP_Int16 _tasInnovGate;
    AP_Int8 _magCal;
    AP_Int8 _gpsGlitchRadiusMax;
    AP_Float _flowNoise;
    AP_Int16 _flowInnovGate;
    AP_Int8 _flowDelay_ms;
    AP_Int16 _rngInnovGate;
    AP_Float _maxFlowRate;
    AP_Int8 _altSource;
    AP_Float _gyroScaleProcessNoise;
    AP_Float _rngNoise;
    AP_Int8 _gpsCheck;
    AP_Int8 _imuMask;
    AP_Int16 _gpsCheckScaler;
    AP_Float _noaidHorizNoise;
    AP_Int8 _logging_mask;
    AP_Float _yawNoise;
    AP_Int16 _yawInnovGate;
    AP_Int8 _tauVelPosOutput;
    AP_Int8 _useRngSwHgt;
    AP_Float _terrGradMax;
    AP_Float _rngBcnNoise;
    AP_Int16 _rngBcnInnovGate;
    AP_Int8 _rngBcnDelay_ms;
    AP_Float _useRngSwSpd;
    AP_Int8 _magMask;
    AP_Int8 _originHgtMode;


    const float gpsNEVelVarAccScale;
    const float gpsDVelVarAccScale;
    const float gpsPosVarAccScale;
    const uint16_t magDelay_ms;
    const uint16_t tasDelay_ms;
    const uint16_t tiltDriftTimeMax_ms;
    const uint16_t posRetryTimeUseVel_ms;
    const uint16_t posRetryTimeNoVel_ms;
    const uint16_t hgtRetryTimeMode0_ms;
    const uint16_t hgtRetryTimeMode12_ms;
    const uint16_t tasRetryTime_ms;
    const uint32_t magFailTimeLimit_ms;
    const float magVarRateScale;
    const float gyroBiasNoiseScaler;
    const uint16_t hgtAvg_ms;
    const uint16_t betaAvg_ms;
    const float covTimeStepMax;
    const float covDelAngMax;
    const float DCM33FlowMin;
    const float fScaleFactorPnoise;
    const uint8_t flowTimeDeltaAvg_ms;
    const uint32_t flowIntervalMax_ms;
    const uint16_t gndEffectTimeout_ms;
    const float gndEffectBaroScaler;
    const uint8_t gndGradientSigma;
    const uint8_t fusionTimeStep_ms;

    struct {
        bool enabled:1;
        bool log_compass:1;
        bool log_gps:1;
        bool log_baro:1;
        bool log_imu:1;
    } logging;


    uint64_t imuSampleTime_us;

    struct {
        uint32_t last_function_call;
        bool core_changed;
        uint32_t last_primary_change;
        float core_delta;
    } yaw_reset_data;

    struct {
        uint32_t last_function_call;
        bool core_changed;
        uint32_t last_primary_change;
        Vector2f core_delta;
    } pos_reset_data;

    struct {
        uint32_t last_function_call;
        bool core_changed;
        uint32_t last_primary_change;
        float core_delta;
    } pos_down_reset_data;

    bool runCoreSelection;

    bool inhibitGpsVertVelUse;




    void updateLaneSwitchYawResetData(uint8_t new_primary, uint8_t old_primary);




    void updateLaneSwitchPosResetData(uint8_t new_primary, uint8_t old_primary);




    void updateLaneSwitchPosDownResetData(uint8_t new_primary, uint8_t old_primary);
};
# 33 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_NavEKF.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
       
# 29 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 1
# 30 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h" 2

class NavEKF3_core;
class AP_AHRS;

class NavEKF3 {
    friend class NavEKF3_core;

public:
    static NavEKF3 create(const AP_AHRS *ahrs,
                          AP_Baro &baro,
                          const RangeFinder &rng) {
        return NavEKF3{ahrs, baro, rng};
    }

    constexpr NavEKF3(NavEKF3 &&other) = default;


    NavEKF3(const NavEKF3 &other) = delete;
    NavEKF3 &operator=(const NavEKF3&) = delete;

    static const struct AP_Param::GroupInfo var_info[];


    uint8_t activeCores(void) const {
        return num_cores;
    }


    bool InitialiseFilter(void);


    void UpdateFilter(void);


    void check_log_write(void);


    bool healthy(void) const;



    int8_t getPrimaryCoreIndex(void) const;



    int8_t getPrimaryCoreIMUIndex(void) const;





    bool getPosNE(int8_t instance, Vector2f &posNE);





    bool getPosD(int8_t instance, float &posD);



    void getVelNED(int8_t instance, Vector3f &vel);





    float getPosDownDerivative(int8_t instance);


    void getAccelNED(Vector3f &accelNED) const;



    void getGyroBias(int8_t instance, Vector3f &gyroBias);



    void getAccelBias(int8_t instance, Vector3f &accelBias);



    void getTiltError(int8_t instance, float &ang);


    void resetGyroBias(void);






    bool resetHeightDatum(void);





    uint8_t setInhibitGPS(void);



    void setInhibitGpsVertVelUse(const bool varIn) { inhibitGpsVertVelUse = varIn; };



    void getEkfControlLimits(float &ekfGndSpdLimit, float &ekfNavVelGainScaler) const;



    void getWind(int8_t instance, Vector3f &wind);



    void getMagNED(int8_t instance, Vector3f &magNED);



    void getMagXYZ(int8_t instance, Vector3f &magXYZ);



    uint8_t getActiveMag(int8_t instance);



    bool getMagOffsets(uint8_t mag_idx, Vector3f &magOffsets) const;





    bool getLLH(struct Location &loc) const;





    bool getOriginLLH(int8_t instance, struct Location &loc) const;





    bool setOriginLLH(const Location &loc);



    bool getHAGL(float &HAGL) const;



    void getEulerAngles(int8_t instance, Vector3f &eulers);


    void getRotationBodyToNED(Matrix3f &mat) const;


    void getQuaternion(int8_t instance, Quaternion &quat) const;



    void getInnovations(int8_t index, Vector3f &velInnov, Vector3f &posInnov, Vector3f &magInnov, float &tasInnov, float &yawInnov);


    void getOutputTrackingError(int8_t instance, Vector3f &error) const;



    void getVariances(int8_t instance, float &velVar, float &posVar, float &hgtVar, Vector3f &magVar, float &tasVar, Vector2f &offset);


    void getStateVariances(int8_t instance, float stateVar[24]);



    bool use_compass(void) const;
# 215 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    void writeOptFlowMeas(uint8_t &rawFlowQuality, Vector2f &rawFlowRates, Vector2f &rawGyroRates, uint32_t &msecFlowMeas, const Vector3f &posOffset);
# 227 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    void writeBodyFrameOdom(float quality, const Vector3f &delPos, const Vector3f &delAng, float delTime, uint32_t timeStamp_ms, const Vector3f &posOffset);
# 238 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    void writeWheelOdom(float delAng, float delTime, uint32_t timeStamp_ms, const Vector3f &posOffset, float radius);
# 248 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    uint32_t getBodyFrameOdomDebug(int8_t instance, Vector3f &velInnov, Vector3f &velInnovVar);



    void getFlowDebug(int8_t instance, float &varFlow, float &gndOffset, float &flowInnovX, float &flowInnovY, float &auxInnov, float &HAGL, float &rngInnov, float &range, float &gndOffsetErr);
# 268 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    bool getRangeBeaconDebug(int8_t instance, uint8_t &ID, float &rng, float &innov, float &innovVar, float &testRatio, Vector3f &beaconPosNED,
                             float &offsetHigh, float &offsetLow, Vector3f &posNED);



    void setTakeoffExpected(bool val);



    void setTouchdownExpected(bool val);




    void setTerrainHgtStable(bool val);
# 296 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    void getFilterFaults(int8_t instance, uint16_t &faults);
# 310 "/Users/yu/repos/ardupilot/libraries/AP_NavEKF3/AP_NavEKF3.h"
    void getFilterTimeouts(int8_t instance, uint8_t &timeouts);





    void getFilterGpsStatus(int8_t instance, nav_gps_status &faults);





    void getFilterStatus(int8_t instance, nav_filter_status &status);


    void send_status_report(mavlink_channel_t chan);




    bool getHeightControlLimit(float &height) const;



    uint32_t getLastYawResetAngle(float &yawAngDelta);



    uint32_t getLastPosNorthEastReset(Vector2f &posDelta);



    uint32_t getLastVelNorthEastReset(Vector2f &vel) const;



    uint32_t getLastPosDownReset(float &posDelta);


    const char *prearm_failure_reason(void) const;


    void set_baro_alt_noise(float noise) { _baroAltNoise.set_and_save(noise); };


    void set_enable(bool enable) { _enable.set(enable); }


    bool have_ekf_logging(void) const { return logging.enabled && _logging_mask != 0; }


    void getTimingStatistics(int8_t instance, struct ekf_timing &timing);

private:
    NavEKF3(const AP_AHRS *ahrs, AP_Baro &baro, const RangeFinder &rng);

    uint8_t num_cores;
    uint8_t primary;
    NavEKF3_core *core = nullptr;
    const AP_AHRS *_ahrs;
    AP_Baro &_baro;
    const RangeFinder &_rng;

    uint32_t _frameTimeUsec;
    uint8_t _framesPerPrediction;


    AP_Int8 _enable;
    AP_Float _gpsHorizVelNoise;
    AP_Float _gpsVertVelNoise;
    AP_Float _gpsHorizPosNoise;
    AP_Float _baroAltNoise;
    AP_Float _magNoise;
    AP_Float _easNoise;
    AP_Float _windVelProcessNoise;
    AP_Float _wndVarHgtRateScale;
    AP_Float _magEarthProcessNoise;
    AP_Float _magBodyProcessNoise;
    AP_Float _gyrNoise;
    AP_Float _accNoise;
    AP_Float _gyroBiasProcessNoise;
    AP_Float _accelBiasProcessNoise;
    AP_Int16 _hgtDelay_ms;
    AP_Int8 _fusionModeGPS;
    AP_Int16 _gpsVelInnovGate;
    AP_Int16 _gpsPosInnovGate;
    AP_Int16 _hgtInnovGate;
    AP_Int16 _magInnovGate;
    AP_Int16 _tasInnovGate;
    AP_Int8 _magCal;
    AP_Int8 _gpsGlitchRadiusMax;
    AP_Float _flowNoise;
    AP_Int16 _flowInnovGate;
    AP_Int8 _flowDelay_ms;
    AP_Int16 _rngInnovGate;
    AP_Float _maxFlowRate;
    AP_Int8 _altSource;
    AP_Float _rngNoise;
    AP_Int8 _gpsCheck;
    AP_Int8 _imuMask;
    AP_Int16 _gpsCheckScaler;
    AP_Float _noaidHorizNoise;
    AP_Int8 _logging_mask;
    AP_Float _yawNoise;
    AP_Int16 _yawInnovGate;
    AP_Int8 _tauVelPosOutput;
    AP_Int8 _useRngSwHgt;
    AP_Float _terrGradMax;
    AP_Float _rngBcnNoise;
    AP_Int16 _rngBcnInnovGate;
    AP_Int8 _rngBcnDelay_ms;
    AP_Float _useRngSwSpd;
    AP_Float _accBiasLim;
    AP_Int8 _magMask;
    AP_Int8 _originHgtMode;
    AP_Float _visOdmVelErrMax;
    AP_Float _visOdmVelErrMin;
    AP_Float _wencOdmVelErr;



    const float gpsNEVelVarAccScale;
    const float gpsDVelVarAccScale;
    const float gpsPosVarAccScale;
    const uint16_t magDelay_ms;
    const uint16_t tasDelay_ms;
    const uint16_t tiltDriftTimeMax_ms;
    const uint16_t posRetryTimeUseVel_ms;
    const uint16_t posRetryTimeNoVel_ms;
    const uint16_t hgtRetryTimeMode0_ms;
    const uint16_t hgtRetryTimeMode12_ms;
    const uint16_t tasRetryTime_ms;
    const uint32_t magFailTimeLimit_ms;
    const float magVarRateScale;
    const float gyroBiasNoiseScaler;
    const uint16_t hgtAvg_ms;
    const uint16_t betaAvg_ms;
    const float covTimeStepMax;
    const float covDelAngMax;
    const float DCM33FlowMin;
    const float fScaleFactorPnoise;
    const uint8_t flowTimeDeltaAvg_ms;
    const uint32_t flowIntervalMax_ms;
    const uint16_t gndEffectTimeout_ms;
    const float gndEffectBaroScaler;
    const uint8_t gndGradientSigma;
    const uint16_t fusionTimeStep_ms;
    const uint8_t sensorIntervalMin_ms;

    struct {
        bool enabled:1;
        bool log_compass:1;
        bool log_gps:1;
        bool log_baro:1;
        bool log_imu:1;
    } logging;


    uint64_t imuSampleTime_us;

    struct {
        uint32_t last_function_call;
        bool core_changed;
        uint32_t last_primary_change;
        float core_delta;
    } yaw_reset_data;

    struct {
        uint32_t last_function_call;
        bool core_changed;
        uint32_t last_primary_change;
        Vector2f core_delta;
    } pos_reset_data;

    struct {
        uint32_t last_function_call;
        bool core_changed;
        uint32_t last_primary_change;
        float core_delta;
    } pos_down_reset_data;

    bool runCoreSelection;
    bool coreSetupRequired[7];
    uint8_t coreImuIndex[7];

    bool inhibitGpsVertVelUse;




    void updateLaneSwitchYawResetData(uint8_t new_primary, uint8_t old_primary);




    void updateLaneSwitchPosResetData(uint8_t new_primary, uint8_t old_primary);




    void updateLaneSwitchPosDownResetData(uint8_t new_primary, uint8_t old_primary);
};
# 34 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_NavEKF.h" 2





class AP_AHRS_NavEKF : public AP_AHRS_DCM {
public:
    enum Flags {
        FLAG_NONE = 0,
        FLAG_ALWAYS_USE_EKF = 0x1,
    };

    static AP_AHRS_NavEKF create(AP_InertialSensor &ins,
                                 AP_Baro &baro,
                                 AP_GPS &gps,
                                 NavEKF2 &_EKF2, NavEKF3 &_EKF3,
                                 Flags flags = FLAG_NONE) {
        return AP_AHRS_NavEKF{ins, baro, gps, _EKF2, _EKF3, flags};
    }

    constexpr AP_AHRS_NavEKF(AP_AHRS_NavEKF &&other) = default;


    AP_AHRS_NavEKF(const AP_AHRS_NavEKF &other) = delete;
    AP_AHRS_NavEKF &operator=(const AP_AHRS_NavEKF&) = delete;


    const Vector3f &get_gyro(void) const override;
    const Matrix3f &get_rotation_body_to_ned(void) const override;


    const Vector3f &get_gyro_drift(void) const override;



    void reset_gyro_drift() override;

    void update(bool skip_ins_update=false) override;
    void reset(bool recover_eulers = false) override;


    void reset_attitude(const float &roll, const float &pitch, const float &yaw) override;


    bool get_position(struct Location &loc) const override;


    bool get_hagl(float &hagl) const;


    float get_error_rp() const override;
    float get_error_yaw() const override;


    Vector3f wind_estimate() override;



    bool airspeed_estimate(float *airspeed_ret) const override;


    bool use_compass() override;


    NavEKF2 &get_NavEKF2(void) {
        return EKF2;
    }
    const NavEKF2 &get_NavEKF2_const(void) const {
        return EKF2;
    }

    NavEKF3 &get_NavEKF3(void) {
        return EKF3;
    }
    const NavEKF3 &get_NavEKF3_const(void) const {
        return EKF3;
    }


    bool get_secondary_attitude(Vector3f &eulers) override;


    bool get_secondary_quaternion(Quaternion &quat) override;


    bool get_secondary_position(struct Location &loc) override;


    Vector2f groundspeed_vector() override;

    const Vector3f &get_accel_ef(uint8_t i) const override;
    const Vector3f &get_accel_ef() const override;


    void getCorrectedDeltaVelocityNED(Vector3f& ret, float& dt) const override;


    const Vector3f &get_accel_ef_blended() const override;


    void set_home(const Location &loc) override;




    bool set_origin(const Location &loc) override;


    bool get_origin(Location &ret) const override;

    bool have_inertial_nav() const override;

    bool get_velocity_NED(Vector3f &vec) const override;



    bool get_relative_position_NED_home(Vector3f &vec) const override;
    bool get_relative_position_NED_origin(Vector3f &vec) const override;



    bool get_relative_position_NE_home(Vector2f &posNE) const override;
    bool get_relative_position_NE_origin(Vector2f &posNE) const override;



    void get_relative_position_D_home(float &posD) const override;
    bool get_relative_position_D_origin(float &posD) const override;



    bool get_vert_pos_rate(float &velocity);


    void writeOptFlowMeas(uint8_t &rawFlowQuality, Vector2f &rawFlowRates, Vector2f &rawGyroRates, uint32_t &msecFlowMeas, const Vector3f &posOffset);


    void writeBodyFrameOdom(float quality, const Vector3f &delPos, const Vector3f &delAng, float delTime, uint32_t timeStamp_ms, const Vector3f &posOffset);


    uint8_t setInhibitGPS(void);


    void getEkfControlLimits(float &ekfGndSpdLimit, float &ekfNavVelGainScaler);

    void set_ekf_use(bool setting);


    bool healthy() const override;


    bool initialised() const override;


    bool get_filter_status(nav_filter_status &status) const;



    bool getMagOffsets(uint8_t mag_idx, Vector3f &magOffsets);


    const char *prearm_failure_reason(void) const override;



    uint32_t getLastYawResetAngle(float &yawAng) const override;



    uint32_t getLastPosNorthEastReset(Vector2f &pos) const override;



    uint32_t getLastVelNorthEastReset(Vector2f &vel) const override;



    uint32_t getLastPosDownReset(float &posDelta) const override;






    bool resetHeightDatum() override;


    void send_ekf_status_report(mavlink_channel_t chan);




    bool get_hgt_ctrl_limit(float &limit) const;



    bool get_location(struct Location &loc) const;





    bool get_variances(float &velVar, float &posVar, float &hgtVar, Vector3f &magVar, float &tasVar, Vector2f &offset) const override;


    bool get_mag_field_NED(Vector3f& ret) const;


    bool get_mag_field_correction(Vector3f &ret) const override;

    void setTakeoffExpected(bool val);
    void setTouchdownExpected(bool val);

    bool getGpsGlitchStatus();


    void force_ekf_start(void) { _force_ekf = true; }


    bool have_ekf_logging(void) const override;


    uint8_t get_primary_accel_index(void) const override;


    uint8_t get_primary_gyro_index(void) const override;

private:
    enum EKF_TYPE {EKF_TYPE_NONE=0,
                   EKF_TYPE3=3,
                   EKF_TYPE2=2

                   ,EKF_TYPE_SITL=10

    };
    EKF_TYPE active_EKF_type(void) const;

    bool always_use_EKF() const {
        return _ekf_flags & FLAG_ALWAYS_USE_EKF;
    }

    NavEKF2 &EKF2;
    NavEKF3 &EKF3;
    bool _ekf2_started;
    bool _ekf3_started;
    bool _force_ekf;
    Matrix3f _dcm_matrix;
    Vector3f _dcm_attitude;
    Vector3f _gyro_drift;
    Vector3f _gyro_estimate;
    Vector3f _accel_ef_ekf[3];
    Vector3f _accel_ef_ekf_blended;
    const uint16_t startup_delay_ms = 1000;
    uint32_t start_time_ms = 0;
    Flags _ekf_flags;

    uint8_t ekf_type(void) const;
    void update_DCM(bool skip_ins_update);
    void update_EKF2(void);
    void update_EKF3(void);


    uint8_t get_primary_IMU_index(void) const;


    SITL::SITL *_sitl;
    uint32_t _last_body_odm_update_ms = 0;
    void update_SITL(void);


private:

    AP_AHRS_NavEKF(AP_InertialSensor &ins, AP_Baro &baro, AP_GPS &gps,
                   NavEKF2 &_EKF2, NavEKF3 &_EKF3, Flags flags = FLAG_NONE);
};
# 670 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS.h" 2
# 14 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Mission/AP_Mission.h" 1
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Mission/AP_Mission.h"
       
# 45 "/Users/yu/repos/ardupilot/libraries/AP_Mission/AP_Mission.h"
class AP_Mission {

public:

    struct __attribute__((__packed__)) Jump_Command {
        uint16_t target;
        int16_t num_times;
    };


    struct __attribute__((__packed__)) Conditional_Delay_Command {
        float seconds;
    };


    struct __attribute__((__packed__)) Conditional_Distance_Command {
        float meters;
    };


    struct __attribute__((__packed__)) Yaw_Command {
        float angle_deg;
        float turn_rate_dps;
        int8_t direction;
        uint8_t relative_angle;
    };


    struct __attribute__((__packed__)) Change_Speed_Command {
        uint8_t speed_type;
        float target_ms;
        float throttle_pct;
    };


    struct __attribute__((__packed__)) Set_Relay_Command {
        uint8_t num;
        uint8_t state;
    };


    struct __attribute__((__packed__)) Repeat_Relay_Command {
        uint8_t num;
        int16_t repeat_count;
        float cycle_time;
    };


    struct __attribute__((__packed__)) Set_Servo_Command {
        uint8_t channel;
        uint16_t pwm;
    };


    struct __attribute__((__packed__)) Repeat_Servo_Command {
        uint8_t channel;
        uint16_t pwm;
        int16_t repeat_count;
        float cycle_time;
    };


    struct __attribute__((__packed__)) Mount_Control {
        float pitch;
        float roll;
        float yaw;
    };


    struct __attribute__((__packed__)) Digicam_Configure {
        uint8_t shooting_mode;
        uint16_t shutter_speed;
        uint8_t aperture;
        uint16_t ISO;
        uint8_t exposure_type;
        uint8_t cmd_id;
        float engine_cutoff_time;
    };


    struct __attribute__((__packed__)) Digicam_Control {
        uint8_t session;
        uint8_t zoom_pos;
        int8_t zoom_step;
        uint8_t focus_lock;
        uint8_t shooting_cmd;
        uint8_t cmd_id;
    };


    struct __attribute__((__packed__)) Cam_Trigg_Distance {
        float meters;
    };


    struct __attribute__((__packed__)) Gripper_Command {
        uint8_t num;
        uint8_t action;
    };


    struct __attribute__((__packed__)) Altitude_Wait {
        float altitude;
        float descent_rate;
        uint8_t wiggle_time;
    };


    struct __attribute__((__packed__)) Guided_Limits_Command {

        float alt_min;
        float alt_max;
        float horiz_max;
    };


    struct __attribute__((__packed__)) Do_VTOL_Transition {
        uint8_t target_state;
    };


    struct __attribute__((__packed__)) Navigation_Delay_Command {
        float seconds;
        int8_t hour_utc;
        int8_t min_utc;
        int8_t sec_utc;
    };


    struct __attribute__((__packed__)) Do_Engine_Control {
        bool start_control;
        bool cold_start;
        uint16_t height_delay_cm;
    };


    struct __attribute__((__packed__)) Set_Yaw_Speed {
        float angle_deg;
        float speed;
        uint8_t relative_angle;
    };


    struct __attribute__((__packed__)) Winch_Command {
        uint8_t num;
        uint8_t action;
        float release_length;
        float release_rate;
    };

    union __attribute__((__packed__)) Content {

        Jump_Command jump;


        Conditional_Delay_Command delay;


        Conditional_Distance_Command distance;


        Yaw_Command yaw;


        Change_Speed_Command speed;


        Set_Relay_Command relay;


        Repeat_Relay_Command repeat_relay;


        Set_Servo_Command servo;


        Repeat_Servo_Command repeat_servo;


        Mount_Control mount_control;


        Digicam_Configure digicam_configure;


        Digicam_Control digicam_control;


        Cam_Trigg_Distance cam_trigg_dist;


        Gripper_Command gripper;


        Guided_Limits_Command guided_limits;


        Altitude_Wait altitude_wait;


        Do_VTOL_Transition do_vtol_transition;


        Do_Engine_Control do_engine_control;


        Navigation_Delay_Command nav_delay;


        Set_Yaw_Speed set_yaw_speed;


        Winch_Command winch;


        Location location;



        uint8_t bytes[12];
    };


    struct Mission_Command {
        uint16_t index;
        uint16_t id;
        uint16_t p1;
        Content content;


        const char *type() const;
    };



    typedef Functor<bool, const Mission_Command&> mission_cmd_fn_t;
    typedef Functor<void> mission_complete_fn_t;


    enum mission_state {
        MISSION_STOPPED=0,
        MISSION_RUNNING=1,
        MISSION_COMPLETE=2
    };

    static AP_Mission create(AP_AHRS &ahrs,
                             mission_cmd_fn_t cmd_start_fn,
                             mission_cmd_fn_t cmd_verify_fn,
                             mission_complete_fn_t mission_complete_fn) {
        return AP_Mission(ahrs, cmd_start_fn, cmd_verify_fn, mission_complete_fn);
    }

    constexpr AP_Mission(AP_Mission &&other) = default;


    AP_Mission(const AP_Mission &other) = delete;
    AP_Mission &operator=(const AP_Mission&) = delete;






    void init();


    mission_state state() const { return _flags.state; }



    uint16_t num_commands() const { return _cmd_total; }


    uint16_t num_commands_max() const;



    void start();


    void stop();



    void resume();


    void start_or_resume();


    bool starts_with_takeoff_cmd();


    void reset();



    bool clear();


    void truncate(uint16_t index);



    void update();
# 358 "/Users/yu/repos/ardupilot/libraries/AP_Mission/AP_Mission.h"
    bool add_cmd(Mission_Command& cmd);




    bool replace_cmd(uint16_t index, Mission_Command& cmd);


    static bool is_nav_cmd(const Mission_Command& cmd);


    const Mission_Command& get_current_nav_cmd() const { return _nav_cmd; }




    uint16_t get_current_nav_index() const {
        return _nav_cmd.index==65535?0:_nav_cmd.index; }




    uint16_t get_prev_nav_cmd_id() const { return _prev_nav_cmd_id; }




    uint16_t get_prev_nav_cmd_index() const { return _prev_nav_cmd_index; }




    uint16_t get_prev_nav_cmd_with_wp_index() const { return _prev_nav_cmd_wp_index; }




    bool get_next_nav_cmd(uint16_t start_index, Mission_Command& cmd);




    int32_t get_next_ground_course_cd(int32_t default_angle);


    const Mission_Command& get_current_do_cmd() const { return _do_cmd; }


    bool set_current_cmd(uint16_t index);



    bool read_cmd_from_storage(uint16_t index, Mission_Command& cmd) const;




    bool write_cmd_to_storage(uint16_t index, Mission_Command& cmd);



    void write_home_to_storage();



    static MAV_MISSION_RESULT mavlink_to_mission_cmd(const mavlink_mission_item_t& packet, AP_Mission::Mission_Command& cmd);
    static MAV_MISSION_RESULT mavlink_int_to_mission_cmd(const mavlink_mission_item_int_t& packet, AP_Mission::Mission_Command& cmd);



    static MAV_MISSION_RESULT mavlink_cmd_long_to_mission_cmd(const mavlink_command_long_t& packet, AP_Mission::Mission_Command& cmd);



    static bool mission_cmd_to_mavlink(const AP_Mission::Mission_Command& cmd, mavlink_mission_item_t& packet);
    static bool mission_cmd_to_mavlink_int(const AP_Mission::Mission_Command& cmd, mavlink_mission_item_int_t& packet);


    uint32_t last_change_time_ms(void) const { return _last_change_time_ms; }




    uint16_t get_landing_sequence_start();




    bool jump_to_landing_sequence(void);


    static const struct AP_Param::GroupInfo var_info[];

private:
    static StorageAccess _storage;

    struct Mission_Flags {
        mission_state state;
        uint8_t nav_cmd_loaded : 1;
        uint8_t do_cmd_loaded : 1;
        uint8_t do_cmd_all_done : 1;
    } _flags;

    AP_Mission(AP_AHRS &ahrs, mission_cmd_fn_t cmd_start_fn, mission_cmd_fn_t cmd_verify_fn, mission_complete_fn_t mission_complete_fn) :
        _ahrs(ahrs),
        _cmd_start_fn(cmd_start_fn),
        _cmd_verify_fn(cmd_verify_fn),
        _mission_complete_fn(mission_complete_fn),
        _prev_nav_cmd_id(0),
        _prev_nav_cmd_index(65535),
        _prev_nav_cmd_wp_index(65535),
        _last_change_time_ms(0)
    {

        AP_Param::setup_object_defaults(this, var_info);


        _nav_cmd.index = 65535;
        _do_cmd.index = 65535;


        _flags.state = MISSION_STOPPED;
        _flags.nav_cmd_loaded = false;
        _flags.do_cmd_loaded = false;
    }







    void complete();





    bool advance_current_nav_cmd();




    void advance_current_do_cmd();





    bool get_next_cmd(uint16_t start_index, Mission_Command& cmd, bool increment_jump_num_times_if_found);





    bool get_next_do_cmd(uint16_t start_index, Mission_Command& cmd);





    void init_jump_tracking();



    int16_t get_jump_times_run(const Mission_Command& cmd);


    void increment_jump_times_run(Mission_Command& cmd);



    void check_eeprom_version();


    const AP_AHRS& _ahrs;


    AP_Int16 _cmd_total;
    AP_Int8 _restart;
    AP_Int16 _options;


    mission_cmd_fn_t _cmd_start_fn;
    mission_cmd_fn_t _cmd_verify_fn;
    mission_complete_fn_t _mission_complete_fn;


    struct Mission_Command _nav_cmd;
    struct Mission_Command _do_cmd;
    uint16_t _prev_nav_cmd_id;
    uint16_t _prev_nav_cmd_index;
    uint16_t _prev_nav_cmd_wp_index;


    struct jump_tracking_struct {
        uint16_t index;
        int16_t num_times_run;
    } _jump_tracking[15];


    uint32_t _last_change_time_ms;
};
# 16 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_BattMonitor/AP_BattMonitor.h" 1
       
# 25 "/Users/yu/repos/ardupilot/libraries/AP_BattMonitor/AP_BattMonitor.h"
class AP_BattMonitor_Backend;
class AP_BattMonitor_Analog;
class AP_BattMonitor_SMBus;
class AP_BattMonitor_SMBus_Solo;
class AP_BattMonitor_SMBus_Maxell;

class AP_BattMonitor
{
    friend class AP_BattMonitor_Backend;
    friend class AP_BattMonitor_Analog;
    friend class AP_BattMonitor_SMBus;
    friend class AP_BattMonitor_SMBus_Solo;
    friend class AP_BattMonitor_SMBus_Maxell;

public:
    static AP_BattMonitor create() { return AP_BattMonitor{}; }

    constexpr AP_BattMonitor(AP_BattMonitor &&other) = default;


    AP_BattMonitor(const AP_BattMonitor &other) = delete;
    AP_BattMonitor &operator=(const AP_BattMonitor&) = delete;


    enum BattMonitor_Type {
        BattMonitor_TYPE_NONE = 0,
        BattMonitor_TYPE_ANALOG_VOLTAGE_ONLY = 3,
        BattMonitor_TYPE_ANALOG_VOLTAGE_AND_CURRENT = 4,
        BattMonitor_TYPE_SOLO = 5,
        BattMonitor_TYPE_BEBOP = 6,
        BattMonitor_TYPE_MAXELL = 7
    };


    enum BattMonitor_LowVoltage_Source {
        BattMonitor_LowVoltageSource_Raw = 0,
        BattMonitor_LowVoltageSource_SagCompensated = 1
    };

    struct cells {
        uint16_t cells[10];
    };


    struct BattMonitor_State {
        uint8_t instance;
        bool healthy;
        bool is_powering_off;
        float voltage;
        float current_amps;
        float current_total_mah;
        uint32_t last_time_micros;
        uint32_t low_voltage_start_ms;
        cells cell_voltages;
        float temperature;
        uint32_t temperature_time;
        float voltage_resting_estimate;
        float resistance;
    };


    uint8_t num_instances(void) const { return _num_instances; }


    void init();


    void read();




    bool healthy(uint8_t instance) const;
    bool healthy() const { return healthy(0); }

    bool is_powering_off(uint8_t instance) const;
    bool is_powering_off() const { return is_powering_off(0); }


    bool has_current(uint8_t instance) const;
    bool has_current() const { return has_current(0); }


    float voltage(uint8_t instance) const;
    float voltage() const { return voltage(0); }



    float voltage_resting_estimate(uint8_t instance) const;
    float voltage_resting_estimate() const { return voltage_resting_estimate(0); }


    float current_amps(uint8_t instance) const;
    float current_amps() const { return current_amps(0); }


    float current_total_mah(uint8_t instance) const;
    float current_total_mah() const { return current_total_mah(0); }


    virtual uint8_t capacity_remaining_pct(uint8_t instance) const;
    uint8_t capacity_remaining_pct() const { return capacity_remaining_pct(0); }


    int32_t pack_capacity_mah(uint8_t instance) const;
    int32_t pack_capacity_mah() const { return pack_capacity_mah(0); }


    bool exhausted(uint8_t instance, float low_voltage, float min_capacity_mah);
    bool exhausted(float low_voltage, float min_capacity_mah) { return exhausted(0, low_voltage, min_capacity_mah); }


    enum BattMonitor_Type get_type() { return get_type(0); }
    enum BattMonitor_Type get_type(uint8_t instance) { return (enum BattMonitor_Type)_monitoring[instance].get(); }


    void set_monitoring(uint8_t instance, uint8_t mon) { _monitoring[instance].set(mon); }

    bool get_watt_max() { return get_watt_max(0); }
    bool get_watt_max(uint8_t instance) { return _watt_max[instance]; }


    bool overpower_detected() const;
    bool overpower_detected(uint8_t instance) const;


    bool has_cell_voltages() { return has_cell_voltages(0); }
    bool has_cell_voltages(const uint8_t instance) const;
    const cells & get_cell_voltages() const { return get_cell_voltages(0); }
    const cells & get_cell_voltages(const uint8_t instance) const;


    bool get_temperature(float &temperature) const { return get_temperature(temperature, 0); };
    bool get_temperature(float &temperature, const uint8_t instance) const;


    float get_resistance() const { return get_resistance(0); }
    float get_resistance(uint8_t instance) const { return state[instance].resistance; }

    static const struct AP_Param::GroupInfo var_info[];

protected:


    AP_Int8 _monitoring[2];
    AP_Int8 _volt_pin[2];
    AP_Int8 _curr_pin[2];
    AP_Float _volt_multiplier[2];
    AP_Float _curr_amp_per_volt[2];
    AP_Float _curr_amp_offset[2];
    AP_Int32 _pack_capacity[2];
    AP_Int16 _watt_max[2];
    AP_Int32 _serial_numbers[2];
    AP_Int8 _low_voltage_timeout;
    AP_Int8 _low_voltage_source;

private:
    AP_BattMonitor();

    BattMonitor_State state[2];
    AP_BattMonitor_Backend *drivers[2];
    uint8_t _num_instances;
};
# 18 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_RPM/AP_RPM.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_RPM/AP_RPM.h"
       
# 25 "/Users/yu/repos/ardupilot/libraries/AP_RPM/AP_RPM.h"
class AP_RPM_Backend;

class AP_RPM
{
    friend class AP_RPM_Backend;

public:
    static AP_RPM create() { return AP_RPM{}; }

    constexpr AP_RPM(AP_RPM &&other) = default;


    AP_RPM(const AP_RPM &other) = delete;
    AP_RPM &operator=(const AP_RPM&) = delete;


    enum RPM_Type {
        RPM_TYPE_NONE = 0,
        RPM_TYPE_PX4_PWM = 1,
        RPM_TYPE_PIN = 2
    };


    struct RPM_State {
        uint8_t instance;
        float rate_rpm;
        uint32_t last_reading_ms;
        float signal_quality;
    };


    AP_Int8 _type[2];
    AP_Int8 _pin[2];
    AP_Float _scaling[2];
    AP_Float _maximum[2];
    AP_Float _minimum[2];
    AP_Float _quality_min[2];

    static const struct AP_Param::GroupInfo var_info[];


    uint8_t num_sensors(void) const {
        return num_instances;
    }


    void init(void);


    void update(void);




    float get_rpm(uint8_t instance) const {
        if (!healthy(instance)) {
            return -1;
        }
        return state[instance].rate_rpm;
    }




    float get_signal_quality(uint8_t instance) const {
        return state[instance].signal_quality;
    }

    bool healthy(uint8_t instance) const;

    bool enabled(uint8_t instance) const;

private:
    AP_RPM();

    RPM_State state[2];
    AP_RPM_Backend *drivers[2];
    uint8_t num_instances:2;

    void detect_instance(uint8_t instance);
    void update_instance(uint8_t instance);
};
# 19 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/DataFlash/LogStructure.h" 1
       
# 17 "/Users/yu/repos/ardupilot/libraries/DataFlash/LogStructure.h"
struct LogStructure {
    uint8_t msg_type;
    uint8_t msg_len;
    const char name[5];
    const char format[16];
    const char labels[64];
    const char units[16];
    const char multipliers[16];
};




struct __attribute__((__packed__)) log_Format {
    uint8_t head1, head2, msgid;;
    uint8_t type;
    uint8_t length;
    char name[4];
    char format[16];
    char labels[64];
};

struct __attribute__((__packed__)) log_Unit {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    char type;
    char unit[64];
};

struct __attribute__((__packed__)) log_Format_Multiplier {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    char type;
    double multiplier;
};

struct __attribute__((__packed__)) log_Format_Units {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t format_type;
    char units[16];
    char multipliers[16];
};

struct UnitStructure {
    const char ID;
    const char unit[64];
};

struct MultiplierStructure {
    const char ID;
    const double multiplier;
};




const struct UnitStructure log_Units[] = {
    { '-', "" },
    { '?', "UNKNOWN" },
    { 'A', "A" },
    { 'd', "deg" },
    { 'b', "B" },
    { 'k', "deg/s" },
    { 'D', "deglatitude" },
    { 'e', "deg/s/s" },
    { 'E', "rad/s" },
    { 'G', "Gauss" },
    { 'h', "degheading" },
    { 'i', "A.s" },

    { 'L', "rad/s/s" },
    { 'm', "m" },
    { 'n', "m/s" },

    { 'o', "m/s/s" },
    { 'O', "degC" },
    { 'S', "satellites" },
    { 's', "s" },
    { 'q', "rpm" },
    { 'r', "rad" },
    { 'U', "deglongitude" },
    { 'u', "ppm" },
    { 'v', "V" },
    { 'P', "Pa" },
    { 'w', "Ohm" },
    { 'z', "Hz" }
};
# 113 "/Users/yu/repos/ardupilot/libraries/DataFlash/LogStructure.h"
const struct MultiplierStructure log_Multipliers[] = {

    { '2', 1e2 },
    { '1', 1e1 },
    { '0', 1e0 },
    { 'A', 1e-1 },
    { 'B', 1e-2 },
    { 'C', 1e-3 },
    { 'D', 1e-4 },
    { 'E', 1e-5 },
    { 'F', 1e-6 },
    { 'G', 1e-7 },

    { '!', 3.6 },
};

struct __attribute__((__packed__)) log_Parameter {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    char name[16];
    float value;
};

struct __attribute__((__packed__)) log_DSF {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint32_t dropped;
    uint8_t internal_errors;
    uint16_t blocks;
    uint32_t bytes;
    uint32_t buf_space_min;
    uint32_t buf_space_max;
    uint32_t buf_space_avg;
};

struct __attribute__((__packed__)) log_GPS {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t status;
    uint32_t gps_week_ms;
    uint16_t gps_week;
    uint8_t num_sats;
    uint16_t hdop;
    int32_t latitude;
    int32_t longitude;
    int32_t altitude;
    float ground_speed;
    float ground_course;
    float vel_z;
    uint8_t used;
};

struct __attribute__((__packed__)) log_GPA {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t vdop;
    uint16_t hacc;
    uint16_t vacc;
    uint16_t sacc;
    uint8_t have_vv;
    uint32_t sample_ms;
    uint16_t delta_ms;
};

struct __attribute__((__packed__)) log_Message {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    char msg[64];
};

struct __attribute__((__packed__)) log_IMU {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float gyro_x, gyro_y, gyro_z;
    float accel_x, accel_y, accel_z;
    uint32_t gyro_error, accel_error;
    float temperature;
    uint8_t gyro_health, accel_health;
    uint16_t gyro_rate, accel_rate;
};

struct __attribute__((__packed__)) log_IMUDT {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float delta_time, delta_vel_dt, delta_ang_dt;
    float delta_ang_x, delta_ang_y, delta_ang_z;
    float delta_vel_x, delta_vel_y, delta_vel_z;
};

struct __attribute__((__packed__)) log_ISBH {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t seqno;
    uint8_t sensor_type;
    uint8_t instance;
    uint16_t multiplier;
    uint16_t sample_count;
    uint64_t sample_us;
    float sample_rate_hz;
};
static_assert(sizeof(log_ISBH) < 256, "log_ISBH is over-size");

struct __attribute__((__packed__)) log_ISBD {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t isb_seqno;
    uint16_t seqno;
    int16_t x[32];
    int16_t y[32];
    int16_t z[32];
};
static_assert(sizeof(log_ISBD) < 256, "log_ISBD is over-size");

struct __attribute__((__packed__)) log_Vibe {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float vibe_x, vibe_y, vibe_z;
    uint32_t clipping_0, clipping_1, clipping_2;
};

struct __attribute__((__packed__)) log_Gimbal1 {
    uint8_t head1, head2, msgid;;
    uint32_t time_ms;
    float delta_time;
    float delta_angles_x;
    float delta_angles_y;
    float delta_angles_z;
    float delta_velocity_x;
    float delta_velocity_y;
    float delta_velocity_z;
    float joint_angles_x;
    float joint_angles_y;
    float joint_angles_z;
};

struct __attribute__((__packed__)) log_Gimbal2 {
    uint8_t head1, head2, msgid;;
    uint32_t time_ms;
    uint8_t est_sta;
    float est_x;
    float est_y;
    float est_z;
    float rate_x;
    float rate_y;
    float rate_z;
    float target_x;
    float target_y;
    float target_z;
};

struct __attribute__((__packed__)) log_Gimbal3 {
    uint8_t head1, head2, msgid;;
    uint32_t time_ms;
    int16_t rl_torque_cmd;
    int16_t el_torque_cmd;
    int16_t az_torque_cmd;
};

struct __attribute__((__packed__)) log_RCIN {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t chan1;
    uint16_t chan2;
    uint16_t chan3;
    uint16_t chan4;
    uint16_t chan5;
    uint16_t chan6;
    uint16_t chan7;
    uint16_t chan8;
    uint16_t chan9;
    uint16_t chan10;
    uint16_t chan11;
    uint16_t chan12;
    uint16_t chan13;
    uint16_t chan14;
};

struct __attribute__((__packed__)) log_RCOUT {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t chan1;
    uint16_t chan2;
    uint16_t chan3;
    uint16_t chan4;
    uint16_t chan5;
    uint16_t chan6;
    uint16_t chan7;
    uint16_t chan8;
    uint16_t chan9;
    uint16_t chan10;
    uint16_t chan11;
    uint16_t chan12;
    uint16_t chan13;
    uint16_t chan14;
};

struct __attribute__((__packed__)) log_RSSI {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float RXRSSI;
};

struct __attribute__((__packed__)) log_BARO {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float altitude;
    float pressure;
    int16_t temperature;
    float climbrate;
    uint32_t sample_time_ms;
    float drift_offset;
    float ground_temp;
};

struct __attribute__((__packed__)) log_AHRS {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t roll;
    int16_t pitch;
    uint16_t yaw;
    float alt;
    int32_t lat;
    int32_t lng;
    float q1, q2, q3, q4;
};

struct __attribute__((__packed__)) log_POS {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int32_t lat;
    int32_t lng;
    float alt;
    float rel_home_alt;
    float rel_origin_alt;
};

struct __attribute__((__packed__)) log_POWR {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float Vcc;
    float Vservo;
    uint16_t flags;
};

struct __attribute__((__packed__)) log_EKF1 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t roll;
    int16_t pitch;
    uint16_t yaw;
    float velN;
    float velE;
    float velD;
    float posD_dot;
    float posN;
    float posE;
    float posD;
    int16_t gyrX;
    int16_t gyrY;
    int16_t gyrZ;
    int32_t originHgt;
};

struct __attribute__((__packed__)) log_EKF2 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int8_t Ratio;
    int8_t AZ1bias;
    int8_t AZ2bias;
    int16_t windN;
    int16_t windE;
    int16_t magN;
    int16_t magE;
    int16_t magD;
    int16_t magX;
    int16_t magY;
    int16_t magZ;
};

struct __attribute__((__packed__)) log_NKF2 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int8_t AZbias;
    int16_t scaleX;
    int16_t scaleY;
    int16_t scaleZ;
    int16_t windN;
    int16_t windE;
    int16_t magN;
    int16_t magE;
    int16_t magD;
    int16_t magX;
    int16_t magY;
    int16_t magZ;
    uint8_t index;
};

struct __attribute__((__packed__)) log_NKF2a {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t accBiasX;
    int16_t accBiasY;
    int16_t accBiasZ;
    int16_t windN;
    int16_t windE;
    int16_t magN;
    int16_t magE;
    int16_t magD;
    int16_t magX;
    int16_t magY;
    int16_t magZ;
    uint8_t index;
};

struct __attribute__((__packed__)) log_EKF3 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t innovVN;
    int16_t innovVE;
    int16_t innovVD;
    int16_t innovPN;
    int16_t innovPE;
    int16_t innovPD;
    int16_t innovMX;
    int16_t innovMY;
    int16_t innovMZ;
    int16_t innovVT;
};

struct __attribute__((__packed__)) log_NKF3 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t innovVN;
    int16_t innovVE;
    int16_t innovVD;
    int16_t innovPN;
    int16_t innovPE;
    int16_t innovPD;
    int16_t innovMX;
    int16_t innovMY;
    int16_t innovMZ;
    int16_t innovYaw;
    int16_t innovVT;
};

struct __attribute__((__packed__)) log_EKF4 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t sqrtvarV;
    int16_t sqrtvarP;
    int16_t sqrtvarH;
    int16_t sqrtvarMX;
    int16_t sqrtvarMY;
    int16_t sqrtvarMZ;
    int16_t sqrtvarVT;
    int8_t offsetNorth;
    int8_t offsetEast;
    uint16_t faults;
    uint8_t timeouts;
    uint16_t solution;
    uint16_t gps;
};

struct __attribute__((__packed__)) log_NKF4 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t sqrtvarV;
    int16_t sqrtvarP;
    int16_t sqrtvarH;
    int16_t sqrtvarM;
    int16_t sqrtvarVT;
    float tiltErr;
    int8_t offsetNorth;
    int8_t offsetEast;
    uint16_t faults;
    uint8_t timeouts;
    uint16_t solution;
    uint16_t gps;
    int8_t primary;
};

struct __attribute__((__packed__)) log_EKF5 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t normInnov;
    int16_t FIX;
    int16_t FIY;
    int16_t AFI;
    int16_t HAGL;
    int16_t offset;
    int16_t RI;
    uint16_t meaRng;
    uint16_t errHAGL;
};

struct __attribute__((__packed__)) log_NKF5 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t normInnov;
    int16_t FIX;
    int16_t FIY;
    int16_t AFI;
    int16_t HAGL;
    int16_t offset;
    int16_t RI;
    uint16_t meaRng;
    uint16_t errHAGL;
    float angErr;
    float velErr;
    float posErr;
};

struct __attribute__((__packed__)) log_Quaternion {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float q1;
    float q2;
    float q3;
    float q4;
};

struct __attribute__((__packed__)) log_RngBcnDebug {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t ID;
    int16_t rng;
    int16_t innov;
    uint16_t sqrtInnovVar;
    uint16_t testRatio;
    int16_t beaconPosN;
    int16_t beaconPosE;
    int16_t beaconPosD;
    int16_t offsetHigh;
    int16_t offsetLow;
    int16_t posN;
    int16_t posE;
    int16_t posD;
};


struct __attribute__((__packed__)) log_VisualOdom {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float time_delta;
    float angle_delta_x;
    float angle_delta_y;
    float angle_delta_z;
    float position_delta_x;
    float position_delta_y;
    float position_delta_z;
    float confidence;
};

struct __attribute__((__packed__)) log_ekfBodyOdomDebug {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float velInnovX;
    float velInnovY;
    float velInnovZ;
    float velInnovVarX;
    float velInnovVarY;
    float velInnovVarZ;
};

struct __attribute__((__packed__)) log_ekfStateVar {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float v00;
    float v01;
    float v02;
    float v03;
    float v04;
    float v05;
    float v06;
    float v07;
    float v08;
    float v09;
    float v10;
    float v11;
};

struct __attribute__((__packed__)) log_Cmd {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t command_total;
    uint16_t sequence;
    uint16_t command;
    float param1;
    float param2;
    float param3;
    float param4;
    float latitude;
    float longitude;
    float altitude;
};

struct __attribute__((__packed__)) log_Radio {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t rssi;
    uint8_t remrssi;
    uint8_t txbuf;
    uint8_t noise;
    uint8_t remnoise;
    uint16_t rxerrors;
    uint16_t fixed;
};

struct __attribute__((__packed__)) log_Camera {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint32_t gps_time;
    uint16_t gps_week;
    int32_t latitude;
    int32_t longitude;
    int32_t altitude;
    int32_t altitude_rel;
    int32_t altitude_gps;
    int16_t roll;
    int16_t pitch;
    uint16_t yaw;
};

struct __attribute__((__packed__)) log_Attitude {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t control_roll;
    int16_t roll;
    int16_t control_pitch;
    int16_t pitch;
    uint16_t control_yaw;
    uint16_t yaw;
    uint16_t error_rp;
    uint16_t error_yaw;
};

struct __attribute__((__packed__)) log_PID {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float desired;
    float P;
    float I;
    float D;
    float FF;
    float AFF;
};

struct __attribute__((__packed__)) log_Current {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float voltage;
    float voltage_resting;
    float current_amps;
    float current_total;
    int16_t temperature;
    float resistance;
};

struct __attribute__((__packed__)) log_Current_Cells {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float voltage;
    uint16_t cell_voltages[10];
};

struct __attribute__((__packed__)) log_Compass {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t mag_x;
    int16_t mag_y;
    int16_t mag_z;
    int16_t offset_x;
    int16_t offset_y;
    int16_t offset_z;
    int16_t motor_offset_x;
    int16_t motor_offset_y;
    int16_t motor_offset_z;
    uint8_t health;
    uint32_t SUS;
};

struct __attribute__((__packed__)) log_Mode {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t mode;
    uint8_t mode_num;
    uint8_t mode_reason;
};




struct __attribute__((__packed__)) log_RFND {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t dist1;
    uint8_t orient1;
    uint16_t dist2;
    uint8_t orient2;
};




struct __attribute__((__packed__)) log_TERRAIN {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t status;
    int32_t lat;
    int32_t lng;
    uint16_t spacing;
    float terrain_height;
    float current_height;
    uint16_t pending;
    uint16_t loaded;
};




struct __attribute__((__packed__)) log_Ubx1 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t instance;
    uint16_t noisePerMS;
    uint8_t jamInd;
    uint8_t aPower;
    uint16_t agcCnt;
    uint32_t config;
};

struct __attribute__((__packed__)) log_Ubx2 {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t instance;
    int8_t ofsI;
    uint8_t magI;
    int8_t ofsQ;
    uint8_t magQ;
};

struct __attribute__((__packed__)) log_GPS_RAW {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int32_t iTOW;
    int16_t week;
    uint8_t numSV;
    uint8_t sv;
    double cpMes;
    double prMes;
    float doMes;
    int8_t mesQI;
    int8_t cno;
    uint8_t lli;
};

struct __attribute__((__packed__)) log_GPS_RAWH {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    double rcvTow;
    uint16_t week;
    int8_t leapS;
    uint8_t numMeas;
    uint8_t recStat;
};

struct __attribute__((__packed__)) log_GPS_RAWS {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    double prMes;
    double cpMes;
    float doMes;
    uint8_t gnssId;
    uint8_t svId;
    uint8_t freqId;
    uint16_t locktime;
    uint8_t cno;
    uint8_t prStdev;
    uint8_t cpStdev;
    uint8_t doStdev;
    uint8_t trkStat;
};

struct __attribute__((__packed__)) log_GPS_SBF_EVENT {
 uint8_t head1, head2, msgid;;
 uint64_t time_us;
 uint32_t TOW;
 uint16_t WNc;
 uint8_t Mode;
 uint8_t Error;
 double Latitude;
 double Longitude;
 double Height;
 float Undulation;
 float Vn;
 float Ve;
 float Vu;
 float COG;
};

struct __attribute__((__packed__)) log_Esc {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    int16_t rpm;
    int16_t voltage;
    int16_t current;
    int16_t temperature;
};

struct __attribute__((__packed__)) log_AIRSPEED {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float airspeed;
    float diffpressure;
    int16_t temperature;
    float rawpressure;
    float offset;
    bool use;
};

struct __attribute__((__packed__)) log_ACCEL {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint64_t sample_us;
    float AccX, AccY, AccZ;
};

struct __attribute__((__packed__)) log_GYRO {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint64_t sample_us;
    float GyrX, GyrY, GyrZ;
};

struct __attribute__((__packed__)) log_DF_MAV_Stats {
    uint8_t head1, head2, msgid;;
    uint32_t timestamp;
    uint32_t seqno;
    uint32_t dropped;
    uint32_t retries;
    uint32_t resends;
    uint8_t internal_errors;
    uint8_t state_free_avg;
    uint8_t state_free_min;
    uint8_t state_free_max;
    uint8_t state_pending_avg;
    uint8_t state_pending_min;
    uint8_t state_pending_max;
    uint8_t state_sent_avg;
    uint8_t state_sent_min;
    uint8_t state_sent_max;



};

struct __attribute__((__packed__)) log_ORGN {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t origin_type;
    int32_t latitude;
    int32_t longitude;
    int32_t altitude;
};

struct __attribute__((__packed__)) log_RPM {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float rpm1;
    float rpm2;
};

struct __attribute__((__packed__)) log_Rate {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float control_roll;
    float roll;
    float roll_out;
    float control_pitch;
    float pitch;
    float pitch_out;
    float control_yaw;
    float yaw;
    float yaw_out;
    float control_accel;
    float accel;
    float accel_out;
};



struct __attribute__((__packed__)) log_SbpLLH {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint32_t tow;
    int32_t lat;
    int32_t lon;
    int32_t alt;
    uint8_t n_sats;
    uint8_t flags;
};

struct __attribute__((__packed__)) log_SbpHealth {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint32_t crc_error_counter;
    uint32_t last_injected_data_ms;
    uint32_t last_iar_num_hypotheses;
};

struct __attribute__((__packed__)) log_SbpRAWH {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t msg_type;
    uint16_t sender_id;
    uint8_t index;
    uint8_t pages;
    uint8_t msg_len;
    uint8_t res;
    uint8_t data[48];
};

struct __attribute__((__packed__)) log_SbpRAWM {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t msg_type;
    uint16_t sender_id;
    uint8_t index;
    uint8_t pages;
    uint8_t msg_len;
    uint8_t res;
    uint8_t data[104];
};

struct __attribute__((__packed__)) log_SbpEvent {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint16_t wn;
    uint32_t tow;
    int32_t ns_residual;
    uint8_t level;
    uint8_t quality;
};

struct __attribute__((__packed__)) log_Rally {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t total;
    uint8_t sequence;
    int32_t latitude;
    int32_t longitude;
    int16_t altitude;
};

struct __attribute__((__packed__)) log_AOA_SSA {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    float AOA;
    float SSA;
};

struct __attribute__((__packed__)) log_Beacon {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t health;
    uint8_t count;
    float dist0;
    float dist1;
    float dist2;
    float dist3;
    float posx;
    float posy;
    float posz;
};


struct __attribute__((__packed__)) log_Proximity {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t health;
    float dist0;
    float dist45;
    float dist90;
    float dist135;
    float dist180;
    float dist225;
    float dist270;
    float dist315;
    float distup;
    float closest_angle;
    float closest_dist;
};

struct __attribute__((__packed__)) log_SRTL {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t active;
    uint16_t num_points;
    uint16_t max_points;
    uint8_t action;
    float N;
    float E;
    float D;
};

struct __attribute__((__packed__)) log_DSTL {
    uint8_t head1, head2, msgid;;
    uint64_t time_us;
    uint8_t stage;
    float target_heading;
    int32_t target_lat;
    int32_t target_lng;
    int32_t target_alt;
    int16_t crosstrack_error;
    int16_t travel_distance;
    float l1_i;
    int32_t loiter_sum_cd;
    float desired;
    float P;
    float I;
    float D;
};
# 1392 "/Users/yu/repos/ardupilot/libraries/DataFlash/LogStructure.h"
enum LogMessages {
    LOG_FORMAT_MSG = 128,
    LOG_PARAMETER_MSG,
    LOG_GPS_MSG,
    LOG_GPS2_MSG,
    LOG_GPSB_MSG,
    LOG_IMU_MSG,
    LOG_MESSAGE_MSG,
    LOG_RCIN_MSG,
    LOG_RCOUT_MSG,
    LOG_RSSI_MSG,
    LOG_IMU2_MSG,
    LOG_BARO_MSG,
    LOG_POWR_MSG,
    LOG_AHR2_MSG,
    LOG_SIMSTATE_MSG,
    LOG_CMD_MSG,
    LOG_RADIO_MSG,
    LOG_ATRP_MSG,
    LOG_CAMERA_MSG,
    LOG_IMU3_MSG,
    LOG_TERRAIN_MSG,
    LOG_GPS_UBX1_MSG,
    LOG_GPS_UBX2_MSG,
    LOG_GPS2_UBX1_MSG,
    LOG_GPS2_UBX2_MSG,
    LOG_ESC1_MSG,
    LOG_ESC2_MSG,
    LOG_ESC3_MSG,
    LOG_ESC4_MSG,
    LOG_ESC5_MSG,
    LOG_ESC6_MSG,
    LOG_ESC7_MSG,
    LOG_ESC8_MSG,
    LOG_BAR2_MSG,
    LOG_ARSP_MSG,
    LOG_ATTITUDE_MSG,
    LOG_CURRENT_MSG,
    LOG_CURRENT2_MSG,
    LOG_CURRENT_CELLS_MSG,
    LOG_CURRENT_CELLS2_MSG,
    LOG_COMPASS_MSG,
    LOG_COMPASS2_MSG,
    LOG_COMPASS3_MSG,
    LOG_MODE_MSG,
    LOG_GPS_RAW_MSG,
    LOG_GPS_RAWH_MSG,
    LOG_GPS_RAWS_MSG,
 LOG_GPS_SBF_EVENT_MSG,
    LOG_ACC1_MSG,
    LOG_ACC2_MSG,
    LOG_ACC3_MSG,
    LOG_GYR1_MSG,
    LOG_GYR2_MSG,
    LOG_GYR3_MSG,
    LOG_POS_MSG,
    LOG_PIDR_MSG,
    LOG_PIDP_MSG,
    LOG_PIDY_MSG,
    LOG_PIDA_MSG,
    LOG_PIDS_MSG,
    LOG_DSTL_MSG,
    LOG_VIBE_MSG,
    LOG_IMUDT_MSG,
    LOG_IMUDT2_MSG,
    LOG_IMUDT3_MSG,
    LOG_ORGN_MSG,
    LOG_RPM_MSG,
    LOG_GPA_MSG,
    LOG_GPA2_MSG,
    LOG_GPAB_MSG,
    LOG_RFND_MSG,
    LOG_BAR3_MSG,
    LOG_NKF1_MSG,
    LOG_NKF2_MSG,
    LOG_NKF3_MSG,
    LOG_NKF4_MSG,
    LOG_NKF5_MSG,
    LOG_NKF6_MSG,
    LOG_NKF7_MSG,
    LOG_NKF8_MSG,
    LOG_NKF9_MSG,
    LOG_NKF10_MSG,
    LOG_NKQ1_MSG,
    LOG_NKQ2_MSG,
    LOG_XKF1_MSG,
    LOG_XKF2_MSG,
    LOG_XKF3_MSG,
    LOG_XKF4_MSG,
    LOG_XKF5_MSG,
    LOG_XKF6_MSG,
    LOG_XKF7_MSG,
    LOG_XKF8_MSG,
    LOG_XKF9_MSG,
    LOG_XKF10_MSG,
    LOG_XKQ1_MSG,
    LOG_XKQ2_MSG,
    LOG_XKFD_MSG,
    LOG_XKV1_MSG,
    LOG_XKV2_MSG,
    LOG_DF_MAV_STATS,
    LOG_FORMAT_UNITS_MSG,
    LOG_UNIT_MSG,
    LOG_MULT_MSG,

    LOG_MSG_SBPHEALTH,
    LOG_MSG_SBPLLH,
    LOG_MSG_SBPBASELINE,
    LOG_MSG_SBPTRACKING1,
    LOG_MSG_SBPTRACKING2,
    LOG_MSG_SBPRAWH,
    LOG_MSG_SBPRAWM,
    LOG_MSG_SBPEVENT,
    LOG_TRIGGER_MSG,

    LOG_GIMBAL1_MSG,
    LOG_GIMBAL2_MSG,
    LOG_GIMBAL3_MSG,
    LOG_RATE_MSG,
    LOG_RALLY_MSG,
    LOG_VISUALODOM_MSG,
    LOG_AOA_SSA_MSG,
    LOG_BEACON_MSG,
    LOG_PROXIMITY_MSG,
    LOG_DF_FILE_STATS,
    LOG_SRTL_MSG,
    LOG_ISBH_MSG,
    LOG_ISBD_MSG,

};

enum LogOriginType {
    ekf_origin = 0,
    ahrs_home = 1
};
# 21 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 1
       

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors_Class.h" 1
       



# 1 "/Users/yu/repos/ardupilot/libraries/AP_Notify/AP_Notify.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Notify/AP_Notify.h"
       





# 1 "/Users/yu/repos/ardupilot/libraries/AP_Notify/NotifyDevice.h" 1
       




class AP_Notify;

class NotifyDevice {
public:
    virtual ~NotifyDevice() {}

    virtual bool init(void) = 0;


    virtual void update() = 0;


    virtual void handle_led_control(mavlink_message_t *msg) {}


    virtual void handle_play_tune(mavlink_message_t *msg) {}


    const AP_Notify *pNotify;
};
# 22 "/Users/yu/repos/ardupilot/libraries/AP_Notify/AP_Notify.h" 2
# 38 "/Users/yu/repos/ardupilot/libraries/AP_Notify/AP_Notify.h"
class AP_Notify
{
    friend class RGBLed;
    friend class Display;
public:
    static AP_Notify create() { return AP_Notify{}; }


    static AP_Notify *instance(void) {
        return _instance;
    }

    constexpr AP_Notify(AP_Notify &&other) = default;


    AP_Notify(const AP_Notify &other) = delete;
    AP_Notify &operator=(const AP_Notify&) = delete;


    enum Oreo_LED_Theme {
        OreoLED_Disabled = 0,
        OreoLED_Aircraft = 1,
        OreoLED_Automobile = 2,
    };


    struct notify_flags_and_values_type {
        uint32_t initialising : 1;
        uint32_t gps_status : 3;
        uint32_t gps_num_sats : 6;
        uint32_t flight_mode : 8;
        uint32_t armed : 1;
        uint32_t pre_arm_check : 1;
        uint32_t pre_arm_gps_check : 1;
        uint32_t save_trim : 1;
        uint32_t esc_calibration : 1;
        uint32_t failsafe_radio : 1;
        uint32_t failsafe_battery : 1;
        uint32_t parachute_release : 1;
        uint32_t ekf_bad : 1;
        uint32_t autopilot_mode : 1;
        uint32_t firmware_update : 1;
        uint32_t compass_cal_running: 1;
        uint32_t leak_detected : 1;
        float battery_voltage ;
        uint32_t gps_fusion : 1;
        uint32_t gps_glitching : 1;


        uint32_t external_leds : 1;
        uint32_t vehicle_lost : 1;
        uint32_t waiting_for_throw : 1;
        uint32_t powering_off : 1;
    };



    struct notify_events_type {
        uint32_t arming_failed : 1;
        uint32_t user_mode_change : 1;
        uint32_t user_mode_change_failed: 1;
        uint32_t failsafe_mode_change : 1;
        uint32_t autotune_complete : 1;
        uint32_t autotune_failed : 1;
        uint32_t autotune_next_axis : 1;
        uint32_t mission_complete : 1;
        uint32_t waypoint_complete : 1;
        uint32_t initiated_compass_cal : 1;
        uint32_t compass_cal_saved : 1;
        uint32_t compass_cal_failed : 1;
        uint32_t compass_cal_canceled : 1;
        uint32_t tune_started : 1;
        uint32_t tune_next : 3;
        uint32_t tune_save : 1;
        uint32_t tune_error : 1;
    };



    static struct notify_flags_and_values_type flags;
    static struct notify_events_type events;


    void init(bool enable_external_leds);


    void add_backends(void);


    void update(void);


    static void handle_led_control(mavlink_message_t* msg);


    static void handle_play_tune(mavlink_message_t* msg);

    bool buzzer_enabled() const { return _buzzer_enable; }


    void set_flight_mode_str(const char *str);
    const char* get_flight_mode_str() const { return _flight_mode_str; }


    void send_text(const char *str);
    const char* get_text() const { return _send_text; }

    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_Notify();

    static AP_Notify *_instance;


    AP_Int8 _rgb_led_brightness;
    AP_Int8 _rgb_led_override;
    AP_Int8 _buzzer_enable;
    AP_Int8 _display_type;
    AP_Int8 _oreo_theme;

    char _send_text[51];
    uint32_t _send_text_updated_millis;
    char _flight_mode_str[5];

    static NotifyDevice* _devices[];
    static uint8_t _num_devices;
};
# 6 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors_Class.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/SRV_Channel/SRV_Channel.h" 1
# 14 "/Users/yu/repos/ardupilot/libraries/SRV_Channel/SRV_Channel.h"
       



# 1 "/Users/yu/repos/ardupilot/libraries/AP_RCMapper/AP_RCMapper.h" 1
       





class RCMapper {
public:
    static RCMapper create() { return RCMapper{}; }

    constexpr RCMapper(RCMapper &&other) = default;


    RCMapper(const RCMapper &other) = delete;
    RCMapper &operator=(const RCMapper&) = delete;


    uint8_t roll() const { return _ch_roll; }


    uint8_t pitch() const { return _ch_pitch; }


    uint8_t throttle() const { return _ch_throttle; }


    uint8_t yaw() const { return _ch_yaw; }


    uint8_t forward() const { return _ch_forward; }


    uint8_t lateral() const { return _ch_lateral; }

    static const struct AP_Param::GroupInfo var_info[];

private:
    RCMapper();


    AP_Int8 _ch_roll;
    AP_Int8 _ch_pitch;
    AP_Int8 _ch_yaw;
    AP_Int8 _ch_throttle;
    AP_Int8 _ch_forward;
    AP_Int8 _ch_lateral;
};
# 19 "/Users/yu/repos/ardupilot/libraries/SRV_Channel/SRV_Channel.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Common/Bitmask.h" 1
# 19 "/Users/yu/repos/ardupilot/libraries/AP_Common/Bitmask.h"
       

class Bitmask {
public:
    Bitmask(uint16_t num_bits) :
        numbits(num_bits),
        numwords((num_bits+31)/32) {
        bits = new uint32_t[numwords];
        clearall();
    }
    ~Bitmask(void) {
        delete[] bits;
    }


    void set(uint16_t bit) {

        if (bit >= numbits) {
            return;
        }
        uint16_t word = bit/32;
        uint8_t ofs = bit & 0x1f;
        bits[word] |= (1U << ofs);
    }


    void setall(void) {

        for (uint16_t i=0; i<numwords-1; i++) {
            bits[i] = 0xffffffff;
        }

        uint16_t num_valid_bits = numbits % 32;
        bits[numwords-1] = (1 << num_valid_bits) - 1;
    }


    void clear(uint16_t bit) {
        uint16_t word = bit/32;
        uint8_t ofs = bit & 0x1f;
        bits[word] &= ~(1U << ofs);
    }


    void clearall(void) {
        memset(bits, 0, numwords*sizeof(bits[0]));
    }


    bool get(uint16_t bit) const {
        uint16_t word = bit/32;
        uint8_t ofs = bit & 0x1f;
        return (bits[word] & (1U << ofs)) != 0;
    }


    bool empty(void) const {
        for (uint16_t i=0; i<numwords; i++) {
            if (bits[i] != 0) {
                return false;
            }
        }
        return true;
    }


    uint16_t count() const {
        uint16_t sum = 0;
        for (uint16_t i=0; i<numwords; i++) {
            if (sizeof(bits[i]) <= sizeof(int)) {
                sum += __builtin_popcount(bits[i]);
            } else if (sizeof(bits[i]) <= sizeof(long)) {
                sum += __builtin_popcountl(bits[i]);
            } else {
                sum += __builtin_popcountll(bits[i]);
            }
        }
        return sum;
    }


    uint16_t size() const {
        return numbits;
    }

private:
    uint16_t numbits;
    uint16_t numwords;
    uint32_t *bits;
};
# 20 "/Users/yu/repos/ardupilot/libraries/SRV_Channel/SRV_Channel.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Volz_Protocol/AP_Volz_Protocol.h" 1
# 34 "/Users/yu/repos/ardupilot/libraries/AP_Volz_Protocol/AP_Volz_Protocol.h"
       
# 51 "/Users/yu/repos/ardupilot/libraries/AP_Volz_Protocol/AP_Volz_Protocol.h"
class AP_Volz_Protocol {
public:
    static const struct AP_Param::GroupInfo var_info[];

    static AP_Volz_Protocol create() {
        return AP_Volz_Protocol{};
    }

    constexpr AP_Volz_Protocol(AP_Volz_Protocol &&other) = default;


    AP_Volz_Protocol(const AP_Volz_Protocol &other) = delete;
    AP_Volz_Protocol &operator=(const AP_Volz_Protocol&) = delete;

    void update();

private:
    AP_Volz_Protocol();
    AP_HAL::UARTDriver *port;

    void init(void);
    void send_command(uint8_t data[6]);
    void update_volz_bitmask(uint32_t new_bitmask);

    uint32_t last_volz_update_time;
    uint32_t volz_time_frame_micros;
    uint32_t last_used_bitmask;

    AP_Int32 bitmask;
    bool initialised;
};
# 21 "/Users/yu/repos/ardupilot/libraries/SRV_Channel/SRV_Channel.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_SBusOut/AP_SBusOut.h" 1







       





class AP_SBusOut {
public:
    static const struct AP_Param::GroupInfo var_info[];

    static AP_SBusOut create() {
        return AP_SBusOut{};
    }

    constexpr AP_SBusOut(AP_SBusOut &&other) = default;


    AP_SBusOut(const AP_SBusOut &other) = delete;
    AP_SBusOut &operator=(const AP_SBusOut&) = delete;

    void update();

private:
    AP_SBusOut();
    AP_HAL::UARTDriver *sbus1_uart;

    void init(void);

    uint16_t sbus_frame_interval;

    AP_Int16 sbus_rate;
    bool initialised;
};
# 22 "/Users/yu/repos/ardupilot/libraries/SRV_Channel/SRV_Channel.h" 2



class SRV_Channels;






class SRV_Channel {
public:
    friend class SRV_Channels;


    SRV_Channel(void);

    static const struct AP_Param::GroupInfo var_info[];

    typedef enum
    {
        k_none = 0,
        k_manual = 1,
        k_flap = 2,
        k_flap_auto = 3,
        k_aileron = 4,
        k_unused1 = 5,
        k_mount_pan = 6,
        k_mount_tilt = 7,
        k_mount_roll = 8,
        k_mount_open = 9,
        k_cam_trigger = 10,
        k_egg_drop = 11,
        k_mount2_pan = 12,
        k_mount2_tilt = 13,
        k_mount2_roll = 14,
        k_mount2_open = 15,
        k_dspoilerLeft1 = 16,
        k_dspoilerRight1 = 17,
        k_aileron_with_input = 18,
        k_elevator = 19,
        k_elevator_with_input = 20,
        k_rudder = 21,
        k_sprayer_pump = 22,
        k_sprayer_spinner = 23,
        k_flaperon_left = 24,
        k_flaperon_right = 25,
        k_steering = 26,
        k_parachute_release = 27,
        k_gripper = 28,
        k_landing_gear_control = 29,
        k_engine_run_enable = 30,
        k_heli_rsc = 31,
        k_heli_tail_rsc = 32,
        k_motor1 = 33,
        k_motor2 = 34,
        k_motor3 = 35,
        k_motor4 = 36,
        k_motor5 = 37,
        k_motor6 = 38,
        k_motor7 = 39,
        k_motor8 = 40,
        k_motor_tilt = 41,
        k_rcin1 = 51,
        k_rcin2 = 52,
        k_rcin3 = 53,
        k_rcin4 = 54,
        k_rcin5 = 55,
        k_rcin6 = 56,
        k_rcin7 = 57,
        k_rcin8 = 58,
        k_rcin9 = 59,
        k_rcin10 = 60,
        k_rcin11 = 61,
        k_rcin12 = 62,
        k_rcin13 = 63,
        k_rcin14 = 64,
        k_rcin15 = 65,
        k_rcin16 = 66,
        k_ignition = 67,
        k_choke = 68,
        k_starter = 69,
        k_throttle = 70,
        k_tracker_yaw = 71,
        k_tracker_pitch = 72,
        k_throttleLeft = 73,
        k_throttleRight = 74,
        k_tiltMotorLeft = 75,
        k_tiltMotorRight = 76,
        k_elevon_left = 77,
        k_elevon_right = 78,
        k_vtail_left = 79,
        k_vtail_right = 80,
        k_boost_throttle = 81,
        k_motor9 = 82,
        k_motor10 = 83,
        k_motor11 = 84,
        k_motor12 = 85,
        k_dspoilerLeft2 = 86,
        k_dspoilerRight2 = 87,
        k_winch = 88,
        k_nr_aux_servo_functions
    } Aux_servo_function_t;


    enum LimitValue {
        SRV_CHANNEL_LIMIT_TRIM,
        SRV_CHANNEL_LIMIT_MIN,
        SRV_CHANNEL_LIMIT_MAX,
        SRV_CHANNEL_LIMIT_ZERO_PWM
    };


    void set_output_pwm(uint16_t pwm);


    uint16_t get_output_pwm(void) const { return output_pwm; }


    void set_angle(int16_t angle);


    void set_range(uint16_t high);


    bool get_reversed(void) const {
        return reversed?true:false;
    }


    void set_output_min(uint16_t pwm) {
        servo_min.set(pwm);
    }
    void set_output_max(uint16_t pwm) {
        servo_max.set(pwm);
    }


    uint16_t get_output_min(void) const {
        return servo_min;
    }
    uint16_t get_output_max(void) const {
        return servo_max;
    }
    uint16_t get_trim(void) const {
        return servo_trim;
    }


    static bool is_motor(SRV_Channel::Aux_servo_function_t function);


    SRV_Channel::Aux_servo_function_t get_function(void) const {
        return (SRV_Channel::Aux_servo_function_t)function.get();
    }


    void function_set_and_save(SRV_Channel::Aux_servo_function_t f) {
        function.set_and_save(int8_t(f));
    }


    void reversed_set_and_save_ifchanged(bool r) {
        reversed.set_and_save_ifchanged(r?1:0);
    }




    bool function_configured(void) const {
        return function.configured();
    }

private:
    AP_Int16 servo_min;
    AP_Int16 servo_max;
    AP_Int16 servo_trim;

    AP_Int8 reversed;
    AP_Int8 function;


    uint16_t output_pwm;


    bool type_angle:1;


    bool type_setup:1;


    uint8_t ch_num;


    uint16_t high_out;


    uint16_t pwm_from_range(int16_t scaled_value) const;


    uint16_t pwm_from_angle(int16_t scaled_value) const;


    void calc_pwm(int16_t output_scaled);


    void output_ch(void);


    void aux_servo_function_setup(void);


    uint16_t get_limit_pwm(LimitValue limit) const;


    float get_output_norm(void);


    typedef uint16_t servo_mask_t;



    static servo_mask_t have_pwm_mask;
};




class SRV_Channels {
public:
    friend class SRV_Channel;


    SRV_Channels(void);

    static const struct AP_Param::GroupInfo var_info[];


    static void set_default_function(uint8_t chan, SRV_Channel::Aux_servo_function_t function);


    static void set_output_pwm(SRV_Channel::Aux_servo_function_t function, uint16_t value);


    static void set_output_pwm_first(SRV_Channel::Aux_servo_function_t function, uint16_t value);


    static void set_output_pwm_chan(uint8_t chan, uint16_t value);



    static void set_output_scaled(SRV_Channel::Aux_servo_function_t function, int16_t value);


    static int16_t get_output_scaled(SRV_Channel::Aux_servo_function_t function);


    static bool get_output_pwm(SRV_Channel::Aux_servo_function_t function, uint16_t &value);



    static float get_output_norm(SRV_Channel::Aux_servo_function_t function);


    static uint16_t get_output_channel_mask(SRV_Channel::Aux_servo_function_t function);


    static void limit_slew_rate(SRV_Channel::Aux_servo_function_t function, float slew_rate, float dt);


    static void output_ch_all(void);


    void set_esc_scaling_for(SRV_Channel::Aux_servo_function_t function);


    bool auto_trim_enabled(void) const { return auto_trim; }


    void adjust_trim(SRV_Channel::Aux_servo_function_t function, float v);


    void save_trim(void);


    void set_reversible_throttle(void) {
        flags.k_throttle_reversible = true;
    }


    static void output_trim_all(void);


    static void setup_failsafe_trim_all(void);


    static void set_output_pwm_trimmed(SRV_Channel::Aux_servo_function_t function, int16_t value);


    static void set_trim_to_servo_out_for(SRV_Channel::Aux_servo_function_t function);


    static void set_trim_to_min_for(SRV_Channel::Aux_servo_function_t function);


    static void set_trim_to_pwm_for(SRV_Channel::Aux_servo_function_t function, int16_t pwm);


    static void set_output_to_min(SRV_Channel::Aux_servo_function_t function);


    static void set_output_to_max(SRV_Channel::Aux_servo_function_t function);


    static void set_output_to_trim(SRV_Channel::Aux_servo_function_t function);


    static void copy_radio_in_out(SRV_Channel::Aux_servo_function_t function, bool do_input_output=false);


    static void copy_radio_in_out_mask(uint16_t mask);


    static void set_failsafe_pwm(SRV_Channel::Aux_servo_function_t function, uint16_t pwm);


    static void set_failsafe_limit(SRV_Channel::Aux_servo_function_t function, SRV_Channel::LimitValue limit);


    static void set_safety_limit(SRV_Channel::Aux_servo_function_t function, SRV_Channel::LimitValue limit);


    static void set_output_limit(SRV_Channel::Aux_servo_function_t function, SRV_Channel::LimitValue limit);


    static bool function_assigned(SRV_Channel::Aux_servo_function_t function);


    static void move_servo(SRV_Channel::Aux_servo_function_t function,
                           int16_t value, int16_t angle_min, int16_t angle_max);


    static void enable_aux_servos(void);


    static void enable_by_mask(uint16_t mask);


    static SRV_Channel::Aux_servo_function_t channel_function(uint8_t channel);


    static void update_aux_servo_function(void);


    static bool set_aux_channel_default(SRV_Channel::Aux_servo_function_t function, uint8_t channel);


    static bool find_channel(SRV_Channel::Aux_servo_function_t function, uint8_t &chan);


    static SRV_Channel *get_channel_for(SRV_Channel::Aux_servo_function_t function, int8_t default_chan=-1);


    static void set_angle(SRV_Channel::Aux_servo_function_t function, uint16_t angle);


    static void set_range(SRV_Channel::Aux_servo_function_t function, uint16_t range);


    static void set_rc_frequency(SRV_Channel::Aux_servo_function_t function, uint16_t frequency);


    void disable_passthrough(bool disable) {
        disabled_passthrough = disable;
    }


    static void constrain_pwm(SRV_Channel::Aux_servo_function_t function);


    static void calc_pwm(void);

    static SRV_Channel *srv_channel(uint8_t i) {
        return i<16?&channels[i]:nullptr;
    }


    static bool upgrade_parameters(const uint8_t old_keys[14], uint16_t aux_channel_mask, RCMapper *rcmap);
    static void upgrade_motors_servo(uint8_t ap_motors_key, uint8_t ap_motors_idx, uint8_t new_channel);


    static SRV_Channel::Aux_servo_function_t get_motor_function(uint8_t channel) {
        if (channel < 8) {
            return SRV_Channel::Aux_servo_function_t(SRV_Channel::k_motor1+channel);
        }
        return SRV_Channel::Aux_servo_function_t((SRV_Channel::k_motor9+(channel-8)));
    }

    static void cork();

    static void push();

private:
    struct {
        bool k_throttle_reversible:1;
    } flags;

    static bool disabled_passthrough;

    SRV_Channel::servo_mask_t trimmed_mask;

    static Bitmask function_mask;
    static bool initialised;


    static SRV_Channel *channels;
    static SRV_Channels *instance;


    AP_Volz_Protocol volz = AP_Volz_Protocol::create();
    static AP_Volz_Protocol *volz_ptr;


    AP_SBusOut sbus = AP_SBusOut::create();
    static AP_SBusOut *sbus_ptr;

    SRV_Channel obj_channels[16];

    static struct srv_function {

        SRV_Channel::servo_mask_t channel_mask;


        int16_t output_scaled;
    } functions[SRV_Channel::k_nr_aux_servo_functions];

    AP_Int8 auto_trim;
    AP_Int16 default_rate;


    static bool passthrough_disabled(void) {
        return disabled_passthrough;
    }
};
# 7 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors_Class.h" 2
# 29 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors_Class.h"
class AP_Motors {
public:

    enum motor_frame_class {
        MOTOR_FRAME_UNDEFINED = 0,
        MOTOR_FRAME_QUAD = 1,
        MOTOR_FRAME_HEXA = 2,
        MOTOR_FRAME_OCTA = 3,
        MOTOR_FRAME_OCTAQUAD = 4,
        MOTOR_FRAME_Y6 = 5,
        MOTOR_FRAME_HELI = 6,
        MOTOR_FRAME_TRI = 7,
        MOTOR_FRAME_SINGLE = 8,
        MOTOR_FRAME_COAX = 9,
        MOTOR_FRAME_TAILSITTER = 10,
        MOTOR_FRAME_HELI_DUAL = 11,
        MOTOR_FRAME_DODECAHEXA = 12,
        MOTOR_FRAME_HELI_QUAD = 13,
    };
    enum motor_frame_type {
        MOTOR_FRAME_TYPE_PLUS = 0,
        MOTOR_FRAME_TYPE_X = 1,
        MOTOR_FRAME_TYPE_V = 2,
        MOTOR_FRAME_TYPE_H = 3,
        MOTOR_FRAME_TYPE_VTAIL = 4,
        MOTOR_FRAME_TYPE_ATAIL = 5,
        MOTOR_FRAME_TYPE_Y6B = 10,
        MOTOR_FRAME_TYPE_Y6F = 11
    };


    AP_Motors(uint16_t loop_rate, uint16_t speed_hz = 490);


    bool initialised_ok() const { return _flags.initialised_ok; }


    bool armed() const { return _flags.armed; }
    void armed(bool arm);


    void set_interlock(bool set) { _flags.interlock = set;}


    bool get_interlock() const { return _flags.interlock; }


    void set_roll(float roll_in) { _roll_in = roll_in; };
    void set_pitch(float pitch_in) { _pitch_in = pitch_in; };
    void set_yaw(float yaw_in) { _yaw_in = yaw_in; };
    void set_throttle(float throttle_in) { _throttle_in = throttle_in; };
    void set_throttle_avg_max(float throttle_avg_max) { _throttle_avg_max = constrain_float(throttle_avg_max,0.0f,1.0f); };
    void set_throttle_filter_cutoff(float filt_hz) { _throttle_filter.set_cutoff_frequency(filt_hz); }
    void set_forward(float forward_in) { _forward_in = forward_in; };
    void set_lateral(float lateral_in) { _lateral_in = lateral_in; };


    float get_roll() const { return _roll_in; }
    float get_pitch() const { return _pitch_in; }
    float get_yaw() const { return _yaw_in; }
    float get_throttle() const { return constrain_float(_throttle_filter.get(),0.0f,1.0f); }
    float get_throttle_bidirectional() const { return constrain_float(2*(_throttle_filter.get()-0.5f),-1.0f,1.0f); }
    float get_forward() const { return _forward_in; }
    float get_lateral() const { return _lateral_in; }
    virtual float get_throttle_hover() const = 0;


    enum spool_up_down_desired {
        DESIRED_SHUT_DOWN = 0,
        DESIRED_SPIN_WHEN_ARMED = 1,
        DESIRED_THROTTLE_UNLIMITED = 2,
    };

    virtual void set_desired_spool_state(enum spool_up_down_desired spool) { _spool_desired = spool; };

    enum spool_up_down_desired get_desired_spool_state(void) const { return _spool_desired; }





    void set_voltage(float volts){ _batt_voltage = volts; }
    void set_voltage_resting_estimate(float volts) { _batt_voltage_resting_estimate = volts; }


    void set_current(float current){ _batt_current = current; }


    float get_batt_resistance() const { return _batt_resistance; }
    void set_resistance(float resistance){ _batt_resistance = resistance; }


    void set_air_density_ratio(float ratio) { _air_density_ratio = ratio; }


    struct AP_Motors_limit {
        uint8_t roll_pitch : 1;
        uint8_t yaw : 1;
        uint8_t throttle_lower : 1;
        uint8_t throttle_upper : 1;
    } limit;






    virtual void set_update_rate( uint16_t speed_hz ) { _speed_hz = speed_hz; }


    virtual void init(motor_frame_class frame_class, motor_frame_type frame_type) = 0;


    virtual void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type) = 0;


    virtual void output() = 0;


    virtual void output_min() = 0;




    virtual void output_test(uint8_t motor_seq, int16_t pwm) = 0;



    virtual uint16_t get_motor_mask() = 0;


    void set_radio_passthrough(float roll_input, float pitch_input, float throttle_input, float yaw_input);


    void set_loop_rate(uint16_t loop_rate) { _loop_rate = loop_rate; }

    enum pwm_type { PWM_TYPE_NORMAL=0, PWM_TYPE_ONESHOT=1, PWM_TYPE_ONESHOT125=2, PWM_TYPE_BRUSHED=3 };
    pwm_type get_pwm_type(void) const { return (pwm_type)_pwm_type.get(); }

protected:

    virtual void output_armed_stabilizing()=0;
    virtual void rc_write(uint8_t chan, uint16_t pwm);
    virtual void rc_set_freq(uint32_t mask, uint16_t freq_hz);
    virtual uint32_t rc_map_mask(uint32_t mask) const;


    void add_motor_num(int8_t motor_num);


    virtual void update_throttle_filter() = 0;


    virtual void save_params_on_disarm() {}


    int16_t calc_pwm_output_1to1(float input, const SRV_Channel *servo);


    int16_t calc_pwm_output_0to1(float input, const SRV_Channel *servo);


    struct AP_Motors_flags {
        uint8_t armed : 1;
        uint8_t interlock : 1;
        uint8_t initialised_ok : 1;
    } _flags;


    uint16_t _loop_rate;
    uint16_t _speed_hz;
    float _roll_in;
    float _pitch_in;
    float _yaw_in;
    float _throttle_in;
    float _forward_in;
    float _lateral_in;
    float _throttle_avg_max;
    LowPassFilterFloat _throttle_filter;
    spool_up_down_desired _spool_desired;


    float _batt_voltage;
    float _batt_voltage_resting_estimate;
    float _batt_current;
    float _batt_resistance;
    float _air_density_ratio;


    uint16_t _motor_fast_mask;


    float _roll_radio_passthrough = 0.0f;
    float _pitch_radio_passthrough = 0.0f;
    float _throttle_radio_passthrough = 0.0f;
    float _yaw_radio_passthrough = 0.0f;

    AP_Int8 _pwm_type;
};
# 4 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsMulticopter.h" 1


       
# 33 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsMulticopter.h"
class AP_MotorsMulticopter : public AP_Motors {
public:


    AP_MotorsMulticopter(uint16_t loop_rate, uint16_t speed_hz = 490);


    virtual void output();


    void output_min();


    void set_yaw_headroom(int16_t pwm) { _yaw_headroom = pwm; }



    void set_throttle_range(int16_t radio_min, int16_t radio_max);


    void update_throttle_hover(float dt);
    virtual float get_throttle_hover() const { return _throttle_hover; }


    enum spool_up_down_mode {
        SHUT_DOWN = 0,
        SPIN_WHEN_ARMED = 1,
        SPOOL_UP = 2,
        THROTTLE_UNLIMITED = 3,
        SPOOL_DOWN = 4,
    };



    void set_throttle_passthrough_for_esc_calibration(float throttle_input);


    float get_lift_max() { return _lift_max; }


    float get_batt_voltage_filt() const { return _batt_voltage_filt.get(); }


    float get_throttle_limit() const { return _throttle_limit; }


    float get_throttle_thrust_max() const { return _throttle_thrust_max; }


    bool spool_up_complete() const { return _spool_mode == THROTTLE_UNLIMITED; }




    virtual void output_motor_mask(float thrust, uint8_t mask);


    int16_t get_pwm_output_min() const;
    int16_t get_pwm_output_max() const;


    typedef Functor<void, float *, uint8_t> thrust_compensation_fn_t;
    void set_thrust_compensation_callback(thrust_compensation_fn_t callback) {
        _thrust_compensation_callback = callback;
    }


    static const struct AP_Param::GroupInfo var_info[];

protected:


    void output_logic();


    virtual void output_to_motors() = 0;


    virtual void update_throttle_filter();


    float get_current_limit_max_throttle();


    float apply_thrust_curve_and_volt_scaling(float thrust) const;


    void update_lift_max_from_batt_voltage();


    float get_compensation_gain() const;


    int16_t calc_thrust_to_pwm(float thrust_in) const;


    int16_t calc_spin_up_to_pwm() const;


    virtual void thrust_compensation(void) {}


    virtual void output_boost_throttle(void);


    void save_params_on_disarm();


    enum HoverLearn {
        HOVER_LEARN_DISABLED = 0,
        HOVER_LEARN_ONLY = 1,
        HOVER_LEARN_AND_SAVE = 2
    };


    AP_Int16 _yaw_headroom;
    AP_Float _thrust_curve_expo;
    AP_Float _spin_min;
    AP_Float _spin_max;
    AP_Float _spin_arm;
    AP_Float _batt_voltage_max;
    AP_Float _batt_voltage_min;
    AP_Float _batt_current_max;
    AP_Float _batt_current_time_constant;
    AP_Int16 _pwm_min;
    AP_Int16 _pwm_max;
    AP_Float _throttle_hover;
    AP_Int8 _throttle_hover_learn;
    AP_Int8 _disarm_disable_pwm;


    AP_Float _yaw_servo_angle_max_deg;


    AP_Float _spool_up_time;


    AP_Float _boost_scale;


    bool motor_enabled[12];
    int16_t _throttle_radio_min;
    int16_t _throttle_radio_max;


    spool_up_down_mode _spool_mode;
    float _spin_up_ratio;


    LowPassFilterFloat _batt_voltage_filt;
    float _lift_max;
    float _throttle_limit;
    float _throttle_thrust_max;
    uint16_t _disarm_safety_timer;


    thrust_compensation_fn_t _thrust_compensation_callback;
};
# 5 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsMatrix.h" 1


       



# 1 "/Users/yu/repos/ardupilot/libraries/RC_Channel/RC_Channel.h" 1


       
# 15 "/Users/yu/repos/ardupilot/libraries/RC_Channel/RC_Channel.h"
class RC_Channel {
public:
    friend class SRV_Channels;
    friend class RC_Channels;

    RC_Channel(void);


    enum LimitValue {
        RC_CHANNEL_LIMIT_TRIM,
        RC_CHANNEL_LIMIT_MIN,
        RC_CHANNEL_LIMIT_MAX
    };


    void load_eeprom(void);
    void save_eeprom(void);
    void save_trim(void);


    void set_range(uint16_t high);
    void set_angle(uint16_t angle);
    bool get_reverse(void) const;
    void set_default_dead_zone(int16_t dzone);
    uint16_t get_dead_zone(void) const { return dead_zone; }


    int16_t get_control_mid() const;


    void set_pwm(int16_t pwm);
    void set_pwm_no_deadzone(int16_t pwm);



    int16_t pwm_to_angle_dz_trim(uint16_t dead_zone, uint16_t trim);





    float norm_input();





    float norm_input_dz();

    uint8_t percent_input();
    int16_t pwm_to_range();
    int16_t pwm_to_range_dz(uint16_t dead_zone);


    uint16_t read() const;


    void input();

    static const struct AP_Param::GroupInfo var_info[];


    bool in_trim_dz();

    int16_t get_radio_in() const { return radio_in;}
    void set_radio_in(int16_t val) {radio_in = val;}

    int16_t get_control_in() const { return control_in;}
    void set_control_in(int16_t val) { control_in = val;}


    int16_t get_control_in_zero_dz(void);

    int16_t get_radio_min() const {return radio_min.get();}
    void set_radio_min(int16_t val) { radio_min = val;}

    int16_t get_radio_max() const {return radio_max.get();}
    void set_radio_max(int16_t val) {radio_max = val;}

    int16_t get_radio_trim() const { return radio_trim.get();}
    void set_radio_trim(int16_t val) { radio_trim.set(val);}
    void save_radio_trim() { radio_trim.save();}

    void set_and_save_trim() { radio_trim.set_and_save_ifchanged(radio_in);}

    bool min_max_configured() const
    {
        return radio_min.configured() && radio_max.configured();
    }

private:


    int16_t radio_in;


    int16_t control_in;

    AP_Int16 radio_min;
    AP_Int16 radio_trim;
    AP_Int16 radio_max;

    AP_Int8 reversed;
    AP_Int16 dead_zone;

    uint8_t type_in;
    int16_t high_in;


    uint8_t ch_in;

    int16_t pwm_to_angle();
    int16_t pwm_to_angle_dz(uint16_t dead_zone);
};





class RC_Channels {
public:
    friend class SRV_Channels;

    RC_Channels(void);

    static const struct AP_Param::GroupInfo var_info[];

    static RC_Channel *rc_channel(uint8_t chan) {
        return (chan < 16)?&channels[chan]:nullptr;
    }

    static void set_pwm_all(void);

private:

    static RC_Channel *channels;
    RC_Channel obj_channels[16];
};
# 8 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsMatrix.h" 2






class AP_MotorsMatrix : public AP_MotorsMulticopter {
public:


    AP_MotorsMatrix(uint16_t loop_rate, uint16_t speed_hz = 490) :
        AP_MotorsMulticopter(loop_rate, speed_hz)
    {};


    void init(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type);



    void set_update_rate(uint16_t speed_hz);




    void output_test(uint8_t motor_seq, int16_t pwm);


    void output_to_motors();



    uint16_t get_motor_mask();

protected:

    void output_armed_stabilizing();


    void add_motor_raw(int8_t motor_num, float roll_fac, float pitch_fac, float yaw_fac, uint8_t testing_order);


    void add_motor(int8_t motor_num, float angle_degrees, float yaw_factor, uint8_t testing_order);


    void add_motor(int8_t motor_num, float roll_factor_in_degrees, float pitch_factor_in_degrees, float yaw_factor, uint8_t testing_order);


    void remove_motor(int8_t motor_num);


    virtual void setup_motors(motor_frame_class frame_class, motor_frame_type frame_type);


    void normalise_rpy_factors();


    void thrust_compensation(void) override;

    float _roll_factor[12];
    float _pitch_factor[12];
    float _yaw_factor[12];
    float _thrust_rpyt_out[12];
    uint8_t _test_order[12];
    motor_frame_class _last_frame_class;
    motor_frame_type _last_frame_type;
};
# 6 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsTri.h" 1


       
# 17 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsTri.h"
class AP_MotorsTri : public AP_MotorsMulticopter {
public:


    AP_MotorsTri(uint16_t loop_rate, uint16_t speed_hz = 490) :
        AP_MotorsMulticopter(loop_rate, speed_hz)
    {
    };


    void init(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_update_rate( uint16_t speed_hz );




    virtual void output_test(uint8_t motor_seq, int16_t pwm);


    virtual void output_to_motors();



    virtual uint16_t get_motor_mask();




    void output_motor_mask(float thrust, uint8_t mask) override;

protected:

    void output_armed_stabilizing();


    void thrust_compensation(void) override;


    int16_t calc_yaw_radio_output(float yaw_input, float yaw_input_max);



    SRV_Channel *_yaw_servo;
    float _pivot_angle;
    float _thrust_right;
    float _thrust_rear;
    float _thrust_left;
};
# 7 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Single.h" 1


       




# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli.h" 1


       
# 12 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_RSC.h" 1
       







enum RotorControlState {
    ROTOR_CONTROL_STOP = 0,
    ROTOR_CONTROL_IDLE,
    ROTOR_CONTROL_ACTIVE
};


enum RotorControlMode {
    ROTOR_CONTROL_MODE_DISABLED = 0,
    ROTOR_CONTROL_MODE_SPEED_PASSTHROUGH,
    ROTOR_CONTROL_MODE_SPEED_SETPOINT,
    ROTOR_CONTROL_MODE_OPEN_LOOP_POWER_OUTPUT,
    ROTOR_CONTROL_MODE_CLOSED_LOOP_POWER_OUTPUT
};

class AP_MotorsHeli_RSC {
public:
    friend class AP_MotorsHeli_Single;
    friend class AP_MotorsHeli_Dual;
    friend class AP_MotorsHeli_Quad;

    AP_MotorsHeli_RSC(SRV_Channel::Aux_servo_function_t aux_fn,
                      uint8_t default_channel) :
        _aux_fn(aux_fn),
        _default_channel(default_channel)
    {};


    void init_servo();


    void set_control_mode(RotorControlMode mode) { _control_mode = mode; }


    void set_critical_speed(float critical_speed) { _critical_speed = critical_speed; }


    float get_critical_speed() const { return _critical_speed; }


    float get_idle_output() { return _idle_output; }
    void set_idle_output(float idle_output) { _idle_output = idle_output; }


    float get_desired_speed() const { return _desired_speed; }


    void set_desired_speed(float desired_speed) { _desired_speed = desired_speed; }


    float get_control_output() const { return _control_output; }


    float get_rotor_speed() const;


    bool is_runup_complete() const { return _runup_complete; }


    void set_ramp_time(int8_t ramp_time) { _ramp_time = ramp_time; }


    void set_runup_time(int8_t runup_time) { _runup_time = runup_time; }


    void set_power_output_range(float power_low, float power_high, float power_negc, uint16_t slewrate);


    void set_motor_load(float load) { _load_feedforward = load; }


    void output(RotorControlState state);

private:
    uint64_t _last_update_us;


    SRV_Channel::Aux_servo_function_t _aux_fn;
    uint8_t _default_channel;


    RotorControlMode _control_mode = ROTOR_CONTROL_MODE_DISABLED;
    float _critical_speed = 0.0f;
    float _idle_output = 0.0f;
    float _desired_speed = 0.0f;
    float _control_output = 0.0f;
    float _rotor_ramp_output = 0.0f;
    float _rotor_runup_output = 0.0f;
    int8_t _ramp_time = 0;
    int8_t _runup_time = 0;
    bool _runup_complete = false;
    float _power_output_low = 0.0f;
    float _power_output_high = 0.0f;
    float _power_output_negc = 0.0f;
    uint16_t _power_slewrate = 0;
    float _load_feedforward = 0.0f;

    AP_Int16 _pwm_min;
    AP_Int16 _pwm_max;
    AP_Int8 _pwm_rev;


    void update_rotor_ramp(float rotor_ramp_input, float dt);


    void update_rotor_runup(float dt);


    void write_rsc(float servo_out);
};
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli.h" 2
# 44 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli.h"
class AP_HeliControls;


class AP_MotorsHeli : public AP_Motors {
public:


    AP_MotorsHeli( uint16_t loop_rate,
                   uint16_t speed_hz = 125) :
        AP_Motors(loop_rate, speed_hz)
    {
        AP_Param::setup_object_defaults(this, var_info);


        _heliflags.landing_collective = 0;
        _heliflags.rotor_runup_complete = 0;
    };


    void init(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type);


    virtual void set_update_rate( uint16_t speed_hz ) = 0;


    void output_min();




    virtual void output_test(uint8_t motor_seq, int16_t pwm) = 0;






    virtual bool parameter_check(bool display_msg) const;


    virtual bool has_flybar() const { return 0; }


    void set_collective_for_landing(bool landing) { _heliflags.landing_collective = landing; }


    void set_inverted_flight(bool inverted) { _heliflags.inverted_flight = inverted; }


    uint8_t get_rsc_mode() const { return _rsc_mode; }


    float get_rsc_setpoint() const { return _rsc_setpoint / 1000.0f; }


    virtual void set_desired_rotor_speed(float desired_speed) = 0;


    virtual float get_desired_rotor_speed() const = 0;


    virtual float get_main_rotor_speed() const = 0;


    bool rotor_runup_complete() const { return _heliflags.rotor_runup_complete; }


    virtual bool rotor_speed_above_critical() const = 0;



    virtual uint16_t get_motor_mask() = 0;

    virtual void set_acro_tail(bool set) {}


    virtual void ext_gyro_gain(float gain) {}


    void output();


    virtual bool supports_yaw_passthrough() const { return false; }

    float get_throttle_hover() const { return 0.5f; }


    static const struct AP_Param::GroupInfo var_info[];

protected:


    enum ServoControlModes {
        SERVO_CONTROL_MODE_AUTOMATED = 0,
        SERVO_CONTROL_MODE_MANUAL_PASSTHROUGH,
        SERVO_CONTROL_MODE_MANUAL_MAX,
        SERVO_CONTROL_MODE_MANUAL_CENTER,
        SERVO_CONTROL_MODE_MANUAL_MIN,
        SERVO_CONTROL_MODE_MANUAL_OSCILLATE,
    };


    void output_armed_stabilizing();
    void output_armed_zero_throttle();
    void output_disarmed();


    virtual void update_motor_control(RotorControlState state) = 0;


    void reset_flight_controls();


    void update_throttle_filter();


    virtual void move_actuators(float roll_out, float pitch_out, float coll_in, float yaw_out) = 0;


    void reset_swash_servo(SRV_Channel *servo);


    virtual bool init_outputs() = 0;


    virtual void calculate_armed_scalars() = 0;


    virtual void calculate_scalars() = 0;


    virtual void calculate_roll_pitch_collective_factors() = 0;



    virtual void servo_test() = 0;


    struct heliflags_type {
        uint8_t landing_collective : 1;
        uint8_t rotor_runup_complete : 1;
        uint8_t inverted_flight : 1;
    } _heliflags;


    AP_Int16 _cyclic_max;
    AP_Int16 _collective_min;
    AP_Int16 _collective_max;
    AP_Int16 _collective_mid;
    AP_Int8 _servo_mode;
    AP_Int16 _rsc_setpoint;
    AP_Int8 _rsc_mode;
    AP_Int8 _rsc_ramp_time;
    AP_Int8 _rsc_runup_time;
    AP_Int16 _land_collective_min;
    AP_Int16 _rsc_critical;
    AP_Int16 _rsc_idle_output;
    AP_Int16 _rsc_power_low;
    AP_Int16 _rsc_power_high;
    AP_Int16 _rsc_power_negc;
    AP_Int16 _rsc_slewrate;
    AP_Int8 _servo_test;


    float _collective_mid_pct = 0.0f;
    uint8_t _servo_test_cycle_counter = 0;

    motor_frame_type _frame_type;
};
# 9 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Single.h" 2
# 45 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Single.h"
class AP_MotorsHeli_Single : public AP_MotorsHeli {
public:

    AP_MotorsHeli_Single(uint16_t loop_rate,
                         uint16_t speed_hz = 125) :
        AP_MotorsHeli(loop_rate, speed_hz),
        _main_rotor(SRV_Channel::k_heli_rsc, 7),
        _tail_rotor(SRV_Channel::k_heli_tail_rsc, 6)
    {
        AP_Param::setup_object_defaults(this, var_info);
    };


    void set_update_rate(uint16_t speed_hz) override;




    void output_test(uint8_t motor_seq, int16_t pwm) override;


    void set_desired_rotor_speed(float desired_speed) override;


    float get_main_rotor_speed() const override { return _main_rotor.get_rotor_speed(); }


    float get_desired_rotor_speed() const override { return _main_rotor.get_desired_speed(); }


    bool rotor_speed_above_critical() const override { return _main_rotor.get_rotor_speed() > _main_rotor.get_critical_speed(); }


    void calculate_scalars() override;


    void calculate_armed_scalars() override;



    uint16_t get_motor_mask() override;


    void ext_gyro_gain(float gain) override { _ext_gyro_gain_std = gain * 1000.0f; }


    bool has_flybar() const override { return _flybar_mode; }


    bool supports_yaw_passthrough() const override { return _tail_type == 1; }

    void set_acro_tail(bool set) override { _acro_tail = set; }


    bool parameter_check(bool display_msg) const override;


    static const struct AP_Param::GroupInfo var_info[];

protected:


    bool init_outputs() override;


    void update_motor_control(RotorControlState state) override;


    void calculate_roll_pitch_collective_factors() override;


    void move_actuators(float roll_out, float pitch_out, float coll_in, float yaw_out) override;


    void move_yaw(float yaw_out);


    void write_aux(float servo_out);


    void servo_test() override;


    AP_MotorsHeli_RSC _main_rotor;
    AP_MotorsHeli_RSC _tail_rotor;


    float _oscillate_angle = 0.0f;
    float _servo_test_cycle_time = 0.0f;
    float _collective_test = 0.0f;
    float _roll_test = 0.0f;
    float _pitch_test = 0.0f;
    float _yaw_test = 0.0f;


    AP_Int16 _servo1_pos;
    AP_Int16 _servo2_pos;
    AP_Int16 _servo3_pos;
    AP_Int16 _tail_type;
    AP_Int8 _swash_type;
    AP_Int16 _ext_gyro_gain_std;
    AP_Int16 _ext_gyro_gain_acro;
    AP_Int16 _phase_angle;
    AP_Float _collective_yaw_effect;
    AP_Int8 _flybar_mode;
    AP_Int16 _direct_drive_tailspeed;

    SRV_Channel *_swash_servo_1;
    SRV_Channel *_swash_servo_2;
    SRV_Channel *_swash_servo_3;
    SRV_Channel *_yaw_servo;
    SRV_Channel *_servo_aux;

    bool _acro_tail = false;
    float _rollFactor[3];
    float _pitchFactor[3];
    float _collectiveFactor[3];
};
# 8 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Dual.h" 1
# 42 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Dual.h"
class AP_MotorsHeli_Dual : public AP_MotorsHeli {
public:

    AP_MotorsHeli_Dual(uint16_t loop_rate,
                       uint16_t speed_hz = 125) :
        AP_MotorsHeli(loop_rate, speed_hz),
        _rotor(SRV_Channel::k_heli_rsc, 7)
    {
        AP_Param::setup_object_defaults(this, var_info);
    };



    void set_update_rate( uint16_t speed_hz ) override;


    void output_test(uint8_t motor_seq, int16_t pwm) override;


    void set_desired_rotor_speed(float desired_speed) override;


    float get_main_rotor_speed() const override { return _rotor.get_rotor_speed(); }


    float get_desired_rotor_speed() const override { return _rotor.get_rotor_speed(); }


    bool rotor_speed_above_critical() const override { return _rotor.get_rotor_speed() > _rotor.get_critical_speed(); }


    void calculate_scalars() override;


    void calculate_armed_scalars() override;


    uint16_t get_motor_mask() override;


    bool has_flybar() const override { return 0; }


    bool supports_yaw_passthrough() const override { return false; }


    void servo_test() override;


    static const struct AP_Param::GroupInfo var_info[];

protected:


    bool init_outputs () override;


    void update_motor_control(RotorControlState state) override;


    void calculate_roll_pitch_collective_factors () override;


    void move_actuators(float roll_out, float pitch_out, float coll_in, float yaw_out) override;


    AP_MotorsHeli_RSC _rotor;


    float _oscillate_angle = 0.0f;
    float _servo_test_cycle_time = 0.0f;
    float _collective_test = 0.0f;
    float _roll_test = 0.0f;
    float _pitch_test = 0.0f;


    AP_Int16 _collective2_min;
    AP_Int16 _collective2_max;
    AP_Int16 _collective2_mid;
    AP_Int16 _servo1_pos;
    AP_Int16 _servo2_pos;
    AP_Int16 _servo3_pos;
    AP_Int16 _servo4_pos;
    AP_Int16 _servo5_pos;
    AP_Int16 _servo6_pos;
    AP_Int16 _swash1_phase_angle;
    AP_Int16 _swash2_phase_angle;
    AP_Int8 _dual_mode;
    AP_Float _dcp_scaler;
    AP_Float _dcp_yaw_effect;
    AP_Float _yaw_scaler;

    SRV_Channel *_swash_servo_1;
    SRV_Channel *_swash_servo_2;
    SRV_Channel *_swash_servo_3;
    SRV_Channel *_swash_servo_4;
    SRV_Channel *_swash_servo_5;
    SRV_Channel *_swash_servo_6;


    float _collective2_mid_pct = 0.0f;
    float _rollFactor[6];
    float _pitchFactor[6];
    float _collectiveFactor[6];
    float _yawFactor[6];
};
# 9 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Quad.h" 1



       
# 22 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsHeli_Quad.h"
class AP_MotorsHeli_Quad : public AP_MotorsHeli {
public:

    AP_MotorsHeli_Quad(uint16_t loop_rate,
                       uint16_t speed_hz = 125) :
        AP_MotorsHeli(loop_rate, speed_hz),
        _rotor(SRV_Channel::k_heli_rsc, 7)
    {
        AP_Param::setup_object_defaults(this, var_info);
    };


    void set_update_rate( uint16_t speed_hz ) override;


    void output_test(uint8_t motor_seq, int16_t pwm) override;


    void set_desired_rotor_speed(float desired_speed) override;


    float get_main_rotor_speed() const override { return _rotor.get_rotor_speed(); }


    float get_desired_rotor_speed() const override { return _rotor.get_rotor_speed(); }


    bool rotor_speed_above_critical() const override { return _rotor.get_rotor_speed() > _rotor.get_critical_speed(); }


    void calculate_scalars() override;


    void calculate_armed_scalars() override;


    uint16_t get_motor_mask() override;


    bool has_flybar() const override { return 0; }


    bool supports_yaw_passthrough() const override { return false; }


    void servo_test() override;


    static const struct AP_Param::GroupInfo var_info[];

protected:


    bool init_outputs () override;


    void update_motor_control(RotorControlState state) override;


    void calculate_roll_pitch_collective_factors () override;


    void move_actuators(float roll_out, float pitch_out, float coll_in, float yaw_out) override;


    AP_MotorsHeli_RSC _rotor;


    SRV_Channel *_servo[4];


    float _rollFactor[4];
    float _pitchFactor[4];
    float _collectiveFactor[4];
    float _yawFactor[4];
};
# 10 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsSingle.h" 1


       
# 22 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsSingle.h"
class AP_MotorsSingle : public AP_MotorsMulticopter {
public:


    AP_MotorsSingle(uint16_t loop_rate, uint16_t speed_hz = 490) :
        AP_MotorsMulticopter(loop_rate, speed_hz)
    {
    };


    void init(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_update_rate( uint16_t speed_hz );




    virtual void output_test(uint8_t motor_seq, int16_t pwm);


    virtual void output_to_motors();



    virtual uint16_t get_motor_mask();

protected:

    void output_armed_stabilizing();

    int16_t _throttle_radio_output;
    float _actuator_out[4];
    float _thrust_out;
    SRV_Channel *_servo1;
    SRV_Channel *_servo2;
    SRV_Channel *_servo3;
    SRV_Channel *_servo4;
};
# 11 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsCoax.h" 1


       
# 22 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsCoax.h"
class AP_MotorsCoax : public AP_MotorsMulticopter {
public:


    AP_MotorsCoax(uint16_t loop_rate, uint16_t speed_hz = 490) :
        AP_MotorsMulticopter(loop_rate, speed_hz)
    {
    };


    void init(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_update_rate( uint16_t speed_hz );




    virtual void output_test(uint8_t motor_seq, int16_t pwm);


    virtual void output_to_motors();



    virtual uint16_t get_motor_mask();

protected:

    void output_armed_stabilizing();

    float _actuator_out[4];
    float _thrust_yt_ccw;
    float _thrust_yt_cw;
    SRV_Channel *_servo1;
    SRV_Channel *_servo2;
    SRV_Channel *_servo3;
    SRV_Channel *_servo4;
};
# 12 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_MotorsTailsitter.h" 1


       







class AP_MotorsTailsitter : public AP_MotorsMulticopter {
public:


    AP_MotorsTailsitter(uint16_t loop_rate, uint16_t speed_hz = 490);


    void init(motor_frame_class frame_class, motor_frame_type frame_type);


    void set_frame_class_and_type(motor_frame_class frame_class, motor_frame_type frame_type) {}
    void set_update_rate( uint16_t speed_hz ) {}

    void output_test(uint8_t motor_seq, int16_t pwm) {}


    void output_to_motors();


    uint16_t get_motor_mask() { return 0; }

protected:

    void output_armed_stabilizing();


    float _aileron;
    float _elevator;
    float _rudder;
    float _throttle;
};
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors6DOF.h" 1



       







class AP_Motors6DOF : public AP_MotorsMatrix {
public:

    AP_Motors6DOF(uint16_t loop_rate, uint16_t speed_hz = 490) :
        AP_MotorsMatrix(loop_rate, speed_hz) {
        AP_Param::setup_object_defaults(this, var_info);
    };


    typedef enum {
        SUB_FRAME_BLUEROV1,
        SUB_FRAME_VECTORED,
        SUB_FRAME_VECTORED_6DOF,
        SUB_FRAME_VECTORED_6DOF_90DEG,
        SUB_FRAME_SIMPLEROV_3,
        SUB_FRAME_SIMPLEROV_4,
        SUB_FRAME_SIMPLEROV_5,
        SUB_FRAME_CUSTOM
    } sub_frame_t;


    void setup_motors(motor_frame_class frame_class, motor_frame_type frame_type) override;


    void output_min() override;


    int16_t calc_thrust_to_pwm(float thrust_in) const;


    void output_to_motors() override;


    static const struct AP_Param::GroupInfo var_info[];

protected:


    void add_motor_raw_6dof(int8_t motor_num, float roll_fac, float pitch_fac, float yaw_fac, float climb_fac, float forward_fac, float lat_fac, uint8_t testing_order);

    void output_armed_stabilizing() override;
    void output_armed_stabilizing_vectored();
    void output_armed_stabilizing_vectored_6dof();


    AP_Int8 _motor_reverse[12];
    AP_Float _forwardVerticalCouplingFactor;

    float _throttle_factor[12];
    float _forward_factor[12];
    float _lateral_factor[12];
};
# 13 "/Users/yu/repos/ardupilot/libraries/AP_Motors/AP_Motors.h" 2
# 22 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Rally/AP_Rally.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Rally/AP_Rally.h"
       
# 24 "/Users/yu/repos/ardupilot/libraries/AP_Rally/AP_Rally.h"
struct __attribute__((__packed__)) RallyLocation {
    int32_t lat;
    int32_t lng;
    int16_t alt;
    int16_t break_alt;
    uint16_t land_dir;
    uint8_t flags;


};



class AP_Rally {
public:
    static AP_Rally create(AP_AHRS &ahrs) {
        return AP_Rally{ahrs};
    }

    constexpr AP_Rally(AP_Rally &&other) = default;


    AP_Rally(const AP_Rally &other) = delete;
    AP_Rally &operator=(const AP_Rally&) = delete;


    bool get_rally_point_with_index(uint8_t i, RallyLocation &ret) const;
    bool set_rally_point_with_index(uint8_t i, const RallyLocation &rallyLoc);
    uint8_t get_rally_total() const { return _rally_point_total_count; }
    uint8_t get_rally_max(void) const { return _storage.size() / 15; }

    float get_rally_limit_km() const { return _rally_limit_km; }

    Location rally_location_to_location(const RallyLocation &ret) const;


    Location calc_best_rally_or_home_location(const Location &current_loc, float rtl_home_alt) const;
    bool find_nearest_rally_point(const Location &myloc, RallyLocation &ret) const;


    uint32_t last_change_time_ms(void) const { return _last_change_time_ms; }


    static const struct AP_Param::GroupInfo var_info[];

protected:
    AP_Rally(AP_AHRS &ahrs);

private:
    virtual bool is_valid(const Location &rally_point) const { return true; }

    static StorageAccess _storage;


    const AP_AHRS& _ahrs;


    AP_Int8 _rally_point_total_count;
    AP_Float _rally_limit_km;
    AP_Int8 _rally_incl_home;

    uint32_t _last_change_time_ms;
};
# 23 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Proximity/AP_Proximity.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Proximity/AP_Proximity.h"
       






# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 1
# 23 "/Users/yu/repos/ardupilot/libraries/AP_Proximity/AP_Proximity.h" 2







class AP_Proximity_Backend;

class AP_Proximity
{
public:
    friend class AP_Proximity_Backend;

    AP_Proximity(AP_SerialManager &_serial_manager);


    enum Proximity_Type {
        Proximity_Type_None = 0,
        Proximity_Type_SF40C = 1,
        Proximity_Type_MAV = 2,
        Proximity_Type_TRTOWER = 3,
        Proximity_Type_RangeFinder = 4,
        Proximity_Type_RPLidarA2 = 5,
        Proximity_Type_SITL = 10,
    };

    enum Proximity_Status {
        Proximity_NotConnected = 0,
        Proximity_NoData,
        Proximity_Good
    };


    struct Proximity_Distance_Array {
        uint8_t orientation[8];
        float distance[8];
    };


    void init(void);


    void update(void);


    void set_rangefinder(const RangeFinder *rangefinder) { _rangefinder = rangefinder; }
    const RangeFinder *get_rangefinder() const { return _rangefinder; }


    uint8_t get_orientation(uint8_t instance) const;
    int16_t get_yaw_correction(uint8_t instance) const;


    Proximity_Status get_status(uint8_t instance) const;
    Proximity_Status get_status() const;


    uint8_t num_sensors(void) const {
        return num_instances;
    }



    bool get_horizontal_distance(uint8_t instance, float angle_deg, float &distance) const;
    bool get_horizontal_distance(float angle_deg, float &distance) const;


    bool get_horizontal_distances(Proximity_Distance_Array &prx_dist_array) const;



    const Vector2f* get_boundary_points(uint8_t instance, uint16_t& num_points) const;
    const Vector2f* get_boundary_points(uint16_t& num_points) const;



    bool get_closest_object(float& angle_deg, float &distance) const;


    uint8_t get_object_count() const;
    bool get_object_angle_and_distance(uint8_t object_number, float& angle_deg, float &distance) const;


    float distance_max() const;
    float distance_min() const;


    void handle_msg(mavlink_message_t *msg);


    struct Proximity_State {
        uint8_t instance;
        enum Proximity_Status status;
    };






    bool get_upward_distance(uint8_t instance, float &distance) const;
    bool get_upward_distance(float &distance) const;


    static const struct AP_Param::GroupInfo var_info[];

private:
    Proximity_State state[1];
    AP_Proximity_Backend *drivers[1];
    const RangeFinder *_rangefinder;
    uint8_t primary_instance:3;
    uint8_t num_instances:3;
    AP_SerialManager &serial_manager;


    AP_Int8 _type[1];
    AP_Int8 _orientation[1];
    AP_Int16 _yaw_correction[1];
    AP_Int16 _ignore_angle_deg[6];
    AP_Int8 _ignore_width_deg[6];

    void detect_instance(uint8_t instance);
    void update_instance(uint8_t instance);
};
# 25 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor_Backend.h" 1
# 23 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor_Backend.h"
       







class AuxiliaryBus;
class DataFlash_Class;

class AP_InertialSensor_Backend
{
public:
    AP_InertialSensor_Backend(AP_InertialSensor &imu);
    AP_InertialSensor_Backend(const AP_InertialSensor_Backend &that) = delete;



    virtual ~AP_InertialSensor_Backend(void) {}






    virtual bool update() = 0;




    virtual void accumulate() {}





    virtual void start() { }




    virtual AuxiliaryBus *get_auxiliary_bus() { return nullptr; }





    int16_t get_id() const { return _id; }


    void notify_fifo_reset(void);
# 84 "/Users/yu/repos/ardupilot/libraries/AP_InertialSensor/AP_InertialSensor_Backend.h"
    enum DevTypes {
        DEVTYPE_BMI160 = 0x09,
        DEVTYPE_L3G4200D = 0x10,
        DEVTYPE_ACC_LSM303D = 0x11,
        DEVTYPE_ACC_BMA180 = 0x12,
        DEVTYPE_ACC_MPU6000 = 0x13,
        DEVTYPE_ACC_MPU9250 = 0x16,
        DEVTYPE_ACC_IIS328DQ = 0x17,
        DEVTYPE_GYR_MPU6000 = 0x21,
        DEVTYPE_GYR_L3GD20 = 0x22,
        DEVTYPE_GYR_MPU9250 = 0x24,
        DEVTYPE_GYR_I3G4250D = 0x25,
    };

protected:

    AP_InertialSensor &_imu;


    AP_HAL::Semaphore *_sem;

    void _rotate_and_correct_accel(uint8_t instance, Vector3f &accel);
    void _rotate_and_correct_gyro(uint8_t instance, Vector3f &gyro);


    void _publish_gyro(uint8_t instance, const Vector3f &gyro);







    void _notify_new_gyro_raw_sample(uint8_t instance, const Vector3f &accel, uint64_t sample_us=0);


    void _publish_accel(uint8_t instance, const Vector3f &accel);







    void _notify_new_accel_raw_sample(uint8_t instance, const Vector3f &accel, uint64_t sample_us=0, bool fsync_set=false);


    void _set_accel_oversampling(uint8_t instance, uint8_t n);


    void _set_gyro_oversampling(uint8_t instance, uint8_t n);


    void _update_sensor_rate(uint16_t &count, uint32_t &start_us, float &rate_hz);


    void _set_accel_max_abs_offset(uint8_t instance, float offset);


    uint32_t _accel_raw_sample_rate(uint8_t instance) const {
        return _imu._accel_raw_sample_rates[instance];
    }


    uint32_t _gyro_raw_sample_rate(uint8_t instance) const {
        return _imu._gyro_raw_sample_rates[instance];
    }


    void _publish_temperature(uint8_t instance, float temperature);


    void _set_accel_error_count(uint8_t instance, uint32_t error_count);


    void _set_gyro_error_count(uint8_t instance, uint32_t error_count);


    void _inc_accel_error_count(uint8_t instance);


    void _inc_gyro_error_count(uint8_t instance);


    int16_t _id = -1;


    uint8_t _accel_filter_cutoff(void) const { return _imu._accel_filter_cutoff; }


    uint8_t _gyro_filter_cutoff(void) const { return _imu._gyro_filter_cutoff; }


    uint16_t get_sample_rate_hz(void) const;


    void update_gyro(uint8_t instance);


    void update_accel(uint8_t instance);


    int8_t _last_accel_filter_hz[3];
    int8_t _last_gyro_filter_hz[3];

    void set_gyro_orientation(uint8_t instance, enum Rotation rotation) {
        _imu._gyro_orientation[instance] = rotation;
    }

    void set_accel_orientation(uint8_t instance, enum Rotation rotation) {
        _imu._accel_orientation[instance] = rotation;
    }



    void increment_clip_count(uint8_t instance) {
        _imu._accel_clip_count[instance]++;
    }


    bool enable_fast_sampling(uint8_t instance) {
        return (_imu._fast_sampling_mask & (1U<<instance)) != 0;
    }




    void notify_accel_fifo_reset(uint8_t instance);
    void notify_gyro_fifo_reset(uint8_t instance);





private:

    bool should_log_imu_raw() const;
    void log_accel_raw(uint8_t instance, const uint64_t sample_us, const Vector3f &accel);
    void log_gyro_raw(uint8_t instance, const uint64_t sample_us, const Vector3f &gryo);

};
# 26 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2







# 1 "/Users/yu/repos/ardupilot/libraries/DataFlash/DFMessageWriter.h" 1
       

# 1 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash_Backend.h" 1
       



class DFMessageWriter_DFLogStart;

class DataFlash_Backend
{

public:
    typedef Functor<void, AP_HAL::BetterStream*, uint8_t> print_mode_fn;
    typedef Functor<void> vehicle_startup_message_Log_Writer;

    DataFlash_Backend(DataFlash_Class &front,
                      class DFMessageWriter_DFLogStart *writer);

    vehicle_startup_message_Log_Writer vehicle_message_writer();

    void internal_error();

    virtual bool CardInserted(void) const = 0;


    virtual void EraseAll() = 0;

    virtual bool NeedPrep() = 0;
    virtual void Prep() = 0;


    bool WriteBlock(const void *pBuffer, uint16_t size) {
        return WritePrioritisedBlock(pBuffer, size, false);
    }

    bool WriteCriticalBlock(const void *pBuffer, uint16_t size) {
        return WritePrioritisedBlock(pBuffer, size, true);
    }

    bool WritePrioritisedBlock(const void *pBuffer, uint16_t size, bool is_critical);


    virtual uint16_t find_last_log() = 0;
    virtual void get_log_boundaries(uint16_t log_num, uint16_t & start_page, uint16_t & end_page) = 0;
    virtual void get_log_info(uint16_t log_num, uint32_t &size, uint32_t &time_utc) = 0;
    virtual int16_t get_log_data(uint16_t log_num, uint16_t page, uint32_t offset, uint16_t len, uint8_t *data) = 0;
    virtual uint16_t get_num_logs() = 0;
    virtual void LogReadProcess(const uint16_t list_entry,
                                uint16_t start_page, uint16_t end_page,
                                print_mode_fn printMode,
                                AP_HAL::BetterStream *port) = 0;
    virtual void DumpPageInfo(AP_HAL::BetterStream *port) = 0;
    virtual void ShowDeviceInfo(AP_HAL::BetterStream *port) = 0;
    virtual void ListAvailableLogs(AP_HAL::BetterStream *port) = 0;

    virtual bool logging_started(void) const = 0;

    virtual void Init() { }

    void set_mission(const AP_Mission *mission);

    virtual uint32_t bufferspace_available() = 0;

    virtual void PrepForArming() { }

    virtual uint16_t start_new_log(void) = 0;







    virtual void stop_logging(void) = 0;

    void Log_Fill_Format(const struct LogStructure *structure, struct log_Format &pkt);
    void Log_Fill_Format_Units(const struct LogStructure *s, struct log_Format_Units &pkt);



    virtual void flush(void) { }



    virtual void remote_log_block_status_msg(mavlink_channel_t chan,
                                             mavlink_message_t* msg) { }


   virtual void periodic_tasks();

    uint8_t num_types() const;
    const struct LogStructure *structure(uint8_t structure) const;

    uint8_t num_units() const;
    const struct UnitStructure *unit(uint8_t unit) const;

    uint8_t num_multipliers() const;
    const struct MultiplierStructure *multiplier(uint8_t multiplier) const;

    void Log_Write_EntireMission(const AP_Mission &mission);
    bool Log_Write_Format(const struct LogStructure *structure);
    bool Log_Write_MavCmd(uint16_t cmd_total, const mavlink_mission_item_t& mav_cmd);
    bool Log_Write_Message(const char *message);
    bool Log_Write_Mission_Cmd(const AP_Mission &mission,
                               const AP_Mission::Mission_Command &cmd);
    bool Log_Write_Mode(uint8_t mode, uint8_t reason = 0);
    bool Log_Write_Parameter(const char *name, float value);
    bool Log_Write_Parameter(const AP_Param *ap,
                             const AP_Param::ParamToken &token,
                             enum ap_var_type type);

    uint32_t num_dropped(void) const {
        return _dropped;
    }






    bool Log_Write_Emit_FMT(uint8_t msg_type);



    bool Log_Write(uint8_t msg_type, va_list arg_list, bool is_critical=false);


    virtual bool logging_enabled() const = 0;
    virtual bool logging_failed() const = 0;

    virtual void vehicle_was_disarmed() { };

    bool Log_Write_Unit(const struct UnitStructure *s);
    bool Log_Write_Multiplier(const struct MultiplierStructure *s);
    bool Log_Write_Format_Units(const struct LogStructure *structure);


protected:

    DataFlash_Class &_front;

    virtual void periodic_10Hz(const uint32_t now);
    virtual void periodic_1Hz(const uint32_t now);
    virtual void periodic_fullrate(const uint32_t now);




    void _print_log_entry(uint8_t msg_type,
                          print_mode_fn print_mode,
                          AP_HAL::BetterStream *port);

    bool ShouldLog(bool is_critical);
    virtual bool WritesOK() const = 0;
    virtual bool StartNewLogOK() const;




    virtual bool ReadBlock(void *pkt, uint16_t size) = 0;

    virtual bool WriteBlockCheckStartupMessages();
    virtual void WriteMoreStartupMessages();
    virtual void push_log_blocks();

    DFMessageWriter_DFLogStart *_startup_messagewriter;
    bool _writing_startup_messages;

    uint8_t _internal_errors;
    uint32_t _dropped;


    virtual void start_new_log_reset_variables();

    virtual bool _WritePrioritisedBlock(const void *pBuffer, uint16_t size, bool is_critical) = 0;

    bool _initialised;

private:

    uint32_t _last_periodic_1Hz;
    uint32_t _last_periodic_10Hz;
    bool have_logged_armed;
};
# 4 "/Users/yu/repos/ardupilot/libraries/DataFlash/DFMessageWriter.h" 2



class DFMessageWriter {
public:

    virtual void reset() = 0;
    virtual void process() = 0;
    virtual bool finished() { return _finished; }

    virtual void set_dataflash_backend(class DataFlash_Backend *backend) {
        _dataflash_backend = backend;
    }

protected:
    bool _finished = false;
    DataFlash_Backend *_dataflash_backend = nullptr;
};


class DFMessageWriter_WriteSysInfo : public DFMessageWriter {
public:
    DFMessageWriter_WriteSysInfo(const char *firmware_string) :
        DFMessageWriter(),
        _firmware_string(firmware_string)
        { }

    void reset();
    void process();

private:
    enum write_sysinfo_blockwriter_stage {
        ws_blockwriter_stage_init,
        ws_blockwriter_stage_firmware_string,
        ws_blockwriter_stage_git_versions,
        ws_blockwriter_stage_system_id
    };
    write_sysinfo_blockwriter_stage stage = ws_blockwriter_stage_init;

    const char *_firmware_string;
};

class DFMessageWriter_WriteEntireMission : public DFMessageWriter {
public:

    void reset();
    void process();

    void set_mission(const AP_Mission *mission);

private:
    enum entire_mission_blockwriter_stage {
        em_blockwriter_stage_init,
        em_blockwriter_stage_write_new_mission_message,
        em_blockwriter_stage_write_mission_items,
        em_blockwriter_stage_done
    };

    const AP_Mission *_mission = nullptr;
    uint16_t _mission_number_to_send = 0;
    entire_mission_blockwriter_stage stage = em_blockwriter_stage_init;
};

class DFMessageWriter_DFLogStart : public DFMessageWriter {
public:
    DFMessageWriter_DFLogStart(const char *firmware_string) :
        _writesysinfo(firmware_string),
        _writeentiremission()
        {
        }

    virtual void set_dataflash_backend(class DataFlash_Backend *backend) {
        DFMessageWriter::set_dataflash_backend(backend);
        _writesysinfo.set_dataflash_backend(backend);
        _writeentiremission.set_dataflash_backend(backend);
    }

    void reset();
    void process();
    bool fmt_done() { return _fmt_done; }

    void set_mission(const AP_Mission *mission);

private:

    enum log_start_blockwriter_stage {
        ls_blockwriter_stage_init,
        ls_blockwriter_stage_formats,
        ls_blockwriter_stage_units,
        ls_blockwriter_stage_multipliers,
        ls_blockwriter_stage_format_units,
        ls_blockwriter_stage_parms,
        ls_blockwriter_stage_sysinfo,
        ls_blockwriter_stage_write_entire_mission,
        ls_blockwriter_stage_vehicle_messages,
        ls_blockwriter_stage_done,
    };

    bool _fmt_done = false;

    log_start_blockwriter_stage stage = ls_blockwriter_stage_init;

    uint16_t next_format_to_send;

    uint8_t _next_unit_to_send;
    uint8_t _next_format_unit_to_send;
    uint8_t _next_multiplier_to_send;

    AP_Param::ParamToken token;
    AP_Param *ap;
    enum ap_var_type type;


    DFMessageWriter_WriteSysInfo _writesysinfo;
    DFMessageWriter_WriteEntireMission _writeentiremission;
};
# 34 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h" 2

class DataFlash_Backend;

enum DataFlash_Backend_Type {
    DATAFLASH_BACKEND_NONE = 0,
    DATAFLASH_BACKEND_FILE = 1,
    DATAFLASH_BACKEND_MAVLINK = 2,
    DATAFLASH_BACKEND_BOTH = 3,
};


class AC_AttitudeControl;
class AC_PosControl;

class DataFlash_Class
{
    friend class DataFlash_Backend;

public:
    typedef Functor<void, AP_HAL::BetterStream*, uint8_t> print_mode_fn;
    typedef Functor<void> vehicle_startup_message_Log_Writer;

    static DataFlash_Class create(const char *firmware_string, const AP_Int32 &log_bitmask) {
        return DataFlash_Class{firmware_string, log_bitmask};
    }


    static DataFlash_Class *instance(void) {
        return _instance;
    }

    constexpr DataFlash_Class(DataFlash_Class &&other) = default;


    DataFlash_Class(const DataFlash_Class &other) = delete;
    DataFlash_Class &operator=(const DataFlash_Class&) = delete;

    void set_mission(const AP_Mission *mission);


    void Init(const struct LogStructure *structure, uint8_t num_types);

    bool CardInserted(void);


    void EraseAll();


    void WriteBlock(const void *pBuffer, uint16_t size);

    void WriteCriticalBlock(const void *pBuffer, uint16_t size);


    uint16_t find_last_log() const;
    void get_log_boundaries(uint16_t log_num, uint16_t & start_page, uint16_t & end_page);
    uint16_t get_num_logs(void);
    void LogReadProcess(uint16_t log_num,
                                uint16_t start_page, uint16_t end_page,
                                print_mode_fn printMode,
                                AP_HAL::BetterStream *port);
    void DumpPageInfo(AP_HAL::BetterStream *port);
    void ShowDeviceInfo(AP_HAL::BetterStream *port);
    void ListAvailableLogs(AP_HAL::BetterStream *port);

    void setVehicle_Startup_Log_Writer(vehicle_startup_message_Log_Writer writer);

    void PrepForArming();

    void EnableWrites(bool enable) { _writes_enabled = enable; }
    bool WritesEnabled() const { return _writes_enabled; }

    void StopLogging();

    void Log_Write_Parameter(const char *name, float value);
    void Log_Write_GPS(const AP_GPS &gps, uint8_t instance, uint64_t time_us=0);
    void Log_Write_RFND(const RangeFinder &rangefinder);
    void Log_Write_IMU(const AP_InertialSensor &ins);
    void Log_Write_IMUDT(const AP_InertialSensor &ins, uint64_t time_us, uint8_t imu_mask);
    bool Log_Write_ISBH(uint16_t seqno,
                        AP_InertialSensor::IMU_SENSOR_TYPE sensor_type,
                        uint8_t instance,
                        uint16_t multiplier,
                        uint16_t sample_count,
                        uint64_t sample_us,
                        float sample_rate_hz);
    bool Log_Write_ISBD(uint16_t isb_seqno,
                        uint16_t seqno,
                        const int16_t x[32],
                        const int16_t y[32],
                        const int16_t z[32]);
    void Log_Write_Vibration(const AP_InertialSensor &ins);
    void Log_Write_RCIN(void);
    void Log_Write_RCOUT(void);
    void Log_Write_RSSI(AP_RSSI &rssi);
    void Log_Write_Baro(AP_Baro &baro, uint64_t time_us=0);
    void Log_Write_Power(void);
    void Log_Write_AHRS2(AP_AHRS &ahrs);
    void Log_Write_POS(AP_AHRS &ahrs);

    void Log_Write_EKF(AP_AHRS_NavEKF &ahrs);

    bool Log_Write_MavCmd(uint16_t cmd_total, const mavlink_mission_item_t& mav_cmd);
    void Log_Write_Radio(const mavlink_radio_t &packet);
    void Log_Write_Message(const char *message);
    void Log_Write_MessageF(const char *fmt, ...);
    void Log_Write_CameraInfo(enum LogMessages msg, const AP_AHRS &ahrs, const Location &current_loc);
    void Log_Write_Camera(const AP_AHRS &ahrs, const Location &current_loc);
    void Log_Write_Trigger(const AP_AHRS &ahrs, const Location &current_loc);
    void Log_Write_ESC(void);
    void Log_Write_Airspeed(AP_Airspeed &airspeed);
    void Log_Write_Attitude(AP_AHRS &ahrs, const Vector3f &targets);
    void Log_Write_AttitudeView(AP_AHRS_View &ahrs, const Vector3f &targets);
    void Log_Write_Current(const AP_BattMonitor &battery);
    void Log_Write_Compass(const Compass &compass, uint64_t time_us=0);
    void Log_Write_Mode(uint8_t mode, uint8_t reason = 0);

    void Log_Write_EntireMission(const AP_Mission &mission);
    void Log_Write_Mission_Cmd(const AP_Mission &mission,
                               const AP_Mission::Mission_Command &cmd);
    void Log_Write_Origin(uint8_t origin_type, const Location &loc);
    void Log_Write_RPM(const AP_RPM &rpm_sensor);
    void Log_Write_Rate(const AP_AHRS &ahrs,
                        const AP_Motors &motors,
                        const AC_AttitudeControl &attitude_control,
                        const AC_PosControl &pos_control);
    void Log_Write_Rally(const AP_Rally &rally);
    void Log_Write_VisualOdom(float time_delta, const Vector3f &angle_delta, const Vector3f &position_delta, float confidence);
    void Log_Write_AOA_SSA(AP_AHRS &ahrs);
    void Log_Write_Beacon(AP_Beacon &beacon);
    void Log_Write_Proximity(AP_Proximity &proximity);
    void Log_Write_SRTL(bool active, uint16_t num_points, uint16_t max_points, uint8_t action, const Vector3f& point);

    void Log_Write(const char *name, const char *labels, const char *fmt, ...);
    void Log_Write(const char *name, const char *labels, const char *units, const char *mults, const char *fmt, ...);
    void Log_WriteV(const char *name, const char *labels, const char *units, const char *mults, const char *fmt, va_list arg_list);


    struct PID_Info {
        float desired;
        float P;
        float I;
        float D;
        float FF;
        float AFF;
    };

    void Log_Write_PID(uint8_t msg_type, const PID_Info &info);


    bool should_log(uint32_t mask) const;

    bool logging_started(void);



    void flush(void);


    void handle_mavlink_msg(class GCS_MAVLINK &, mavlink_message_t* msg);

    void periodic_tasks();


    uint32_t num_dropped(void) const;


    bool log_while_disarmed(void) const { return _params.log_disarmed != 0; }
    uint8_t log_replay(void) const { return _params.log_replay; }

    vehicle_startup_message_Log_Writer _vehicle_messages;


    static const struct AP_Param::GroupInfo var_info[];
    struct {
        AP_Int8 backend_types;
        AP_Int8 file_bufsize;
        AP_Int8 file_disarm_rot;
        AP_Int8 log_disarmed;
        AP_Int8 log_replay;
    } _params;

    const struct LogStructure *structure(uint16_t num) const;
    const struct UnitStructure *unit(uint16_t num) const;
    const struct MultiplierStructure *multiplier(uint16_t num) const;




    bool logging_present() const;
    bool logging_enabled() const;
    bool logging_failed() const;

    void set_vehicle_armed(bool armed_state);
    bool vehicle_is_armed() const { return _armed; }

    void handle_log_send(class GCS_MAVLINK &);
    bool in_log_download() const { return _in_log_download; }

    float quiet_nanf() const { return nanf("0x4152"); }
    double quiet_nan() const { return nan("0x4152445550490a"); }

protected:

    const struct LogStructure *_structures;
    uint8_t _num_types;
    const struct UnitStructure *_units = log_Units;
    const struct MultiplierStructure *_multipliers = log_Multipliers;
    const uint8_t _num_units = (sizeof(log_Units) / sizeof(log_Units[0]));
    const uint8_t _num_multipliers = (sizeof(log_Multipliers) / sizeof(log_Multipliers[0]));




    void WritePrioritisedBlock(const void *pBuffer, uint16_t size,
                               bool is_critical);

private:
    DataFlash_Class(const char *firmware_string, const AP_Int32 &log_bitmask);


    uint8_t _next_backend;
    DataFlash_Backend *backends[2];
    const char *_firmware_string;
    const AP_Int32 &_log_bitmask;

    void internal_error() const;
# 269 "/Users/yu/repos/ardupilot/libraries/DataFlash/DataFlash.h"
    struct log_write_fmt {
        struct log_write_fmt *next;
        uint8_t msg_type;
        uint8_t msg_len;
        uint8_t sent_mask;
        const char *name;
        const char *fmt;
        const char *labels;
        const char *units;
        const char *mults;
    } *log_write_fmts;


    struct log_write_fmt *msg_fmt_for_name(const char *name, const char *labels, const char *units, const char *mults, const char *fmt);


    bool msg_type_in_use(uint8_t msg_type) const;


    int16_t find_free_msg_type() const;


    bool fill_log_write_logstructure(struct LogStructure &logstruct, const uint8_t msg_type) const;



    int16_t Log_Write_calc_msg_len(const char *fmt) const;

    bool _armed;


    void Log_Write_EKF2(AP_AHRS_NavEKF &ahrs);
    void Log_Write_EKF3(AP_AHRS_NavEKF &ahrs);


    void Log_Write_Baro_instance(AP_Baro &baro, uint64_t time_us, uint8_t baro_instance, enum LogMessages type);
    void Log_Write_IMU_instance(const AP_InertialSensor &ins,
                                uint64_t time_us,
                                uint8_t imu_instance,
                                enum LogMessages type);
    void Log_Write_Compass_instance(const Compass &compass,
                                    uint64_t time_us,
                                    uint8_t mag_instance,
                                    enum LogMessages type);
    void Log_Write_Current_instance(const AP_BattMonitor &battery,
                                    uint64_t time_us,
                                    uint8_t battery_instance,
                                    enum LogMessages type,
                                    enum LogMessages celltype);
    void Log_Write_IMUDT_instance(const AP_InertialSensor &ins,
                                  uint64_t time_us,
                                  uint8_t imu_instance,
                                  enum LogMessages type);

    void backend_starting_new_log(const DataFlash_Backend *backend);

private:
    static DataFlash_Class *_instance;

    void validate_structures(const struct LogStructure *logstructures, const uint8_t num_types);
    void dump_structure_field(const struct LogStructure *logstructure, const char *label, const uint8_t fieldnum);
    void dump_structures(const struct LogStructure *logstructures, const uint8_t num_types);
    const char* unit_name(const uint8_t unit_id);
    double multiplier_name(const uint8_t multiplier_id);

    void Log_Write_EKF_Timing(const char *name, uint64_t time_us, const struct ekf_timing &timing);


    void Prep();

    bool _writes_enabled;


    uint8_t _log_listing:1;
    uint8_t _log_sending:1;


    bool _in_log_download:1;


    uint16_t _log_next_list_entry;


    uint16_t _log_last_list_entry;


    uint16_t _log_num_logs;


    uint16_t _log_num_data;


    uint32_t _log_data_offset;


    uint32_t _log_data_size;


    uint32_t _log_data_remaining;


    uint16_t _log_data_page;

    int8_t _log_sending_chan = -1;

    bool should_handle_log_message();
    void handle_log_message(class GCS_MAVLINK &, mavlink_message_t *msg);

    void handle_log_request_list(class GCS_MAVLINK &, mavlink_message_t *msg);
    void handle_log_request_data(class GCS_MAVLINK &, mavlink_message_t *msg);
    void handle_log_request_erase(class GCS_MAVLINK &, mavlink_message_t *msg);
    void handle_log_request_end(class GCS_MAVLINK &, mavlink_message_t *msg);
    void handle_log_send_listing(class GCS_MAVLINK &);
    bool handle_log_send_data(class GCS_MAVLINK &);

    void get_log_info(uint16_t log_num, uint32_t &size, uint32_t &time_utc);

    int16_t get_log_data(uint16_t log_num, uint16_t page, uint32_t offset, uint16_t len, uint8_t *data);



};
# 10 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2



# 1 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/MAVLink_routing.h" 1


       
# 16 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/MAVLink_routing.h"
class MAVLink_routing
{
    friend class GCS_MAVLINK;

public:
    MAVLink_routing(void);
# 30 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/MAVLink_routing.h"
    bool check_and_forward(mavlink_channel_t in_channel, const mavlink_message_t* msg);





    void send_to_components(const mavlink_message_t* msg);





    bool find_by_mavtype(uint8_t mavtype, uint8_t &sysid, uint8_t &compid, mavlink_channel_t &channel);

private:


    uint8_t num_routes;
    struct route {
        uint8_t sysid;
        uint8_t compid;
        mavlink_channel_t channel;
        uint8_t mavtype;
    } routes[20];


    uint8_t no_route_mask;


    void learn_route(mavlink_channel_t in_channel, const mavlink_message_t* msg);


    void get_targets(const mavlink_message_t* msg, int16_t &sysid, int16_t &compid);


    void handle_heartbeat(mavlink_channel_t in_channel, const mavlink_message_t* msg);
};
# 14 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Mount/AP_Mount.h" 1
# 20 "/Users/yu/repos/ardupilot/libraries/AP_Mount/AP_Mount.h"
       
# 35 "/Users/yu/repos/ardupilot/libraries/AP_Mount/AP_Mount.h"
class AP_Mount_Backend;
class AP_Mount_Servo;
class AP_Mount_SoloGimbal;
class AP_Mount_Alexmos;
class AP_Mount_SToRM32;
class AP_Mount_SToRM32_serial;






class AP_Mount
{

    friend class AP_Mount_Backend;
    friend class AP_Mount_Servo;
    friend class AP_Mount_SoloGimbal;
    friend class AP_Mount_Alexmos;
    friend class AP_Mount_SToRM32;
    friend class AP_Mount_SToRM32_serial;

public:
    static AP_Mount create(const AP_AHRS_NavEKF &ahrs, const struct Location &current_loc) {
        return AP_Mount{ahrs, current_loc};
    }

    constexpr AP_Mount(AP_Mount &&other) = default;


    AP_Mount(const AP_Mount &other) = delete;
    AP_Mount &operator=(const AP_Mount&) = delete;



    enum MountType {
        Mount_Type_None = 0,
        Mount_Type_Servo = 1,
        Mount_Type_SoloGimbal = 2,
        Mount_Type_Alexmos = 3,
        Mount_Type_SToRM32 = 4,
        Mount_Type_SToRM32_serial = 5
    };


    void init(const AP_SerialManager& serial_manager);


    void update();


    void update_fast();


    AP_Mount::MountType get_mount_type() const { return get_mount_type(_primary); }
    AP_Mount::MountType get_mount_type(uint8_t instance) const;


    bool has_pan_control() const { return has_pan_control(_primary); }
    bool has_pan_control(uint8_t instance) const;


    enum MAV_MOUNT_MODE get_mode() const { return get_mode(_primary); }
    enum MAV_MOUNT_MODE get_mode(uint8_t instance) const;



    void set_mode(enum MAV_MOUNT_MODE mode) { return set_mode(_primary, mode); }
    void set_mode(uint8_t instance, enum MAV_MOUNT_MODE mode);



    void set_mode_to_default() { set_mode_to_default(_primary); }
    void set_mode_to_default(uint8_t instance);


    void set_angle_targets(float roll, float tilt, float pan) { set_angle_targets(_primary, roll, tilt, pan); }
    void set_angle_targets(uint8_t instance, float roll, float tilt, float pan);


    void set_roi_target(const struct Location &target_loc) { set_roi_target(_primary,target_loc); }
    void set_roi_target(uint8_t instance, const struct Location &target_loc);


    void control(int32_t pitch_or_lat, int32_t roll_or_lon, int32_t yaw_or_alt, enum MAV_MOUNT_MODE mount_mode) { control(_primary, pitch_or_lat, roll_or_lon, yaw_or_alt, mount_mode); }
    void control(uint8_t instance, int32_t pitch_or_lat, int32_t roll_or_lon, int32_t yaw_or_alt, enum MAV_MOUNT_MODE mount_mode);


    void configure_msg(mavlink_message_t* msg) { configure_msg(_primary, msg); }
    void configure_msg(uint8_t instance, mavlink_message_t* msg);


    void control_msg(mavlink_message_t* msg) { control_msg(_primary, msg); }
    void control_msg(uint8_t instance, mavlink_message_t* msg);


    void handle_param_value(mavlink_message_t *msg);


    void handle_gimbal_report(mavlink_channel_t chan, mavlink_message_t *msg);


    void send_gimbal_report(mavlink_channel_t chan);


    void status_msg(mavlink_channel_t chan);


    static const struct AP_Param::GroupInfo var_info[];

protected:
    AP_Mount(const AP_AHRS_NavEKF &ahrs, const struct Location &current_loc);


    const AP_AHRS_NavEKF &_ahrs;
    const struct Location &_current_loc;


    AP_Int8 _joystick_speed;


    uint8_t _num_instances;
    uint8_t _primary;
    AP_Mount_Backend *_backends[1];


    struct mount_state {

        AP_Int8 _type;
        AP_Int8 _default_mode;
        AP_Int8 _stab_roll;
        AP_Int8 _stab_tilt;
        AP_Int8 _stab_pan;


        AP_Int8 _roll_rc_in;
        AP_Int8 _tilt_rc_in;
        AP_Int8 _pan_rc_in;


        AP_Int16 _roll_angle_min;
        AP_Int16 _roll_angle_max;
        AP_Int16 _tilt_angle_min;
        AP_Int16 _tilt_angle_max;
        AP_Int16 _pan_angle_min;
        AP_Int16 _pan_angle_max;

        AP_Vector3f _retract_angles;
        AP_Vector3f _neutral_angles;

        AP_Float _roll_stb_lead;
        AP_Float _pitch_stb_lead;

        MAV_MOUNT_MODE _mode;
        struct Location _roi_target;
    } state[1];

    DataFlash_Class *_dataflash;
};
# 16 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Avoidance/AP_Avoidance.h" 1
       
# 29 "/Users/yu/repos/ardupilot/libraries/AP_Avoidance/AP_Avoidance.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_ADSB/AP_ADSB.h" 1
       
# 30 "/Users/yu/repos/ardupilot/libraries/AP_ADSB/AP_ADSB.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Buffer/AP_Buffer.h" 1


       




template <class T, uint8_t SIZE>
class AP_Buffer {
public:



    AP_Buffer();



    void clear();




    void push_back( const T &item );





    bool pop_front(T &ret);






    const T& peek(uint8_t position) const;

    T& peek_mutable(uint8_t position);




    const T& front() const { return this->peek(0); }



    uint8_t size() const { return _num_items; }



    bool is_full() const { return _num_items >= SIZE; }



    bool is_empty() const { return _num_items == 0; }

private:
    uint8_t _num_items;
    uint8_t _head;
    T _buff[SIZE];
};


typedef AP_Buffer<float,5> AP_BufferFloat_Size5;
typedef AP_Buffer<float,15> AP_BufferFloat_Size15;

template <class T, uint8_t SIZE>
AP_Buffer<T,SIZE>::AP_Buffer() :
 _num_items(0), _head(0)
{
}

template <class T, uint8_t SIZE>
void AP_Buffer<T,SIZE>::clear() {

 _num_items = 0;
    _head = 0;
}

template <class T, uint8_t SIZE>
void AP_Buffer<T,SIZE>::push_back( const T &item )
{

    uint8_t tail = _head + _num_items;
    if( tail >= SIZE ) {
        tail -= SIZE;
    }


    _buff[tail] = item;


    if( _num_items < SIZE ) {
        _num_items++;
    }else{

        _head++;
        if( _head >= SIZE ) {
            _head = 0;
        }
    }
}

template <class T, uint8_t SIZE>
bool AP_Buffer<T,SIZE>::pop_front(T &ret)
{
    if(_num_items == 0) {

        return false;
    }


    ret = _buff[_head];


    _head++;
    if( _head >= SIZE )
        _head = 0;


    _num_items--;


    return true;
}

template <class T, uint8_t SIZE>
const T& AP_Buffer<T,SIZE>::peek(uint8_t position) const
{
    uint8_t j = _head + position;


    if( j >= SIZE )
        j -= SIZE;


    return _buff[j];
}

template <class T, uint8_t SIZE>
T& AP_Buffer<T,SIZE>::peek_mutable(uint8_t position)
{
    uint8_t j = _head + position;


    if( j >= SIZE )
        j -= SIZE;


    return _buff[j];
}
# 31 "/Users/yu/repos/ardupilot/libraries/AP_ADSB/AP_ADSB.h" 2

class AP_ADSB {
public:
    static AP_ADSB create(const AP_AHRS &ahrs) {
        return AP_ADSB{ahrs};
    }

    constexpr AP_ADSB(AP_ADSB &&other) = default;


    AP_ADSB(const AP_ADSB &other) = delete;
    AP_ADSB &operator=(const AP_ADSB&) = delete;

    struct adsb_vehicle_t {
        mavlink_adsb_vehicle_t info;
        uint32_t last_update_ms;
    };


    static const struct AP_Param::GroupInfo var_info[];


    void update(void);

    uint16_t get_vehicle_count() { return in_state.vehicle_count; }


    void send_adsb_vehicle(mavlink_channel_t chan);

    void set_stall_speed_cm(const uint16_t stall_speed_cm) { out_state.cfg.stall_speed_cm = stall_speed_cm; }

    void set_is_auto_mode(const bool is_in_auto_mode) { out_state._is_in_auto_mode = is_in_auto_mode; }
    void set_is_flying(const bool is_flying) { out_state.is_flying = is_flying; }

    UAVIONIX_ADSB_RF_HEALTH get_transceiver_status(void) { return out_state.status; }


    Location_Class get_location(const adsb_vehicle_t &vehicle) const;

    bool enabled() const {
        return _enabled;
    }
    bool next_sample(adsb_vehicle_t &obstacle);


    void handle_message(const mavlink_channel_t chan, const mavlink_message_t* msg);

private:
    AP_ADSB(const AP_AHRS &ahrs)
        : _ahrs(ahrs)
    {
        AP_Param::setup_object_defaults(this, var_info);
    }


    void init();


    void deinit();


    void determine_furthest_aircraft(void);


    bool find_index(const adsb_vehicle_t &vehicle, uint16_t *index) const;


    void delete_vehicle(const uint16_t index);

    void set_vehicle(const uint16_t index, const adsb_vehicle_t &vehicle);


    uint32_t genICAO(const Location_Class &loc);


    void set_callsign(const char* str, const bool append_icao);


    void send_configure(const mavlink_channel_t chan);
    void send_dynamic_out(const mavlink_channel_t chan);


    void handle_vehicle(const mavlink_message_t* msg);


    void handle_transceiver_report(mavlink_channel_t chan, const mavlink_message_t* msg);



    const AP_AHRS &_ahrs;

    AP_Int8 _enabled;

    Location_Class _my_loc;



    struct {

        AP_Int16 list_size_param;
        uint16_t list_size = 1;
        adsb_vehicle_t *vehicle_list = nullptr;
        uint16_t vehicle_count;
        AP_Int32 list_radius;


        uint32_t send_start_ms[5];
        uint16_t send_index[5];
    } in_state;



    struct {
        uint32_t last_config_ms;
        uint32_t last_report_ms;
        int8_t chan = -1;
        uint32_t chan_last_ms;
        UAVIONIX_ADSB_RF_HEALTH status;
        bool is_flying;
        bool _is_in_auto_mode;


        struct {
            int32_t ICAO_id;
            AP_Int32 ICAO_id_param;
            int32_t ICAO_id_param_prev = -1;
            char callsign[9];
            AP_Int8 emitterType;
            AP_Int8 lengthWidth;
            AP_Int8 gpsLatOffset;
            AP_Int8 gpsLonOffset;
            uint16_t stall_speed_cm;
            AP_Int8 rfSelect;
        } cfg;

    } out_state;



    uint16_t furthest_vehicle_index;
    float furthest_vehicle_distance;

    static const uint8_t max_samples = 30;
    AP_Buffer<adsb_vehicle_t, max_samples> samples;

    void push_sample(adsb_vehicle_t &vehicle);

};
# 30 "/Users/yu/repos/ardupilot/libraries/AP_Avoidance/AP_Avoidance.h" 2
# 41 "/Users/yu/repos/ardupilot/libraries/AP_Avoidance/AP_Avoidance.h"
class AP_Avoidance {
public:

    class Obstacle {
    public:
        MAV_COLLISION_SRC src;
        uint32_t src_id;
        uint32_t timestamp_ms;

        Location _location;
        Vector3f _velocity;


        MAV_COLLISION_THREAT_LEVEL threat_level;
        float closest_approach_xy;
        float closest_approach_z;
        float time_to_closest_approach;
        float distance_to_closest_approach;
        uint32_t last_gcs_report_time;
    };



    void add_obstacle(uint32_t obstacle_timestamp_ms,
                      const MAV_COLLISION_SRC src,
                      uint32_t src_id,
                      const Location &loc,
                      const Vector3f &vel_ned);

    void add_obstacle(uint32_t obstacle_timestamp_ms,
                      const MAV_COLLISION_SRC src,
                      uint32_t src_id,
                      const Location &loc,
                      float cog,
                      float hspeed,
                      float vspeed);


    void update();


    void enable() { _enabled = true; };
    void disable() { _enabled = false; };


    MAV_COLLISION_THREAT_LEVEL current_threat_level() const;


    void handle_msg(const mavlink_message_t &msg);


    static const struct AP_Param::GroupInfo var_info[];

protected:

    AP_Avoidance(AP_AHRS &ahrs, class AP_ADSB &adsb);


    void handle_avoidance_local(AP_Avoidance::Obstacle *threat);



    virtual MAV_COLLISION_ACTION handle_avoidance(const AP_Avoidance::Obstacle *obstacle, MAV_COLLISION_ACTION requested_action) = 0;



    virtual void handle_recovery(uint8_t recovery_action) = 0;

    uint32_t _last_state_change_ms = 0;
    MAV_COLLISION_THREAT_LEVEL _threat_level = MAV_COLLISION_THREAT_LEVEL_NONE;



    static const uint8_t _gcs_cleared_messages_duration = 5;
    uint32_t _gcs_cleared_messages_first_sent;

    void handle_threat_gcs_notify(AP_Avoidance::Obstacle *threat);

    AP_Avoidance::Obstacle *most_serious_threat();



    MAV_COLLISION_ACTION mav_avoidance_action() { return _latest_action; }


    bool get_destination_perpendicular(const AP_Avoidance::Obstacle *obstacle, Vector3f &newdest_neu, const float wp_speed_xy, const float wp_speed_z, const uint8_t _minimum_avoid_height);


    bool get_vector_perpendicular(const AP_Avoidance::Obstacle *obstacle, Vector3f &vec_neu);



    static Vector3f perpendicular_xyz(const Location &p1, const Vector3f &v1, const Location &p2);
    static Vector2f perpendicular_xy(const Location &p1, const Vector3f &v1, const Location &p2);


    const AP_AHRS &_ahrs;

private:


    const uint32_t MAX_OBSTACLE_AGE_MS = 5000;
    const static uint8_t _gcs_notify_interval = 1;



    const uint8_t _low_velocity_threshold = 1;


    bool check_startup();


    void init();


    void deinit();


    uint32_t src_id_for_adsb_vehicle(AP_ADSB::adsb_vehicle_t vehicle) const;

    void check_for_threats();
    void update_threat_level(const Location &my_loc,
                             const Vector3f &my_vel,
                             AP_Avoidance::Obstacle &obstacle);


    void get_adsb_samples();



    bool obstacle_is_more_serious_threat(const AP_Avoidance::Obstacle &obstacle) const;


    AP_Avoidance::Obstacle *_obstacles;
    uint8_t _obstacles_allocated;
    uint8_t _obstacle_count;
    int8_t _current_most_serious_threat;
    MAV_COLLISION_ACTION _latest_action = MAV_COLLISION_ACTION_NONE;


    class AP_ADSB &_adsb;


    AP_Int8 _enabled;
    AP_Int8 _obstacles_max;

    AP_Int8 _fail_action;
    AP_Int8 _fail_recovery;
    AP_Int8 _fail_time_horizon;
    AP_Int16 _fail_distance_xy;
    AP_Int16 _fail_distance_z;

    AP_Int8 _warn_action;
    AP_Int8 _warn_time_horizon;
    AP_Float _warn_distance_xy;
    AP_Float _warn_distance_z;
};

float closest_distance_between_radial_and_point(const Vector2f &w,
                                                const Vector2f &p);
float closest_approach_xy(const Location &my_loc,
                          const Vector3f &my_vel,
                          const Location &obstacle_loc,
                          const Vector3f &obstacle_vel,
                          uint8_t time_horizon);

float closest_approach_z(const Location &my_loc,
                         const Vector3f &my_vel,
                         const Location &obstacle_loc,
                         const Vector3f &obstacle_vel,
                         uint8_t time_horizon);
# 17 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/RingBuffer.h" 1
       

# 1 "/usr/local/include/c++/6.3.0/atomic" 1 3
# 35 "/usr/local/include/c++/6.3.0/atomic" 3
       
# 36 "/usr/local/include/c++/6.3.0/atomic" 3





# 1 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 1 3
# 33 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 3
       
# 34 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 3



# 1 "/usr/local/include/c++/6.3.0/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/local/include/c++/6.3.0/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/local/include/c++/6.3.0/bits/atomic_lockfree_defines.h" 3
# 38 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 2 3






# 43 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 3
  typedef enum memory_order
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    } memory_order;

  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };

  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m & int(__mod));
  }


  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | (__m & __memory_order_modifier_mask));
  }

  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(__m); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(__m); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }



  template<typename _IntTp>
    struct __atomic_base;




  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 148 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i;
  };

  }




  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 237 "/usr/local/include/c++/6.3.0/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
       memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
       memory_order __b2 = __m2 & __memory_order_mask;
       memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
       memory_order __b2 = __m2 & __memory_order_mask;
       memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p;


      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }

      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;

 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
        memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
        memory_order __b2 = __m2 & __memory_order_mask;
        memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }
    };




}
# 42 "/usr/local/include/c++/6.3.0/atomic" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    struct atomic;



  template<>
  struct atomic<bool>
  {
  private:
    __atomic_base<bool> _M_base;

  public:
    atomic() noexcept = default;
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
    { return _M_base.operator=(__i); }

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
    { return _M_base.load(); }

    bool
    is_lock_free() const noexcept { return _M_base.is_lock_free(); }

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
    { return _M_base.load(__m); }

    bool
    exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    exchange(bool __i,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
     memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }
  };







  template<typename _Tp>
    struct atomic
    {
    private:

      static constexpr int _S_min_alignment
 = (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16
 ? 0 : sizeof(_Tp);

      static constexpr int _S_alignment
        = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);

      alignas(_S_alignment) _Tp _M_i;

      static_assert(__is_trivially_copyable(_Tp),
      "std::atomic requires a trivially copyable type");

      static_assert(sizeof(_Tp) > 0,
      "Incomplete or zero-sized types are not supported");

    public:
      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }

      operator _Tp() const noexcept
      { return load(); }

      operator _Tp() const volatile noexcept
      { return load(); }

      _Tp
      operator=(_Tp __i) noexcept
      { store(__i); return __i; }

      _Tp
      operator=(_Tp __i) volatile noexcept
      { store(__i); return __i; }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      { __atomic_store(&_M_i, &__i, __m); }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
      { __atomic_store(&_M_i, &__i, __m); }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
        _Tp tmp;
 __atomic_load(&_M_i, &tmp, __m);
 return tmp;
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        _Tp tmp;
 __atomic_load(&_M_i, &tmp, __m);
 return tmp;
      }

      _Tp
      exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        _Tp tmp;
 __atomic_exchange(&_M_i, &__i, &tmp, __m);
 return tmp;
      }

      _Tp
      exchange(_Tp __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        _Tp tmp;
 __atomic_exchange(&_M_i, &__i, &tmp, __m);
 return tmp;
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
          memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }
    };



  template<typename _Tp>
    struct atomic<_Tp*>
    {
      typedef _Tp* __pointer_type;
      typedef __atomic_base<_Tp*> __base_type;
      __base_type _M_b;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }

      operator __pointer_type() const noexcept
      { return __pointer_type(_M_b); }

      operator __pointer_type() const volatile noexcept
      { return __pointer_type(_M_b); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator++(int) noexcept
      { return _M_b++; }

      __pointer_type
      operator++(int) volatile noexcept
      { return _M_b++; }

      __pointer_type
      operator--(int) noexcept
      { return _M_b--; }

      __pointer_type
      operator--(int) volatile noexcept
      { return _M_b--; }

      __pointer_type
      operator++() noexcept
      { return ++_M_b; }

      __pointer_type
      operator++() volatile noexcept
      { return ++_M_b; }

      __pointer_type
      operator--() noexcept
      { return --_M_b; }

      __pointer_type
      operator--() volatile noexcept
      { return --_M_b; }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return _M_b.operator-=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator-=(__d); }

      bool
      is_lock_free() const noexcept
      { return _M_b.is_lock_free(); }

      bool
      is_lock_free() const volatile noexcept
      { return _M_b.is_lock_free(); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.store(__p, __m); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.store(__p, __m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { return _M_b.load(__m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      { return _M_b.load(__m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.exchange(__p, __m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.exchange(__p, __m); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_sub(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_sub(__d, __m); }
    };



  template<>
    struct atomic<char> : __atomic_base<char>
    {
      typedef char __integral_type;
      typedef __atomic_base<char> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<signed char> : __atomic_base<signed char>
    {
      typedef signed char __integral_type;
      typedef __atomic_base<signed char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned char> : __atomic_base<unsigned char>
    {
      typedef unsigned char __integral_type;
      typedef __atomic_base<unsigned char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<short> : __atomic_base<short>
    {
      typedef short __integral_type;
      typedef __atomic_base<short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned short> : __atomic_base<unsigned short>
    {
      typedef unsigned short __integral_type;
      typedef __atomic_base<unsigned short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<int> : __atomic_base<int>
    {
      typedef int __integral_type;
      typedef __atomic_base<int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned int> : __atomic_base<unsigned int>
    {
      typedef unsigned int __integral_type;
      typedef __atomic_base<unsigned int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<long> : __atomic_base<long>
    {
      typedef long __integral_type;
      typedef __atomic_base<long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned long> : __atomic_base<unsigned long>
    {
      typedef unsigned long __integral_type;
      typedef __atomic_base<unsigned long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<long long> : __atomic_base<long long>
    {
      typedef long long __integral_type;
      typedef __atomic_base<long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<unsigned long long> : __atomic_base<unsigned long long>
    {
      typedef unsigned long long __integral_type;
      typedef __atomic_base<unsigned long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<wchar_t> : __atomic_base<wchar_t>
    {
      typedef wchar_t __integral_type;
      typedef __atomic_base<wchar_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<char16_t> : __atomic_base<char16_t>
    {
      typedef char16_t __integral_type;
      typedef __atomic_base<char16_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };


  template<>
    struct atomic<char32_t> : __atomic_base<char32_t>
    {
      typedef char32_t __integral_type;
      typedef __atomic_base<char32_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;
    };



  typedef atomic<bool> atomic_bool;


  typedef atomic<char> atomic_char;


  typedef atomic<signed char> atomic_schar;


  typedef atomic<unsigned char> atomic_uchar;


  typedef atomic<short> atomic_short;


  typedef atomic<unsigned short> atomic_ushort;


  typedef atomic<int> atomic_int;


  typedef atomic<unsigned int> atomic_uint;


  typedef atomic<long> atomic_long;


  typedef atomic<unsigned long> atomic_ulong;


  typedef atomic<long long> atomic_llong;


  typedef atomic<unsigned long long> atomic_ullong;


  typedef atomic<wchar_t> atomic_wchar_t;


  typedef atomic<char16_t> atomic_char16_t;


  typedef atomic<char32_t> atomic_char32_t;



  typedef atomic<int_least8_t> atomic_int_least8_t;


  typedef atomic<uint_least8_t> atomic_uint_least8_t;


  typedef atomic<int_least16_t> atomic_int_least16_t;


  typedef atomic<uint_least16_t> atomic_uint_least16_t;


  typedef atomic<int_least32_t> atomic_int_least32_t;


  typedef atomic<uint_least32_t> atomic_uint_least32_t;


  typedef atomic<int_least64_t> atomic_int_least64_t;


  typedef atomic<uint_least64_t> atomic_uint_least64_t;



  typedef atomic<int_fast8_t> atomic_int_fast8_t;


  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;


  typedef atomic<int_fast16_t> atomic_int_fast16_t;


  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;


  typedef atomic<int_fast32_t> atomic_int_fast32_t;


  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;


  typedef atomic<int_fast64_t> atomic_int_fast64_t;


  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;



  typedef atomic<intptr_t> atomic_intptr_t;


  typedef atomic<uintptr_t> atomic_uintptr_t;


  typedef atomic<size_t> atomic_size_t;


  typedef atomic<intmax_t> atomic_intmax_t;


  typedef atomic<uintmax_t> atomic_uintmax_t;


  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;



  inline bool
  atomic_flag_test_and_set_explicit(atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline bool
  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline void
  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept
  { __a->clear(__m); }

  inline void
  atomic_flag_clear_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { __a->clear(__m); }

  inline bool
  atomic_flag_test_and_set(atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline bool
  atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(volatile atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }



  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const volatile atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline void
    atomic_init(atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_init(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(volatile atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const atomic<_ITp>* __a, memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const volatile atomic<_ITp>* __a,
    memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(volatile atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(volatile atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }


  template<typename _ITp>
    inline void
    atomic_store(atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline void
    atomic_store(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const volatile atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(volatile atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }





  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }



  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(volatile atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(volatile atomic<_ITp*>* __a,
         ptrdiff_t __d, memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }



}
# 4 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/RingBuffer.h" 2






# 9 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/RingBuffer.h"
class ByteBuffer {
public:
    ByteBuffer(uint32_t size);
    ~ByteBuffer(void);


    uint32_t available(void) const;


    void clear(void);


    uint32_t space(void) const;


    bool empty(void) const;


    uint32_t write(const uint8_t *data, uint32_t len);


    uint32_t read(uint8_t *data, uint32_t len);


    bool read_byte(uint8_t *data);





    bool update(const uint8_t *data, uint32_t len);


    uint32_t get_size(void) const { return size; }


    bool set_size(uint32_t size);


    bool advance(uint32_t n);


    const uint8_t *readptr(uint32_t &available_bytes);



    int16_t peek(uint32_t ofs) const;




    uint32_t peekbytes(uint8_t *data, uint32_t len);




    struct IoVec {
        uint8_t *data;
        uint32_t len;
    };
    uint8_t peekiovec(IoVec vec[2], uint32_t len);
# 78 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/RingBuffer.h"
    uint8_t reserve(IoVec vec[2], uint32_t len);





    bool commit(uint32_t len);

private:
    uint8_t *buf;
    uint32_t size;

    std::atomic<uint32_t> head{0};
    std::atomic<uint32_t> tail{0};
};




template <class T>
class ObjectBuffer {
public:
    ObjectBuffer(uint32_t _size) {
        buffer = new ByteBuffer((_size * sizeof(T))+1);
    }
    ~ObjectBuffer(void) {
        delete buffer;
    }


    void clear(void)
    {
        buffer->clear();
    }


    uint32_t available(void) const {
        return buffer->available() / sizeof(T);
    }


    uint32_t space(void) const {
        return buffer->space() / sizeof(T);
    }


    bool empty(void) const {
        return buffer->empty();
    }


    bool push(const T &object) {
        if (buffer->space() < sizeof(T)) {
            return false;
        }
        return buffer->write((uint8_t*)&object, sizeof(T)) == sizeof(T);
    }




    bool pop(void) {
        return buffer->advance(sizeof(T));
    }




    bool pop(T &object) {
        if (buffer->available() < sizeof(T)) {
            return false;
        }
        return buffer->read((uint8_t*)&object, sizeof(T)) == sizeof(T);
    }






    bool push_force(const T &object) {
        if (buffer->space() < sizeof(T)) {
            buffer->advance(sizeof(T));
        }
        return push(object);
    }




    bool peek(T &object) {
        return buffer->peekbytes((uint8_t*)&object, sizeof(T)) == sizeof(T);
    }



    bool update(const T &object) {
        return buffer->update((uint8_t*)&object, sizeof(T));
    }

private:
    ByteBuffer *buffer = nullptr;
};
# 189 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/RingBuffer.h"
template <class T>
class ObjectArray {
public:
    ObjectArray(uint16_t size_) {
        _size = size_;
        _head = _count = 0;
        _buffer = new T[_size];
    }
    ~ObjectArray(void) {
        delete[] _buffer;
    }


    uint16_t size(void) const {
        return _size;
    }


    uint16_t available(void) const {
        return _count;
    }


    uint16_t space(void) const {
        return _size - _count;
    }


    bool empty(void) const {
        return _count == 0;
    }


    bool push(const T &object) {
        if (space() == 0) {
            return false;
        }
        _buffer[(_head+_count)%_size] = object;
        _count++;
        return true;
    }




    bool pop(void) {
        if (empty()) {
            return false;
        }
        _head = (_head+1) % _size;
        _count--;
        return true;
    }


    void clear(void)
    {
        _head = _count = 0;
    }




    bool pop(T &object) {
        if (empty()) {
            return false;
        }
        object = _buffer[_head];
        return pop();
    }






    bool push_force(const T &object) {
        if (space() == 0) {
            pop();
        }
        return push(object);
    }




    bool remove(uint16_t n) {
        if (n >= _count) {
            return false;
        }
        if (n == _count-1) {

            _count--;
            return true;
        }
        if (n == 0) {

            return pop();
        }

        for (uint16_t i=n; i<_count-1; i++) {
            *(*this)[i] = *(*this)[i+1];
        }
        _count--;
        return true;
    }



    T * operator[](uint16_t i) {
        if (i >= _count) {
            return nullptr;
        }
        return &_buffer[(_head+i)%_size];
    }

private:
    T *_buffer;
    uint16_t _size;
    uint16_t _count;
    uint16_t _head;
};
# 19 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Frsky_Telem/AP_Frsky_Telem.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Frsky_Telem/AP_Frsky_Telem.h"
       





# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 1
# 22 "/Users/yu/repos/ardupilot/libraries/AP_Frsky_Telem/AP_Frsky_Telem.h" 2
# 114 "/Users/yu/repos/ardupilot/libraries/AP_Frsky_Telem/AP_Frsky_Telem.h"
class AP_Frsky_Telem {
public:
    static AP_Frsky_Telem create(AP_AHRS &ahrs, const AP_BattMonitor &battery, const RangeFinder &rng) {
        return AP_Frsky_Telem{ahrs, battery, rng};
    }

    constexpr AP_Frsky_Telem(AP_Frsky_Telem &&other) = default;


    AP_Frsky_Telem(const AP_Frsky_Telem &other) = delete;
    AP_Frsky_Telem &operator=(const AP_Frsky_Telem&) = delete;


    void init(const AP_SerialManager &serial_manager, const char *firmware_str, const uint8_t mav_type, const AP_Float *fs_batt_voltage = nullptr, const AP_Float *fs_batt_mah = nullptr, const uint32_t *ap_valuep = nullptr);


    void queue_message(MAV_SEVERITY severity, const char *text);


    void update_control_mode(uint8_t mode) { _ap.control_mode = mode; }




    void set_is_flying(bool is_flying) { (is_flying) ? (_ap.value &= ~0x80) : (_ap.value |= 0x80); }





    void update_sensor_status_flags(uint32_t error_mask) { _ap.sensor_status_flags = error_mask; }

    static ObjectArray<mavlink_statustext_t> _statustext_queue;

private:
    AP_Frsky_Telem(AP_AHRS &ahrs, const AP_BattMonitor &battery, const RangeFinder &rng);

    AP_AHRS &_ahrs;
    const AP_BattMonitor &_battery;
    const RangeFinder &_rng;
    AP_HAL::UARTDriver *_port;
    AP_SerialManager::SerialProtocol _protocol;
    bool _initialised_uart;
    uint16_t _crc;

    struct
    {
        uint8_t mav_type;
        const AP_Float *fs_batt_voltage;
        const AP_Float *fs_batt_mah;
    } _params;

    struct
    {
        uint8_t control_mode;
        uint32_t value;
        const uint32_t *valuep;
        uint32_t sensor_status_flags;
    } _ap;

    uint32_t check_sensor_status_timer;
    uint32_t check_ekf_status_timer;
    uint8_t _paramID;

    struct
    {
        char lat_ns, lon_ew;
        uint16_t latdddmm;
        uint16_t latmmmm;
        uint16_t londddmm;
        uint16_t lonmmmm;
        uint16_t alt_gps_meters;
        uint16_t alt_gps_cm;
        uint16_t alt_nav_meters;
        uint16_t alt_nav_cm;
        int16_t speed_in_meter;
        uint16_t speed_in_centimeter;
    } _gps;

    struct
    {
        uint8_t new_byte;
        bool send_attiandrng;
        bool send_latitude;
        uint32_t params_timer;
        uint32_t ap_status_timer;
        uint32_t batt_timer;
        uint32_t batt_timer2;
        uint32_t gps_status_timer;
        uint32_t home_timer;
        uint32_t velandyaw_timer;
        uint32_t gps_latlng_timer;
    } _passthrough;

    struct
    {
        bool sport_status;
        uint8_t fas_call;
        uint8_t gps_call;
        uint8_t vario_call;
        uint8_t various_call;
    } _SPort;

    struct
    {
        uint32_t last_200ms_frame;
        uint32_t last_1000ms_frame;
    } _D;

    struct
    {
        uint32_t chunk;
        uint8_t repeats;
        uint8_t char_index;
    } _msg_chunk;


    void send_SPort_Passthrough(void);

    void send_SPort(void);

    void send_D(void);

    void tick(void);


    void calc_crc(uint8_t byte);
    void send_crc(void);
    void send_byte(uint8_t value);
    void send_uint32(uint16_t id, uint32_t data);
    void send_uint16(uint16_t id, uint16_t data);


    bool get_next_msg_chunk(void);
    void check_sensor_status_flags(void);
    void check_ekf_status(void);
    uint32_t calc_param(void);
    uint32_t calc_gps_latlng(bool *send_latitude);
    uint32_t calc_gps_status(void);
    uint32_t calc_batt(uint8_t instance);
    uint32_t calc_ap_status(void);
    uint32_t calc_home(void);
    uint32_t calc_velandyaw(void);
    uint32_t calc_attiandrng(void);
    uint16_t prep_number(int32_t number, uint8_t digits, uint8_t power);


    void calc_nav_alt(void);
    float format_gps(float dec);
    void calc_gps_position(void);
};
# 20 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_ServoRelayEvents/AP_ServoRelayEvents.h" 1






       


# 1 "/Users/yu/repos/ardupilot/libraries/AP_Relay/AP_Relay.h" 1
# 10 "/Users/yu/repos/ardupilot/libraries/AP_Relay/AP_Relay.h"
       







class AP_Relay {
public:
    static AP_Relay create() { return AP_Relay{}; }

    constexpr AP_Relay(AP_Relay &&other) = default;


    AP_Relay(const AP_Relay &other) = delete;
    AP_Relay &operator=(const AP_Relay&) = delete;


    void init();


    void on(uint8_t relay);


    void off(uint8_t relay);


    bool enabled(uint8_t relay) { return relay < 4 && _pin[relay] != -1; }


    void toggle(uint8_t relay);

    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_Relay();

    AP_Int8 _pin[4];
    AP_Int8 _default;
};
# 11 "/Users/yu/repos/ardupilot/libraries/AP_ServoRelayEvents/AP_ServoRelayEvents.h" 2

class AP_ServoRelayEvents {
public:
    static AP_ServoRelayEvents create(AP_Relay &_relay) {
        return AP_ServoRelayEvents{_relay};
    }

    constexpr AP_ServoRelayEvents(AP_ServoRelayEvents &&other) = default;


    AP_ServoRelayEvents(const AP_ServoRelayEvents &other) = delete;
    AP_ServoRelayEvents &operator=(const AP_ServoRelayEvents&) = delete;


    void set_channel_mask(uint16_t _mask) { mask = _mask; }

    bool do_set_servo(uint8_t channel, uint16_t pwm);
    bool do_set_relay(uint8_t relay_num, uint8_t state);
    bool do_repeat_servo(uint8_t channel, uint16_t servo_value, int16_t repeat, uint16_t delay_time_ms);
    bool do_repeat_relay(uint8_t relay_num, int16_t count, uint32_t period_ms);
    void update_events(void);

private:
    AP_ServoRelayEvents(AP_Relay &_relay)
        : relay(_relay)
        , mask(0)
        , type(EVENT_TYPE_RELAY)
        , start_time_ms(0)
        , delay_ms(0)
        , repeat(0)
        , channel(0)
        , servo_value(0)
    {
    }

    AP_Relay &relay;
    uint16_t mask;


    enum event_type {
        EVENT_TYPE_RELAY=0,
        EVENT_TYPE_SERVO=1
    };

    enum event_type type;


    uint32_t start_time_ms;


    uint16_t delay_ms;


    int16_t repeat;


    uint8_t channel;


 uint16_t servo_value;
};
# 21 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Camera/AP_Camera.h" 1


       
# 31 "/Users/yu/repos/ardupilot/libraries/AP_Camera/AP_Camera.h"
class AP_Camera {

public:
    static AP_Camera create(AP_Relay *obj_relay,
                            uint32_t _log_camera_bit,
                            const struct Location &_loc,
                            const AP_AHRS &_ahrs) {
        return AP_Camera{obj_relay, _log_camera_bit, _loc, _ahrs};
    }

    constexpr AP_Camera(AP_Camera &&other) = default;


    AP_Camera(const AP_Camera &other) = delete;
    AP_Camera &operator=(const AP_Camera&) = delete;



    void control_msg(const mavlink_message_t* msg);
    void send_feedback(mavlink_channel_t chan);


    void configure(float shooting_mode, float shutter_speed, float aperture, float ISO, float exposure_type, float cmd_id, float engine_cutoff_time);

    void control(float session, float zoom_pos, float zoom_step, float focus_lock, float shooting_cmd, float cmd_id);


    void set_trigger_distance(uint32_t distance_m) { _trigg_dist.set(distance_m); }

    void take_picture();


    void update();


    void update_trigger();

    static const struct AP_Param::GroupInfo var_info[];


    void set_is_auto_mode(bool enable) { _is_in_auto_mode = enable; }

private:
    AP_Camera(AP_Relay *obj_relay, uint32_t _log_camera_bit, const struct Location &_loc, const AP_AHRS &_ahrs)
        : _trigger_counter(0)
        , _image_index(0)
        , log_camera_bit(_log_camera_bit)
        , current_loc(_loc)
        , ahrs(_ahrs)
    {
        AP_Param::setup_object_defaults(this, var_info);
        _apm_relay = obj_relay;
    }

    AP_Int8 _trigger_type;
    AP_Int8 _trigger_duration;
    AP_Int8 _relay_on;
    AP_Int16 _servo_on_pwm;
    AP_Int16 _servo_off_pwm;
    uint8_t _trigger_counter;
    AP_Relay *_apm_relay;
    AP_Int8 _auto_mode_only;
    bool _is_in_auto_mode;

    void servo_pic();
    void relay_pic();
    void feedback_pin_timer();
    void setup_feedback_callback(void);





    AP_Float _trigg_dist;
    AP_Int16 _min_interval;
    AP_Int16 _max_roll;
    uint32_t _last_photo_time;
    struct Location _last_location;
    uint16_t _image_index;


    AP_Int8 _feedback_pin;
    AP_Int8 _feedback_polarity;


    static volatile bool _camera_triggered;
    bool _timer_installed:1;
    uint8_t _last_pin_state;

    void log_picture();

    uint32_t log_camera_bit;
    const struct Location &current_loc;
    const AP_AHRS &ahrs;


    void trigger_pic();



    void trigger_pic_cleanup();


    bool check_trigger_pin(void);


    bool using_feedback_pin(void) const { return _feedback_pin > 0; }

};
# 22 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_AdvancedFailsafe/AP_AdvancedFailsafe.h" 1
       
# 32 "/Users/yu/repos/ardupilot/libraries/AP_AdvancedFailsafe/AP_AdvancedFailsafe.h"
class AP_AdvancedFailsafe
{
public:
    enum control_mode {
        AFS_MANUAL = 0,
        AFS_STABILIZED = 1,
        AFS_AUTO = 2
    };

    enum state {
        STATE_PREFLIGHT = 0,
        STATE_AUTO = 1,
        STATE_DATA_LINK_LOSS = 2,
        STATE_GPS_LOSS = 3
    };

    enum terminate_action {
        TERMINATE_ACTION_TERMINATE = 42,
        TERMINATE_ACTION_LAND = 43
    };


    AP_AdvancedFailsafe(AP_Mission &_mission, AP_Baro &_baro, const AP_GPS &_gps, const RCMapper &_rcmap) :
        mission(_mission),
        baro(_baro),
        gps(_gps),
        rcmap(_rcmap),
        _gps_loss_count(0),
        _comms_loss_count(0)
        {
            AP_Param::setup_object_defaults(this, var_info);

            _state = STATE_PREFLIGHT;
            _terminate.set(0);

            _saved_wp = 0;
        }


    void check(uint32_t last_heartbeat_ms, bool geofence_breached, uint32_t last_valid_rc_ms);



    void heartbeat(void);


    bool should_crash_vehicle(void);


    bool gcs_terminate(bool should_terminate);


    virtual void terminate_vehicle(void) = 0;


    static const struct AP_Param::GroupInfo var_info[];

protected:

    virtual void setup_IO_failsafe(void) = 0;


    virtual enum control_mode afs_mode(void) = 0;

    enum state _state;

    AP_Mission &mission;
    AP_Baro &baro;
    const AP_GPS &gps;
    const RCMapper &rcmap;

    AP_Int8 _enable;

    AP_Int8 _heartbeat_pin;
    AP_Int8 _manual_pin;
    AP_Int8 _terminate_pin;
    AP_Int8 _terminate;
    AP_Int8 _terminate_action;


    AP_Int8 _wp_comms_hold;
    AP_Int8 _wp_gps_loss;

    AP_Float _qnh_pressure;
    AP_Int32 _amsl_limit;
    AP_Int32 _amsl_margin_gps;
    AP_Float _rc_fail_time_seconds;
    AP_Int8 _max_gps_loss;
    AP_Int8 _max_comms_loss;
    AP_Int8 _enable_geofence_fs;
    AP_Int8 _enable_RC_fs;
    AP_Int8 _rc_term_manual_only;
    AP_Int8 _enable_dual_loss;

    bool _heartbeat_pin_value;


    uint8_t _saved_wp;


    uint8_t _gps_loss_count;


    uint8_t _comms_loss_count;


    uint32_t _last_comms_loss_ms;


    uint32_t _last_gps_loss_ms;


    bool _failsafe_setup:1;

    bool check_altlimit(void);
};
# 23 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Common/AP_FWVersion.h" 1
       




typedef struct {
    uint8_t major;
    uint8_t minor;
    uint8_t patch;
    FIRMWARE_VERSION_TYPE fw_type;
    const char *fw_string;
    const char *fw_hash_str;
    const char *middleware_hash_str;
    const char *os_hash_str;
} AP_FWVersion;
# 24 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h" 2
# 35 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h"
enum ap_message {
    MSG_HEARTBEAT,
    MSG_ATTITUDE,
    MSG_LOCATION,
    MSG_EXTENDED_STATUS1,
    MSG_EXTENDED_STATUS2,
    MSG_NAV_CONTROLLER_OUTPUT,
    MSG_CURRENT_WAYPOINT,
    MSG_VFR_HUD,
    MSG_SERVO_OUTPUT_RAW,
    MSG_RADIO_IN,
    MSG_RAW_IMU1,
    MSG_RAW_IMU2,
    MSG_RAW_IMU3,
    MSG_GPS_RAW,
    MSG_GPS_RTK,
    MSG_GPS2_RAW,
    MSG_GPS2_RTK,
    MSG_SYSTEM_TIME,
    MSG_SERVO_OUT,
    MSG_NEXT_WAYPOINT,
    MSG_NEXT_PARAM,
    MSG_LIMITS_STATUS,
    MSG_FENCE_STATUS,
    MSG_AHRS,
    MSG_SIMSTATE,
    MSG_HWSTATUS,
    MSG_WIND,
    MSG_RANGEFINDER,
    MSG_TERRAIN,
    MSG_BATTERY2,
    MSG_CAMERA_FEEDBACK,
    MSG_MOUNT_STATUS,
    MSG_OPTICAL_FLOW,
    MSG_GIMBAL_REPORT,
    MSG_MAG_CAL_PROGRESS,
    MSG_MAG_CAL_REPORT,
    MSG_EKF_STATUS_REPORT,
    MSG_LOCAL_POSITION,
    MSG_PID_TUNING,
    MSG_VIBRATION,
    MSG_RPM,
    MSG_MISSION_ITEM_REACHED,
    MSG_POSITION_TARGET_GLOBAL_INT,
    MSG_ADSB_VEHICLE,
    MSG_BATTERY_STATUS,
    MSG_AOA_SSA,
    MSG_LANDING,
    MSG_NAMED_FLOAT,
    MSG_LAST
};





class GCS_MAVLINK
{
public:
    GCS_MAVLINK();
    void update(uint32_t max_time_us=1000);
    void init(AP_HAL::UARTDriver *port, mavlink_channel_t mav_chan);
    void setup_uart(const AP_SerialManager& serial_manager, AP_SerialManager::SerialProtocol protocol, uint8_t instance);
    void send_message(enum ap_message id);
    void send_text(MAV_SEVERITY severity, const char *fmt, ...);
    virtual void data_stream_send(void) = 0;
    void queued_param_send();
    void queued_waypoint_send();
    void set_snoop(void (*_msg_snoop)(const mavlink_message_t* msg)) {
        msg_snoop = _msg_snoop;
    }

    virtual void packetReceived(const mavlink_status_t &status,
                                mavlink_message_t &msg);


    AP_HAL::UARTDriver *get_uart() { return _port; }

    virtual uint8_t sysid_my_gcs() const = 0;

    static const struct AP_Param::GroupInfo var_info[];


    bool initialised;




    enum streams {STREAM_RAW_SENSORS,
                  STREAM_EXTENDED_STATUS,
                  STREAM_RC_CHANNELS,
                  STREAM_RAW_CONTROLLER,
                  STREAM_POSITION,
                  STREAM_EXTRA1,
                  STREAM_EXTRA2,
                  STREAM_EXTRA3,
                  STREAM_PARAMS,
                  STREAM_ADSB,
                  NUM_STREAMS};


    bool stream_trigger(enum streams stream_num);

    bool is_high_bandwidth() { return chan == MAVLINK_COMM_0; }

    bool have_flow_control();

    mavlink_channel_t get_chan() const { return chan; }
    uint32_t get_last_heartbeat_time() const { return last_heartbeat_time; };

    uint32_t last_heartbeat_time;


    static uint32_t last_radio_status_remrssi_ms;


    uint16_t mission_item_reached_index = 65535;


    void send_meminfo(void);
    void send_power_status(void);
    void send_battery_status(const AP_BattMonitor &battery, const uint8_t instance) const;
    bool send_battery_status(const AP_BattMonitor &battery) const;
    void send_distance_sensor(const AP_RangeFinder_Backend *sensor) const;
    bool send_distance_sensor(const RangeFinder &rangefinder) const;
    void send_distance_sensor_downward(const RangeFinder &rangefinder) const;
    void send_rangefinder_downward(const RangeFinder &rangefinder) const;
    bool send_proximity(const AP_Proximity &proximity) const;
    void send_ahrs2(AP_AHRS &ahrs);
    void send_system_time();
    void send_radio_in(uint8_t receiver_rssi);
    void send_raw_imu(const AP_InertialSensor &ins, const Compass &compass);
    void send_scaled_pressure(AP_Baro &barometer);
    void send_sensor_offsets(const AP_InertialSensor &ins, const Compass &compass, AP_Baro &barometer);
    void send_ahrs(AP_AHRS &ahrs);
    void send_battery2(const AP_BattMonitor &battery);

    void send_opticalflow(AP_AHRS_NavEKF &ahrs, const OpticalFlow &optflow);

    void send_autopilot_version() const;
    void send_local_position(const AP_AHRS &ahrs) const;
    void send_vibration(const AP_InertialSensor &ins) const;
    void send_home(const Location &home) const;
    void send_ekf_origin(const Location &ekf_origin) const;
    void send_heartbeat(uint8_t type, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status);
    void send_servo_output_raw(bool hil);
    static void send_collision_all(const AP_Avoidance::Obstacle &threat, MAV_COLLISION_ACTION behaviour);
    void send_accelcal_vehicle_position(uint32_t position);



    static uint8_t active_channel_mask(void) { return mavlink_active; }


    static uint8_t streaming_channel_mask(void) { return chan_is_streaming; }


    static void send_parameter_value_all(const char *param_name, ap_var_type param_type, float param_value);


    void send_queued_parameters(void);


    void retry_deferred();





    static void send_to_components(const mavlink_message_t* msg) { routing.send_to_components(msg); }




    static void disable_channel_routing(mavlink_channel_t chan) { routing.no_route_mask |= (1U<<(chan-MAVLINK_COMM_0)); }





    static bool find_by_mavtype(uint8_t mav_type, uint8_t &sysid, uint8_t &compid, mavlink_channel_t &channel) { return routing.find_by_mavtype(mav_type, sysid, compid, channel); }


    static void update_signing_timestamp(uint64_t timestamp_usec);


    static uint8_t packet_overhead_chan(mavlink_channel_t chan);

protected:



    virtual bool accept_packet(const mavlink_status_t &status, mavlink_message_t &msg) { return true; }
    virtual AP_Mission *get_mission() = 0;
    virtual AP_Rally *get_rally() const = 0;
    virtual Compass *get_compass() const = 0;
    virtual class AP_Camera *get_camera() const = 0;
    virtual AP_ServoRelayEvents *get_servorelayevents() const = 0;
    virtual AP_AdvancedFailsafe *get_advanced_failsafe() const { return nullptr; };
    virtual bool set_mode(uint8_t mode) = 0;
    virtual const AP_FWVersion &get_fwver() const = 0;
    virtual void set_ekf_origin(const Location& loc) = 0;

    bool waypoint_receiving;

    uint16_t waypoint_request_i;
    uint16_t waypoint_request_last;

    AP_Param * _queued_parameter;

    mavlink_channel_t chan;
    uint8_t packet_overhead(void) const { return packet_overhead_chan(chan); }


    AP_Int16 streamRates[NUM_STREAMS];

    void handle_request_data_stream(mavlink_message_t *msg, bool save);

    void handle_set_mode(mavlink_message_t* msg);
    void handle_mission_request_list(AP_Mission &mission, mavlink_message_t *msg);
    void handle_mission_request(AP_Mission &mission, mavlink_message_t *msg);
    void handle_mission_clear_all(AP_Mission &mission, mavlink_message_t *msg);
    virtual void handle_mission_set_current(AP_Mission &mission, mavlink_message_t *msg);
    void handle_mission_count(AP_Mission &mission, mavlink_message_t *msg);
    void handle_mission_write_partial_list(AP_Mission &mission, mavlink_message_t *msg);
    bool handle_mission_item(mavlink_message_t *msg, AP_Mission &mission);

    void handle_common_param_message(mavlink_message_t *msg);
    void handle_param_set(mavlink_message_t *msg);
    void handle_param_request_list(mavlink_message_t *msg);
    void handle_param_request_read(mavlink_message_t *msg);
    virtual bool params_ready() const { return true; }

    void handle_common_gps_message(mavlink_message_t *msg);
    void handle_common_rally_message(mavlink_message_t *msg);
    void handle_rally_fetch_point(mavlink_message_t *msg);
    void handle_rally_point(mavlink_message_t *msg);
    void handle_common_camera_message(const mavlink_message_t *msg);
    void handle_gimbal_report(AP_Mount &mount, mavlink_message_t *msg) const;
    void handle_radio_status(mavlink_message_t *msg, DataFlash_Class &dataflash, bool log_radio);
    void handle_serial_control(const mavlink_message_t *msg);

    void handle_common_message(mavlink_message_t *msg);
    void handle_set_gps_global_origin(const mavlink_message_t *msg);
    void handle_setup_signing(const mavlink_message_t *msg);
    MAV_RESULT handle_preflight_reboot(const mavlink_command_long_t &packet, bool disable_overrides);
    MAV_RESULT handle_rc_bind(const mavlink_command_long_t &packet);
    virtual MAV_RESULT handle_flight_termination(const mavlink_command_long_t &packet);

    void handle_send_autopilot_version(const mavlink_message_t *msg);
    MAV_RESULT handle_command_request_autopilot_capabilities(const mavlink_command_long_t &packet);

    virtual void send_banner();

    void handle_device_op_read(mavlink_message_t *msg);
    void handle_device_op_write(mavlink_message_t *msg);

    void handle_timesync(mavlink_message_t *msg);
    void handle_statustext(mavlink_message_t *msg);

    bool telemetry_delayed() const;
    virtual uint32_t telem_delay() const = 0;

    MAV_RESULT handle_command_preflight_set_sensor_offsets(const mavlink_command_long_t &packet);
    MAV_RESULT handle_command_mag_cal(const mavlink_command_long_t &packet);
    MAV_RESULT handle_command_long_message(mavlink_command_long_t &packet);
    MAV_RESULT handle_command_camera(const mavlink_command_long_t &packet);
    MAV_RESULT handle_command_do_send_banner(const mavlink_command_long_t &packet);
    MAV_RESULT handle_command_do_set_mode(const mavlink_command_long_t &packet);


    virtual bool try_send_message(enum ap_message id);


    bool try_send_compass_message(enum ap_message id);
    bool try_send_mission_message(enum ap_message id);
    bool try_send_camera_message(enum ap_message id);
    bool try_send_gps_message(enum ap_message id);
    void send_hwstatus();

private:

    float adjust_rate_for_stream_trigger(enum streams stream_num);

    MAV_RESULT _set_mode_common(const MAV_MODE base_mode, const uint32_t custom_mode);

    virtual void handleMessage(mavlink_message_t * msg) = 0;

    MAV_RESULT handle_servorelay_message(mavlink_command_long_t &packet);


    AP_HAL::UARTDriver *_port;



    enum ap_var_type _queued_parameter_type;

    AP_Param::ParamToken _queued_parameter_token;

    uint16_t _queued_parameter_index;

    uint16_t _queued_parameter_count;


    uint32_t _queued_parameter_send_time_ms;
# 351 "/Users/yu/repos/ardupilot/libraries/GCS_MAVLink/GCS.h"
    uint16_t packet_drops;


    uint16_t waypoint_dest_sysid;
    uint16_t waypoint_dest_compid;
    uint16_t waypoint_count;
    uint32_t waypoint_timelast_receive;
    uint32_t waypoint_timelast_request;
    const uint16_t waypoint_receive_timeout = 8000;


    uint8_t stream_ticks[NUM_STREAMS];


    uint8_t stream_slowdown;


    AP_HAL::Util::perf_counter_t _perf_packet;
    AP_HAL::Util::perf_counter_t _perf_update;
    char _perf_packet_name[16];
    char _perf_update_name[16];



    enum ap_message deferred_messages[MSG_LAST];
    uint8_t next_deferred_message;
    uint8_t num_deferred_messages;


    static uint32_t reserve_param_space_start_ms;


    static uint8_t mavlink_active;


    static uint8_t chan_is_streaming;


    static MAVLink_routing routing;


    static AP_Frsky_Telem *frsky_telemetry_p;

    static const AP_SerialManager *serialmanager_p;

    struct pending_param_request {
        mavlink_channel_t chan;
        int16_t param_index;
        char param_name[16 +1];
    };

    struct pending_param_reply {
        mavlink_channel_t chan;
        float value;
        enum ap_var_type p_type;
        int16_t param_index;
        uint16_t count;
        char param_name[16 +1];
    };


    static ObjectBuffer<pending_param_request> param_requests;
    static ObjectBuffer<pending_param_reply> param_replies;


    static bool param_timer_registered;


    void param_io_timer(void);


    void send_parameter_reply(void);



    static void (*msg_snoop)(const mavlink_message_t* msg);

    virtual bool handle_guided_request(AP_Mission::Mission_Command &cmd) = 0;
    virtual void handle_change_alt_request(AP_Mission::Mission_Command &cmd) = 0;
    void handle_common_mission_message(mavlink_message_t *msg);

    void push_deferred_messages();

    void lock_channel(mavlink_channel_t chan, bool lock);

    mavlink_signing_t signing;
    static mavlink_signing_streams_t signing_streams;
    static uint32_t last_signing_save_ms;

    static StorageAccess _signing_storage;
    static bool signing_key_save(const struct SigningKey &key);
    static bool signing_key_load(struct SigningKey &key);
    void load_signing_key(void);
    bool signing_enabled(void) const;
    static void save_signing_timestamp(bool force_save_now);
};



class GCS
{

public:

    GCS() {
        if (_singleton == nullptr) {
            _singleton = this;
        } else {



            AP_HAL::panic("GCS must be singleton");

        }
    };

    static class GCS *instance() {
        return _singleton;
    }

    void send_text(MAV_SEVERITY severity, const char *fmt, ...);
    virtual void send_statustext(MAV_SEVERITY severity, uint8_t dest_bitmask, const char *text);
    void service_statustext(void);
    virtual GCS_MAVLINK &chan(const uint8_t ofs) = 0;
    virtual const GCS_MAVLINK &chan(const uint8_t ofs) const = 0;
    virtual uint8_t num_gcs() const = 0;
    void send_message(enum ap_message id);
    void send_mission_item_reached_message(uint16_t mission_index);
    void send_home(const Location &home) const;
    void send_ekf_origin(const Location &ekf_origin) const;

    void retry_deferred();
    void data_stream_send();
    void update();
    virtual void setup_uarts(AP_SerialManager &serial_manager);

    bool out_of_time() const {
        return _out_of_time;
    }
    void set_out_of_time(bool val) {
        _out_of_time = val;
    }




    void set_dataflash(DataFlash_Class *dataflash) {
        dataflash_p = dataflash;
    }


    DataFlash_Class *dataflash_p;





    void register_frsky_telemetry_callback(AP_Frsky_Telem *frsky_telemetry) {
        frsky_telemetry_p = frsky_telemetry;
    }


    AP_Frsky_Telem *frsky_telemetry_p;

private:

    static GCS *_singleton;

    struct statustext_t {
        uint8_t bitmask;
        mavlink_statustext_t msg;
    };


    static const uint8_t _status_capacity = 5;




    ObjectArray<statustext_t> _statustext_queue{_status_capacity};


    bool _out_of_time;

};

GCS &gcs();
# 39 "ArduCopterC.cpp" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AP_ADC/AP_ADC.h" 1
       
# 29 "/Users/yu/repos/ardupilot/libraries/AP_ADC/AP_ADC.h"
class AP_ADC
{
public:
    AP_ADC() {
    };
    virtual void Init() = 0;


    virtual float Ch(uint8_t ch_num) = 0;
# 48 "/Users/yu/repos/ardupilot/libraries/AP_ADC/AP_ADC.h"
    virtual uint32_t Ch6(const uint8_t *channel_numbers, float *result) = 0;


    virtual bool new_data_available(const uint8_t *channel_numbers) = 0;

    virtual uint16_t num_samples_available(const uint8_t *channel_numbers) = 0;

private:
};

# 1 "/Users/yu/repos/ardupilot/libraries/AP_ADC/AP_ADC_ADS1115.h" 1
       



# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/I2CDevice.h" 1
# 17 "/Users/yu/repos/ardupilot/libraries/AP_HAL/I2CDevice.h"
       







namespace AP_HAL {

class I2CDevice : public Device {
public:
    I2CDevice() : Device(BUS_TYPE_I2C) { }

    virtual ~I2CDevice() { }





    virtual void set_address(uint8_t address) = 0;




    virtual bool set_speed(Device::Speed speed) override = 0;


    virtual bool transfer(const uint8_t *send, uint32_t send_len,
                          uint8_t *recv, uint32_t recv_len) override = 0;





    virtual bool read_registers_multiple(uint8_t first_reg, uint8_t *recv,
                                         uint32_t recv_len, uint8_t times) = 0;


    virtual Semaphore *get_semaphore() override = 0;


    virtual Device::PeriodicHandle register_periodic_callback(
        uint32_t period_usec, Device::PeriodicCb) override = 0;


    virtual bool adjust_periodic_callback(
        Device::PeriodicHandle h, uint32_t period_usec) override = 0;
# 74 "/Users/yu/repos/ardupilot/libraries/AP_HAL/I2CDevice.h"
    virtual void set_split_transfers(bool set) {};
};

class I2CDeviceManager {
public:

    virtual OwnPtr<AP_HAL::I2CDevice> get_device(uint8_t bus, uint8_t address) = 0;
};

}
# 6 "/Users/yu/repos/ardupilot/libraries/AP_ADC/AP_ADC_ADS1115.h" 2



struct adc_report_s
{
    uint8_t id;
    float data;
};

class AP_ADC_ADS1115
{
public:
    AP_ADC_ADS1115();
    ~AP_ADC_ADS1115();

    bool init();
    size_t read(adc_report_s *report, size_t length) const;

    uint8_t get_channels_number() const
    {
        return _channels_number;
    }

private:
    static const uint8_t _channels_number;

    AP_HAL::OwnPtr<AP_HAL::I2CDevice> _dev;

    uint32_t _last_update_timestamp;
    uint16_t _gain;
    int _channel_to_read;
    adc_report_s *_samples;

    void _update();
    bool _start_conversion(uint8_t channel);

    float _convert_register_data_to_mv(int16_t word) const;
};
# 58 "/Users/yu/repos/ardupilot/libraries/AP_ADC/AP_ADC.h" 2
# 43 "ArduCopterC.cpp" 2
# 52 "ArduCopterC.cpp"
# 1 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_PID.h" 1
       






# 1 "/usr/local/include/c++/6.3.0/stdlib.h" 1 3
# 9 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_PID.h" 2
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 10 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_PID.h" 2







class AC_PID {
public:


    AC_PID(float initial_p, float initial_i, float initial_d, float initial_imax, float initial_filt_hz, float dt);


    void set_dt(float dt);




    void set_input_filter_all(float input);




    void set_input_filter_d(float input);


    float get_pid();
    float get_pi();
    float get_p();
    float get_i();
    float get_d();
    float get_ff(float requested_rate);


    void reset_I();


    void reset_filter() { _flags._reset_filter = true; }


    void load_gains();


    void save_gains();


    void operator() (float p, float i, float d, float imaxval, float input_filt_hz, float dt );


    AP_Float &kP() { return _kp; }
    AP_Float &kI() { return _ki; }
    AP_Float &kD() { return _kd; }
    AP_Float &filt_hz() { return _filt_hz; }
    float imax() const { return _imax.get(); }
    float get_filt_alpha() const;
    float ff() const { return _ff.get(); }


    void kP(const float v) { _kp.set(v); }
    void kI(const float v) { _ki.set(v); }
    void kD(const float v) { _kd.set(v); }
    void imax(const float v) { _imax.set(fabsf(v)); }
    void filt_hz(const float v);
    void ff(const float v) { _ff.set(v); }

    float get_integrator() const { return _integrator; }
    void set_integrator(float i) { _integrator = i; }


    void set_desired_rate(float desired) { _pid_info.desired = desired; }

    const DataFlash_Class::PID_Info& get_pid_info(void) const { return _pid_info; }


    static const struct AP_Param::GroupInfo var_info[];

protected:


    AP_Float _kp;
    AP_Float _ki;
    AP_Float _kd;
    AP_Float _imax;
    AP_Float _filt_hz;
    AP_Float _ff;


    struct ac_pid_flags {
        bool _reset_filter : 1;
    } _flags;


    float _dt;
    float _integrator;
    float _input;
    float _derivative;

    DataFlash_Class::PID_Info _pid_info;
};
# 53 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_PI_2D.h" 1
       






# 1 "/usr/local/include/c++/6.3.0/stdlib.h" 1 3
# 9 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_PI_2D.h" 2
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 10 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_PI_2D.h" 2






class AC_PI_2D {
public:


    AC_PI_2D(float initial_p, float initial_i, float initial_imax, float initial_filt_hz, float dt);


    void set_dt(float dt);




    void set_input(const Vector2f &input);
    void set_input(const Vector3f &input) { set_input(Vector2f(input.x, input.y)); }


    Vector2f get_pi();
    Vector2f get_p() const;
    Vector2f get_i();
    Vector2f get_i_shrink();


    void reset_I();


    void reset_filter();


    void load_gains();


    void save_gains();


    void operator() (float p, float i, float imaxval, float input_filt_hz, float dt);


    AP_Float &kP() { return _kp; }
    AP_Float &kI() { return _ki; }
    float imax() const { return _imax.get(); }
    float filt_hz() const { return _filt_hz.get(); }
    float get_filt_alpha() const { return _filt_alpha; }


    void kP(const float v) { _kp.set(v); }
    void kI(const float v) { _ki.set(v); }
    void imax(const float v) { _imax.set(fabsf(v)); }
    void filt_hz(const float v);

    Vector2f get_integrator() const { return _integrator; }
    void set_integrator(const Vector2f &i) { _integrator = i; }
    void set_integrator(const Vector3f &i) { _integrator.x = i.x; _integrator.y = i.y; }


    static const struct AP_Param::GroupInfo var_info[];

protected:


    void calc_filt_alpha();


    AP_Float _kp;
    AP_Float _ki;
    AP_Float _imax;
    AP_Float _filt_hz;


    struct ac_pid_flags {
        bool _reset_filter : 1;
    } _flags;


    float _dt;
    Vector2f _integrator;
    Vector2f _input;
    float _filt_alpha;
};
# 54 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_HELI_PID.h" 1
       






# 1 "/usr/local/include/c++/6.3.0/stdlib.h" 1 3
# 9 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_HELI_PID.h" 2
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 10 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_HELI_PID.h" 2






class AC_HELI_PID : public AC_PID {
public:


    AC_HELI_PID(float initial_p, float initial_i, float initial_d, float initial_imax, float initial_filt_hz, float dt, float initial_ff);


    float get_leaky_i(float leak_rate);

    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_Float _leak_min;

    float _last_requested_rate;
};
# 55 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_P.h" 1
       






# 1 "/usr/local/include/c++/6.3.0/stdlib.h" 1 3
# 9 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_P.h" 2
# 1 "/usr/local/include/c++/6.3.0/cmath" 1 3
# 39 "/usr/local/include/c++/6.3.0/cmath" 3
       
# 40 "/usr/local/include/c++/6.3.0/cmath" 3
# 10 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_P.h" 2



class AC_P {
public:
# 23 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_P.h"
    AC_P(const float &initial_p = 0.0f)
    {
  AP_Param::setup_object_defaults(this, var_info);
        _kp = initial_p;
    }
# 41 "/Users/yu/repos/ardupilot/libraries/AC_PID/AC_P.h"
    float get_p(float error) const;



    void load_gains();



    void save_gains();





    void operator() (const float p) { _kp = p; }


    AP_Float &kP() { return _kp; }
    void kP(const float v) { _kp.set(v); }

    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_Float _kp;
};
# 56 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl_Multi.h" 1
       




# 1 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl.h" 1
       
# 10 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_View.h" 1
       
# 25 "/Users/yu/repos/ardupilot/libraries/AP_AHRS/AP_AHRS_View.h"
class AP_AHRS_View
{
public:

    AP_AHRS_View(AP_AHRS &ahrs, enum Rotation rotation);


    void update(bool skip_ins_update=false);


    virtual ~AP_AHRS_View() {}


    const Vector3f &get_gyro(void) const {
        return gyro;
    }


    Vector3f get_gyro_latest(void) const;



    const Matrix3f &get_rotation_body_to_ned(void) const {
        return rot_body_to_ned;
    }


    float cos_roll() const {
        return trig.cos_roll;
    }
    float cos_pitch() const {
        return trig.cos_pitch;
    }
    float cos_yaw() const {
        return trig.cos_yaw;
    }
    float sin_roll() const {
        return trig.sin_roll;
    }
    float sin_pitch() const {
        return trig.sin_pitch;
    }
    float sin_yaw() const {
        return trig.sin_yaw;
    }






    bool get_position(struct Location &loc) const {
        return ahrs.get_position(loc);
    }

    Vector3f wind_estimate(void) {
        return ahrs.wind_estimate();
    }

    bool airspeed_estimate(float *airspeed_ret) const {
        return ahrs.airspeed_estimate(airspeed_ret);
    }

    bool airspeed_estimate_true(float *airspeed_ret) const {
        return ahrs.airspeed_estimate_true(airspeed_ret);
    }

    float get_EAS2TAS(void) const {
        return ahrs.get_EAS2TAS();
    }

    Vector2f groundspeed_vector(void) {
        return ahrs.groundspeed_vector();
    }

    bool get_velocity_NED(Vector3f &vec) const {
        return ahrs.get_velocity_NED(vec);
    }

    bool get_expected_mag_field_NED(Vector3f &ret) const {
        return ahrs.get_expected_mag_field_NED(ret);
    }

    bool get_relative_position_NED_home(Vector3f &vec) const {
        return ahrs.get_relative_position_NED_home(vec);
    }

    bool get_relative_position_NED_origin(Vector3f &vec) const {
        return ahrs.get_relative_position_NED_origin(vec);
    }

    bool get_relative_position_NE_home(Vector2f &vecNE) const {
        return ahrs.get_relative_position_NE_home(vecNE);
    }

    bool get_relative_position_NE_origin(Vector2f &vecNE) const {
        return ahrs.get_relative_position_NE_origin(vecNE);
    }

    void get_relative_position_D_home(float &posD) const {
        ahrs.get_relative_position_D_home(posD);
    }

    bool get_relative_position_D_origin(float &posD) const {
        return ahrs.get_relative_position_D_origin(posD);
    }

    float groundspeed(void) {
        return ahrs.groundspeed();
    }

    const Vector3f &get_accel_ef_blended(void) const {
        return ahrs.get_accel_ef_blended();
    }

    uint32_t getLastPosNorthEastReset(Vector2f &pos) const {
        return ahrs.getLastPosNorthEastReset(pos);
    }

    uint32_t getLastPosDownReset(float &posDelta) const {
        return ahrs.getLastPosDownReset(posDelta);
    }



    float get_error_rp(void) const {
        return ahrs.get_error_rp();
    }



    float get_error_yaw(void) const {
        return ahrs.get_error_yaw();
    }

    float roll;
    float pitch;
    float yaw;
    int32_t roll_sensor;
    int32_t pitch_sensor;
    int32_t yaw_sensor;

private:
    const enum Rotation rotation;
    AP_AHRS &ahrs;

    Matrix3f rot_view;
    Matrix3f rot_body_to_ned;
    Vector3f gyro;

    struct {
        float cos_roll;
        float cos_pitch;
        float cos_yaw;
        float sin_roll;
        float sin_pitch;
        float sin_yaw;
    } trig;
};
# 11 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl.h" 2
# 45 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl.h"
class AC_AttitudeControl {
public:
    AC_AttitudeControl( AP_AHRS_View &ahrs,
                        const AP_Vehicle::MultiCopter &aparm,
                        AP_Motors& motors,
                        float dt) :
        _p_angle_roll(4.5f),
        _p_angle_pitch(4.5f),
        _p_angle_yaw(4.5f),
        _dt(dt),
        _angle_boost(0),
        _use_ff_and_input_shaping(true),
        _throttle_rpy_mix_desired(0.5f),
        _throttle_rpy_mix(0.5f),
        _ahrs(ahrs),
        _aparm(aparm),
        _motors(motors)
        {
            AP_Param::setup_object_defaults(this, var_info);
        }


    virtual ~AC_AttitudeControl() {}


    AC_P& get_angle_roll_p() { return _p_angle_roll; }
    AC_P& get_angle_pitch_p() { return _p_angle_pitch; }
    AC_P& get_angle_yaw_p() { return _p_angle_yaw; }
    virtual AC_PID& get_rate_roll_pid() = 0;
    virtual AC_PID& get_rate_pitch_pid() = 0;
    virtual AC_PID& get_rate_yaw_pid() = 0;


    float get_accel_roll_max() { return _accel_roll_max; }


    void set_accel_roll_max(float accel_roll_max) { _accel_roll_max = accel_roll_max; }


    void save_accel_roll_max(float accel_roll_max) { _accel_roll_max.set_and_save(accel_roll_max); }


    float get_accel_pitch_max() { return _accel_pitch_max; }


    void set_accel_pitch_max(float accel_pitch_max) { _accel_pitch_max = accel_pitch_max; }


    void save_accel_pitch_max(float accel_pitch_max) { _accel_pitch_max.set_and_save(accel_pitch_max); }


    float get_accel_yaw_max() { return _accel_yaw_max; }


    void set_accel_yaw_max(float accel_yaw_max) { _accel_yaw_max = accel_yaw_max; }


    void save_accel_yaw_max(float accel_yaw_max) { _accel_yaw_max.set_and_save(accel_yaw_max); }


    void relax_attitude_controllers();


    void reset_rate_controller_I_terms();


    void set_attitude_target_to_current_attitude() { _attitude_target_quat.from_rotation_matrix(_ahrs.get_rotation_body_to_ned()); }


    void set_yaw_target_to_current_heading() { shift_ef_yaw_target(degrees(_ahrs.yaw - _attitude_target_euler_angle.z)*100.0f); }


    void shift_ef_yaw_target(float yaw_shift_cd);


    void input_quaternion(Quaternion attitude_desired_quat, float smoothing_gain);


    virtual void input_euler_angle_roll_pitch_euler_rate_yaw(float euler_roll_angle_cd, float euler_pitch_angle_cd, float euler_yaw_rate_cds, float smoothing_gain);


    virtual void input_euler_angle_roll_pitch_yaw(float euler_roll_angle_cd, float euler_pitch_angle_cd, float euler_yaw_angle_cd, bool slew_yaw, float smoothing_gain);


    void input_euler_rate_roll_pitch_yaw(float euler_roll_rate_cds, float euler_pitch_rate_cds, float euler_yaw_rate_cds);


    virtual void input_rate_bf_roll_pitch_yaw(float roll_rate_bf_cds, float pitch_rate_bf_cds, float yaw_rate_bf_cds);


    virtual void input_angle_step_bf_roll_pitch_yaw(float roll_angle_step_bf_cd, float pitch_angle_step_bf_cd, float yaw_angle_step_bf_cd);


    virtual void rate_controller_run() = 0;


    void euler_rate_to_ang_vel(const Vector3f& euler_rad, const Vector3f& euler_rate_rads, Vector3f& ang_vel_rads);



    bool ang_vel_to_euler_rate(const Vector3f& euler_rad, const Vector3f& ang_vel_rads, Vector3f& euler_rate_rads);


    void use_ff_and_input_shaping(bool use_shaping) { _use_ff_and_input_shaping = use_shaping; }





    Vector3f get_att_target_euler_cd() const { return _attitude_target_euler_angle*degrees(100.0f); }


    float get_att_error_angle_deg() const { return degrees(_thrust_error_angle); }


    void rate_bf_roll_target(float rate_cds) { _rate_target_ang_vel.x = radians(rate_cds*0.01f); }


    void rate_bf_pitch_target(float rate_cds) { _rate_target_ang_vel.y = radians(rate_cds*0.01f); }


    void rate_bf_yaw_target(float rate_cds) { _rate_target_ang_vel.z = radians(rate_cds*0.01f); }


    float max_rate_step_bf_roll();


    float max_rate_step_bf_pitch();


    float max_rate_step_bf_yaw();


    float max_angle_step_bf_roll() { return max_rate_step_bf_roll()/_p_angle_roll.kP(); }


    float max_angle_step_bf_pitch() { return max_rate_step_bf_pitch()/_p_angle_pitch.kP(); }


    float max_angle_step_bf_yaw() { return max_rate_step_bf_yaw()/_p_angle_yaw.kP(); }


    Vector3f rate_bf_targets() const { return _rate_target_ang_vel; }


    void bf_feedforward(bool enable_or_disable) { _rate_bf_ff_enabled = enable_or_disable; }


    void bf_feedforward_save(bool enable_or_disable) { _rate_bf_ff_enabled.set_and_save(enable_or_disable); }


    bool get_bf_feedforward() { return _rate_bf_ff_enabled; }


    void accel_limiting(bool enable_or_disable);


    virtual void update_althold_lean_angle_max(float throttle_in) = 0;


    virtual void set_throttle_out(float throttle_in, bool apply_angle_boost, float filt_cutoff) = 0;


    void set_throttle_out_unstabilized(float throttle_in, bool reset_attitude_control, float filt_cutoff);


    float get_throttle_in() const { return _throttle_in; }


    float angle_boost() const { return _angle_boost; }


    float get_althold_lean_angle_max() const;


    float lean_angle_max() const { return _aparm.angle_max; }


    static float sqrt_controller(float error, float p, float second_ord_lim);


    static float stopping_point(float first_ord_mag, float p, float second_ord_lim);



    float input_shaping_angle(float error_angle, float smoothing_gain, float accel_max, float target_ang_vel);


    float input_shaping_ang_vel(float target_ang_vel, float desired_ang_vel, float accel_max);


    Vector3f euler_accel_limit(Vector3f euler_rad, Vector3f euler_accel);



    void thrust_heading_rotation_angles(Quaternion& att_to_quat, const Quaternion& att_from_quat, Vector3f& att_diff_angle, float& thrust_vec_dot);


    void attitude_controller_run_quat();


    virtual void parameter_sanity_check() {}


    virtual bool is_throttle_mix_min() const { return true; }


    virtual void set_throttle_mix_min() {}
    virtual void set_throttle_mix_man() {}
    virtual void set_throttle_mix_max() {}
    virtual void set_throttle_mix_value(float value) {}
    virtual float get_throttle_mix(void) const { return 0; }


    virtual void use_flybar_passthrough(bool passthrough, bool tail_passthrough) {}


 virtual void use_leaky_i(bool leaky_i) {}


    virtual void set_hover_roll_trim_scalar(float scalar) {}


    virtual void passthrough_bf_roll_pitch_rate_yaw(float roll_passthrough, float pitch_passthrough, float yaw_rate_bf_cds) {};


    virtual void set_inverted_flight(bool inverted) {}


    static const struct AP_Param::GroupInfo var_info[];

protected:


    Vector3f update_ang_vel_target_from_att_error(Vector3f attitude_error_rot_vec_rad);


    float rate_target_to_motor_roll(float rate_actual_rads, float rate_target_rads);


    float rate_target_to_motor_pitch(float rate_actual_rads, float rate_target_rads);


    virtual float rate_target_to_motor_yaw(float rate_actual_rads, float rate_target_rads);



    virtual float get_roll_trim_rad() { return 0;}


    float get_accel_roll_max_radss() { return radians(_accel_roll_max*0.01f); }


    float get_accel_pitch_max_radss() { return radians(_accel_pitch_max*0.01f); }


    float get_accel_yaw_max_radss() { return radians(_accel_yaw_max*0.01f); }


    float get_slew_yaw_rads() { return radians(_slew_yaw*0.01f); }


    AP_Float _slew_yaw;


    AP_Float _accel_roll_max;


    AP_Float _accel_pitch_max;


    AP_Float _accel_yaw_max;


    AP_Int8 _rate_bf_ff_enabled;


    AP_Int8 _angle_boost_enabled;


    AC_P _p_angle_roll;
    AC_P _p_angle_pitch;
    AC_P _p_angle_yaw;


    AP_Float _angle_limit_tc;


    float _dt;



    Vector3f _attitude_target_euler_angle;




    Vector3f _attitude_target_euler_rate;



    Quaternion _attitude_target_quat;




    Vector3f _attitude_target_ang_vel;



    Vector3f _rate_target_ang_vel;


    float _thrust_error_angle;


    float _throttle_in = 0.0f;



    float _angle_boost;


    bool _use_ff_and_input_shaping;


    float _althold_lean_angle_max = 0.0f;


    float _throttle_rpy_mix_desired;


    float _throttle_rpy_mix;


    const AP_AHRS_View& _ahrs;
    const AP_Vehicle::MultiCopter &_aparm;
    AP_Motors& _motors;

protected:



    struct {
        float rms_roll_P;
        float rms_roll_D;
        float rms_pitch_P;
        float rms_pitch_D;
        float rms_yaw;
    } _control_monitor;


    void control_monitor_filter_pid(float value, float &rms_P);
    void control_monitor_update(void);


    bool _inverted_flight;

public:

    void control_monitor_log(void);


    float control_monitor_rms_output_roll(void) const;
    float control_monitor_rms_output_roll_P(void) const;
    float control_monitor_rms_output_roll_D(void) const;
    float control_monitor_rms_output_pitch_P(void) const;
    float control_monitor_rms_output_pitch_D(void) const;
    float control_monitor_rms_output_pitch(void) const;
    float control_monitor_rms_output_yaw(void) const;
};
# 7 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl_Multi.h" 2
# 42 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl_Multi.h"
class AC_AttitudeControl_Multi : public AC_AttitudeControl {
public:
 AC_AttitudeControl_Multi(AP_AHRS_View &ahrs, const AP_Vehicle::MultiCopter &aparm, AP_MotorsMulticopter& motors, float dt);


 virtual ~AC_AttitudeControl_Multi() {}


    AC_PID& get_rate_roll_pid() { return _pid_rate_roll; }
    AC_PID& get_rate_pitch_pid() { return _pid_rate_pitch; }
    AC_PID& get_rate_yaw_pid() { return _pid_rate_yaw; }


    void update_althold_lean_angle_max(float throttle_in) override;


    void set_throttle_out(float throttle_in, bool apply_angle_boost, float filt_cutoff) override;


    float get_throttle_boosted(float throttle_in);




    void set_throttle_mix_min() override { _throttle_rpy_mix_desired = _thr_mix_min; }
    void set_throttle_mix_man() override { _throttle_rpy_mix_desired = _thr_mix_man; }
    void set_throttle_mix_max() override { _throttle_rpy_mix_desired = _thr_mix_max; }
    void set_throttle_mix_value(float value) override { _throttle_rpy_mix_desired = _throttle_rpy_mix = value; }
    float get_throttle_mix(void) const override { return _throttle_rpy_mix; }


    bool is_throttle_mix_min() const override { return (_throttle_rpy_mix < 1.25f*_thr_mix_min); }


    void rate_controller_run();


    void parameter_sanity_check();


    static const struct AP_Param::GroupInfo var_info[];

protected:


    void update_throttle_rpy_mix();


    float get_throttle_avg_max(float throttle_in);

    AP_MotorsMulticopter& _motors_multi;
    AC_PID _pid_rate_roll;
    AC_PID _pid_rate_pitch;
    AC_PID _pid_rate_yaw;

    AP_Float _thr_mix_man;
    AP_Float _thr_mix_min;
    AP_Float _thr_mix_max;
};
# 57 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl_Heli.h" 1
       
# 31 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_AttitudeControl_Heli.h"
class AC_AttitudeControl_Heli : public AC_AttitudeControl {
public:
    AC_AttitudeControl_Heli( AP_AHRS_View &ahrs,
                        const AP_Vehicle::MultiCopter &aparm,
                        AP_MotorsHeli& motors,
                        float dt) :
        AC_AttitudeControl(ahrs, aparm, motors, dt),
        _passthrough_roll(0), _passthrough_pitch(0), _passthrough_yaw(0),
        _pid_rate_roll(0.024f, 0.6f, 0.001f, 1.0f, 20.0f, dt, 0.060f),
        _pid_rate_pitch(0.024f, 0.6f, 0.001f, 1.0f, 20.0f, dt, 0.060f),
        _pid_rate_yaw(0.18f, 0.12f, 0.003f, 1.0f, 20.0f, dt, 0.024f),
        pitch_feedforward_filter(10.0f),
        roll_feedforward_filter(10.0f),
        yaw_velocity_feedforward_filter(10.0f)
        {
            AP_Param::setup_object_defaults(this, var_info);


            _flags_heli.limit_roll = false;
            _flags_heli.limit_pitch = false;
            _flags_heli.limit_yaw = false;
            _flags_heli.leaky_i = true;
            _flags_heli.flybar_passthrough = false;
            _flags_heli.tail_passthrough = false;
            _flags_heli.do_piro_comp = false;
        }


    AC_PID& get_rate_roll_pid() { return _pid_rate_roll; }
    AC_PID& get_rate_pitch_pid() { return _pid_rate_pitch; }
    AC_PID& get_rate_yaw_pid() { return _pid_rate_yaw; }


    void passthrough_bf_roll_pitch_rate_yaw(float roll_passthrough, float pitch_passthrough, float yaw_rate_bf_cds) override;


    void integrate_bf_rate_error_to_angle_errors();


    void input_rate_bf_roll_pitch_yaw(float roll_rate_bf_cds, float pitch_rate_bf_cds, float yaw_rate_bf_cds) override;



 virtual void rate_controller_run();


    void update_althold_lean_angle_max(float throttle_in) override;


 void use_leaky_i(bool leaky_i) override { _flags_heli.leaky_i = leaky_i; }



    void use_flybar_passthrough(bool passthrough, bool tail_passthrough) override {
        _flags_heli.flybar_passthrough = passthrough;
        _flags_heli.tail_passthrough = tail_passthrough;
    }


    void do_piro_comp(bool piro_comp) { _flags_heli.do_piro_comp = piro_comp; }


    void set_hover_roll_trim_scalar(float scalar) override {_hover_roll_trim_scalar = constrain_float(scalar, 0.0f, 1.0f);}


    void set_throttle_out(float throttle_in, bool apply_angle_boost, float filt_cutoff) override;


    void input_euler_angle_roll_pitch_euler_rate_yaw(float euler_roll_angle_cd, float euler_pitch_angle_cd, float euler_yaw_rate_cds, float smoothing_gain) override;


    void input_euler_angle_roll_pitch_yaw(float euler_roll_angle_cd, float euler_pitch_angle_cd, float euler_yaw_angle_cd, bool slew_yaw, float smoothing_gain) override;


    void set_inverted_flight(bool inverted) override {
        _inverted_flight = inverted;
    }


    static const struct AP_Param::GroupInfo var_info[];

private:


    struct AttControlHeliFlags {
        uint8_t limit_roll : 1;
        uint8_t limit_pitch : 1;
        uint8_t limit_yaw : 1;
        uint8_t leaky_i : 1;
        uint8_t flybar_passthrough : 1;
        uint8_t tail_passthrough : 1;
        uint8_t do_piro_comp : 1;
    } _flags_heli;






    void rate_bf_to_motor_roll_pitch(const Vector3f &rate_rads, float rate_roll_target_rads, float rate_pitch_target_rads);
    float rate_target_to_motor_yaw(float rate_yaw_actual_rads, float rate_yaw_rads) override;






    int16_t _passthrough_roll;
    int16_t _passthrough_pitch;


    int16_t _passthrough_yaw;


    float get_roll_trim_rad() { return constrain_float(radians(_hover_roll_trim_scalar * _hover_roll_trim * 0.01f), -radians(10.0f),radians(10.0f));}


    float _hover_roll_trim_scalar = 0;





    Vector3f _att_error_rot_vec_rad;


    AP_Int8 _piro_comp_enabled;
    AP_Int16 _hover_roll_trim;
    AC_HELI_PID _pid_rate_roll;
    AC_HELI_PID _pid_rate_pitch;
    AC_HELI_PID _pid_rate_yaw;




    LowPassFilterFloat pitch_feedforward_filter;
    LowPassFilterFloat roll_feedforward_filter;
    LowPassFilterFloat yaw_velocity_feedforward_filter;
    LowPassFilterFloat yaw_acceleration_feedforward_filter;

};
# 58 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_PosControl.h" 1
       







# 1 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h" 1
       
# 23 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h"
class AP_InertialNav
{
public:


    AP_InertialNav() {}







    virtual void update(float dt) = 0;




    virtual nav_filter_status get_filter_status() const = 0;






    virtual struct Location get_origin() const = 0;
# 59 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h"
    virtual const Vector3f& get_position() const = 0;





    virtual bool get_location(struct Location &loc) const = 0;





    virtual int32_t get_latitude() const = 0;





    virtual int32_t get_longitude() const = 0;
# 87 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h"
    virtual const Vector3f& get_velocity() const = 0;






    virtual float get_velocity_xy() const = 0;
# 105 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h"
    virtual float get_altitude() const = 0;







    virtual bool get_hgt_ctrl_limit(float& limit) const = 0;
# 122 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h"
    virtual float get_velocity_z() const = 0;
};


# 1 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav_NavEKF.h" 1





       



class AP_InertialNav_NavEKF : public AP_InertialNav
{
public:

    AP_InertialNav_NavEKF(AP_AHRS_NavEKF &ahrs) :
        AP_InertialNav(),
        _haveabspos(false),
        _ahrs_ekf(ahrs)
        {}




    void update(float dt);




    nav_filter_status get_filter_status() const;






    struct Location get_origin() const;
# 44 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav_NavEKF.h"
    const Vector3f& get_position() const;





    bool get_location(struct Location &loc) const;




    int32_t get_latitude() const;





    int32_t get_longitude() const;
# 71 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav_NavEKF.h"
    const Vector3f& get_velocity() const;




    float get_pos_z_derivative() const;






    float get_velocity_xy() const;





    float get_altitude() const;





    bool get_hagl(float &hagl) const;







    bool get_hgt_ctrl_limit(float& limit) const;
# 112 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav_NavEKF.h"
    float get_velocity_z() const;

private:
    Vector3f _relpos_cm;
    Vector3f _velocity_cm;
    float _pos_z_rate;
    struct Location _abspos;
    bool _haveabspos;
    AP_AHRS_NavEKF &_ahrs_ekf;
};
# 127 "/Users/yu/repos/ardupilot/libraries/AP_InertialNav/AP_InertialNav.h" 2
# 10 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_PosControl.h" 2
# 46 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_PosControl.h"
class AC_PosControl
{
public:


    AC_PosControl(const AP_AHRS_View& ahrs, const AP_InertialNav& inav,
                  const AP_Motors& motors, AC_AttitudeControl& attitude_control,
                  AC_P& p_pos_z, AC_P& p_vel_z, AC_PID& pid_accel_z,
                  AC_P& p_pos_xy, AC_PI_2D& pi_vel_xy);


    enum xy_mode {
        XY_MODE_POS_ONLY = 0,
        XY_MODE_POS_LIMITED_AND_VEL_FF,
        XY_MODE_POS_AND_VEL_FF
    };







    void set_dt(float delta_sec);
    float get_dt() const { return _dt; }


    void set_dt_xy(float dt_xy);
    float get_dt_xy() const { return _dt_xy; }
# 83 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_PosControl.h"
    void set_speed_z(float speed_down, float speed_up);


    float get_speed_up() const { return _speed_up_cms; }


    float get_speed_down() const { return _speed_down_cms; }


    float get_vel_target_z() const { return _vel_target.z; }



    void set_accel_z(float accel_cmss);


    float get_accel_z() const { return _accel_z_cms; }



    void calc_leash_length_z();


    void set_alt_target(float alt_cm) { _pos_target.z = alt_cm; }





    void set_alt_target_with_slew(float alt_cm, float dt);






    virtual void set_alt_target_from_climb_rate(float climb_rate_cms, float dt, bool force_descend);






    virtual void set_alt_target_from_climb_rate_ff(float climb_rate_cms, float dt, bool force_descend);




    void add_takeoff_climb_rate(float climb_rate_cms, float dt);


    void set_alt_target_to_current_alt() { _pos_target.z = _inav.get_altitude(); }


    void shift_alt_target(float z_cm);


    void relax_alt_hold_controllers(float throttle_setting);



    float get_alt_target() const { return _pos_target.z; }


    float get_alt_error() const;


    float get_horizontal_error() const;


    void set_target_to_stopping_point_z();


    void get_stopping_point_z(Vector3f& stopping_point) const;


    void init_takeoff();


    bool is_active_z() const;


    void update_z_controller();


    float get_leash_down_z() const { return _leash_down_z; }
    float get_leash_up_z() const { return _leash_up_z; }


    float get_pos_z_kP() const { return _p_pos_z.kP(); }
# 182 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_PosControl.h"
    void init_xy_controller(bool reset_I = true);



    void set_accel_xy(float accel_cmss);
    float get_accel_xy() const { return _accel_cms; }



    void set_speed_xy(float speed_cms);
    float get_speed_xy() const { return _speed_cms; }


    void set_jerk_xy(float jerk_cmsss) { _jerk_cmsss = jerk_cmsss; }
    void set_jerk_xy_to_default() { _jerk_cmsss = 1700.0f; }



    void set_limit_accel_xy(void) { _limit.accel_xy = true; }



    void calc_leash_length_xy();


    const Vector3f& get_pos_target() const { return _pos_target; }


    void set_pos_target(const Vector3f& position);


    void set_xy_target(float x, float y);


    void shift_pos_xy_target(float x_cm, float y_cm);


    const Vector3f& get_desired_velocity() { return _vel_desired; }


    void set_desired_velocity_z(float vel_z_cms) {_vel_desired.z = vel_z_cms;}


    void clear_desired_velocity_ff_z() { _flags.use_desvel_ff_z = false; }




    void set_desired_velocity_xy(float vel_lat_cms, float vel_lon_cms) {_vel_desired.x = vel_lat_cms; _vel_desired.y = vel_lon_cms; }



    void set_desired_velocity(const Vector3f &des_vel) { _vel_desired = des_vel; freeze_ff_xy(); }


    void override_vehicle_velocity_xy(const Vector2f& vel_xy) { _vehicle_horiz_vel = vel_xy; _flags.vehicle_horiz_vel_override = true; }


    void freeze_ff_z() { _flags.freeze_ff_z = true; }


    void freeze_ff_xy() { _flags.freeze_ff_xy = true; }


    bool is_active_xy() const;



    void update_xy_controller(xy_mode mode, float ekfNavVelGainScaler, bool use_althold_lean_angle);


    void set_target_to_stopping_point_xy();






    void get_stopping_point_xy(Vector3f &stopping_point) const;


    float get_distance_to_target() const;


    int32_t get_bearing_to_target() const;




    void init_vel_controller_xyz();





    void update_vel_controller_xy(float ekfNavVelGainScaler);





    void update_vel_controller_xyz(float ekfNavVelGainScaler);


    float get_roll() const { return _roll_target; }
    float get_pitch() const { return _pitch_target; }


    float get_leash_xy() const { return _leash; }


    float get_pos_xy_kP() const { return _p_pos_xy.kP(); }


    const Vector3f& get_vel_target() const { return _vel_target; }
    const Vector3f& get_accel_target() const { return _accel_target; }


    void lean_angles_to_accel(float& accel_x_cmss, float& accel_y_cmss) const;


    float time_since_last_xy_update() const;

    static const struct AP_Param::GroupInfo var_info[];

protected:


    struct poscontrol_flags {
            uint16_t recalc_leash_z : 1;
            uint16_t recalc_leash_xy : 1;
            uint16_t reset_desired_vel_to_pos : 1;
            uint16_t reset_rate_to_accel_xy : 1;
            uint16_t reset_accel_to_lean_xy : 1;
            uint16_t reset_rate_to_accel_z : 1;
            uint16_t reset_accel_to_throttle : 1;
            uint16_t freeze_ff_xy : 1;
            uint16_t freeze_ff_z : 1;
            uint16_t use_desvel_ff_z : 1;
            uint16_t vehicle_horiz_vel_override : 1;
    } _flags;


    struct poscontrol_limit_flags {
        uint8_t pos_up : 1;
        uint8_t pos_down : 1;
        uint8_t vel_up : 1;
        uint8_t vel_down : 1;
        uint8_t accel_xy : 1;
    } _limit;
# 342 "/Users/yu/repos/ardupilot/libraries/AC_AttitudeControl/AC_PosControl.h"
    void pos_to_rate_z();


    void rate_to_accel_z();


    void accel_to_throttle(float accel_target_z);






    void desired_vel_to_pos(float nav_dt);






    void pos_to_rate_xy(xy_mode mode, float dt, float ekfNavVelGainScaler);



    void rate_to_accel_xy(float dt, float ekfNavVelGainScaler);



    void accel_to_lean_angles(float dt_xy, float ekfNavVelGainScaler, bool use_althold_lean_angle);


    float calc_leash_length(float speed_cms, float accel_cms, float kP) const;


    void init_ekf_xy_reset();
    void check_for_ekf_xy_reset();
    void init_ekf_z_reset();
    void check_for_ekf_z_reset();


    const AP_AHRS_View & _ahrs;
    const AP_InertialNav& _inav;
    const AP_Motors& _motors;
    AC_AttitudeControl& _attitude_control;


    AC_P& _p_pos_z;
    AC_P& _p_vel_z;
    AC_PID& _pid_accel_z;
    AC_P& _p_pos_xy;
    AC_PI_2D& _pi_vel_xy;


    AP_Float _accel_xy_filt_hz;


    float _dt;
    float _dt_xy;
    uint32_t _last_update_xy_ms;
    uint32_t _last_update_z_ms;
    float _speed_down_cms;
    float _speed_up_cms;
    float _speed_cms;
    float _accel_z_cms;
    float _accel_last_z_cms;
    float _accel_cms;
    float _jerk_cmsss;
    float _leash;
    float _leash_down_z;
    float _leash_up_z;


    float _roll_target;
    float _pitch_target;


    Vector3f _pos_target;
    Vector3f _pos_error;
    Vector3f _vel_desired;
    Vector3f _vel_target;
    Vector3f _vel_error;
    Vector3f _vel_last;
    Vector3f _accel_feedforward;
    Vector3f _accel_target;
    Vector3f _accel_error;
    Vector2f _vehicle_horiz_vel;
    float _distance_to_target;
    LowPassFilterFloat _vel_error_filter;

    Vector2f _accel_target_jerk_limited;
    LowPassFilterVector2f _accel_target_filter;


    uint32_t _ekf_xy_reset_ms;
    uint32_t _ekf_z_reset_ms;
};
# 59 "ArduCopterC.cpp" 2


# 1 "/Users/yu/repos/ardupilot/libraries/AP_RangeFinder/AP_RangeFinder.h" 1
# 62 "ArduCopterC.cpp" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_Stats/AP_Stats.h" 1
       







class AP_Stats
{
public:




    uint32_t flttime;
    uint32_t runtime;
    uint32_t reset;

    void init();


    void flush();



    void update();

    void set_flying(bool b);

    static const struct AP_Param::GroupInfo var_info[];

private:

    struct {
        AP_Int16 bootcount;
        AP_Int32 flttime;
        AP_Int32 runtime;
        AP_Int32 reset;
    } params;

    void copy_variables_from_parameters();

    uint64_t last_flush_ms;
    const uint16_t flush_interval_ms = 30000;

    uint64_t _flying_ms;
    uint64_t _last_runtime_ms;

    void update_flighttime();
    void update_runtime();

};
# 64 "ArduCopterC.cpp" 2

# 1 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/AP_OpticalFlow.h" 1



# 1 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/OpticalFlow.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/OpticalFlow.h"
       
# 25 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/OpticalFlow.h"
class OpticalFlow_backend;
class AP_AHRS_NavEKF;

class OpticalFlow
{
    friend class OpticalFlow_backend;

public:
    static OpticalFlow create(AP_AHRS_NavEKF& ahrs) { return OpticalFlow{ahrs}; }

    constexpr OpticalFlow(OpticalFlow &&other) = default;


    OpticalFlow(const OpticalFlow &other) = delete;
    OpticalFlow &operator=(const OpticalFlow&) = delete;


    void init(void);


    bool enabled() const { return _enabled; }


    bool healthy() const { return backend != nullptr && _flags.healthy; }


    void update(void);


    uint8_t quality() const { return _state.surface_quality; }


    const Vector2f& flowRate() const { return _state.flowRate; }


    const Vector2f& bodyRate() const { return _state.bodyRate; }


    uint8_t device_id() const { return _state.device_id; }


    uint32_t last_update() const { return _last_update_ms; }

    struct OpticalFlow_state {
        uint8_t device_id;
        uint8_t surface_quality;
        Vector2f flowRate;
        Vector2f bodyRate;
    };


    const Vector3f &get_pos_offset(void) const {
        return _pos_offset;
    }


    static const struct AP_Param::GroupInfo var_info[];

private:
    OpticalFlow(AP_AHRS_NavEKF& ahrs);

    AP_AHRS_NavEKF &_ahrs;
    OpticalFlow_backend *backend;

    struct AP_OpticalFlow_Flags {
        uint8_t healthy : 1;
    } _flags;


    AP_Int8 _enabled;
    AP_Int16 _flowScalerX;
    AP_Int16 _flowScalerY;
    AP_Int16 _yawAngle_cd;
    AP_Vector3f _pos_offset;
    AP_Int8 _address;


    struct OpticalFlow_state _state;

    uint32_t _last_update_ms;
};

# 1 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/OpticalFlow_backend.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/OpticalFlow_backend.h"
       







class OpticalFlow_backend
{
    friend class OpticalFlow;

public:

    OpticalFlow_backend(OpticalFlow &_frontend);
    virtual ~OpticalFlow_backend(void);


    virtual void init() = 0;


    virtual void update() = 0;

protected:

    OpticalFlow &frontend;


    void _update_frontend(const struct OpticalFlow::OpticalFlow_state &state);


    Vector2f _flowScaler(void) const { return Vector2f(frontend._flowScalerX, frontend._flowScalerY); }


    float _yawAngleRad(void) const { return radians(float(frontend._yawAngle_cd) * 0.01f); }


    void _applyYaw(Vector2f &v);


    AP_AHRS_NavEKF &get_ahrs(void) { return frontend._ahrs; }


    uint8_t get_address(void) const { return frontend._address; }


    AP_HAL::Semaphore *_sem;
};
# 107 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/OpticalFlow.h" 2
# 4 "/Users/yu/repos/ardupilot/libraries/AP_OpticalFlow/AP_OpticalFlow.h" 2
# 66 "ArduCopterC.cpp" 2
# 76 "ArduCopterC.cpp"
# 1 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h" 1
       
# 10 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h"
       
# 77 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h"
class AP_Terrain {
public:
    enum TerrainStatus {
        TerrainStatusDisabled = 0,
        TerrainStatusUnhealthy = 1,
        TerrainStatusOK = 2
    };

    static AP_Terrain create(AP_AHRS &_ahrs,
                             const AP_Mission &_mission,
                             const AP_Rally &_rally) {
        return AP_Terrain{_ahrs, _mission, _rally};
    }

    constexpr AP_Terrain(AP_Terrain &&other) = default;


    AP_Terrain(const AP_Terrain &other) = delete;
    AP_Terrain &operator=(const AP_Terrain&) = delete;

    static const struct AP_Param::GroupInfo var_info[];


    void update(void);


    enum TerrainStatus status(void) const { return system_status; }


    void send_request(mavlink_channel_t chan);


    void send_terrain_report(mavlink_channel_t chan, const Location &loc, bool extrapolate);
    void handle_data(mavlink_channel_t chan, mavlink_message_t *msg);
    void handle_terrain_check(mavlink_channel_t chan, mavlink_message_t *msg);
    void handle_terrain_data(mavlink_message_t *msg);
# 123 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h"
    bool height_amsl(const Location &loc, float &height, bool corrected);
# 136 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h"
    bool height_terrain_difference_home(float &terrain_difference,
                                        bool extrapolate = false);
# 154 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h"
    bool height_relative_home_equivalent(float terrain_altitude,
                                         float &relative_altitude,
                                         bool extrapolate = false);
# 168 "/Users/yu/repos/ardupilot/libraries/AP_Terrain/AP_Terrain.h"
    bool height_above_terrain(float &terrain_altitude, bool extrapolate = false);





    float lookahead(float bearing, float distance, float climb_ratio);




    void log_terrain_data(DataFlash_Class &dataflash);




    void get_statistics(uint16_t &pending, uint16_t &loaded);

private:
    AP_Terrain(AP_AHRS &_ahrs, const AP_Mission &_mission, const AP_Rally &_rally);


    bool allocate(void);






    struct __attribute__((__packed__)) grid_block {

        uint64_t bitmap;


        int32_t lat;
        int32_t lon;


        uint16_t crc;


        uint16_t version;


        uint16_t spacing;


        int16_t height[(4*7)][(4*8)];


        uint16_t grid_idx_x;
        uint16_t grid_idx_y;


        int16_t lon_degrees;
        int8_t lat_degrees;
    };




    union grid_io_block {
        struct grid_block block;
        uint8_t buffer[2048];
    };

    enum GridCacheState {
        GRID_CACHE_INVALID=0,
        GRID_CACHE_DISKWAIT=1,
        GRID_CACHE_VALID=2,
        GRID_CACHE_DIRTY=3

    };




    struct grid_cache {
        struct grid_block grid;

        volatile enum GridCacheState state;


        uint32_t last_access_ms;
    };





    struct grid_info {

        int8_t lat_degrees;
        int16_t lon_degrees;


        int32_t grid_lat;
        int32_t grid_lon;


        uint16_t grid_idx_x;
        uint16_t grid_idx_y;


        uint8_t idx_x;
        uint8_t idx_y;


        float frac_x;
        float frac_y;


        uint32_t file_offset;
    };


    void calculate_grid_info(const Location &loc, struct grid_info &info) const;




    struct grid_cache &find_grid_cache(const struct grid_info &info);





    uint8_t grid_bitnum(uint8_t idx_x, uint8_t idx_y);





    bool check_bitmap(const struct grid_block &grid, uint8_t idx_x, uint8_t idx_y);




    bool request_missing(mavlink_channel_t chan, struct grid_cache &gcache);
    bool request_missing(mavlink_channel_t chan, const struct grid_info &info);




    void schedule_disk_io(void);




    uint8_t bitcount64(uint64_t b);




    int16_t find_io_idx(enum GridCacheState state);
    uint16_t get_block_crc(struct grid_block &block);
    void check_disk_read(void);
    void check_disk_write(void);
    void io_timer(void);
    void open_file(void);
    void seek_offset(void);
    void write_block(void);
    void read_block(void);




    void update_mission_data(void);




    void update_rally_data(void);



    AP_Int8 enable;
    AP_Int16 grid_spacing;



    AP_AHRS &ahrs;



    const AP_Mission &mission;



    const AP_Rally &rally;


    uint8_t cache_size = 0;
    struct grid_cache *cache = nullptr;


    enum DiskIoState {
        DiskIoIdle = 0,
        DiskIoWaitWrite = 1,
        DiskIoWaitRead = 2,
        DiskIoDoneRead = 3,
        DiskIoDoneWrite = 4
    };
    volatile enum DiskIoState disk_io_state;
    union grid_io_block disk_block;


    uint32_t last_request_time_ms[5];

    static const uint64_t bitmap_mask = (((uint64_t)1U)<<(7*8)) - 1;


    int fd;


    bool timer_setup;


    int8_t file_lat_degrees;
    int16_t file_lon_degrees;


    volatile bool io_failure;


    bool directory_created;


    float home_height;
    Location home_loc;




    bool have_current_loc_height;
    float last_current_loc_height;


    uint16_t next_mission_index;


    uint8_t next_mission_pos;


    uint32_t last_mission_change_ms;


    uint16_t last_mission_spacing;


    uint16_t next_rally_index;


    uint32_t last_rally_change_ms;


    uint16_t last_rally_spacing;

    char *file_path = nullptr;


    enum TerrainStatus system_status = TerrainStatusDisabled;
};
# 11 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_Avoidance/AC_Avoid.h" 1
       







# 1 "/Users/yu/repos/ardupilot/libraries/AC_Fence/AC_Fence.h" 1
       
# 10 "/Users/yu/repos/ardupilot/libraries/AC_Fence/AC_Fence.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AC_Fence/AC_PolyFence_loader.h" 1
       




class AC_PolyFence_loader
{

public:


    uint8_t max_points() const;



    void* create_point_array(uint8_t element_size);


    bool load_point_from_eeprom(uint16_t i, Vector2l& point);


    bool save_point_to_eeprom(uint16_t i, const Vector2l& point);





    template <typename T>
    bool boundary_valid(uint16_t num_points, const Vector2<T>* points, bool contains_return_point) const;




    template <typename T>
    bool boundary_breached(const Vector2<T>& location, uint16_t num_points, const Vector2<T>* points, bool contains_return_point) const;

};
# 11 "/Users/yu/repos/ardupilot/libraries/AC_Fence/AC_Fence.h" 2
# 35 "/Users/yu/repos/ardupilot/libraries/AC_Fence/AC_Fence.h"
class AC_Fence
{
public:
    static AC_Fence create(const AP_AHRS &ahrs, const AP_InertialNav &inav) {
        return AC_Fence{ahrs, inav};
    }

    constexpr AC_Fence(AC_Fence &&other) = default;


    AC_Fence(const AC_Fence &other) = delete;
    AC_Fence &operator=(const AC_Fence&) = delete;


    void enable(bool value);


    bool enabled() const { return _enabled; }


    uint8_t get_enabled_fences() const;


    bool pre_arm_check(const char* &fail_msg) const;







    uint8_t check_fence(float curr_alt);


    bool check_destination_within_fence(const Location_Class& loc);


    uint8_t get_breaches() const { return _breached_fences; }


    uint32_t get_breach_time() const { return _breach_time; }


    uint16_t get_breach_count() const { return _breach_count; }


    float get_breach_distance(uint8_t fence_type) const;


    uint8_t get_action() const { return _action.get(); }


    float get_safe_alt_max() const { return _alt_max - _margin; }


    float get_safe_alt_min() const { return _alt_min + _margin; }


    float get_radius() const { return _circle_radius.get(); }


    float get_margin() const { return _margin.get(); }




    void manual_recovery_start();






    void set_home_distance(float distance) { _home_distance = distance; }






    Vector2f* get_polygon_points(uint16_t& num_points) const;


    bool boundary_breached(const Vector2f& location, uint16_t num_points, const Vector2f* points) const;


    void handle_msg(GCS_MAVLINK &link, mavlink_message_t* msg);

    static const struct AP_Param::GroupInfo var_info[];

private:
    AC_Fence(const AP_AHRS &ahrs, const AP_InertialNav &inav);


    void record_breach(uint8_t fence_type);


    void clear_breach(uint8_t fence_type);


    bool load_polygon_from_eeprom(bool force_reload = false);


    const AP_AHRS& _ahrs;
    const AP_InertialNav& _inav;


    AP_Int8 _enabled;
    AP_Int8 _enabled_fences;
    AP_Int8 _action;
    AP_Float _alt_max;
    AP_Float _alt_min;
    AP_Float _circle_radius;
    AP_Float _margin;
    AP_Int8 _total;


    float _alt_max_backup;
    float _circle_radius_backup;


    float _alt_max_breach_distance;
    float _circle_breach_distance;


    float _home_distance;


    uint8_t _breached_fences;
    uint32_t _breach_time;
    uint16_t _breach_count;

    uint32_t _manual_recovery_start_ms;


    AC_PolyFence_loader _poly_loader;
    Vector2f *_boundary = nullptr;
    uint8_t _boundary_num_points = 0;
    bool _boundary_create_attempted = false;
    bool _boundary_loaded = false;
    bool _boundary_valid = false;
};
# 10 "/Users/yu/repos/ardupilot/libraries/AC_Avoidance/AC_Avoid.h" 2
# 30 "/Users/yu/repos/ardupilot/libraries/AC_Avoidance/AC_Avoid.h"
class AC_Avoid {
public:
    static AC_Avoid create(const AP_AHRS& ahrs,
                           const AP_InertialNav& inav,
                           const AC_Fence& fence,
                           const AP_Proximity& proximity,
                           const AP_Beacon* beacon = nullptr) {
        return AC_Avoid{ahrs, inav, fence, proximity, beacon};
    }

    constexpr AC_Avoid(AC_Avoid &&other) = default;


    AC_Avoid(const AC_Avoid &other) = delete;
    AC_Avoid &operator=(const AC_Avoid&) = delete;






    void adjust_velocity(float kP, float accel_cmss, Vector2f &desired_vel);
    void adjust_velocity(float kP, float accel_cmss, Vector3f &desired_vel);


    void adjust_velocity_z(float kP, float accel_cmss, float& climb_rate_cms);




    void adjust_roll_pitch(float &roll, float &pitch, float angle_max);


    void proximity_avoidance_enable(bool on_off) { _proximity_enabled = on_off; }
    bool proximity_avoidance_enabled() { return _proximity_enabled; }

    static const struct AP_Param::GroupInfo var_info[];

private:
    AC_Avoid(const AP_AHRS& ahrs, const AP_InertialNav& inav, const AC_Fence& fence, const AP_Proximity& proximity, const AP_Beacon* beacon = nullptr);




    void adjust_velocity_circle_fence(float kP, float accel_cmss, Vector2f &desired_vel);




    void adjust_velocity_polygon_fence(float kP, float accel_cmss, Vector2f &desired_vel);




    void adjust_velocity_beacon_fence(float kP, float accel_cmss, Vector2f &desired_vel);




    void adjust_velocity_proximity(float kP, float accel_cmss, Vector2f &desired_vel);






    void adjust_velocity_polygon(float kP, float accel_cmss, Vector2f &desired_vel, const Vector2f* boundary, uint16_t num_points, bool earth_frame, float margin);
# 105 "/Users/yu/repos/ardupilot/libraries/AC_Avoidance/AC_Avoid.h"
    void limit_velocity(float kP, float accel_cmss, Vector2f &desired_vel, const Vector2f& limit_direction, float limit_distance) const;




    Vector2f get_position() const;
    float get_alt_above_home() const;





    float get_max_speed(float kP, float accel_cmss, float distance) const;




    float get_stopping_distance(float kP, float accel_cmss, float speed) const;






    float distance_to_lean_pct(float dist_m);


    void get_proximity_roll_pitch_pct(float &roll_positive, float &roll_negative, float &pitch_positive, float &pitch_negative);


    const AP_AHRS& _ahrs;
    const AP_InertialNav& _inav;
    const AC_Fence& _fence;
    const AP_Proximity& _proximity;
    const AP_Beacon* _beacon;


    AP_Int8 _enabled;
    AP_Int16 _angle_max;
    AP_Float _dist_max;
    AP_Float _margin;

    bool _proximity_enabled = true;
};
# 12 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h" 2
# 47 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h"
class AC_WPNav
{
public:


    enum spline_segment_end_type {
        SEGMENT_END_STOP = 0,
        SEGMENT_END_STRAIGHT,
        SEGMENT_END_SPLINE
    };


    AC_WPNav(const AP_InertialNav& inav, const AP_AHRS_View& ahrs, AC_PosControl& pos_control, const AC_AttitudeControl& attitude_control);


    void set_terrain(AP_Terrain* terrain_ptr) { _terrain = terrain_ptr; }


    void set_avoidance(AC_Avoid* avoid_ptr) { _avoid = avoid_ptr; }


    void set_rangefinder_alt(bool use, bool healthy, float alt_cm) { _rangefinder_available = use; _rangefinder_healthy = healthy; _rangefinder_alt_cm = alt_cm; }







    void init_loiter_target(const Vector3f& position, bool reset_I=true);


    void init_loiter_target();


    void loiter_soften_for_landing();


    void calculate_loiter_leash_length();


    void set_pilot_desired_acceleration(float control_roll, float control_pitch);


    Vector2f get_pilot_desired_acceleration() const { return Vector2f(_pilot_accel_fwd_cms, _pilot_accel_rgt_cms); }

    void clear_pilot_desired_acceleration() { _pilot_accel_fwd_cms = 0.0f; _pilot_accel_rgt_cms = 0.0f; }


    void get_loiter_stopping_point_xy(Vector3f& stopping_point) const;


    float get_loiter_distance_to_target() const { return _pos_control.get_distance_to_target(); }


    int32_t get_loiter_bearing_to_target() const;


    const Vector3f& get_loiter_target() const { return _pos_control.get_pos_target(); }


    void update_loiter(float ekfGndSpdLimit, float ekfNavVelGainScaler);





    void init_brake_target(float accel_cmss);


    void update_brake(float ekfGndSpdLimit, float ekfNavVelGainScaler);
# 126 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h"
    void wp_and_spline_init();


    void set_speed_xy(float speed_cms);


    float get_speed_xy() const { return _wp_speed_cms; }


    float get_speed_up() const { return _wp_speed_up_cms; }


    float get_speed_down() const { return _wp_speed_down_cms; }


    float get_accel_z() const { return _wp_accel_z_cms; }


    float get_wp_acceleration() const { return _wp_accel_cms.get(); }


    const Vector3f &get_wp_destination() const { return _destination; }


    const Vector3f &get_wp_origin() const { return _origin; }



    bool set_wp_destination(const Location_Class& destination);



    bool set_wp_destination(const Vector3f& destination, bool terrain_alt = false);


    bool set_wp_destination_NED(const Vector3f& destination_NED);




    bool set_wp_origin_and_destination(const Vector3f& origin, const Vector3f& destination, bool terrain_alt = false);




    void shift_wp_origin_to_current_pos();



    void get_wp_stopping_point_xy(Vector3f& stopping_point) const;
    void get_wp_stopping_point(Vector3f& stopping_point) const;


    float get_wp_distance_to_destination() const;


    int32_t get_wp_bearing_to_destination() const;


    bool reached_wp_destination() const { return _flags.reached_destination; }


    void set_fast_waypoint(bool fast) { _flags.fast_waypoint = fast; }


    bool update_wpnav();



    void check_wp_leash_length();


    void calculate_wp_leash_length();
# 216 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h"
    float get_yaw() const;







    bool set_spline_destination(const Location_Class& destination, bool stopped_at_start, spline_segment_end_type seg_end_type, Location_Class next_destination);
# 233 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_WPNav.h"
    bool set_spline_destination(const Vector3f& destination, bool terrain_alt, bool stopped_at_start, spline_segment_end_type seg_end_type, const Vector3f& next_destination);






    bool set_spline_origin_and_destination(const Vector3f& origin, const Vector3f& destination, bool terrain_alt, bool stopped_at_start, spline_segment_end_type seg_end_type, const Vector3f& next_destination);


    bool reached_spline_destination() const { return _flags.reached_destination; }


    bool update_spline();






    int32_t get_roll() const { return _pos_control.get_roll(); }
    int32_t get_pitch() const { return _pos_control.get_pitch(); }


    float get_desired_alt() const { return _pos_control.get_alt_target(); }


    void set_desired_alt(float desired_alt) { _pos_control.set_alt_target(desired_alt); }


    bool advance_wp_target_along_track(float dt);

    static const struct AP_Param::GroupInfo var_info[];

protected:


    enum SegmentType {
        SEGMENT_STRAIGHT = 0,
        SEGMENT_SPLINE = 1
    };


    struct wpnav_flags {
        uint8_t reached_destination : 1;
        uint8_t fast_waypoint : 1;
        uint8_t slowing_down : 1;
        uint8_t recalc_wp_leash : 1;
        uint8_t new_wp_destination : 1;
        SegmentType segment_type : 1;
        uint8_t wp_yaw_set : 1;
    } _flags;



    void calc_loiter_desired_velocity(float nav_dt, float ekfGndSpdLimit);


    void calc_slow_down_distance(float speed_cms, float accel_cmss);


    float get_slow_down_speed(float dist_from_dest_cm, float accel_cmss);




    void update_spline_solution(const Vector3f& origin, const Vector3f& dest, const Vector3f& origin_vel, const Vector3f& dest_vel);



    bool advance_spline_target_along_track(float dt);



    void calc_spline_pos_vel(float spline_time, Vector3f& position, Vector3f& velocity);


    bool get_terrain_offset(float& offset_cm);



    bool get_vector_NEU(const Location_Class &loc, Vector3f &vec, bool &terrain_alt);


    void set_yaw_cd(float heading_cd);


    const AP_InertialNav& _inav;
    const AP_AHRS_View& _ahrs;
    AC_PosControl& _pos_control;
    const AC_AttitudeControl& _attitude_control;
    AP_Terrain *_terrain = nullptr;
    AC_Avoid *_avoid = nullptr;


    AP_Float _loiter_speed_cms;
    AP_Float _loiter_jerk_max_cmsss;
    AP_Float _loiter_accel_cmss;
    AP_Float _loiter_accel_min_cmss;
    AP_Float _wp_speed_cms;
    AP_Float _wp_speed_up_cms;
    AP_Float _wp_speed_down_cms;
    AP_Float _wp_radius_cm;
    AP_Float _wp_accel_cms;
    AP_Float _wp_accel_z_cms;


    int16_t _pilot_accel_fwd_cms;
    int16_t _pilot_accel_rgt_cms;
    Vector2f _loiter_desired_accel;


    uint32_t _wp_last_update;
    uint8_t _wp_step;
    Vector3f _origin;
    Vector3f _destination;
    Vector3f _pos_delta_unit;
    float _track_length;
    float _track_length_xy;
    float _track_desired;
    float _limited_speed_xy_cms;
    float _track_accel;
    float _track_speed;
    float _track_leash_length;
    float _slow_down_dist;


    float _spline_time;
    float _spline_time_scale;
    Vector3f _spline_origin_vel;
    Vector3f _spline_destination_vel;
    Vector3f _hermite_spline_solution[4];
    float _spline_vel_scaler;
    float _yaw;


    bool _terrain_alt = false;
    bool _ekf_origin_terrain_alt_set = false;
    bool _rangefinder_available;
    AP_Int8 _rangefinder_use;
    bool _rangefinder_healthy = false;
    float _rangefinder_alt_cm = 0.0f;
};
# 77 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_Circle.h" 1
       
# 14 "/Users/yu/repos/ardupilot/libraries/AC_WPNav/AC_Circle.h"
class AC_Circle
{
public:


    AC_Circle(const AP_InertialNav& inav, const AP_AHRS_View& ahrs, AC_PosControl& pos_control);



    void init(const Vector3f& center);



    void init();


    void set_center(const Vector3f& center) { _center = center; }


    const Vector3f& get_center() const { return _center; }


    float get_radius() { return _radius; }

    void set_radius(float radius_cm) { _radius = radius_cm; }


    void set_rate(float deg_per_sec);


    float get_angle_total() const { return _angle_total; }


    void update();


    int32_t get_roll() const { return _pos_control.get_roll(); }
    int32_t get_pitch() const { return _pos_control.get_pitch(); }
    int32_t get_yaw() const { return _yaw; }






    void get_closest_point_on_circle(Vector3f &result);

    static const struct AP_Param::GroupInfo var_info[];

private:





    void calc_velocities(bool init_velocity);




    void init_start_angle(bool use_heading);


    struct circle_flags {
        uint8_t panorama : 1;
    } _flags;


    const AP_InertialNav& _inav;
    const AP_AHRS_View& _ahrs;
    AC_PosControl& _pos_control;


    AP_Float _radius;
    AP_Float _rate;


    Vector3f _center;
    float _yaw;
    float _angle;
    float _angle_total;
    float _angular_vel;
    float _angular_vel_max;
    float _angular_accel;
};
# 78 "ArduCopterC.cpp" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AP_Scheduler/AP_Scheduler.h" 1
# 21 "/Users/yu/repos/ardupilot/libraries/AP_Scheduler/AP_Scheduler.h"
       
# 51 "/Users/yu/repos/ardupilot/libraries/AP_Scheduler/AP_Scheduler.h"
class AP_Scheduler
{
public:
    static AP_Scheduler create() { return AP_Scheduler{}; }

    constexpr AP_Scheduler(AP_Scheduler &&other) = default;


    AP_Scheduler(const AP_Scheduler &other) = delete;
    AP_Scheduler &operator=(const AP_Scheduler&) = delete;

    typedef Functor<void> task_fn_t;

    struct Task {
        task_fn_t function;
        const char *name;
        float rate_hz;
        uint16_t max_time_micros;
    };


    void init(const Task *tasks, uint8_t num_tasks);


    void tick(void);




    void run(uint32_t time_available);


    uint16_t time_available_usec(void);


    uint8_t debug(void) { return _debug; }




    float load_average() const;


    uint16_t get_loop_rate_hz(void) const {
        return _loop_rate_hz;
    }

    uint32_t get_loop_period_us() const {
        return 1000000UL / _loop_rate_hz;
    }

    static const struct AP_Param::GroupInfo var_info[];


    static int8_t current_task;

private:
    AP_Scheduler();


    AP_Int8 _debug;


    AP_Int16 _loop_rate_hz;


    const struct Task *_tasks;


    uint8_t _num_tasks;



    uint16_t _tick_counter;


    uint16_t *_last_run;


    uint32_t _task_time_allowed;


    uint32_t _task_time_started;


    uint32_t _spare_micros;


    uint8_t _spare_ticks;


    AP_HAL::Util::perf_counter_t *_perf_counters;
};
# 82 "ArduCopterC.cpp" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AP_BoardConfig/AP_BoardConfig.h" 1
       




# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 72 "/usr/include/sys/ioctl.h" 3 4
# 1 "/usr/include/sys/ttycom.h" 1 3 4
# 72 "/usr/include/sys/ttycom.h" 3 4
# 1 "/usr/include/sys/ioccom.h" 1 3 4
# 73 "/usr/include/sys/ttycom.h" 2 3 4
# 83 "/usr/include/sys/ttycom.h" 3 4

# 83 "/usr/include/sys/ttycom.h" 3 4
struct winsize {
 unsigned short ws_row;
 unsigned short ws_col;
 unsigned short ws_xpixel;
 unsigned short ws_ypixel;
};
# 73 "/usr/include/sys/ioctl.h" 2 3 4






struct ttysize {
 unsigned short ts_lines;
 unsigned short ts_cols;
 unsigned short ts_xxx;
 unsigned short ts_yyy;
};





# 1 "/usr/include/sys/filio.h" 1 3 4
# 91 "/usr/include/sys/ioctl.h" 2 3 4
# 1 "/usr/include/sys/sockio.h" 1 3 4
# 92 "/usr/include/sys/ioctl.h" 2 3 4




extern "C" {
int ioctl(int, unsigned long, ...);
}
# 7 "/Users/yu/repos/ardupilot/libraries/AP_BoardConfig/AP_BoardConfig.h" 2


# 8 "/Users/yu/repos/ardupilot/libraries/AP_BoardConfig/AP_BoardConfig.h"
extern "C" typedef int (*main_fn_t)(int argc, char **);

class AP_BoardConfig {
public:
    static AP_BoardConfig create() { return AP_BoardConfig{}; }

    constexpr AP_BoardConfig(AP_BoardConfig &&other) = default;


    AP_BoardConfig(const AP_BoardConfig &other) = delete;
    AP_BoardConfig &operator=(const AP_BoardConfig&) = delete;

    void init(void);
    void init_safety(void);

    static const struct AP_Param::GroupInfo var_info[];


    static void sensor_config_error(const char *reason);



    static bool in_sensor_config_error(void) { return _in_sensor_config_error; }
# 64 "/Users/yu/repos/ardupilot/libraries/AP_BoardConfig/AP_BoardConfig.h"
    void set_default_safety_ignore_mask(uint16_t mask);







private:
    AP_BoardConfig() {
        AP_Param::setup_object_defaults(this, var_info);
    };

    AP_Int16 vehicleSerialNumber;
# 115 "/Users/yu/repos/ardupilot/libraries/AP_BoardConfig/AP_BoardConfig.h"
    static bool _in_sensor_config_error;


    AP_Int8 _imu_target_temperature;
};
# 86 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_LandingGear/AP_LandingGear.h" 1


       
# 13 "/Users/yu/repos/ardupilot/libraries/AP_LandingGear/AP_LandingGear.h"
class AP_LandingGear {
public:
    static AP_LandingGear create() { return AP_LandingGear{}; }

    constexpr AP_LandingGear(AP_LandingGear &&other) = default;


    AP_LandingGear(const AP_LandingGear &other) = delete;
    AP_LandingGear &operator=(const AP_LandingGear&) = delete;


    enum LandingGearCommand {
        LandingGear_Retract,
        LandingGear_Deploy,
        LandingGear_Deploy_And_Keep_Deployed,
    };


    enum LandingGearStartupBehaviour {
        LandingGear_Startup_WaitForPilotInput = 0,
        LandingGear_Startup_Retract = 1,
        LandingGear_Startup_Deploy = 2,
    };


    void init();


    bool deployed() const { return _deployed; }


    void set_position(LandingGearCommand cmd);

    static const struct AP_Param::GroupInfo var_info[];

private:
    AP_LandingGear() {

        AP_Param::setup_object_defaults(this, var_info);
    }


    AP_Int16 _servo_retract_pwm;
    AP_Int16 _servo_deploy_pwm;
    AP_Int8 _startup_behaviour;


    bool _deployed;
    bool _deploy_lock;


    void retract();


    void deploy();
};
# 87 "ArduCopterC.cpp" 2



# 1 "/Users/yu/repos/ardupilot/libraries/AC_InputManager/AC_InputManager.h" 1
       
# 12 "/Users/yu/repos/ardupilot/libraries/AC_InputManager/AC_InputManager.h"
class AC_InputManager{
public:
    static AC_InputManager create() { return AC_InputManager{}; }

    constexpr AC_InputManager(AC_InputManager &&other) = default;


    AC_InputManager(const AC_InputManager &other) = delete;
    AC_InputManager &operator=(const AC_InputManager&) = delete;

    static const struct AP_Param::GroupInfo var_info[];
    void set_loop_rate(uint16_t loop_rate) { _loop_rate = loop_rate; }

protected:
    AC_InputManager() {

        AP_Param::setup_object_defaults(this, var_info);
    }


    uint16_t _loop_rate;

};
# 91 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AC_InputManager/AC_InputManager_Heli.h" 1
       
# 17 "/Users/yu/repos/ardupilot/libraries/AC_InputManager/AC_InputManager_Heli.h"
class AC_InputManager_Heli : public AC_InputManager {
public:
    static AC_InputManager_Heli create() { return AC_InputManager_Heli{}; }

    constexpr AC_InputManager_Heli(AC_InputManager_Heli &&other) = default;


    AC_InputManager_Heli(const AC_InputManager_Heli &other) = delete;
    AC_InputManager_Heli &operator=(const AC_InputManager_Heli&) = delete;


    float get_pilot_desired_collective(int16_t control_in);


    void set_use_stab_col(bool use) { _im_flags_heli.use_stab_col = use; }


    void set_stab_col_ramp(float ramp) { _stab_col_ramp = constrain_float(ramp, 0.0, 1.0); }

    static const struct AP_Param::GroupInfo var_info[];

protected:

    AC_InputManager_Heli()
        : AC_InputManager()
    {

        AP_Param::setup_object_defaults(this, var_info);
    }

private:
    struct InputManagerHeliFlags {
        uint8_t use_stab_col : 1;
    } _im_flags_heli;


    float _stab_col_ramp = 0;

    AP_Int16 _heli_stab_col_min;
    AP_Int16 _heli_stab_col_low;
    AP_Int16 _heli_stab_col_high;
    AP_Int16 _heli_stab_col_max;
    AP_Float _acro_col_expo;

};
# 92 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Button/AP_Button.h" 1
# 25 "/Users/yu/repos/ardupilot/libraries/AP_Button/AP_Button.h"
class AP_Button {
public:

    AP_Button(void);

    static const struct AP_Param::GroupInfo var_info[];


    void update(void);

private:
    AP_Int8 enable;
    AP_Int8 pin[4];


    AP_Int16 report_send_time;


    uint8_t last_mask;


    uint64_t last_change_time_ms;


    uint32_t last_report_ms;


    bool initialised:1;


    void timer_update(void);


    uint8_t get_mask(void);


    void send_report(void);


    void setup_pins();
};
# 93 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_Arming/AP_Arming.h" 1
       
# 10 "/Users/yu/repos/ardupilot/libraries/AP_Arming/AP_Arming.h"
class AP_Arming {
public:
    enum ArmingChecks {
        ARMING_CHECK_NONE = 0x0000,
        ARMING_CHECK_ALL = 0x0001,
        ARMING_CHECK_BARO = 0x0002,
        ARMING_CHECK_COMPASS = 0x0004,
        ARMING_CHECK_GPS = 0x0008,
        ARMING_CHECK_INS = 0x0010,
        ARMING_CHECK_PARAMETERS = 0x0020,
        ARMING_CHECK_RC = 0x0040,
        ARMING_CHECK_VOLTAGE = 0x0080,
        ARMING_CHECK_BATTERY = 0x0100,
        ARMING_CHECK_AIRSPEED = 0x0200,
        ARMING_CHECK_LOGGING = 0x0400,
        ARMING_CHECK_SWITCH = 0x0800,
        ARMING_CHECK_GPS_CONFIG = 0x1000,
    };

    enum ArmingMethod {
        NONE = 0,
        RUDDER,
        MAVLINK
    };

    enum ArmingRequired {
        NO = 0,
        YES_MIN_PWM = 1,
        YES_ZERO_PWM = 2
    };


    ArmingRequired arming_required();
    virtual bool arm(uint8_t method);
    bool disarm();
    bool is_armed();


    uint16_t get_enabled_checks();


    virtual bool pre_arm_checks(bool report);




    bool arm_checks(uint8_t method);


    uint16_t compass_magfield_expected() const;

    static const struct AP_Param::GroupInfo var_info[];

protected:
    AP_Arming(const AP_AHRS &ahrs_ref, const AP_Baro &baro, Compass &compass,
              const AP_BattMonitor &battery);


    AP_Int8 require;
    AP_Int16 checks_to_perform;
    AP_Float accel_error_threshold;
    AP_Float _min_voltage[2];


    const AP_AHRS &ahrs;
    const AP_Baro &barometer;
    Compass &_compass;
    const AP_BattMonitor &_battery;


    bool armed:1;
    bool logging_available:1;
    uint8_t arming_method;
    uint32_t last_accel_pass_ms[3];
    uint32_t last_gyro_pass_ms[3];

    virtual bool barometer_checks(bool report);

    bool airspeed_checks(bool report);

    bool logging_checks(bool report);

    virtual bool ins_checks(bool report);

    virtual bool compass_checks(bool report);

    virtual bool gps_checks(bool report);

    bool battery_checks(bool report);

    bool hardware_safety_check(bool report);

    virtual bool board_voltage_checks(bool report);

    virtual bool rc_calibration_checks(bool report);

    bool manual_transmitter_checks(bool report);

    virtual enum HomeState home_status() const = 0;

    bool rc_checks_copter_sub(bool display_failure, const RC_Channel *channels[4], const bool check_min_max = true) const;

};
# 94 "ArduCopterC.cpp" 2


# 1 "defines.h" 1
       
# 14 "defines.h"
enum autopilot_yaw_mode {
    AUTO_YAW_HOLD = 0,
    AUTO_YAW_LOOK_AT_NEXT_WP = 1,
    AUTO_YAW_ROI = 2,
    AUTO_YAW_LOOK_AT_HEADING = 3,
    AUTO_YAW_LOOK_AHEAD = 4,
    AUTO_YAW_RESETTOARMEDYAW = 5,
    AUTO_YAW_RATE = 6,
};
# 34 "defines.h"
enum aux_sw_func {
    AUXSW_DO_NOTHING = 0,
    AUXSW_FLIP = 2,
    AUXSW_SIMPLE_MODE = 3,
    AUXSW_RTL = 4,
    AUXSW_SAVE_TRIM = 5,
    AUXSW_SAVE_WP = 7,
    AUXSW_CAMERA_TRIGGER = 9,
    AUXSW_RANGEFINDER = 10,
    AUXSW_FENCE = 11,
    AUXSW_RESETTOARMEDYAW = 12,
    AUXSW_SUPERSIMPLE_MODE = 13,
    AUXSW_ACRO_TRAINER = 14,
    AUXSW_SPRAYER = 15,
    AUXSW_AUTO = 16,
    AUXSW_AUTOTUNE = 17,
    AUXSW_LAND = 18,
    AUXSW_GRIPPER = 19,
    AUXSW_PARACHUTE_ENABLE = 21,
    AUXSW_PARACHUTE_RELEASE = 22,
    AUXSW_PARACHUTE_3POS = 23,
    AUXSW_MISSION_RESET = 24,
    AUXSW_ATTCON_FEEDFWD = 25,
    AUXSW_ATTCON_ACCEL_LIM = 26,
    AUXSW_RETRACT_MOUNT = 27,
    AUXSW_RELAY = 28,
    AUXSW_LANDING_GEAR = 29,
    AUXSW_LOST_COPTER_SOUND = 30,
    AUXSW_MOTOR_ESTOP = 31,
    AUXSW_MOTOR_INTERLOCK = 32,
    AUXSW_BRAKE = 33,
 AUXSW_RELAY2 = 34,
    AUXSW_RELAY3 = 35,
    AUXSW_RELAY4 = 36,
    AUXSW_THROW = 37,
    AUXSW_AVOID_ADSB = 38,
    AUXSW_PRECISION_LOITER = 39,
    AUXSW_AVOID_PROXIMITY = 40,
    AUXSW_ARMDISARM = 41,
    AUXSW_SMART_RTL = 42,
    AUXSW_INVERTED = 43,
    AUXSW_WINCH_ENABLE = 44,
    AUXSW_WINCH_CONTROL = 45,
    AUXSW_SWITCH_MAX,
};
# 90 "defines.h"
enum control_mode_t {
    STABILIZE = 0,
    ACRO = 1,
    ALT_HOLD = 2,
    AUTO = 3,
    GUIDED = 4,
    LOITER = 5,
    RTL = 6,
    CIRCLE = 7,
    LAND = 9,
    DRIFT = 11,
    SPORT = 13,
    FLIP = 14,
    AUTOTUNE = 15,
    POSHOLD = 16,
    BRAKE = 17,
    THROW = 18,
    AVOID_ADSB = 19,
    GUIDED_NOGPS = 20,
    SMART_RTL = 21,
};

enum mode_reason_t {
    MODE_REASON_UNKNOWN=0,
    MODE_REASON_TX_COMMAND,
    MODE_REASON_GCS_COMMAND,
    MODE_REASON_RADIO_FAILSAFE,
    MODE_REASON_BATTERY_FAILSAFE,
    MODE_REASON_GCS_FAILSAFE,
    MODE_REASON_EKF_FAILSAFE,
    MODE_REASON_GPS_GLITCH,
    MODE_REASON_MISSION_END,
    MODE_REASON_THROTTLE_LAND_ESCAPE,
    MODE_REASON_FENCE_BREACH,
    MODE_REASON_TERRAIN_FAILSAFE,
    MODE_REASON_BRAKE_TIMEOUT,
    MODE_REASON_FLIP_COMPLETE,
    MODE_REASON_AVOIDANCE,
    MODE_REASON_AVOIDANCE_RECOVERY,
    MODE_REASON_THROW_COMPLETE,
    MODE_REASON_TERMINATE,
};


enum tuning_func {
    TUNING_NONE = 0,
    TUNING_STABILIZE_ROLL_PITCH_KP = 1,
    TUNING_STABILIZE_YAW_KP = 3,
    TUNING_RATE_ROLL_PITCH_KP = 4,
    TUNING_RATE_ROLL_PITCH_KI = 5,
    TUNING_YAW_RATE_KP = 6,
    TUNING_THROTTLE_RATE_KP = 7,
    TUNING_WP_SPEED = 10,
    TUNING_LOITER_POSITION_KP = 12,
    TUNING_HELI_EXTERNAL_GYRO = 13,
    TUNING_ALTITUDE_HOLD_KP = 14,
    TUNING_RATE_ROLL_PITCH_KD = 21,
    TUNING_VEL_XY_KP = 22,
    TUNING_ACRO_RP_KP = 25,
    TUNING_YAW_RATE_KD = 26,
    TUNING_VEL_XY_KI = 28,
    TUNING_AHRS_YAW_KP = 30,
    TUNING_AHRS_KP = 31,
    TUNING_ACCEL_Z_KP = 34,
    TUNING_ACCEL_Z_KI = 35,
    TUNING_ACCEL_Z_KD = 36,
    TUNING_DECLINATION = 38,
    TUNING_CIRCLE_RATE = 39,
    TUNING_ACRO_YAW_KP = 40,
    TUNING_RANGEFINDER_GAIN = 41,
    TUNING_EKF_VERTICAL_POS = 42,
    TUNING_EKF_HORIZONTAL_POS = 43,
    TUNING_EKF_ACCEL_NOISE = 44,
    TUNING_RC_FEEL_RP = 45,
    TUNING_RATE_PITCH_KP = 46,
    TUNING_RATE_PITCH_KI = 47,
    TUNING_RATE_PITCH_KD = 48,
    TUNING_RATE_ROLL_KP = 49,
    TUNING_RATE_ROLL_KI = 50,
    TUNING_RATE_ROLL_KD = 51,
    TUNING_RATE_PITCH_FF = 52,
    TUNING_RATE_ROLL_FF = 53,
    TUNING_RATE_YAW_FF = 54,
    TUNING_RATE_MOT_YAW_HEADROOM = 55,
    TUNING_RATE_YAW_FILT = 56,
    TUNING_WINCH = 57
};
# 197 "defines.h"
enum AutoMode {
    Auto_TakeOff,
    Auto_WP,
    Auto_Land,
    Auto_RTL,
    Auto_CircleMoveToEdge,
    Auto_Circle,
    Auto_Spline,
    Auto_NavGuided,
    Auto_Loiter,
    Auto_NavPayloadPlace,
};


enum GuidedMode {
    Guided_TakeOff,
    Guided_WP,
    Guided_Velocity,
    Guided_PosVel,
    Guided_Angle,
};


enum RTLState {
    RTL_InitialClimb,
    RTL_ReturnHome,
    RTL_LoiterAtHome,
    RTL_FinalDescent,
    RTL_Land
};


enum SmartRTLState {
    SmartRTL_WaitForPathCleanup,
    SmartRTL_PathFollow,
    SmartRTL_PreLandPosition,
    SmartRTL_Descend,
    SmartRTL_Land
};


enum AltHoldModeState {
    AltHold_MotorStopped,
    AltHold_Takeoff,
    AltHold_Flying,
    AltHold_Landed
};


enum LoiterModeState {
    Loiter_MotorStopped,
    Loiter_Takeoff,
    Loiter_Flying,
    Loiter_Landed
};


enum SportModeState {
    Sport_MotorStopped,
    Sport_Takeoff,
    Sport_Flying,
    Sport_Landed
};


enum FlipState {
    Flip_Start,
    Flip_Roll,
    Flip_Pitch_A,
    Flip_Pitch_B,
    Flip_Recover,
    Flip_Abandon
};


enum ThrowModeStage {
    Throw_Disarmed,
    Throw_Detecting,
    Throw_Uprighting,
    Throw_HgtStabilise,
    Throw_PosHold
};


enum ThrowModeType {
    ThrowType_Upward = 0,
    ThrowType_Drop = 1
};

enum LandStateType {
    LandStateType_FlyToLocation = 0,
    LandStateType_Descending = 1
};

enum PayloadPlaceStateType {
    PayloadPlaceStateType_FlyToLocation,
    PayloadPlaceStateType_Calibrating_Hover_Start,
    PayloadPlaceStateType_Calibrating_Hover,
    PayloadPlaceStateType_Descending_Start,
    PayloadPlaceStateType_Descending,
    PayloadPlaceStateType_Releasing_Start,
    PayloadPlaceStateType_Releasing,
    PayloadPlaceStateType_Released,
    PayloadPlaceStateType_Ascending_Start,
    PayloadPlaceStateType_Ascending,
    PayloadPlaceStateType_Done,
};


enum DevOptions {
    DevOptionADSBMAVLink = 1,
};
# 97 "ArduCopterC.cpp" 2
# 1 "config.h" 1

       
# 29 "config.h"
# 1 "APM_Config.h" 1
# 30 "config.h" 2
# 98 "ArduCopterC.cpp" 2

# 1 "GCS_Mavlink.h" 1
       






class GCS_MAVLINK_Copter : public GCS_MAVLINK
{

public:

    void data_stream_send(void) override;

protected:

    uint32_t telem_delay() const override;

    bool accept_packet(const mavlink_status_t &status, mavlink_message_t &msg) override;

    AP_Mission *get_mission() override;
    AP_Rally *get_rally() const override;
    Compass *get_compass() const override;
    AP_Camera *get_camera() const override;
    AP_ServoRelayEvents *get_servorelayevents() const override;
    MAV_RESULT handle_flight_termination(const mavlink_command_long_t &packet) override;
    AP_AdvancedFailsafe *get_advanced_failsafe() const override;
    const AP_FWVersion &get_fwver() const override;
    void set_ekf_origin(const Location& loc) override;

    uint8_t sysid_my_gcs() const override;

    bool set_mode(uint8_t mode) override;

    bool params_ready() const override;
    void send_banner() override;

private:

    void handleMessage(mavlink_message_t * msg) override;
    bool handle_guided_request(AP_Mission::Mission_Command &cmd) override;
    void handle_change_alt_request(AP_Mission::Mission_Command &cmd) override;
    bool try_send_message(enum ap_message id) override;

    void packetReceived(const mavlink_status_t &status,
                        mavlink_message_t &msg) override;
};
# 100 "ArduCopterC.cpp" 2
# 1 "AP_Rally.h" 1
# 15 "AP_Rally.h"
       




class AP_Rally_Copter : public AP_Rally
{
public:
    static AP_Rally_Copter create(AP_AHRS &ahrs) {
        return AP_Rally_Copter{ahrs};
    }

    constexpr AP_Rally_Copter(AP_Rally_Copter &&other) = default;


    AP_Rally_Copter(const AP_Rally_Copter &other) = delete;
    AP_Rally_Copter &operator=(const AP_Rally_Copter&) = delete;

private:
    AP_Rally_Copter(AP_AHRS &ahrs) : AP_Rally(ahrs) { }

    bool is_valid(const Location &rally_point) const override;
};
# 101 "ArduCopterC.cpp" 2
# 1 "AP_Arming.h" 1
       



class AP_Arming_Copter : public AP_Arming
{
public:
    static AP_Arming_Copter create(const AP_AHRS_NavEKF &ahrs_ref, const AP_Baro &baro, Compass &compass,
                                   const AP_BattMonitor &battery, const AP_InertialNav_NavEKF &inav,
                                   const AP_InertialSensor &ins) {
        return AP_Arming_Copter{ahrs_ref, baro, compass, battery, inav, ins};
    }

    constexpr AP_Arming_Copter(AP_Arming_Copter &&other) = default;


    AP_Arming_Copter(const AP_Arming_Copter &other) = delete;
    AP_Arming_Copter &operator=(const AP_Baro&) = delete;

    void update(void);
    bool all_checks_passing(bool arming_from_gcs);

    bool rc_calibration_checks(bool display_failure) override;

protected:

    bool pre_arm_checks(bool display_failure) override;
    bool pre_arm_ekf_attitude_check();
    bool pre_arm_terrain_check(bool display_failure);
    bool pre_arm_proximity_check(bool display_failure);
    bool arm_checks(bool display_failure, bool arming_from_gcs);


    bool ins_checks(bool display_failure) override;
    bool compass_checks(bool display_failure) override;
    bool gps_checks(bool display_failure) override;
    bool barometer_checks(bool display_failure) override;
    bool board_voltage_checks(bool display_failure) override;


    bool fence_checks(bool display_failure);
    bool parameter_checks(bool display_failure);
    bool motor_checks(bool display_failure);
    bool pilot_throttle_checks(bool display_failure);

    void set_pre_arm_check(bool b);

    enum HomeState home_status() const override;

private:
    AP_Arming_Copter(const AP_AHRS_NavEKF &ahrs_ref, const AP_Baro &baro, Compass &compass,
                     const AP_BattMonitor &battery, const AP_InertialNav_NavEKF &inav,
                     const AP_InertialSensor &ins)
        : AP_Arming(ahrs_ref, baro, compass, battery)
        , _inav(inav)
        , _ins(ins)
        , _ahrs_navekf(ahrs_ref)
    {
    }

    const AP_InertialNav_NavEKF &_inav;
    const AP_InertialSensor &_ins;
    const AP_AHRS_NavEKF &_ahrs_navekf;

    void parameter_checks_pid_warning_message(bool display_failure, const char *error_msg);
};
# 102 "ArduCopterC.cpp" 2





# 1 "/Users/yu/repos/ardupilot/libraries/AC_Sprayer/AC_Sprayer.h" 1
# 15 "/Users/yu/repos/ardupilot/libraries/AC_Sprayer/AC_Sprayer.h"
       
# 33 "/Users/yu/repos/ardupilot/libraries/AC_Sprayer/AC_Sprayer.h"
class AC_Sprayer {
public:
    static AC_Sprayer create(const AP_InertialNav *inav) {
        return AC_Sprayer{inav};
    }

    constexpr AC_Sprayer(AC_Sprayer &&other) = default;


    AC_Sprayer(const AC_Sprayer &other) = delete;
    AC_Sprayer &operator=(const AC_Sprayer&) = delete;


    void run(bool true_false);


    bool running() const { return _flags.running; }


    bool spraying() const { return _flags.spraying; }


    void test_pump(bool true_false) { _flags.testing = true_false; }




    void set_pump_rate(float pct_at_1ms) { _pump_pct_1ms.set(pct_at_1ms); }


    void update();

    static const struct AP_Param::GroupInfo var_info[];

private:
    AC_Sprayer(const AP_InertialNav *inav);

    const AP_InertialNav* const _inav;


    AP_Int8 _enabled;
    AP_Float _pump_pct_1ms;
    AP_Int8 _pump_min_pct;
    AP_Int16 _spinner_pwm;
    AP_Float _speed_min;


    struct sprayer_flags_type {
        uint8_t spraying : 1;
        uint8_t testing : 1;
        uint8_t running : 1;
    } _flags;


    uint32_t _speed_over_min_time;
    uint32_t _speed_under_min_time;

    void stop_spraying();
};
# 108 "ArduCopterC.cpp" 2


# 1 "/Users/yu/repos/ardupilot/libraries/AP_Gripper/AP_Gripper.h" 1
# 16 "/Users/yu/repos/ardupilot/libraries/AP_Gripper/AP_Gripper.h"
       



class AP_Gripper_Backend;

class AP_Gripper {
public:
    AP_Gripper();


    bool enabled() const { return _enabled; }


    void init();


    void grab();


    void release();


    bool released() const;


    bool grabbed() const;


    void update();


    bool valid() const;

    static const struct AP_Param::GroupInfo var_info[];


    AP_Int8 _enabled;

    typedef enum {
        STATE_GRABBING,
        STATE_RELEASING,
        STATE_GRABBED,
        STATE_RELEASED,
    } gripper_state;

    struct Backend_Config {
        AP_Int8 type;
        AP_Int16 grab_pwm;
        AP_Int16 release_pwm;
        AP_Int16 neutral_pwm;
        AP_Int8 regrab_interval;
        AP_Int16 uavcan_hardpoint_id;

        gripper_state state = STATE_RELEASED;
    } config;

private:

    AP_Gripper_Backend *backend;
};
# 111 "ArduCopterC.cpp" 2


# 1 "/Users/yu/repos/ardupilot/libraries/AP_Parachute/AP_Parachute.h" 1


       
# 25 "/Users/yu/repos/ardupilot/libraries/AP_Parachute/AP_Parachute.h"
class AP_Parachute {

public:
    static AP_Parachute create(AP_Relay &relay) {
        return AP_Parachute{relay};
    }

    constexpr AP_Parachute(AP_Parachute &&other) = default;


    AP_Parachute(const AP_Parachute &other) = delete;
    AP_Parachute &operator=(const AP_Parachute&) = delete;


    void enabled(bool on_off);


    bool enabled() const { return _enabled; }


    void release();


    bool released() const { return _released; }


    bool release_initiated() const { return _release_initiated; }


    bool release_in_progress() const { return _release_in_progress; }


    void update();



    int16_t alt_min() const { return _alt_min; }

    static const struct AP_Param::GroupInfo var_info[];

private:

    AP_Parachute(AP_Relay &relay)
        : _relay(relay)
        , _release_time(0)
        , _release_initiated(false)
        , _release_in_progress(false)
        , _released(false)
    {

        AP_Param::setup_object_defaults(this, var_info);
    }


    AP_Int8 _enabled;
    AP_Int8 _release_type;
    AP_Int16 _servo_on_pwm;
    AP_Int16 _servo_off_pwm;
    AP_Int16 _alt_min;
    AP_Int16 _delay_ms;


    AP_Relay &_relay;
    uint32_t _release_time;
    bool _release_initiated:1;
    bool _release_in_progress:1;
    bool _released:1;
};
# 114 "ArduCopterC.cpp" 2


# 1 "/Users/yu/repos/ardupilot/libraries/AC_PrecLand/AC_PrecLand.h" 1
       






# 1 "/Users/yu/repos/ardupilot/libraries/AC_PrecLand/PosVelEKF.h" 1
       

class PosVelEKF {
public:
    void init(float pos, float posVar, float vel, float velVar);
    void predict(float dt, float dVel, float dVelNoise);
    void fusePos(float pos, float posVar);
    void fuseVel(float vel, float velVar);

    float getPos() const { return _state[0]; }
    float getVel() const { return _state[1]; }

    float getPosNIS(float pos, float posVar);

private:
    float _state[2];
    float _cov[3];
};
# 9 "/Users/yu/repos/ardupilot/libraries/AC_PrecLand/AC_PrecLand.h" 2



class AC_PrecLand_Backend;
class AC_PrecLand_Companion;
class AC_PrecLand_IRLock;
class AC_PrecLand_SITL_Gazebo;
class AC_PrecLand_SITL;

class AC_PrecLand
{

    friend class AC_PrecLand_Backend;
    friend class AC_PrecLand_Companion;
    friend class AC_PrecLand_IRLock;
    friend class AC_PrecLand_SITL_Gazebo;
    friend class AC_PrecLand_SITL;

public:

    enum PrecLandBehaviour {
        PRECLAND_BEHAVIOUR_DISABLED,
        PRECLAND_BEHAVIOR_ALWAYSLAND,
        PRECLAND_BEHAVIOR_CAUTIOUS
    };


    enum PrecLandType {
        PRECLAND_TYPE_NONE = 0,
        PRECLAND_TYPE_COMPANION,
        PRECLAND_TYPE_IRLOCK,
        PRECLAND_TYPE_SITL_GAZEBO,
        PRECLAND_TYPE_SITL,
    };

    static AC_PrecLand create(const AP_AHRS& ahrs, const AP_InertialNav& inav) {
        return AC_PrecLand{ahrs, inav};
    }

    constexpr AC_PrecLand(AC_PrecLand &&other) = default;


    AC_PrecLand(const AC_PrecLand &other) = delete;
    AC_PrecLand &operator=(const AC_PrecLand&) = delete;


    void init();


    bool healthy() const { return _backend_state.healthy; }


    bool enabled() const { return _enabled.get(); }


    uint32_t last_update_ms() const { return _last_update_ms; }


    void update(float rangefinder_alt_cm, bool rangefinder_alt_valid);


    bool get_target_position_cm(Vector2f& ret);


    bool get_target_position_relative_cm(Vector2f& ret);


    bool get_target_velocity_relative_cms(Vector2f& ret);


    bool target_acquired();


    void handle_msg(mavlink_message_t* msg);


    static const struct AP_Param::GroupInfo var_info[];

private:
    AC_PrecLand(const AP_AHRS& ahrs, const AP_InertialNav& inav);

    enum estimator_type_t {
        ESTIMATOR_TYPE_RAW_SENSOR = 0,
        ESTIMATOR_TYPE_KALMAN_FILTER = 1
    };


    enum PrecLandBehaviour get_behaviour() const { return (enum PrecLandBehaviour)(_enabled.get()); }


    void run_estimator(float rangefinder_alt_m, bool rangefinder_alt_valid);


    bool construct_pos_meas_using_rangefinder(float rangefinder_alt_m, bool rangefinder_alt_valid);


    bool retrieve_los_meas(Vector3f& target_vec_unit_body);



    void run_output_prediction();


    const AP_AHRS& _ahrs;
    const AP_InertialNav& _inav;


    AP_Int8 _enabled;
    AP_Int8 _type;
    AP_Int8 _bus;
    AP_Int8 _estimator_type;
    AP_Float _yaw_align;
    AP_Float _land_ofs_cm_x;
    AP_Float _land_ofs_cm_y;
    AP_Float _accel_noise;
    AP_Vector3f _cam_offset;

    uint32_t _last_update_ms;
    bool _target_acquired;
    uint32_t _last_backend_los_meas_ms;

    PosVelEKF _ekf_x, _ekf_y;
    uint32_t _outlier_reject_count;

    Vector3f _target_pos_rel_meas_NED;

    Vector2f _target_pos_rel_est_NE;
    Vector2f _target_vel_rel_est_NE;

    Vector2f _target_pos_rel_out_NE;
    Vector2f _target_vel_rel_out_NE;


    struct inertial_data_frame_s {
        Matrix3f Tbn;
        Vector3f correctedVehicleDeltaVelocityNED;
        Vector3f inertialNavVelocity;
        bool inertialNavVelocityValid;
        float dt;
    };
    AP_Buffer<inertial_data_frame_s,8> _inertial_history;


    struct precland_state {
        bool healthy;
    } _backend_state;
    AC_PrecLand_Backend *_backend;
};
# 117 "ArduCopterC.cpp" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock.h" 1
# 11 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock.h"
# 1 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/IRLock.h" 1
# 22 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/IRLock.h"
       



class IRLock
{
public:


    virtual void init(int8_t bus) = 0;


    bool healthy() const { return _flags.healthy; }


    uint32_t last_update_ms() const { return _last_update_ms; }


    size_t num_targets() const { return _flags.healthy?1:0; }


    virtual bool update() = 0;



    bool get_angle_to_target_rad(float &x_angle_rad, float &y_angle_rad) const;



    bool get_unit_vector_body(Vector3f& ret) const;


protected:
    struct AP_IRLock_Flags {
        uint8_t healthy : 1;
    } _flags;


    uint32_t _last_update_ms;


    typedef struct {
        uint32_t timestamp;
        float pos_x;
        float pos_y;
        float size_x;
        float size_y;
    } irlock_target_info;

    irlock_target_info _target_info;
};
# 12 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock.h" 2
# 1 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock_I2C.h" 1




       



class AP_IRLock_I2C : public IRLock
{
public:

    void init(int8_t bus) override;


    bool update() override;

private:
    AP_HAL::OwnPtr<AP_HAL::Device> dev;

    struct __attribute__((__packed__)) frame {
        uint16_t checksum;
        uint16_t signature;
        uint16_t pixel_x;
        uint16_t pixel_y;
        uint16_t pixel_size_x;
        uint16_t pixel_size_y;
    };

    bool timer(void);

    bool sync_frame_start(void);
    bool read_block(struct frame &irframe);
    void read_frames(void);

    void pixel_to_1M_plane(float pix_x, float pix_y, float &ret_x, float &ret_y);

    AP_HAL::Semaphore *sem;
    uint32_t _last_read_ms;
};
# 13 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock.h" 2


# 1 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock_SITL.h" 1






       

# 1 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 1
# 18 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h"
       




# 1 "/usr/include/fcntl.h" 1 3 4
# 23 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/sys/fcntl.h" 1 3 4
# 116 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_o_sync.h" 1 3 4
# 117 "/usr/include/sys/fcntl.h" 2 3 4
# 157 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_o_dsync.h" 1 3 4
# 158 "/usr/include/sys/fcntl.h" 2 3 4
# 306 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_seek_set.h" 1 3 4
# 307 "/usr/include/sys/fcntl.h" 2 3 4





# 1 "/usr/include/sys/_types/_s_ifmt.h" 1 3 4
# 313 "/usr/include/sys/fcntl.h" 2 3 4
# 331 "/usr/include/sys/fcntl.h" 3 4

# 331 "/usr/include/sys/fcntl.h" 3 4
struct flock {
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
 short l_type;
 short l_whence;
};

# 1 "/usr/include/sys/_types/_timespec.h" 1 3 4
# 30 "/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 340 "/usr/include/sys/fcntl.h" 2 3 4






struct flocktimeout {
 struct flock fl;
 struct timespec timeout;
};
# 359 "/usr/include/sys/fcntl.h" 3 4
struct radvisory {
       off_t ra_offset;
       int ra_count;
};



typedef struct fcodeblobs {
 void *f_cd_hash;
 size_t f_hash_size;
 void *f_cd_buffer;
 size_t f_cd_size;
 unsigned int *f_out_size;
 int f_arch;
 int __padding;
} fcodeblobs_t;
# 383 "/usr/include/sys/fcntl.h" 3 4
typedef struct fsignatures {
 off_t fs_file_start;
 void *fs_blob_start;
 size_t fs_blob_size;
} fsignatures_t;
# 397 "/usr/include/sys/fcntl.h" 3 4
typedef struct fstore {
 unsigned int fst_flags;
 int fst_posmode;
 off_t fst_offset;
 off_t fst_length;
 off_t fst_bytesalloc;
} fstore_t;



typedef struct fbootstraptransfer {
  off_t fbt_offset;
  size_t fbt_length;
  void *fbt_buffer;
} fbootstraptransfer_t;
# 435 "/usr/include/sys/fcntl.h" 3 4
#pragma pack(4)

struct log2phys {
 unsigned int l2p_flags;
 off_t l2p_contigbytes;


 off_t l2p_devoffset;


};

#pragma pack()
# 458 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_filesec_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_filesec_t.h" 3 4
struct _filesec;
typedef struct _filesec *filesec_t;
# 459 "/usr/include/sys/fcntl.h" 2 3 4

typedef enum {
 FILESEC_OWNER = 1,
 FILESEC_GROUP = 2,
 FILESEC_UUID = 3,
 FILESEC_MODE = 4,
 FILESEC_ACL = 5,
 FILESEC_GRPUUID = 6,


 FILESEC_ACL_RAW = 100,
 FILESEC_ACL_ALLOCSIZE = 101
} filesec_property_t;





extern "C" {
int open(const char *, int, ...) __asm("_" "open" );

int openat(int, const char *, int, ...) __asm("_" "openat" ) ;

int creat(const char *, mode_t) __asm("_" "creat" );
int fcntl(int, int, ...) __asm("_" "fcntl" );


int openx_np(const char *, int, filesec_t);




int open_dprotected_np ( const char *, int, int, int, ...);
int flock(int, int);
filesec_t filesec_init(void);
filesec_t filesec_dup(filesec_t);
void filesec_free(filesec_t);
int filesec_get_property(filesec_t, filesec_property_t, void *);
int filesec_query_property(filesec_t, filesec_property_t, int *);
int filesec_set_property(filesec_t, filesec_property_t, const void *);
int filesec_unset_property(filesec_t, filesec_property_t) ;



}
# 23 "/usr/include/fcntl.h" 2 3 4
# 24 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 72 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/unistd.h" 1 3 4
# 84 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_posix_vdisable.h" 1 3 4
# 85 "/usr/include/sys/unistd.h" 2 3 4
# 132 "/usr/include/sys/unistd.h" 3 4
struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
# 183 "/usr/include/sys/unistd.h" 3 4
extern "C" {

int getattrlistbulk(int, void *, void *, size_t, uint64_t) ;

}
# 198 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_gid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 199 "/usr/include/sys/unistd.h" 2 3 4


extern "C" {

int faccessat(int, const char *, int, int) ;
int fchownat(int, const char *, uid_t, gid_t, int) ;
int linkat(int, const char *, int, const char *, int) ;
ssize_t readlinkat(int, const char *, char *, size_t) ;
int symlinkat(const char *, int, const char *) ;
int unlinkat(int, const char *, int) ;
int getattrlistat(int, const char *, void *, void *, size_t, unsigned long) ;

}
# 73 "/usr/include/unistd.h" 2 3 4
# 83 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 84 "/usr/include/unistd.h" 2 3 4
# 428 "/usr/include/unistd.h" 3 4
extern "C" {
void _exit(int) __attribute__((noreturn));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char *, const char *, ...) ;
int execle(const char *, const char *, ...) ;
int execlp(const char *, const char *, ...) ;
int execv(const char *, char * const *) ;
int execve(const char *, char * const *, char * const *) ;
int execvp(const char *, char * const *) ;
pid_t fork(void) ;
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int, const void *, size_t) __asm("_" "write" );
}
# 505 "/usr/include/unistd.h" 3 4
extern "C" {
size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;
}
# 530 "/usr/include/unistd.h" 3 4
 extern "C" {





__attribute__((deprecated))

void *brk(const void *);
int chroot(const char *) ;


char *crypt(const char *, const char *);






void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);



int getdtablesize(void) ;
int getpagesize(void) __attribute__((const)) ;
char *getpass(const char *) ;




char *getwd(char *) ;


int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int, void *, size_t, off_t) __asm("_" "pread" );

ssize_t pwrite(int, const void *, size_t, off_t) __asm("_" "pwrite" );






__attribute__((deprecated))

void *sbrk(int);



pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * , void * , ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );
pid_t vfork(void) ;


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);
}
# 623 "/usr/include/unistd.h" 3 4
extern "C" {
int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * , char * , size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);
}







# 1 "/usr/include/sys/select.h" 1 3 4
# 75 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/sys/_types/_fd_def.h" 1 3 4
# 45 "/usr/include/sys/_types/_fd_def.h" 3 4
extern "C" {
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;
}


static inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(1<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));
}
# 76 "/usr/include/sys/select.h" 2 3 4
# 84 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/sys/_types/_time_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 85 "/usr/include/sys/select.h" 2 3 4
# 1 "/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 86 "/usr/include/sys/select.h" 2 3 4
# 100 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 101 "/usr/include/sys/select.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_set.h" 1 3 4
# 102 "/usr/include/sys/select.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 103 "/usr/include/sys/select.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 104 "/usr/include/sys/select.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 105 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 108 "/usr/include/sys/select.h" 2 3 4



extern "C" {


int pselect(int, fd_set * , fd_set * ,
  fd_set * , const struct timespec * ,
  const sigset_t * )




  __asm("_" "pselect" "$1050")




  ;


# 1 "/usr/include/sys/_select.h" 1 3 4
# 39 "/usr/include/sys/_select.h" 3 4
int select(int, fd_set * , fd_set * ,
  fd_set * , struct timeval * )




  __asm("_" "select" "$1050")




  ;
# 130 "/usr/include/sys/select.h" 2 3 4

}
# 639 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/sys/_types/_uuid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uuid_t.h" 3 4
typedef __darwin_uuid_t uuid_t;
# 643 "/usr/include/unistd.h" 2 3 4

extern "C" {
void _Exit(int) __attribute__((noreturn));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int) ;
void endusershell(void);
int execvP(const char *, const char *, char * const *) ;
char *fflagstostr(unsigned long);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);




# 1 "/usr/include/gethostuuid.h" 1 3 4
# 39 "/usr/include/gethostuuid.h" 3 4
int gethostuuid(uuid_t, const struct timespec *) ;
# 659 "/usr/include/unistd.h" 2 3 4




mode_t getmode(const void *, mode_t);
int getpeereid(int, uid_t *, gid_t *);
int getsgroups_np(int *, uuid_t);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int iruserok(unsigned long, int, const char *, const char *);
int iruserok_sa(const void *, int, int, const char *, const char *);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkpath_np(const char *path, mode_t omode) ;
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);
int rcmd(char **, int, const char *, const char *, const char *, int *);
int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
int reboot(int);
int revoke(const char *);
int rresvport(int *);
int rresvport_af(int *, int);
int ruserok(const char *, int, const char *, const char *);
int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" );



int setlogin(const char *);
void *setmode(const char *) __asm("_" "setmode" );
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int syscall(int, ...) ;
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);



int fgetattrlist(int,void*,void*,size_t,unsigned int) ;
int fsetattrlist(int,void*,void*,size_t,unsigned int) ;
int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
int exchangedata(const char*,const char*,unsigned int) ;
int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int) ;
# 736 "/usr/include/unistd.h" 3 4
struct fssearchblock;
struct searchstate;

int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) ;
int fsctl(const char *,unsigned long,void*,unsigned int);
int ffsctl(int,unsigned long,void*,unsigned int) ;




int fsync_volume_np(int, int) ;
int sync_volume_np(const char *, int) ;

extern int optreset;

}
# 25 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2
# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 26 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2
# 1 "/usr/include/sys/socket.h" 1 3 4
# 75 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/sys/types.h" 1 3 4
# 84 "/usr/include/sys/types.h" 3 4
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;

typedef unsigned long u_long;


typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

typedef char * caddr_t;
typedef int32_t daddr_t;



typedef u_int32_t fixpt_t;

# 1 "/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_blkcnt_t.h" 3 4
typedef __darwin_blkcnt_t blkcnt_t;
# 107 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_blksize_t.h" 3 4
typedef __darwin_blksize_t blksize_t;
# 108 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_in_addr_t.h" 3 4
typedef __uint32_t in_addr_t;
# 110 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_in_port_t.h" 3 4
typedef __uint16_t in_port_t;
# 111 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_ino_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_ino_t.h" 3 4
typedef __darwin_ino_t ino_t;
# 112 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_ino64_t.h" 3 4
typedef __darwin_ino64_t ino64_t;
# 115 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_key_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_key_t.h" 3 4
typedef __int32_t key_t;
# 118 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_nlink_t.h" 3 4
typedef __uint16_t nlink_t;
# 120 "/usr/include/sys/types.h" 2 3 4




typedef int32_t segsz_t;
typedef int32_t swblk_t;
# 137 "/usr/include/sys/types.h" 3 4
static inline __int32_t major(__uint32_t _x)
{
 return (__int32_t)(((__uint32_t)_x >> 24) & 0xff);
}

static inline __int32_t minor(__uint32_t _x)
{
 return (__int32_t)((_x) & 0xffffff);
}

static inline dev_t makedev(__uint32_t _major, __uint32_t _minor)
{
 return (dev_t)(((_major) << 24) | (_minor));
}
# 161 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_types/_clock_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_clock_t.h" 3 4
typedef __darwin_clock_t clock_t;
# 162 "/usr/include/sys/types.h" 2 3 4
# 185 "/usr/include/sys/types.h" 3 4
typedef __int32_t fd_mask;
# 212 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
typedef __darwin_pthread_cond_t pthread_cond_t;
# 213 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 214 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 215 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 216 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
typedef __darwin_pthread_once_t pthread_once_t;
# 217 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 218 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 219 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 220 "/usr/include/sys/types.h" 2 3 4



# 1 "/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
typedef __darwin_pthread_key_t pthread_key_t;
# 224 "/usr/include/sys/types.h" 2 3 4




# 1 "/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 229 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 230 "/usr/include/sys/types.h" 2 3 4
# 76 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/include/machine/_param.h" 1 3 4
# 29 "/usr/include/machine/_param.h" 3 4
# 1 "/usr/include/i386/_param.h" 1 3 4
# 30 "/usr/include/machine/_param.h" 2 3 4
# 78 "/usr/include/sys/socket.h" 2 3 4
# 93 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/sys/_types/_sa_family_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_sa_family_t.h" 3 4
typedef __uint8_t sa_family_t;
# 94 "/usr/include/sys/socket.h" 2 3 4
# 1 "/usr/include/sys/_types/_socklen_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_socklen_t.h" 3 4
typedef __darwin_socklen_t socklen_t;
# 95 "/usr/include/sys/socket.h" 2 3 4
# 105 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/sys/_types/_iovec_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_iovec_t.h" 3 4
struct iovec {
 void * iov_base;
 size_t iov_len;
};
# 106 "/usr/include/sys/socket.h" 2 3 4
# 184 "/usr/include/sys/socket.h" 3 4
typedef __uint32_t sae_associd_t;



typedef __uint32_t sae_connid_t;
# 197 "/usr/include/sys/socket.h" 3 4
typedef struct sa_endpoints {
 unsigned int sae_srcif;
 struct sockaddr *sae_srcaddr;
 socklen_t sae_srcaddrlen;
 struct sockaddr *sae_dstaddr;
 socklen_t sae_dstaddrlen;
} sa_endpoints_t;





struct linger {
 int l_onoff;
 int l_linger;
};
# 227 "/usr/include/sys/socket.h" 3 4
struct so_np_extensions {
 u_int32_t npx_flags;
 u_int32_t npx_mask;
};
# 302 "/usr/include/sys/socket.h" 3 4
struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};
# 315 "/usr/include/sys/socket.h" 3 4
struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};
# 335 "/usr/include/sys/socket.h" 3 4
struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};
# 435 "/usr/include/sys/socket.h" 3 4
struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};
# 476 "/usr/include/sys/socket.h" 3 4
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;

};
# 567 "/usr/include/sys/socket.h" 3 4
struct sf_hdtr {
 struct iovec *headers;
 int hdr_cnt;
 struct iovec *trailers;
 int trl_cnt;
};





extern "C" {

int accept(int, struct sockaddr * , socklen_t * )
  __asm("_" "accept" );
int bind(int, const struct sockaddr *, socklen_t) __asm("_" "bind" );
int connect(int, const struct sockaddr *, socklen_t) __asm("_" "connect" );
int getpeername(int, struct sockaddr * , socklen_t * )
  __asm("_" "getpeername" );
int getsockname(int, struct sockaddr * , socklen_t * )
  __asm("_" "getsockname" );
int getsockopt(int, int, int, void * , socklen_t * );
int listen(int, int) __asm("_" "listen" );
ssize_t recv(int, void *, size_t, int) __asm("_" "recv" );
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * ,
  socklen_t * ) __asm("_" "recvfrom" );
ssize_t recvmsg(int, struct msghdr *, int) __asm("_" "recvmsg" );
ssize_t send(int, const void *, size_t, int) __asm("_" "send" );
ssize_t sendmsg(int, const struct msghdr *, int) __asm("_" "sendmsg" );
ssize_t sendto(int, const void *, size_t,
  int, const struct sockaddr *, socklen_t) __asm("_" "sendto" );
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int sockatmark(int) ;
int socket(int, int, int);
int socketpair(int, int, int, int *) __asm("_" "socketpair" );


int sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);



void pfctlinput(int, struct sockaddr *);
int connectx(int , const sa_endpoints_t *, sae_associd_t, unsigned int,
    const struct iovec *, unsigned int, size_t *, sae_connid_t *);
int disconnectx(int , sae_associd_t, sae_connid_t);

}
# 27 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 301 "/usr/include/netinet/in.h" 3 4
struct in_addr {
 in_addr_t s_addr;
};
# 374 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in {
 __uint8_t sin_len;
 sa_family_t sin_family;
 in_port_t sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};
# 393 "/usr/include/netinet/in.h" 3 4
struct ip_opts {
 struct in_addr ip_dst;
 char ip_opts[40];
};
# 501 "/usr/include/netinet/in.h" 3 4
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};






struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};

#pragma pack(4)



struct ip_mreq_source {
 struct in_addr imr_multiaddr;
 struct in_addr imr_sourceaddr;
 struct in_addr imr_interface;
};





struct group_req {
 uint32_t gr_interface;
 struct sockaddr_storage gr_group;
};

struct group_source_req {
 uint32_t gsr_interface;
 struct sockaddr_storage gsr_group;
 struct sockaddr_storage gsr_source;
};
# 549 "/usr/include/netinet/in.h" 3 4
struct __msfilterreq {
 uint32_t msfr_ifindex;
 uint32_t msfr_fmode;
 uint32_t msfr_nsrcs;
 uint32_t __msfr_align;
 struct sockaddr_storage msfr_group;
 struct sockaddr_storage *msfr_srcs;
};



#pragma pack()
struct sockaddr;






int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t,
     uint32_t, struct in_addr *) ;
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *,
     uint32_t *, struct in_addr *) ;
int setsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
     uint32_t, uint32_t, struct sockaddr_storage *) ;
int getsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
     uint32_t *, uint32_t *, struct sockaddr_storage *) ;
# 612 "/usr/include/netinet/in.h" 3 4
struct in_pktinfo {
 unsigned int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};
# 654 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/netinet6/in6.h" 1 3 4
# 152 "/usr/include/netinet6/in6.h" 3 4
struct in6_addr {
 union {
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
 } __u6_addr;
};
# 170 "/usr/include/netinet6/in6.h" 3 4
struct sockaddr_in6 {
 __uint8_t sin6_len;
 sa_family_t sin6_family;
 in_port_t sin6_port;
 __uint32_t sin6_flowinfo;
 struct in6_addr sin6_addr;
 __uint32_t sin6_scope_id;
};
# 212 "/usr/include/netinet6/in6.h" 3 4
extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_nodelocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allrouters;
extern const struct in6_addr in6addr_linklocal_allv2routers;
# 528 "/usr/include/netinet6/in6.h" 3 4
struct ipv6_mreq {
 struct in6_addr ipv6mr_multiaddr;
 unsigned int ipv6mr_interface;
};




struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 unsigned int ipi6_ifindex;
};




struct ip6_mtuinfo {
 struct sockaddr_in6 ip6m_addr;
 uint32_t ip6m_mtu;
};
# 624 "/usr/include/netinet6/in6.h" 3 4
extern "C" {
struct cmsghdr;

extern int inet6_option_space(int);
extern int inet6_option_init(void *, struct cmsghdr **, int);
extern int inet6_option_append(struct cmsghdr *, const __uint8_t *, int, int);
extern __uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
extern int inet6_option_next(const struct cmsghdr *, __uint8_t **);
extern int inet6_option_find(const struct cmsghdr *, __uint8_t **, int);

extern size_t inet6_rthdr_space(int, int);
extern struct cmsghdr *inet6_rthdr_init(void *, int);
extern int inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *,
    unsigned int);
extern int inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);



extern int inet6_rthdr_segments(const struct cmsghdr *);
extern struct in6_addr *inet6_rthdr_getaddr(struct cmsghdr *, int);
extern int inet6_rthdr_getflags(const struct cmsghdr *, int);

extern int inet6_opt_init(void *, socklen_t);
extern int inet6_opt_append(void *, socklen_t, int, __uint8_t, socklen_t,
    __uint8_t, void **);
extern int inet6_opt_finish(void *, socklen_t, int);
extern int inet6_opt_set_val(void *, int, void *, socklen_t);

extern int inet6_opt_next(void *, socklen_t, int, __uint8_t *, socklen_t *,
    void **);
extern int inet6_opt_find(void *, socklen_t, int, __uint8_t, socklen_t *,
    void **);
extern int inet6_opt_get_val(void *, int, void *, socklen_t);
extern socklen_t inet6_rth_space(int, int);
extern void *inet6_rth_init(void *, socklen_t, int, int);
extern int inet6_rth_add(void *, const struct in6_addr *);
extern int inet6_rth_reverse(const void *, void *);
extern int inet6_rth_segments(const void *);
extern struct in6_addr *inet6_rth_getaddr(const void *, int);
extern void addrsel_policy_init(void);
}
# 655 "/usr/include/netinet/in.h" 2 3 4





extern "C" {
int bindresvport(int, struct sockaddr_in *);
struct sockaddr;
int bindresvport_sa(int, struct sockaddr *);
}
# 28 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2
# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 71 "/usr/include/netinet/tcp.h" 3 4
typedef __uint32_t tcp_seq;
typedef __uint32_t tcp_cc;
# 81 "/usr/include/netinet/tcp.h" 3 4
struct tcphdr {
 unsigned short th_sport;
 unsigned short th_dport;
 tcp_seq th_seq;
 tcp_seq th_ack;

 unsigned int th_x2:4,
   th_off:4;





 unsigned char th_flags;
# 105 "/usr/include/netinet/tcp.h" 3 4
 unsigned short th_win;
 unsigned short th_sum;
 unsigned short th_urp;
};
# 231 "/usr/include/netinet/tcp.h" 3 4
struct tcp_connection_info {
        u_int8_t tcpi_state;
        u_int8_t tcpi_snd_wscale;
        u_int8_t tcpi_rcv_wscale;
        u_int8_t __pad1;
        u_int32_t tcpi_options;




        u_int32_t tcpi_flags;


        u_int32_t tcpi_rto;
        u_int32_t tcpi_maxseg;
        u_int32_t tcpi_snd_ssthresh;
        u_int32_t tcpi_snd_cwnd;
        u_int32_t tcpi_snd_wnd;
        u_int32_t tcpi_snd_sbbytes;
        u_int32_t tcpi_rcv_wnd;
        u_int32_t tcpi_rttcur;
        u_int32_t tcpi_srtt;
        u_int32_t tcpi_rttvar;
 u_int32_t

   tcpi_tfo_cookie_req:1,
   tcpi_tfo_cookie_rcv:1,
   tcpi_tfo_syn_loss:1,
   tcpi_tfo_syn_data_sent:1,
   tcpi_tfo_syn_data_acked:1,

   tcpi_tfo_syn_data_rcv:1,
   tcpi_tfo_cookie_req_rcv:1,
   tcpi_tfo_cookie_sent:1,
   tcpi_tfo_cookie_invalid:1,
   __pad2:23;
        u_int64_t tcpi_txpackets __attribute__((aligned(8)));
        u_int64_t tcpi_txbytes __attribute__((aligned(8)));
        u_int64_t tcpi_txretransmitbytes __attribute__((aligned(8)));
        u_int64_t tcpi_rxpackets __attribute__((aligned(8)));
        u_int64_t tcpi_rxbytes __attribute__((aligned(8)));
        u_int64_t tcpi_rxoutoforderbytes __attribute__((aligned(8)));
};
# 29 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 73 "/usr/include/arpa/inet.h" 3 4
extern "C" {

in_addr_t inet_addr(const char *);
char *inet_ntoa(struct in_addr);
const char *inet_ntop(int, const void *, char *, socklen_t);
int inet_pton(int, const char *, void *);


int ascii2addr(int, const char *, void *);
char *addr2ascii(int, const void *, int, char *);
int inet_aton(const char *, struct in_addr *);
in_addr_t inet_lnaof(struct in_addr);
struct in_addr inet_makeaddr(in_addr_t, in_addr_t);
in_addr_t inet_netof(struct in_addr);
in_addr_t inet_network(const char *);
char *inet_net_ntop(int, const void *, int, char *, __darwin_size_t);
int inet_net_pton(int, const char *, void *, __darwin_size_t);
char *inet_neta(in_addr_t, char *, __darwin_size_t);
unsigned int inet_nsap_addr(const char *, unsigned char *, int);
char *inet_nsap_ntoa(int, const unsigned char *, char *);


}
# 30 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h" 2



# 32 "/Users/yu/repos/ardupilot/libraries/AP_HAL/utility/Socket.h"
class SocketAPM {
public:
    SocketAPM(bool _datagram);
    SocketAPM(bool _datagram, int _fd);
    ~SocketAPM();

    bool connect(const char *address, uint16_t port);
    bool bind(const char *address, uint16_t port);
    void reuseaddress();
    void set_blocking(bool blocking);
    void set_broadcast(void);

    ssize_t send(const void *pkt, size_t size);
    ssize_t sendto(const void *buf, size_t size, const char *address, uint16_t port);
    ssize_t recv(void *pkt, size_t size, uint32_t timeout_ms);


    void last_recv_address(const char *&ip_addr, uint16_t &port);


    bool pollin(uint32_t timeout_ms);


    bool pollout(uint32_t timeout_ms);


    bool listen(uint16_t backlog);



    SocketAPM *accept(uint32_t timeout_ms);

private:
    bool datagram;
    struct sockaddr_in in_addr {};

    int fd = -1;

    void make_sockaddr(const char *address, uint16_t port, struct sockaddr_in &sockaddr);
};
# 10 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock_SITL.h" 2



class AP_IRLock_SITL : public IRLock
{
public:
    AP_IRLock_SITL();


    void init(int8_t bus) override;


    bool update() override;

private:




    struct irlock_packet {
        uint64_t timestamp;
        uint16_t num_targets;
        float pos_x;
        float pos_y;
        float size_x;
        float size_y;
    };

    uint32_t _last_timestamp;
    SocketAPM sock;
};
# 16 "/Users/yu/repos/ardupilot/libraries/AP_IRLock/AP_IRLock.h" 2
# 118 "ArduCopterC.cpp" 2
# 128 "ArduCopterC.cpp"
# 1 "Parameters.h" 1
       





class Parameters {
public:
# 17 "Parameters.h"
    static const uint16_t k_format_version = 120;







    static const uint16_t k_software_type = 10;
# 47 "Parameters.h"
    enum {


        k_param_format_version = 0,
        k_param_software_type,
        k_param_ins_old,
        k_param_ins,
        k_param_NavEKF2_old,
        k_param_NavEKF2,
        k_param_g2,
        k_param_NavEKF3,
        k_param_BoardConfig_CAN,


        k_param_sitl = 10,


        k_param_barometer,


        k_param_scheduler,


        k_param_relay,


        k_param_epm_unused,


        k_param_BoardConfig,


        k_param_gps,


        k_param_parachute,


        k_param_landinggear,


        k_param_input_manager,



        k_param_log_bitmask_old = 20,
        k_param_log_last_filenumber,


        k_param_toy_yaw_rate,
        k_param_crosstrack_min_distance,
        k_param_rssi_pin,
        k_param_throttle_accel_enabled,
        k_param_wp_yaw_behavior,
        k_param_acro_trainer,
        k_param_pilot_speed_up,
        k_param_circle_rate,
        k_param_rangefinder_gain,
        k_param_ch8_option,
        k_param_arming_check_old,
        k_param_sprayer,
        k_param_angle_max,
        k_param_gps_hdop_good,
        k_param_battery,
        k_param_fs_batt_mah,
        k_param_angle_rate_max,
        k_param_rssi_range,
        k_param_rc_feel_rp,
        k_param_NavEKF,
        k_param_mission,
        k_param_rc_13_old,
        k_param_rc_14_old,
        k_param_rally,
        k_param_poshold_brake_rate,
        k_param_poshold_brake_angle_max,
        k_param_pilot_accel_z,
        k_param_serial0_baud,
        k_param_serial1_baud,
        k_param_serial2_baud,
        k_param_land_repositioning,
        k_param_rangefinder,
        k_param_fs_ekf_thresh,
        k_param_terrain,
        k_param_acro_rp_expo,
        k_param_throttle_deadzone,
        k_param_optflow,
        k_param_dcmcheck_thresh,
        k_param_log_bitmask,
        k_param_cli_enabled_old,
        k_param_throttle_filt,
        k_param_throttle_behavior,
        k_param_pilot_takeoff_alt,


        k_param_limits = 65,
        k_param_gpslock_limit,
        k_param_geofence_limit,
        k_param_altitude_limit,
        k_param_fence,
        k_param_gps_glitch,
        k_param_baro_glitch,


        k_param_adsb,
        k_param_notify,


        k_param_precland = 74,




        k_param_single_servo_1 = 75,
        k_param_single_servo_2,
        k_param_single_servo_3,
        k_param_single_servo_4,




        k_param_heli_servo_1 = 80,
        k_param_heli_servo_2,
        k_param_heli_servo_3,
        k_param_heli_servo_4,
        k_param_heli_pitch_ff,
        k_param_heli_roll_ff,
        k_param_heli_yaw_ff,
        k_param_heli_stab_col_min,
        k_param_heli_stab_col_max,
        k_param_heli_servo_rsc,




        k_param_motors = 90,
        k_param_disarm_delay,
        k_param_fs_crash_check,
        k_param_throw_motor_start,
        k_param_terrain_follow,
        k_param_avoid,
        k_param_avoidance_adsb,


        k_param_rssi = 97,




        k_param_inertial_nav = 100,
        k_param_wp_nav,
        k_param_attitude_control,
        k_param_pos_control,
        k_param_circle_nav,



        k_param_gcs0 = 110,
        k_param_gcs1,
        k_param_sysid_this_mav,
        k_param_sysid_my_gcs,
        k_param_serial1_baud_old,
        k_param_telem_delay,
        k_param_gcs2,
        k_param_serial2_baud_old,
        k_param_serial2_protocol,
        k_param_serial_manager,
        k_param_ch9_option,
        k_param_ch10_option,
        k_param_ch11_option,
        k_param_ch12_option,
        k_param_takeoff_trigger_dz,
        k_param_gcs3,
        k_param_gcs_pid_mask,




        k_param_rtl_speed_cms = 135,
        k_param_fs_batt_curr_rtl,
        k_param_rtl_cone_slope,




        k_param_imu = 140,
        k_param_battery_monitoring = 141,
        k_param_volt_div_ratio,
        k_param_curr_amp_per_volt,
        k_param_input_voltage,
        k_param_pack_capacity,
        k_param_compass_enabled,
        k_param_compass,
        k_param_rangefinder_enabled_old,
        k_param_frame_type,
        k_param_optflow_enabled,
        k_param_fs_batt_voltage,
        k_param_ch7_option,
        k_param_auto_slew_rate,
        k_param_rangefinder_type_old,
        k_param_super_simple = 155,
        k_param_axis_enabled = 157,
        k_param_copter_leds_mode,
        k_param_ahrs,




        k_param_rtl_altitude = 160,
        k_param_crosstrack_gain,
        k_param_rtl_loiter_time,
        k_param_rtl_alt_final,
        k_param_tilt_comp,





        k_param_camera = 165,
        k_param_camera_mount,
        k_param_camera_mount2,




        k_param_battery_volt_pin = 168,
        k_param_battery_curr_pin,




        k_param_rc_1_old = 170,
        k_param_rc_2_old,
        k_param_rc_3_old,
        k_param_rc_4_old,
        k_param_rc_5_old,
        k_param_rc_6_old,
        k_param_rc_7_old,
        k_param_rc_8_old,
        k_param_rc_10_old,
        k_param_rc_11_old,
        k_param_throttle_min,
        k_param_throttle_max,
        k_param_failsafe_throttle,
        k_param_throttle_fs_action,
        k_param_failsafe_throttle_value,
        k_param_throttle_trim,
        k_param_esc_calibrate,
        k_param_radio_tuning,
        k_param_radio_tuning_high,
        k_param_radio_tuning_low,
        k_param_rc_speed = 192,
        k_param_failsafe_battery_enabled,
        k_param_throttle_mid,
        k_param_failsafe_gps_enabled,
        k_param_rc_9_old,
        k_param_rc_12_old,
        k_param_failsafe_gcs,
        k_param_rcmap,




        k_param_flight_mode1 = 200,
        k_param_flight_mode2,
        k_param_flight_mode3,
        k_param_flight_mode4,
        k_param_flight_mode5,
        k_param_flight_mode6,
        k_param_simple_modes,




        k_param_waypoint_mode = 210,
        k_param_command_total,
        k_param_command_index,
        k_param_command_nav_index,
        k_param_waypoint_radius,
        k_param_circle_radius,
        k_param_waypoint_speed_max,
        k_param_land_speed,
        k_param_auto_velocity_z_min,
        k_param_auto_velocity_z_max,
        k_param_land_speed_high,




        k_param_acro_rp_p = 221,
        k_param_axis_lock_p,
        k_param_pid_rate_roll,
        k_param_pid_rate_pitch,
        k_param_pid_rate_yaw,
        k_param_p_stabilize_roll,
        k_param_p_stabilize_pitch,
        k_param_p_stabilize_yaw,
        k_param_p_pos_xy,
        k_param_p_loiter_lon,
        k_param_pid_loiter_rate_lat,
        k_param_pid_loiter_rate_lon,
        k_param_pid_nav_lat,
        k_param_pid_nav_lon,
        k_param_p_alt_hold,
        k_param_p_vel_z,
        k_param_pid_optflow_roll,
        k_param_pid_optflow_pitch,
        k_param_acro_balance_roll_old,
        k_param_acro_balance_pitch_old,
        k_param_pid_accel_z,
        k_param_acro_balance_roll,
        k_param_acro_balance_pitch,
        k_param_acro_yaw_p,
        k_param_autotune_axis_bitmask,
        k_param_autotune_aggressiveness,
        k_param_pi_vel_xy,
        k_param_fs_ekf_action,
        k_param_rtl_climb_min,
        k_param_rpm_sensor,
        k_param_autotune_min_d,
        k_param_arming,
        k_param_DataFlash = 253,





    };

    AP_Int16 format_version;
    AP_Int8 software_type;



    AP_Int16 sysid_this_mav;
    AP_Int16 sysid_my_gcs;
    AP_Int8 telem_delay;

    AP_Float throttle_filt;
    AP_Int16 throttle_behavior;
    AP_Int16 takeoff_trigger_dz;
    AP_Float pilot_takeoff_alt;

    AP_Int16 rtl_altitude;
    AP_Int16 rtl_speed_cms;
    AP_Float rtl_cone_slope;
    AP_Float rangefinder_gain;

    AP_Int8 failsafe_battery_enabled;
    AP_Float fs_batt_voltage;
    AP_Float fs_batt_mah;

    AP_Int8 failsafe_gcs;
    AP_Int16 gps_hdop_good;

    AP_Int8 compass_enabled;
    AP_Int8 super_simple;
    AP_Int16 rtl_alt_final;
    AP_Int16 rtl_climb_min;

    AP_Int8 wp_yaw_behavior;
    AP_Int8 rc_feel_rp;

    AP_Int16 poshold_brake_rate;
    AP_Int16 poshold_brake_angle_max;



    AP_Int32 rtl_loiter_time;
    AP_Int16 land_speed;
    AP_Int16 land_speed_high;
    AP_Int16 pilot_speed_up;
    AP_Int16 pilot_accel_z;



    AP_Int8 failsafe_throttle;
    AP_Int16 failsafe_throttle_value;
    AP_Int16 throttle_deadzone;



    AP_Int8 flight_mode1;
    AP_Int8 flight_mode2;
    AP_Int8 flight_mode3;
    AP_Int8 flight_mode4;
    AP_Int8 flight_mode5;
    AP_Int8 flight_mode6;
    AP_Int8 simple_modes;



    AP_Int32 log_bitmask;
    AP_Int8 esc_calibrate;
    AP_Int8 radio_tuning;
    AP_Int16 radio_tuning_high;
    AP_Int16 radio_tuning_low;
    AP_Int8 frame_type;
    AP_Int8 ch7_option;
    AP_Int8 ch8_option;
    AP_Int8 ch9_option;
    AP_Int8 ch10_option;
    AP_Int8 ch11_option;
    AP_Int8 ch12_option;
    AP_Int8 disarm_delay;

    AP_Int8 land_repositioning;
    AP_Int8 fs_ekf_action;
    AP_Int8 fs_crash_check;
    AP_Float fs_ekf_thresh;
    AP_Int16 gcs_pid_mask;

    AP_Int8 throw_motor_start;
    AP_Int8 terrain_follow;

    AP_Int16 rc_speed;


    AP_Float acro_rp_p;
    AP_Float acro_yaw_p;
    AP_Float acro_balance_roll;
    AP_Float acro_balance_pitch;
    AP_Int8 acro_trainer;
    AP_Float acro_rp_expo;


    AC_PI_2D pi_vel_xy;

    AC_P p_vel_z;
    AC_PID pid_accel_z;

    AC_P p_pos_xy;
    AC_P p_alt_hold;


    AP_Int8 autotune_axis_bitmask;
    AP_Float autotune_aggressiveness;
    AP_Float autotune_min_d;



    Parameters() :


        pi_vel_xy (1.0f, 0.5f, 1000, 5.0f, 0.020f),

        p_vel_z (5.0f),
        pid_accel_z (0.50f, 1.00f, 0.0f, 800, 20.0f, 0.0025f),



        p_pos_xy (1.0f),

        p_alt_hold (1.0f)
    {
    }
};




class ParametersG2 {
public:
    ParametersG2(void);


    static const struct AP_Param::GroupInfo var_info[];


    AP_Float wp_navalt_min;


    AP_Button button;


    AP_Stats stats;


    AP_Gripper gripper;



    AP_Int8 throw_nextmode;
    AP_Int8 throw_type;


    AP_Int8 gndeffect_comp_enabled;


    AP_Beacon beacon;



    AP_VisualOdom visual_odom;




    AP_Proximity proximity;



    AP_Int8 sysid_enforce;







    AP_Int32 dev_options;


    AP_Float acro_y_expo;
    AP_Float acro_thr_mid;


    AP_Int8 frame_class;


    RC_Channels rc_channels;


    SRV_Channels servo_channels;


    AP_SmartRTL smart_rtl;


    AP_WheelEncoder wheel_encoder;
    AP_Winch winch;


    AP_Int16 pilot_speed_dn;
};

extern const AP_Param::Info var_info[];
# 129 "ArduCopterC.cpp" 2
# 1 "avoidance_adsb.h" 1
       







class AP_Avoidance_Copter : public AP_Avoidance {
public:
    static AP_Avoidance_Copter create(AP_AHRS &ahrs, class AP_ADSB &adsb) {
        return AP_Avoidance_Copter{ahrs, adsb};
    }

    constexpr AP_Avoidance_Copter(AP_Avoidance_Copter &&other) = default;


    AP_Avoidance_Copter(const AP_Avoidance_Copter &other) = delete;
    AP_Avoidance_Copter &operator=(const AP_Avoidance_Copter&) = delete;

private:

    void set_mode_else_try_RTL_else_LAND(control_mode_t mode);

protected:
    AP_Avoidance_Copter(AP_AHRS &ahrs, class AP_ADSB &adsb)
        : AP_Avoidance(ahrs, adsb)
    {
    }


    MAV_COLLISION_ACTION handle_avoidance(const AP_Avoidance::Obstacle *obstacle, MAV_COLLISION_ACTION requested_action) override;


    void handle_recovery(uint8_t recovery_action) override;


    bool check_flightmode(bool allow_mode_change);


    bool handle_avoidance_vertical(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change);


    bool handle_avoidance_horizontal(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change);


    bool handle_avoidance_perpendicular(const AP_Avoidance::Obstacle *obstacle, bool allow_mode_change);


    control_mode_t prev_control_mode = RTL;
};
# 130 "ArduCopterC.cpp" 2
# 138 "ArduCopterC.cpp"
struct Copter {
# 180 "ArduCopterC.cpp"
    uint8_t command_ack_counter;




    int in_log_download;
# 196 "ArduCopterC.cpp"
    struct DataFlash_Class DataFlash;


    struct AP_GPS gps;


    AP_Int8 *flight_modes;


    struct AP_Baro barometer;

    struct Compass compass;

    struct AP_InertialSensor ins;


    struct RangeFinder rangefinder;

    struct {

        int enabled:1;

        int alt_healthy:1;
        int16_t alt_cm;
        uint32_t last_healthy_ms;

        struct LowPassFilterFloat alt_cm_filt;
        int8_t glitch_count;
    } rangefinder_state = { false, false, 0, 0 };


    struct AP_RPM rpm_sensor;


    NavEKF2 EKF2{&ahrs, barometer, rangefinder};
    NavEKF3 EKF3{&ahrs, barometer, rangefinder};
    AP_AHRS_NavEKF ahrs{ins, barometer, gps, rangefinder, EKF2, EKF3, AP_AHRS_NavEKF::FLAG_ALWAYS_USE_EKF};



    struct SITL sitl;




    struct AP_Mission mission;


    AP_Arming_Copter arming {ahrs, barometer, compass, battery, inertial_nav, ins};



    OpticalFlow optflow{ahrs};



    float ekfGndSpdLimit;


    float ekfNavVelGainScaler;


    uint32_t ekfYawReset_ms = 0;
    int8_t ekf_primary_core;


    AP_SerialManager serial_manager;
    static const uint8_t num_gcs = 5;

    GCS_MAVLINK_Copter gcs_chan[5];
    GCS _gcs;
    GCS &gcs() { return _gcs; }







    union {
        struct {
            uint8_t unused1 : 1;
            uint8_t simple_mode : 2;
            uint8_t pre_arm_rc_check : 1;
            uint8_t pre_arm_check : 1;
            uint8_t auto_armed : 1;
            uint8_t logging_started : 1;
            uint8_t land_complete : 1;
            uint8_t new_radio_frame : 1;
            uint8_t usb_connected : 1;
            uint8_t rc_receiver_present : 1;
            uint8_t compass_mot : 1;
            uint8_t motor_test : 1;
            uint8_t initialised : 1;
            uint8_t land_complete_maybe : 1;
            uint8_t throttle_zero : 1;
            uint8_t system_time_set : 1;
            uint8_t gps_base_pos_set : 1;
            enum HomeState home_state : 2;
            uint8_t using_interlock : 1;
            uint8_t motor_emergency_stop : 1;
            uint8_t land_repo_active : 1;
            uint8_t motor_interlock_switch : 1;
            uint8_t in_arming_delay : 1;
        };
        uint32_t value;
    } ap;



    control_mode_t control_mode;
    mode_reason_t control_mode_reason = MODE_REASON_UNKNOWN;

    control_mode_t prev_control_mode;
    mode_reason_t prev_control_mode_reason = MODE_REASON_UNKNOWN;


    struct {
        int8_t debounced_switch_position;
        int8_t last_switch_position;
        uint32_t last_edge_time_ms;
    } control_switch_state;

    struct {
        bool running;
        float max_speed;
        float alt_delta;
        uint32_t start_ms;
    } takeoff_state;


    float auto_takeoff_no_nav_alt_cm;

    RCMapper rcmap;


    AP_BoardConfig BoardConfig;


    uint8_t receiver_rssi;


    struct {
        uint8_t rc_override_active : 1;
        uint8_t radio : 1;
        uint8_t battery : 1;
        uint8_t gcs : 1;
        uint8_t ekf : 1;
        uint8_t terrain : 1;
        uint8_t adsb : 1;

        int8_t radio_counter;

        uint32_t last_heartbeat_ms;
        uint32_t terrain_first_failure_ms;
        uint32_t terrain_last_failure_ms;
    } failsafe;


    struct {
        uint8_t baro : 1;
        uint8_t compass : 1;
        uint8_t primary_gps;
    } sensor_health;
# 368 "ArduCopterC.cpp"
    AP_MotorsMulticopter *motors;



    float scaleLongDown;


    int32_t wp_bearing;

    int32_t home_bearing;

    int32_t home_distance;

    uint32_t wp_distance;
    LandStateType land_state = LandStateType_FlyToLocation;

    struct {
        PayloadPlaceStateType state = PayloadPlaceStateType_Calibrating_Hover_Start;
        uint32_t hover_start_timestamp;
        float hover_throttle_level;
        uint32_t descend_start_timestamp;
        uint32_t place_start_timestamp;
        float descend_throttle_level;
        float descend_start_altitude;
        float descend_max;
    } nav_payload_place;


    AutoMode auto_mode;


    GuidedMode guided_mode;


    RTLState rtl_state;
    bool rtl_state_complete;

    struct {

        Location_Class origin_point;
        Location_Class climb_target;
        Location_Class return_target;
        Location_Class descent_target;
        bool land;
        bool terrain_used;
    } rtl_path;


    bool circle_pilot_yaw_override;




    float simple_cos_yaw;
    float simple_sin_yaw;
    int32_t super_simple_last_bearing;
    float super_simple_cos_yaw;
    float super_simple_sin_yaw;


    int32_t initial_armed_bearing;


    uint16_t loiter_time_max;
    uint32_t loiter_time;


    uint32_t brake_timeout_start;
    uint32_t brake_timeout_ms;


    int32_t nav_delay_time_max;
    uint32_t nav_delay_time_start;


    Vector3f flip_orig_attitude;


    struct {
        ThrowModeStage stage;
        ThrowModeStage prev_stage;
        uint32_t last_log_ms;
        bool nextmode_attempted;
        uint32_t free_fall_start_ms;
        float free_fall_start_velz;
    } throw_state = {Throw_Disarmed, Throw_Disarmed, 0, false, 0, 0.0f};


    AP_BattMonitor battery;



    AP_Frsky_Telem frsky_telemetry;



    uint32_t control_sensors_present;
    uint32_t control_sensors_enabled;
    uint32_t control_sensors_health;



    int16_t climb_rate;
    float target_rangefinder_alt;
    int32_t baro_alt;
    float baro_climbrate;
    LowPassFilterVector3f land_accel_ef_filter;


    LowPassFilterFloat rc_throttle_control_in_filter;



    Location_Class current_loc;



    uint8_t auto_yaw_mode;


    Vector3f roi_WP;


    float yaw_look_at_WP_bearing;


    int32_t yaw_look_at_heading;


    int16_t yaw_look_at_heading_slew;


    float yaw_look_ahead_bearing;


    int32_t condition_value;
    uint32_t condition_start;




    float G_Dt;


    AP_InertialNav_NavEKF inertial_nav;



    AC_AttitudeControl *attitude_control;
    AC_PosControl *pos_control;
    AC_WPNav *wp_nav;
    AC_Circle *circle_nav;


    int16_t pmTest1;




    uint32_t fast_loopTimer;

    uint16_t mainLoop_count;

    uint32_t rtl_loiter_start_time;

    uint32_t arm_time_ms;


    uint8_t auto_trim_counter;


    AP_Relay relay;


    AP_ServoRelayEvents ServoRelayEvents;



    AP_Camera camera;





    AP_Mount camera_mount;




    AC_Fence fence;


    AC_Avoid avoid;



    AP_Rally_Copter rally;



    AP_RSSI rssi;



    AC_Sprayer sprayer;




    AP_Parachute parachute;



    AP_LandingGear landinggear;



    AP_Terrain terrain;




    AC_PrecLand precland;
# 600 "ArduCopterC.cpp"
    AP_ADSB adsb {ahrs};


    AP_Avoidance_Copter avoidance_adsb{ahrs, adsb};


    bool in_mavlink_delay;


    bool gcs_out_of_time;


    uint32_t last_radio_update_ms;



    AP_Param param_loader;
# 634 "ArduCopterC.cpp"
    struct {
        bool takeoff_expected;
        bool touchdown_expected;
        uint32_t takeoff_time_ms;
        float takeoff_alt_cm;
    } gndeffect_state;


    bool upgrading_frame_params;

    static const AP_Scheduler::Task scheduler_tasks[];
    static const AP_Param::Info var_info[];
    static const struct LogStructure log_structure[];
# 1180 "ArduCopterC.cpp"
};
